Script name: PlaceInitialiser
  - Script: 


game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Health, false)
game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, false)

Script name: KnitControllerLoader
  - Script: 


local Controllers_upvr = game:GetService("Players").LocalPlayer:WaitForChild("PlayerScripts"):WaitForChild("Controllers")
for i_upvr, v_upvr in pairs(Controllers_upvr:GetChildren()) do
	if v_upvr:IsA("ModuleScript") then
		local pcall_result1, pcall_result2 = pcall(function() -- Line 17
			--[[ Upvalues[3]:
				[1]: v_upvr (readonly)
				[2]: i_upvr (readonly)
				[3]: Controllers_upvr (readonly)
			]]
			print(string.format("Loading Controller '%s'... (%s/%s)", v_upvr.Name, i_upvr, #Controllers_upvr:GetChildren()))
			require(v_upvr)
		end)
		if pcall_result1 then
			print(string.format("Loaded Controller '%s'!", v_upvr.Name))
		else
			print(pcall_result2)
			warn(string.format("Controller '%s' errored while loading!", v_upvr.Name))
		end
	end
end
require(game:GetService("ReplicatedStorage").Packages.Knit).Start():catch(warn):await()

Script name: RbxCharacterSounds
  - Script: 

Script name: AtomicBinding
  - Script: 

Script name: PlayerModule
  - Script: 

Script name: CameraModule
  - Script: 

Script name: VehicleCamera
  - Script: 

Script name: VehicleCameraCore
  - Script: 

Script name: VehicleCameraConfig
  - Script: 

Script name: Invisicam
  - Script: 

Script name: BaseOcclusion
  - Script: 

Script name: CameraUtils
  - Script: 

Script name: VRBaseCamera
  - Script: 

Script name: CameraToggleStateController
  - Script: 

Script name: VRCamera
  - Script: 

Script name: CameraInput
  - Script: 

Script name: ZoomController
  - Script: 

Script name: Popper
  - Script: 

Script name: VRVehicleCamera
  - Script: 

Script name: Poppercam
  - Script: 

Script name: TransparencyController
  - Script: 

Script name: LegacyCamera
  - Script: 

Script name: OrbitalCamera
  - Script: 

Script name: CameraUI
  - Script: 

Script name: BaseCamera
  - Script: 

Script name: MouseLockController
  - Script: 

Script name: ClassicCamera
  - Script: 

Script name: ControlModule
  - Script: 

Script name: Keyboard
  - Script: 

Script name: Gamepad
  - Script: 

Script name: TouchThumbstick
  - Script: 

Script name: ClickToMoveDisplay
  - Script: 

Script name: VehicleController
  - Script: 

Script name: ClickToMoveController
  - Script: 

Script name: PathDisplay
  - Script: 

Script name: TouchJump
  - Script: 

Script name: ModuleScript
  - Script: 

Script name: BaseCharacterController
  - Script: 

Script name: DynamicThumbstick
  - Script: 

Script name: FlagUtil
  - Script: 

Script name: ConnectionUtil
  - Script: 

Script name: CharacterUtil
  - Script: 

Script name: CameraWrapper.spec
  - Script: 

Script name: CameraWrapper
  - Script: 

Script name: ConnectionUtil.spec
  - Script: 

Script name: PlayerScriptsLoader
  - Script: 


require(script.Parent:WaitForChild("PlayerModule"))

Script name: PlayerController
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "PlayerController";
})
any_CreateController_result1_upvr.Inventory = {}
any_CreateController_result1_upvr.Settings = nil
any_CreateController_result1_upvr.Masteries = nil
any_CreateController_result1_upvr.EquippedIndex = 1
any_CreateController_result1_upvr.UsingAnimation = nil
any_CreateController_result1_upvr.IsUsingTool = false
any_CreateController_result1_upvr.ToolUsed = Instance.new("BindableEvent")
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_upvr_3 = {}
local tbl_upvr_2 = {}
function any_CreateController_result1_upvr.MouseButtonTwoDown(arg1) -- Line 37
end
local var9_upvw
local tbl_upvr = {}
local var11_upvw
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function any_CreateController_result1_upvr.EquipItem(arg1, arg2) -- Line 41
	--[[ Upvalues[8]:
		[1]: var9_upvw (read and write)
		[2]: tbl_upvr (readonly)
		[3]: var11_upvw (read and write)
		[4]: CoreUtil_upvr (readonly)
		[5]: LocalPlayer_upvr (readonly)
		[6]: any_RequireDefinitions_result1_upvr (readonly)
		[7]: tbl_upvr_2 (readonly)
		[8]: tbl_upvr_3 (readonly)
	]]
	local var17
	if var9_upvw then
		var9_upvw:Stop()
		var9_upvw = nil
	end
	var17 = tbl_upvr
	local pairs_result1, pairs_result2, pairs_result3_2 = pairs(var17)
	for i, _ in pairs_result1, pairs_result2, pairs_result3_2 do
		tbl_upvr[i] = false
	end
	if var11_upvw then
		var11_upvw:Destroy()
		var11_upvw = nil
	end
	if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
	else
		pairs_result2 = LocalPlayer_upvr.Character:FindFirstChild("ServerTool")
		if pairs_result2 then
			pairs_result2 = LocalPlayer_upvr.Character.ServerTool:Destroy
			pairs_result2()
		end
		pairs_result2 = arg2
		if pairs_result2 then
			pairs_result2 = any_RequireDefinitions_result1_upvr[arg2.Catagory][arg2.Id]
		end
		if not pairs_result2 then
			tbl_upvr_2.GliderHandler:GliderEquipped(nil)
			return
		end
		local any_GetModelFromDef_result1 = CoreUtil_upvr:GetModelFromDef(arg2)
		if any_GetModelFromDef_result1 and LocalPlayer_upvr.Character and LocalPlayer_upvr.Character:FindFirstChild("RightHand") then
			local var22
			if var22 then
				local function INLINED() -- Internal function, doesn't exist in bytecode
					var22 = pairs_result2.Animations.HoldingAnim
					return var22
				end
				if not pairs_result2.Animations or not INLINED() then
					var22 = CoreUtil_upvr.DefultHoldingAnimationId
				end
				var9_upvw = CoreUtil_upvr:LoadAnimation(LocalPlayer_upvr.Character.Humanoid.Animator, var22)
				var9_upvw:Play()
			end
			var11_upvw = CoreUtil_upvr:EquipTool(LocalPlayer_upvr.Character, arg2, any_GetModelFromDef_result1)
		end
		local any_EquipItem_result1 = tbl_upvr_3.InventoryService:EquipItem(arg2)
		tbl_upvr[any_EquipItem_result1] = true
		if tbl_upvr[any_EquipItem_result1] and var11_upvw then
			var11_upvw:Destroy()
		elseif LocalPlayer_upvr.Character:FindFirstChild("ServerTool") then
			LocalPlayer_upvr.Character.ServerTool:Destroy()
		end
		tbl_upvr[any_EquipItem_result1] = nil
		if arg2.Id:find("Glider") then
			tbl_upvr_2.GliderHandler:GliderEquipped(true)
			return
		end
		tbl_upvr_2.GliderHandler:GliderEquipped(false)
	end
end
local function CharacterAdded_upvr(arg1) -- Line 103, Named "CharacterAdded"
	--[[ Upvalues[4]:
		[1]: tbl_upvr_2 (readonly)
		[2]: tbl_upvr_3 (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_CreateController_result1_upvr (readonly)
	]]
	arg1:WaitForChild("Humanoid").Died:Connect(function() -- Line 109
		--[[ Upvalues[2]:
			[1]: tbl_upvr_2 (copied, readonly)
			[2]: tbl_upvr_3 (copied, readonly)
		]]
		tbl_upvr_2.GliderHandler:GliderEquipped(false)
		tbl_upvr_3.PlayerService:RequestRespawn():andThen():await()
	end)
	task.wait()
	any_CreateController_result1_upvr:EquipItem(CoreUtil_upvr:GetSlotFromIndex(any_CreateController_result1_upvr.Inventory, any_CreateController_result1_upvr.EquippedIndex))
end
local tbl_upvr_4 = {}
local UserInputService_upvr = game:GetService("UserInputService")
local ContextActionService_upvr = game:GetService("ContextActionService")
local TweenService_upvr = game:GetService("TweenService")
local RunService_upvr = game:GetService("RunService")
local const_number_upvw = 1
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 120
	--[[ Upvalues[14]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr_4 (readonly)
		[4]: tbl_upvr_2 (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: UserInputService_upvr (readonly)
		[7]: ContextActionService_upvr (readonly)
		[8]: LocalPlayer_upvr (readonly)
		[9]: CoreUtil_upvr (readonly)
		[10]: ReplicatedStorage_upvr (readonly)
		[11]: TweenService_upvr (readonly)
		[12]: CharacterAdded_upvr (readonly)
		[13]: RunService_upvr (readonly)
		[14]: const_number_upvw (read and write)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 68 start (CF ANALYSIS FAILED)
	tbl_upvr_3.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr_3.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr_4.UIController = Knit_upvr.GetController("UIController")
	tbl_upvr_4.SoundController = Knit_upvr.GetController("SoundController")
	tbl_upvr_2.GliderHandler = require(script.GliderHandler)
	local any_await_result1_2, any_await_result2_3 = tbl_upvr_3.PlayerService:GetMasteries():andThen():await()
	_ = any_await_result1_2 -- Setting global
	any_CreateController_result1_upvr.Masteries = any_await_result2_3
	local any_await_result1_3, any_await_result2 = tbl_upvr_3.PlayerService:GetCoins():andThen():await()
	_ = any_await_result1_3 -- Setting global
	any_CreateController_result1_upvr.Coins = any_await_result2
	local any_await_result1, any_await_result2_2 = tbl_upvr_3.PlayerService:GetSettings():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.Settings = any_await_result2_2
	tbl_upvr_4.SoundController:AdjustVolume("SFX", any_CreateController_result1_upvr.Settings.Audio.SFX * 4)
	tbl_upvr_4.SoundController:AdjustVolume("Music", any_CreateController_result1_upvr.Settings.Audio.Music * 4)
	tbl_upvr_3.PlayerService.CoinsUpdated:Connect(function(arg1_2) -- Line 138
		--[[ Upvalues[2]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
			[2]: tbl_upvr_4 (copied, readonly)
		]]
		any_CreateController_result1_upvr.Coins = arg1_2
		tbl_upvr_4.UIController:UpdateCoinCounts(any_CreateController_result1_upvr.Coins)
	end)
	tbl_upvr_4.UIController:UpdateCoinCounts()
	UserInputService_upvr.InputBegan:Connect(function(arg1_3, arg2) -- Line 146
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if not any_CreateController_result1_upvr.IsUsingTool and not arg2 and arg1_3.UserInputType == Enum.UserInputType.MouseButton1 then
			any_CreateController_result1_upvr.IsUsingTool = true
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_4, arg2) -- Line 152
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if any_CreateController_result1_upvr.IsUsingTool and arg1_4.UserInputType == Enum.UserInputType.MouseButton1 then
			any_CreateController_result1_upvr.IsUsingTool = false
		end
	end)
	UserInputService_upvr.TouchStarted:Connect(function(arg1_5, arg2) -- Line 158
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if not any_CreateController_result1_upvr.IsUsingTool and not arg2 then
			any_CreateController_result1_upvr.IsUsingTool = true
		end
	end)
	UserInputService_upvr.TouchEnded:Connect(function(arg1_6, arg2) -- Line 164
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if any_CreateController_result1_upvr.IsUsingTool then
			any_CreateController_result1_upvr.IsUsingTool = false
		end
	end)
	UserInputService_upvr.InputChanged:Connect(function(arg1_7, arg2) -- Line 170
		--[[ Upvalues[2]:
			[1]: UserInputService_upvr (copied, readonly)
			[2]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if UserInputService_upvr.GamepadEnabled and arg1_7.UserInputType == Enum.UserInputType.Gamepad1 then
			if not any_CreateController_result1_upvr.IsUsingTool and not arg2 and UserInputService_upvr:IsGamepadButtonDown(Enum.UserInputType.Gamepad1, Enum.KeyCode.ButtonR2) then
				any_CreateController_result1_upvr.IsUsingTool = true
				return
			end
			if any_CreateController_result1_upvr.IsUsingTool then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				if not UserInputService_upvr:IsGamepadButtonDown(Enum.UserInputType.Gamepad1, Enum.KeyCode.ButtonR2) then
					any_CreateController_result1_upvr.IsUsingTool = false
				end
			end
		end
	end)
	local var44_upvw = true
	ContextActionService_upvr:BindAction("Dash", function(arg1_8, arg2) -- Line 184
		--[[ Upvalues[4]:
			[1]: var44_upvw (read and write)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
			[4]: ReplicatedStorage_upvr (copied, readonly)
		]]
		if arg2 == Enum.UserInputState.Begin and var44_upvw and LocalPlayer_upvr.Character and CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
			if not LocalPlayer_upvr.Character.HumanoidRootPart:FindFirstChild("RootRigAttachment") then return end
			var44_upvw = false
			local clone = ReplicatedStorage_upvr.Prefabs.Effects.Dash:Clone()
			clone.CFrame = LocalPlayer_upvr.Character.HumanoidRootPart.CFrame
			clone.Parent = workspace
			for _, v_2 in pairs(clone:GetDescendants()) do
				if v_2:IsA("ParticleEmitter") then
					v_2.Enabled = true
				end
			end
			local Animation = Instance.new("Animation", LocalPlayer_upvr.Character.Humanoid)
			Animation.AnimationId = "rbxassetid://17745863896"
			LocalPlayer_upvr.Character.Humanoid.Animator:LoadAnimation(Animation):Play()
			local LinearVelocity = Instance.new("LinearVelocity")
			LinearVelocity.Attachment0 = LocalPlayer_upvr.Character.HumanoidRootPart.RootRigAttachment
			LinearVelocity.MaxForce = 100000
			LinearVelocity.RelativeTo = Enum.ActuatorRelativeTo.Attachment0
			LinearVelocity.VectorVelocity = Vector3.new(0, 0, -100)
			LinearVelocity.Parent = LocalPlayer_upvr.Character.HumanoidRootPart
			task.wait(0.1)
			if LinearVelocity.Parent then
				LinearVelocity:Destroy()
			end
			task.wait(0.2)
			for _, v_3 in pairs(clone:GetDescendants()) do
				if v_3:IsA("ParticleEmitter") then
					v_3.Enabled = false
				end
			end
			task.wait(CoreUtil_upvr.DashCoolDown / 2)
			task.wait(CoreUtil_upvr.DashCoolDown / 2)
			var44_upvw = true
			clone:Destroy()
		end
	end, true, Enum.KeyCode.Q, Enum.KeyCode.ButtonX)
	ContextActionService_upvr:SetImage("Dash", "rbxassetid://17738191561")
	local any_GetButton_result1 = ContextActionService_upvr:GetButton("Dash")
	if any_GetButton_result1 then
		any_GetButton_result1.ZIndex = 3
		any_GetButton_result1.AnchorPoint = Vector2.new(1, 1)
		any_GetButton_result1.Position = UDim2.new(0.8, 0, 0, 0)
	end
	local var60_upvw = false
	local var61_upvw = false
	ContextActionService_upvr:BindAction("Sprint", function(arg1_9, arg2, arg3) -- Line 256
		--[[ Upvalues[5]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: var60_upvw (read and write)
			[4]: var61_upvw (read and write)
			[5]: TweenService_upvr (copied, readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		-- KONSTANTERROR: [0] 1. Error Block 46 start (CF ANALYSIS FAILED)
		if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
		else
			local var62
			if arg2 ~= Enum.UserInputState.Begin and arg2 ~= Enum.UserInputState.End then return end
			var62 = LocalPlayer_upvr.Character
			if arg2 ~= Enum.UserInputState.Begin then
				var62 = false
			else
				var62 = true
			end
			-- KONSTANTERROR: [0] 1. Error Block 46 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [33] 23. Error Block 52 start (CF ANALYSIS FAILED)
			if CoreUtil_upvr.OnConsole then
				-- KONSTANTERROR: [37] 26. Error Block 48 start (CF ANALYSIS FAILED)
				if var62 and not var60_upvw then
					var61_upvw = not var61_upvw
					task.spawn(function() -- Line 266
						--[[ Upvalues[1]:
							[1]: var60_upvw (copied, read and write)
						]]
						var60_upvw = true
						task.wait(0.2)
						var60_upvw = false
					end)
				end
				if var61_upvw then
				else
				end
				if var61_upvw then
				else
				end
				var62.Humanoid.WalkSpeed = 16
				TweenService_upvr:Create(workspace.Camera, TweenInfo.new(0.25), {
					FieldOfView = 70 + 0;
				}):Play()
				do
					return
				end
				-- KONSTANTERROR: [37] 26. Error Block 48 end (CF ANALYSIS FAILED)
			end
			if var62 then
			else
			end
			if var62 then
			else
			end
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			var62.Humanoid.WalkSpeed = 16
			TweenService_upvr:Create(workspace.Camera, TweenInfo.new(0.25), {
				FieldOfView = 70 + 0;
			}):Play()
			-- KONSTANTERROR: [33] 23. Error Block 52 end (CF ANALYSIS FAILED)
		end
	end, true, Enum.KeyCode.LeftShift, Enum.KeyCode.ButtonL3)
	ContextActionService_upvr:SetImage("Sprint", "rbxassetid://18398835421")
	local any_GetButton_result1_2 = ContextActionService_upvr:GetButton("Sprint")
	if any_GetButton_result1_2 then
		any_GetButton_result1_2.ZIndex = 3
		any_GetButton_result1_2.AnchorPoint = Vector2.new(1, 0)
		any_GetButton_result1_2.Position = UDim2.new(0.8, 0, 0.1, 0)
	end
	warn("Requesting player spawn")
	tbl_upvr_3.PlayerService:RequestRespawn():andThen():await()
	warn("Player has spawned")
	if LocalPlayer_upvr.Character then
		CharacterAdded_upvr(LocalPlayer_upvr.Character)
	end
	LocalPlayer_upvr.CharacterAdded:Connect(CharacterAdded_upvr)
	-- KONSTANTERROR: [0] 1. Error Block 68 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [636] 458. Error Block 59 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [636] 458. Error Block 59 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [313] 229. Error Block 8 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [313] 229. Error Block 8 end (CF ANALYSIS FAILED)
end
return any_CreateController_result1_upvr

Script name: GliderHandler
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local PlayerService_upvr = require(ReplicatedStorage.Packages.Knit).GetService("PlayerService")
local var4_upvw
local var5_upvw
local var6_upvw
local var7_upvw
local module_upvr = {}
local function _() -- Line 16, Named "DisableGliding"
	--[[ Upvalues[5]:
		[1]: var5_upvw (read and write)
		[2]: var6_upvw (read and write)
		[3]: var7_upvw (read and write)
		[4]: var4_upvw (read and write)
		[5]: PlayerService_upvr (readonly)
	]]
	var5_upvw = nil
	if var6_upvw then
		var6_upvw:Disconnect()
		var6_upvw = nil
	end
	if var7_upvw then
		var7_upvw:Destroy()
		var7_upvw = nil
	end
	if var4_upvw then
		var4_upvw:Stop()
	end
	PlayerService_upvr:ToggleGlider(false)
end
local RunService_upvr = game:GetService("RunService")
function module_upvr.Glide(arg1) -- Line 38
	--[[ Upvalues[7]:
		[1]: var5_upvw (read and write)
		[2]: CoreUtil_upvr (readonly)
		[3]: var6_upvw (read and write)
		[4]: var7_upvw (read and write)
		[5]: var4_upvw (read and write)
		[6]: PlayerService_upvr (readonly)
		[7]: RunService_upvr (readonly)
	]]
	local Character_2_upvr = game.Players.LocalPlayer.Character
	if var5_upvw or not Character_2_upvr or not CoreUtil_upvr:ValidateHumanoid(Character_2_upvr) then
	else
		var5_upvw = nil
		if var6_upvw then
			var6_upvw:Disconnect()
			var6_upvw = nil
		end
		if var7_upvw then
			var7_upvw:Destroy()
			var7_upvw = nil
		end
		if var4_upvw then
			var4_upvw:Stop()
		end
		PlayerService_upvr:ToggleGlider(false)
		var5_upvw = true
		local RaycastParams_new_result1_upvr = RaycastParams.new()
		RaycastParams_new_result1_upvr.FilterType = Enum.RaycastFilterType.Exclude
		RaycastParams_new_result1_upvr.FilterDescendantsInstances = {Character_2_upvr}
		var7_upvw = Instance.new("VectorForce")
		var7_upvw.Attachment0 = Character_2_upvr.HumanoidRootPart.RootAttachment
		var7_upvw.ApplyAtCenterOfMass = true
		var7_upvw.Parent = Character_2_upvr.HumanoidRootPart
		local Animation = Instance.new("Animation")
		Animation.AnimationId = "rbxassetid://104393055822207"
		var4_upvw = Character_2_upvr.Humanoid.Animator:LoadAnimation(Animation)
		var4_upvw:Play()
		var6_upvw = RunService_upvr.RenderStepped:Connect(function() -- Line 62
			--[[ Upvalues[8]:
				[1]: CoreUtil_upvr (copied, readonly)
				[2]: Character_2_upvr (readonly)
				[3]: var5_upvw (copied, read and write)
				[4]: var6_upvw (copied, read and write)
				[5]: var7_upvw (copied, read and write)
				[6]: var4_upvw (copied, read and write)
				[7]: PlayerService_upvr (copied, readonly)
				[8]: RaycastParams_new_result1_upvr (readonly)
			]]
			local var19
			if not var19 then
				var19 = nil
				var5_upvw = var19
				var19 = var6_upvw
				if var19 then
					var19 = var6_upvw:Disconnect
					var19()
					var19 = nil
					var6_upvw = var19
				end
				var19 = var7_upvw
				if var19 then
					var19 = var7_upvw:Destroy
					var19()
					var19 = nil
					var7_upvw = var19
				end
				var19 = var4_upvw
				if var19 then
					var19 = var4_upvw:Stop
					var19()
				end
				var19 = PlayerService_upvr:ToggleGlider
				var19(false)
			else
				var19 = Character_2_upvr.HumanoidRootPart.Velocity.Y
				if 0 <= var19 then
					var19 = var7_upvw
					var19.Force = Vector3.new(0, 0, 0)
					return
				end
				var19 = 0
				for _, v in pairs(Character_2_upvr:GetDescendants()) do
					if v:IsA("BasePart") then
						var19 += v.Mass
					end
				end
				local var23 = (Character_2_upvr.HumanoidRootPart.CFrame.LookVector * Vector3.new(1, 0, 1)).Unit * 25
				var7_upvw.Force = Vector3.new(var23.X, var19 * workspace.Gravity - 5, var23.Z)
				if not workspace:Raycast(Character_2_upvr.HumanoidRootPart.Position, Vector3.new(0, -5, 0), RaycastParams_new_result1_upvr) then return end
				var5_upvw = nil
				if var6_upvw then
					var6_upvw:Disconnect()
					var6_upvw = nil
				end
				if var7_upvw then
					var7_upvw:Destroy()
					var7_upvw = nil
				end
				if var4_upvw then
					var4_upvw:Stop()
				end
				PlayerService_upvr:ToggleGlider(false)
			end
		end)
		PlayerService_upvr:ToggleGlider(true)
	end
end
local var24_upvw
function module_upvr.GliderEquipped(arg1, arg2) -- Line 96
	--[[ Upvalues[8]:
		[1]: CoreUtil_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: var24_upvw (read and write)
		[4]: var5_upvw (read and write)
		[5]: var6_upvw (read and write)
		[6]: var7_upvw (read and write)
		[7]: var4_upvw (read and write)
		[8]: PlayerService_upvr (readonly)
	]]
	if arg2 then
		local Character = game.Players.LocalPlayer.Character
		if not Character or not CoreUtil_upvr:ValidateHumanoid(Character) then
		else
			if Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
				module_upvr:Glide()
			end
			var24_upvw = Character.Humanoid.StateChanged:Connect(function(arg1_2, arg2_2) -- Line 109
				--[[ Upvalues[1]:
					[1]: module_upvr (copied, readonly)
				]]
				if arg2_2 ~= Enum.HumanoidStateType.Freefall then
				else
					module_upvr:Glide()
				end
			end)
		end
	end
	if var24_upvw then
		var24_upvw:Disconnect()
	end
	var5_upvw = nil
	if var6_upvw then
		var6_upvw:Disconnect()
		var6_upvw = nil
	end
	if var7_upvw then
		var7_upvw:Destroy()
		var7_upvw = nil
	end
	if var4_upvw then
		var4_upvw:Stop()
	end
	PlayerService_upvr:ToggleGlider(false)
end
return module_upvr

Script name: BlockController
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "BlockController";
})
any_CreateController_result1_upvr.BlockPartSelected = nil
any_CreateController_result1_upvr.Blocks = {}
local tbl = {}
any_CreateController_result1_upvr.ProcesserData = tbl
if game.PlaceId == CoreUtil_upvr.PlaceIds.Island then
	tbl = false
else
	tbl = true
end
any_CreateController_result1_upvr.IsMainHub = tbl
any_CreateController_result1_upvr.CollabrativeBuilding = false
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_upvr_2 = {}
local tbl_upvr = {}
local tbl_3_upvr = {}
function SoundEffects(arg1, arg2) -- Line 35
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local Part_upvr = Instance.new("Part")
	Part_upvr.Anchored = true
	Part_upvr.CanCollide = false
	Part_upvr.Transparency = 1
	Part_upvr.Position = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(arg1))
	Part_upvr.Size = Vector3.new(1, 1, 1)
	Part_upvr.Parent = workspace
	local Sound_upvr = Instance.new("Sound")
	Sound_upvr.SoundId = arg2
	Sound_upvr:AddTag("SFX")
	Sound_upvr.Volume = 2
	Sound_upvr.Parent = Part_upvr
	Sound_upvr:Play()
	coroutine.wrap(function() -- Line 52
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: Sound_upvr (readonly)
			[3]: Part_upvr (readonly)
		]]
		CoreUtil_upvr:CustomYeild(Sound_upvr.TimeLength, Sound_upvr.Ended)
		Part_upvr:Destroy()
	end)()
end
function any_CreateController_result1_upvr.UpdateBlockSurroundings(arg1, arg2, arg3, arg4) -- Line 60
	--[[ Upvalues[4]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1_2, pairs_result2, pairs_result3 = pairs(arg2)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [178] 130. Error Block 32 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [178] 130. Error Block 32 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [11] 8. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [11] 8. Error Block 2 end (CF ANALYSIS FAILED)
end
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function any_CreateController_result1_upvr.DamageBlock(arg1, arg2, arg3, arg4) -- Line 177
	--[[ Upvalues[6]:
		[1]: any_CreateController_result1_upvr (readonly)
		[2]: any_RequireDefinitions_result1_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: TableUtil_upvr (readonly)
		[6]: tbl_upvr_2 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [365] 246. Error Block 58 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [365] 246. Error Block 58 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 122 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.4]
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.527524]
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.5]
	if nil ~= nil then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if not nil then
		end
	end
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.8]
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.9]
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.10]
	for i, v in nil do
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.14]
		local function INLINED_8() -- Internal function, doesn't exist in bytecode
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			return nil == "Dirt"
		end
		local function INLINED_9() -- Internal function, doesn't exist in bytecode
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			return nil == "Grass"
		end
		local function INLINED_10() -- Internal function, doesn't exist in bytecode
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			return nil ~= "Scythe"
		end
		local function INLINED_11() -- Internal function, doesn't exist in bytecode
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			return nil
		end
		if nil ~= "Hoe" or INLINED_8() or INLINED_9() or INLINED_10() or INLINED_11() then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if nil then
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.16]
				if nil then
				end
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.17]
				if nil == "Hoe" then
					-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.18]
					local function INLINED_12() -- Internal function, doesn't exist in bytecode
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						return nil
					end
					if not nil or not INLINED_12() then
					end
					-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.19]
					local function INLINED_13() -- Internal function, doesn't exist in bytecode
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						return nil
					end
					if not nil or not INLINED_13() then
					end
				end
				if v then
				end
			else
			end
		end
	end
	for i_2, v_2 in nil, nil, i do
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	end
	if i then
		if i == true then
			for _, v_3 in i_2, v_2 do
				if v_3 then
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			end
		elseif i and i_2 == "table" then
			for _, v_6 in i_2, v_2 do
				if v_6 then
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
						-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.20]
						for _, _ in nil do
							-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.24]
							local function INLINED_14() -- Internal function, doesn't exist in bytecode
								-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.23]
								return nil
							end
							if not nil or not INLINED_14() then
							end
							-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
							-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [365.25]
							if nil == nil then
							end
							-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
						end
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						if not nil then
						end
					end
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			end
			-- KONSTANTWARNING: GOTO [401] #269
		end
	else
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [368.6]
		for i_4, v_4 in pairs(nil) do
			if v_4 and v_4.Parent then
				v_4.Parent = workspace.Island
			end
			any_CreateController_result1_upvr.Blocks[i_4.Position.X][i_4.Position.Y][i_4.Position.Z] = i_4
		end
	end
	-- KONSTANTERROR: [0] 1. Error Block 122 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [401] 269. Error Block 93 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [403.7]
	for _, v_5 in pairs(nil) do
		v_5:Destroy()
	end
	-- KONSTANTERROR: [401] 269. Error Block 93 end (CF ANALYSIS FAILED)
end
function any_CreateController_result1_upvr.PlaceBlock(arg1, arg2, arg3, arg4) -- Line 287
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: tbl_upvr_2 (readonly)
		[5]: any_RequireDefinitions_result1_upvr (readonly)
	]]
	local any_ToDataPos_result1 = CoreUtil_upvr:ToDataPos(arg3)
	if any_CreateController_result1_upvr.IslandOwner ~= game.Players.LocalPlayer and not any_CreateController_result1_upvr.CollabrativeBuilding then return end
	if not CoreUtil_upvr:BlockValidation(LocalPlayer_upvr, arg2, any_ToDataPos_result1, arg4) then return end
	local any_PlaceBlock_result1_upvr = tbl_upvr_2.BlockService:PlaceBlock(arg2, any_ToDataPos_result1, arg4)
	SoundEffects(arg3, any_RequireDefinitions_result1_upvr.Block[arg2].SoundData.Placing[math.random(1, #any_RequireDefinitions_result1_upvr.Block[arg2].SoundData.Placing)])
	local module_upvr = {}
	coroutine.wrap(function() -- Line 301
		--[[ Upvalues[2]:
			[1]: module_upvr (readonly)
			[2]: any_PlaceBlock_result1_upvr (readonly)
		]]
		local any_await_result1_2, any_await_result2_2 = any_PlaceBlock_result1_upvr:await()
		_ = any_await_result1_2 -- Setting global
		module_upvr.Result = any_await_result2_2
	end)()
	any_CreateController_result1_upvr:UpdateBlockSurroundings({any_ToDataPos_result1}, any_PlaceBlock_result1_upvr, module_upvr)
	CoreUtil_upvr:CreateBlockModel(arg2, arg3, arg4, workspace.ClientBlocks):Destroy()
	return module_upvr.Result
end
function ServerIslandPlace(arg1) -- Line 314
	--[[ Upvalues[5]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: tbl_3_upvr (readonly)
		[5]: tbl_upvr (readonly)
	]]
	CoreUtil_upvr:SetValueAtPosition(any_CreateController_result1_upvr.Blocks, arg1.Position, arg1)
	local var152 = any_RequireDefinitions_result1_upvr.Block[arg1.Id]
	local var153
	if var152 then
		var153 = var152.BehaviourData
		if var153 then
			var153 = var152.BehaviourData.Id
			if var153 == "Crop Behaviour" then
				var153 = arg1.Part
				if var153 then
					tbl_3_upvr.PlacingHandler.CastParams:AddToFilter(var153)
				end
			end
		end
	end
	var153 = any_RequireDefinitions_result1_upvr.Block[arg1.Id].BehaviourData
	if var153 then
		var153 = any_RequireDefinitions_result1_upvr.Behaviours[any_RequireDefinitions_result1_upvr.Block[arg1.Id].BehaviourData.Id]
	end
	if var153 then
		var153.Inititate(arg1)
	end
	if tbl_upvr.UIController.Modules.InventoryHandler then
		tbl_upvr.UIController.Modules.InventoryHandler:InitialiseStorages()
	else
		warn("INVENTORY HANDLER HAS NOT BEEN LOADED YET")
	end
end
function ServerIslandDestroy(arg1) -- Line 339
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
	]]
	CoreUtil_upvr:SetValueAtPosition(any_CreateController_result1_upvr.Blocks, arg1, nil)
end
function ServerIslandUpdate(arg1, arg2, arg3, arg4) -- Line 344
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local SOME = workspace.Island:FindFirstChild(arg1)
	local var155
	if not SOME then
	else
		local function INLINED_15() -- Internal function, doesn't exist in bytecode
			var155 = SOME.PrimaryPart.Position
			return var155
		end
		if not SOME:IsA("Model") or not INLINED_15() then
			var155 = SOME.Position
		end
		if not SOME:IsA("Model") or not SOME.PrimaryPart.Orientation then
		end
		repeat
			local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(1, workspace.Island.ChildAdded)
		until (not any_CustomYeild_result1 or any_CustomYeild_result1.Name == arg1) and 1 <= tick() - tick()
		CoreUtil_upvr:CreateBlockModel(arg4, var155, SOME.Orientation, workspace.ClientBlocks):Destroy()
	end
end
function UpdateBlockHealth(arg1, arg2) -- Line 367
	--[[ Upvalues[1]:
		[1]: tbl_3_upvr (readonly)
	]]
	tbl_3_upvr.MiningHandler:UpdateBlockHealth(arg1, arg2)
end
function ServerObjectUpdate(arg1) -- Line 371
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
	]]
	CoreUtil_upvr:SetValueAtPosition(any_CreateController_result1_upvr.Blocks, {
		X = arg1.Position.X;
		Y = arg1.Position.Y;
		Z = arg1.Position.Z;
	}, arg1)
end
function any_CreateController_result1_upvr.KnitInit(arg1) -- Line 376
	--[[ Upvalues[4]:
		[1]: tbl_upvr_2 (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_upvr_2.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr_2.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr_2.BlockService = Knit_upvr.GetService("BlockService")
	tbl_upvr.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_upvr.UIController = Knit_upvr.GetController("UIController")
	local any_await_result1, any_await_result2 = tbl_upvr_2.BlockService:GetIslandOwner():andThen():await()
	_ = any_await_result1 -- Setting global
	any_CreateController_result1_upvr.IslandOwner = any_await_result2
end
local HttpService_upvr = game:GetService("HttpService")
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 390
	--[[ Upvalues[7]:
		[1]: tbl_upvr_2 (readonly)
		[2]: HttpService_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_RequireDefinitions_result1_upvr (readonly)
		[6]: tbl_upvr (readonly)
		[7]: tbl_3_upvr (readonly)
	]]
	local tbl_2_upvr = {}
	local var163_upvw
	local tick_result1_upvr = tick()
	tbl_upvr_2.BlockService.IslandBlockUpdater:Connect(function(arg1_2, arg2, arg3) -- Line 400
		--[[ Upvalues[9]:
			[1]: tbl_2_upvr (readonly)
			[2]: var163_upvw (read and write)
			[3]: HttpService_upvr (copied, readonly)
			[4]: any_CreateController_result1_upvr (copied, readonly)
			[5]: CoreUtil_upvr (copied, readonly)
			[6]: any_RequireDefinitions_result1_upvr (copied, readonly)
			[7]: tick_result1_upvr (readonly)
			[8]: tbl_upvr_2 (copied, readonly)
			[9]: tbl_upvr (copied, readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		tbl_2_upvr[arg2] = arg1_2
		var163_upvw = arg3
		local _ = 1
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [13] 14. Error Block 4 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [13] 14. Error Block 4 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [8] 9. Error Block 2 start (CF ANALYSIS FAILED)
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [13.7]
		-- KONSTANTERROR: [8] 9. Error Block 2 end (CF ANALYSIS FAILED)
	end)
	tbl_upvr_2.BlockService:GetBlocks():andThen():await()
	tbl_upvr_2.PlayerService.CollabBuildToggle:Connect(function(arg1_3) -- Line 472
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr.CollabrativeBuilding = arg1_3
	end)
	tbl_3_upvr.MiningHandler = require(script.MiningHandler)
	tbl_3_upvr.PlacingHandler = require(script.PlacingHandler)
	tbl_upvr_2.BlockService.UpdateBlockHealth:Connect(UpdateBlockHealth)
	tbl_upvr_2.BlockService.PlaceClientBlocks:Connect(ServerIslandPlace)
	tbl_upvr_2.BlockService.DestroyClientBlocks:Connect(ServerIslandDestroy)
	tbl_upvr_2.BlockService.UpdateClientBlocks:Connect(ServerIslandUpdate)
	tbl_upvr_2.BlockService.UpdateBlockObject:Connect(ServerObjectUpdate)
	workspace.Island.ChildAdded:Connect(function(arg1_4) -- Line 487
		--[[ Upvalues[2]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: any_CreateController_result1_upvr (copied, readonly)
		]]
		local var168
		if arg1_4:IsA("Model") then
			local PrimaryPart = arg1_4.PrimaryPart
			if PrimaryPart then
				PrimaryPart = arg1_4.PrimaryPart.Position
			end
			var168 = PrimaryPart
			if not var168 then
				do
					return
				end
				-- KONSTANTWARNING: GOTO [19] #15
			end
		else
			var168 = arg1_4.Position
		end
		local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(any_CreateController_result1_upvr.Blocks, CoreUtil_upvr:ToDataPos(CoreUtil_upvr:Vector3ToTable(var168)))
		if any_GetValueAtPosition_result1 then
			any_GetValueAtPosition_result1.Part = arg1_4
		end
	end)
	workspace.Island.ChildRemoved:Connect(function(arg1_5) -- Line 503
		--[[ Upvalues[2]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: any_CreateController_result1_upvr (copied, readonly)
		]]
		local var172
		if arg1_5:IsA("Model") then
			local PrimaryPart_2 = arg1_5.PrimaryPart
			if PrimaryPart_2 then
				PrimaryPart_2 = arg1_5.PrimaryPart.Position
			end
			var172 = PrimaryPart_2
			if not var172 then
				do
					return
				end
				-- KONSTANTWARNING: GOTO [19] #15
			end
		else
			var172 = arg1_5.Position
		end
		local any_GetValueAtPosition_result1_2 = CoreUtil_upvr:GetValueAtPosition(any_CreateController_result1_upvr.Blocks, CoreUtil_upvr:ToDataPos(CoreUtil_upvr:Vector3ToTable(var172)))
		if any_GetValueAtPosition_result1_2 then
			any_GetValueAtPosition_result1_2.Part = nil
		end
	end)
end
return any_CreateController_result1_upvr

Script name: MiningHandler
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
local any_GetController_result1_upvr_2 = Knit.GetController("BlockController")
local module_upvr = {
	MinePart = require(script.MinePart);
}
local LocalPlayer_upvr = game.Players.LocalPlayer
local Mining_upvr = workspace.HighlightContrainer.Mining
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local var10_upvw
local function _(arg1, arg2) -- Line 30, Named "DisplayMineId"
end
local function _() -- Line 43, Named "RemoveSelectedMinePart"
	--[[ Upvalues[2]:
		[1]: var10_upvw (read and write)
		[2]: Mining_upvr (readonly)
	]]
	if var10_upvw then
		Mining_upvr.Adornee = nil
		var10_upvw:Disconnect()
		var10_upvw = nil
	end
end
local TweenService_upvr = game:GetService("TweenService")
function MiningEffects(arg1) -- Line 52
	--[[ Upvalues[4]:
		[1]: var10_upvw (read and write)
		[2]: TweenService_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: mouse_upvr (readonly)
	]]
	if not arg1 and var10_upvw.Block and var10_upvw.Block:IsA("BasePart") then
		TweenService_upvr:Create(var10_upvw.Block, TweenInfo.new(0.1, Enum.EasingStyle.Sine, Enum.EasingDirection.In, 0, true), {
			Size = var10_upvw.Block.Size * 1.05;
		}):Play()
	end
	for _ = 1, 5 do
		local Part_upvr = Instance.new("Part", workspace.ParticleStorage)
		Part_upvr.Size = Vector3.new(1, 1, 1)
		local var16
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var16 = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(var10_upvw.BlockObj.Position))
			return var16
		end
		if not arg1 or not INLINED() then
			var16 = mouse_upvr.Hit.Position
		end
		Part_upvr.Position = var16
		var16 = 1
		Part_upvr.Transparency = var16
		var16 = "Particle"
		Part_upvr.CollisionGroup = var16
		var16 = game.ReplicatedStorage.Prefabs.UI.BreakParticle:Clone()
		var16.Parent = Part_upvr
		var16.Adornee = Part_upvr
		var16.Frame.BackgroundColor3 = var10_upvw.BlockDef.AccentColor
		local var17 = math.random() / 3 + 0.4
		var16.Size = UDim2.fromScale(var17, var17)
		Part_upvr.Velocity = Vector3.new(math.random() * 2 - 1, math.clamp(math.random(), 0.5, 1), math.random() * 2 - 1) * math.random() * 20
		task.delay(1, function() -- Line 80
			--[[ Upvalues[1]:
				[1]: Part_upvr (readonly)
			]]
			if Part_upvr.Parent then
				Part_upvr:Destroy()
			end
		end)
	end
	mouse_upvr.TargetFilter = workspace.ParticleStorage
end
function module_upvr.UpdateBlockHealth(arg1, arg2, arg3) -- Line 92
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: var10_upvw (read and write)
	]]
	any_GetController_result1_upvr.Blocks[arg2.Position.X][arg2.Position.Y][arg2.Position.Z] = arg2
	if var10_upvw and var10_upvw.BlockObj and arg2.Index == var10_upvw.BlockObj.Index then
		local var19 = arg3
		if not var19 then
			var19 = arg2.Health
		end
		var10_upvw.BlockObj.Health = var19
		var10_upvw:UpdateHealth()
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
any_GetController_result1_upvr.ToolUsed.Event:Connect(function() -- Line 106
	--[[ Upvalues[7]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: LocalPlayer_upvr (readonly)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: module_upvr (readonly)
		[7]: var10_upvw (read and write)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 76 start (CF ANALYSIS FAILED)
	local var42
	if not any_GetController_result1_upvr.IsUsingTool then return end
	local any_GetSlotFromIndex_result1_4 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr.Inventory, any_GetController_result1_upvr.EquippedIndex)
	if not any_GetSlotFromIndex_result1_4 then return end
	local var44 = any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1_4.Id]
	if not var44 then return end
	local var45
	if var44.SubCatagory == "Scythe" then
		var45 = LocalPlayer_upvr.Character
		if not CoreUtil_upvr:ValidateHumanoid(var45) then
		else
			var42 = LocalPlayer_upvr.Character
			var42 = 0
			var45 = var42.HumanoidRootPart.Position - Vector3.new(var42, LocalPlayer_upvr.Character.Humanoid.HipHeight, 0)
			var45 = var44.DamageTable.Farmland
			var42 = CoreUtil_upvr:ToDataPos(CoreUtil_upvr:RoundPosToGridPos(var45))
			local any_Vector3ToTable_result1_2 = CoreUtil_upvr:Vector3ToTable(var42)
			var42 = CoreUtil_upvr.ScytheRanges
			local var47 = var42[var44.Id]
			var42 = {}
			for i_2 = any_Vector3ToTable_result1_2.X - var47, any_Vector3ToTable_result1_2.X + var47 do
				for i_3 = any_Vector3ToTable_result1_2.Z - var47, any_Vector3ToTable_result1_2.Z + var47 do
					local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr_2.Blocks, {
						X = i_2;
						Y = any_Vector3ToTable_result1_2.Y;
						Z = i_3;
					})
					if any_GetValueAtPosition_result1 and string.find(any_GetValueAtPosition_result1.Id, "Seed") and any_GetValueAtPosition_result1.TickProgress.Stage == any_RequireDefinitions_result1_upvr.Block[any_GetValueAtPosition_result1.Id].BehaviourData.StageCount then
						table.insert({}, module_upvr.MinePart.new(any_GetValueAtPosition_result1))
					end
				end
			end
			if any_GetController_result1_upvr.Effects["Mining Boost"] then
				local any_GetCurrentTier_result1_2 = CoreUtil_upvr:GetCurrentTier(any_GetController_result1_upvr.Effects["Mining Boost"])
				if any_GetCurrentTier_result1_2 then
					i_3 = 10 * any_GetCurrentTier_result1_2.Tier ^ 2 - 20 * any_GetCurrentTier_result1_2.Tier
					var45 *= 1 + (i_3 + 20) / 100
				end
			end
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			any_GetController_result1_upvr_2:DamageBlock({}, var45, var44.Id)
		end
	end
	if not var44.DamageTable then return end
	local pairs_result1_2, pairs_result2, pairs_result3 = pairs(var44.DamageTable)
	-- KONSTANTERROR: [0] 1. Error Block 76 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [214] 153. Error Block 27 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [214] 153. Error Block 27 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [209] 149. Error Block 25 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [209] 149. Error Block 25 end (CF ANALYSIS FAILED)
end)
game:GetService("RunService").RenderStepped:Connect(function(arg1) -- Line 200
	--[[ Upvalues[8]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: mouse_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
		[6]: Mining_upvr (readonly)
		[7]: var10_upvw (read and write)
		[8]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var61
	if any_GetController_result1_upvr_2.IslandOwner ~= game.Players.LocalPlayer and not any_GetController_result1_upvr_2.CollabrativeBuilding then
	else
		var61 = LocalPlayer_upvr.Character
		if not CoreUtil_upvr:ValidateHumanoid(var61) then return end
		local function INLINED_6() -- Internal function, doesn't exist in bytecode
			var61 = mouse_upvr.Target
			return workspace.Island:IsAncestorOf(var61)
		end
		if not mouse_upvr.Target or not INLINED_6() then return end
		var61 = LocalPlayer_upvr
		local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr.Inventory, any_GetController_result1_upvr.EquippedIndex)
		var61 = false
		if mouse_upvr.Target:FindFirstAncestorWhichIsA("Model") ~= workspace then
			var61 = mouse_upvr.Target:FindFirstAncestorWhichIsA("Model")
		end
		if not var61 or not var61.PrimaryPart then
			local Target = mouse_upvr.Target
		end
		local var64
		local function INLINED_7() -- Internal function, doesn't exist in bytecode
			var64 = CoreUtil_upvr:ItemHasEnchantment(any_GetSlotFromIndex_result1, "Giant")
			return var64
		end
		if any_GetSlotFromIndex_result1 and (INLINED_7() or CoreUtil_upvr:ItemHasEnchantment(any_GetSlotFromIndex_result1, "Tiny")) then
			if var64 then
			else
			end
		end
		if any_GetSlotFromIndex_result1 then
			var64 = any_GetSlotFromIndex_result1.Catagory
			if var64 == "Tool" then
				var64 = (var61.Character:GetPivot().Position - Target.Position).Magnitude
				if var64 <= CoreUtil_upvr.PlacementRange * 0.5 then
					var64 = any_GetController_result1_upvr_2
					var64.BlockPartSelected = var61 or Target
					-- KONSTANTWARNING: GOTO [132] #95
				end
			end
		end
		var64 = any_GetController_result1_upvr_2
		var64.BlockPartSelected = nil
		var64 = any_GetController_result1_upvr_2.BlockPartSelected
		local function INLINED_8() -- Internal function, doesn't exist in bytecode
			var64 = workspace.HighlightContrainer.Tutorial.Adornee
			return var64 ~= any_GetController_result1_upvr_2.BlockPartSelected
		end
		if not var64 or INLINED_8() then
			var64 = Mining_upvr
			var64.Adornee = any_GetController_result1_upvr_2.BlockPartSelected
		end
		var64 = any_GetController_result1_upvr_2.BlockPartSelected
		if var64 then
			if not Target then
			else
				var64 = any_GetController_result1_upvr_2.BlockPartSelected
				if var64 then
					var64 = any_GetController_result1_upvr_2.BlockPartSelected
					if any_GetController_result1_upvr_2.BlockPartSelected ~= var64 then
						local function INLINED_9() -- Internal function, doesn't exist in bytecode
							var64 = CoreUtil_upvr:ToDataPos(var61.PrimaryPart.Position)
							return var64
						end
						if not var61 or not INLINED_9() then
							var64 = CoreUtil_upvr:ToDataPos(Target.Position)
						end
						if CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr_2.Blocks, CoreUtil_upvr:Vector3ToTable(var64)) then
						end
					end
				end
			end
		end
		if not any_GetController_result1_upvr.IsUsingTool or not any_GetController_result1_upvr_2.BlockPartSelected then
			if var10_upvw then
				Mining_upvr.Adornee = nil
				var10_upvw:Disconnect()
				var10_upvw = nil
			end
			return
		end
		if not var10_upvw or any_GetController_result1_upvr_2.BlockPartSelected ~= var10_upvw.Block then
			if var10_upvw then
				Mining_upvr.Adornee = nil
				var10_upvw:Disconnect()
				var10_upvw = nil
			end
			if not Target then return end
			if not var61 or not CoreUtil_upvr:ToDataPos(var61.PrimaryPart.Position) then
			end
			local any_GetValueAtPosition_result1_3 = CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr_2.Blocks, CoreUtil_upvr:Vector3ToTable(CoreUtil_upvr:ToDataPos(Target.Position)))
			if not any_GetValueAtPosition_result1_3 then
				var10_upvw = nil
				return
			end
			var10_upvw = module_upvr.MinePart.new(any_GetValueAtPosition_result1_3)
		end
	end
end)
return module_upvr

Script name: MinePart
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local module_upvr = {}
module_upvr.__index = module_upvr
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local BlockService_upvr = Knit.GetService("BlockService")
function module_upvr.new(arg1) -- Line 16
	--[[ Upvalues[3]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: BlockService_upvr (readonly)
	]]
	if not arg1 then return end
	local tbl = {}
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then
		SOME = workspace.ClientBlocks:FindFirstChild(arg1.Index)
	end
	tbl.Block = SOME
	tbl.BlockHealthUI = nil
	tbl.BlockObj = arg1
	tbl.BlockDef = any_RequireDefinitions_result1_upvr.Block[arg1.Id]
	local setmetatable_result1_upvr = setmetatable(tbl, module_upvr)
	if not setmetatable_result1_upvr.Block then return end
	setmetatable_result1_upvr:Initialise()
	setmetatable_result1_upvr:UpdateHealth()
	BlockService_upvr:GetBlockHealth(arg1.Position):andThen(function(arg1_2) -- Line 36
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if not setmetatable_result1_upvr.BlockObj then
		else
			setmetatable_result1_upvr.BlockObj.Health = arg1_2
			setmetatable_result1_upvr:UpdateHealth()
		end
	end)
	return setmetatable_result1_upvr
end
function module_upvr.Initialise(arg1) -- Line 46
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	arg1.BlockHealthUI = ReplicatedStorage_upvr.Prefabs.UI.BlockHealth:Clone()
	if arg1.Block:IsA("Model") then
		arg1.BlockHealthUI.Parent = arg1.Block.PrimaryPart
		arg1.BlockHealthUI.Adornee = arg1.Block.PrimaryPart
	else
		arg1.BlockHealthUI.Parent = arg1.Block
		arg1.BlockHealthUI.Adornee = arg1.Block
	end
end
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
function module_upvr.Damage(arg1, arg2) -- Line 61
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	local var14
	if not arg1.BlockDef.Health or not arg1.BlockObj or not arg1.BlockObj.Health then
	else
		if any_GetController_result1_upvr.Effects["Mining Boost"] then
			local any_GetCurrentTier_result1_2 = CoreUtil_upvr:GetCurrentTier(any_GetController_result1_upvr.Effects["Mining Boost"])
			if any_GetCurrentTier_result1_2 then
				var14 *= 1 + (10 * any_GetCurrentTier_result1_2.Tier ^ 2 - 20 * any_GetCurrentTier_result1_2.Tier + 20) / 100
			end
		end
		arg1.BlockObj.Health = math.clamp(arg1.BlockObj.Health - var14, 0, arg1.BlockDef.Health)
		if arg1.BlockObj.Health == 0 then
			return true
		end
		arg1:UpdateHealth()
	end
end
function module_upvr.UpdateHealth(arg1) -- Line 87
	if arg1.BlockHealthUI and arg1.BlockObj and arg1.BlockObj.Health and arg1.BlockDef.Health then
		if arg1.BlockObj.Health == arg1.BlockDef.Health or arg1.BlockObj.Health == 0 then
			arg1.BlockHealthUI.Frame.Visible = false
		else
			arg1.BlockHealthUI.Frame.Visible = true
		end
		arg1.BlockHealthUI.Frame.Bar.Size = UDim2.fromScale(arg1.BlockObj.Health / arg1.BlockDef.Health, 1)
	end
end
function module_upvr.Disconnect(arg1) -- Line 104
	if arg1.BlockHealthUI then
		arg1.BlockHealthUI:Destroy()
	end
	arg1.BlockHealthUI = nil
	arg1.Block = nil
	arg1.BlockObj = nil
	arg1.BlockDef = nil
end
return module_upvr

Script name: PlacingHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local UserInputService_upvr = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local any_GetController_result1_upvr = Knit.GetController("BlockController")
local module_upvr = {}
local var10_upvw
local var11_upvw
local const_vector_upvw = Vector3.new(0, 0, 0)
local var13_upvw = false
local var14_upvw = false
local LocalPlayer_upvr = game.Players.LocalPlayer
local mouse_upvr = LocalPlayer_upvr:GetMouse()
module_upvr.CastParams = RaycastParams.new()
local function RotatePreview(arg1, arg2, arg3) -- Line 25
	--[[ Upvalues[1]:
		[1]: const_vector_upvw (read and write)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 3. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [4] 3. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [5] 4. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [5] 4. Error Block 3 end (CF ANALYSIS FAILED)
end
local function UpdatePreviewPart_upvr(arg1, arg2) -- Line 48, Named "UpdatePreviewPart"
	--[[ Upvalues[5]:
		[1]: var10_upvw (read and write)
		[2]: LocalPlayer_upvr (readonly)
		[3]: module_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
		[5]: var14_upvw (read and write)
	]]
	if not arg2 and var10_upvw and var10_upvw.Name == arg1 then
	else
		if var10_upvw then
			var10_upvw:Destroy()
			var10_upvw = nil
		end
		if not arg1 then return end
		local Character = LocalPlayer_upvr.Character
		if not Character then
			Character = LocalPlayer_upvr.CharacterAdded:Wait()
		end
		module_upvr.CastParams:AddToFilter(Character)
		var10_upvw = ReplicatedStorage_upvr.Prefabs.Block:FindFirstChild(arg1):Clone()
		var10_upvw.Parent = workspace.GhostPart
		if var10_upvw:FindFirstChild("Stages") then
			for _, v_2 in pairs(var10_upvw.Stages:GetChildren()) do
				if 0 < tonumber(v_2.Name) then
				end
			end
		end
		module_upvr.CastParams:AddToFilter(workspace.GhostPart)
		for _, v_3 in pairs(workspace.GhostPart:GetDescendants()) do
			if v_3:IsA("BasePart") then
				local Name_2 = v_3.Parent.Name
				if Name_2 == "Stages" then
					if tonumber(v_3.Name) ~= tonumber(v_2.Name) then
						Name_2 = 1
					else
						Name_2 = 0.5
					end
					v_3.Transparency = Name_2
				end
				if v_3.Transparency ~= 1 then
					v_3.Transparency = 0.5
				end
				v_3.CanCollide = false
			elseif v_3:IsA("Texture") then
				local Name = v_3.Parent.Parent.Name
				if Name == "Stages" then
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if tonumber(v_3.Parent.Name) ~= tonumber(v_2.Name) then
						Name = 1
					else
						Name = 0.5
					end
					v_3.Transparency = Name
				end
				if v_3.Transparency ~= 1 then
					v_3.Transparency = 0.5
				end
			end
		end
		if var14_upvw then
			RedOutPreviewPart(var14_upvw)
		end
	end
end
function MouseTargetGridPosition() -- Line 106
	--[[ Upvalues[5]:
		[1]: UserInputService_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: LocalPlayer_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
	]]
	local any_GetMouseLocation_result1 = UserInputService_upvr:GetMouseLocation()
	local any_ViewportPointToRay_result1 = workspace.Camera:ViewportPointToRay(any_GetMouseLocation_result1.X, any_GetMouseLocation_result1.Y)
	local workspace_Raycast_result1 = workspace:Raycast(any_ViewportPointToRay_result1.Origin, any_ViewportPointToRay_result1.Direction * 1000, module_upvr.CastParams)
	if workspace_Raycast_result1 then
		local any_RoundPosToGridPos_result1 = CoreUtil_upvr:RoundPosToGridPos(workspace_Raycast_result1.Position + workspace_Raycast_result1.Normal * 3 / 2)
		if (LocalPlayer_upvr.Character:GetPivot().Position - any_RoundPosToGridPos_result1).Magnitude < CoreUtil_upvr.PlacementRange then
			return any_RoundPosToGridPos_result1, true
		end
		return any_RoundPosToGridPos_result1, false
	end
	if not CoreUtil_upvr:ValidateHumanoid(LocalPlayer_upvr.Character) then
	else
		local any_RoundPosToGridPos_result1_upvr = CoreUtil_upvr:RoundPosToGridPos(LocalPlayer_upvr.Character.HumanoidRootPart.Position - Vector3.new(0, LocalPlayer_upvr.Character.Humanoid.HipHeight + 3, 0))
		if not CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr.Blocks, CoreUtil_upvr:Vector3ToTable(CoreUtil_upvr:ToDataPos(any_RoundPosToGridPos_result1_upvr))) then return end
		local var47 = any_ViewportPointToRay_result1.Origin + (any_ViewportPointToRay_result1.Direction) * ((any_RoundPosToGridPos_result1_upvr.Y - any_ViewportPointToRay_result1.Origin.Y) / any_ViewportPointToRay_result1.Direction.Y)
		if CoreUtil_upvr.PlacementRange < (any_RoundPosToGridPos_result1_upvr - var47).Magnitude then return end
		local tbl = {}
		local unit_upvr = (var47 - any_RoundPosToGridPos_result1_upvr).unit
		for var53 = 0, math.ceil((var47 - any_RoundPosToGridPos_result1_upvr).Magnitude / Vector3.new(3, 3, 3).Magnitude) do
			local var50 = any_RoundPosToGridPos_result1_upvr + unit_upvr * var53 * Vector3.new(3, 3, 3).Magnitude
			local var51 = var50 + unit_upvr * Vector3.new(3, 3, 3).Magnitude
			for i_5 = math.floor(math.min(var50.X, var51.X) / 3 + 0.5), math.floor(math.max(var50.X, var51.X) / 3 + 0.5) do
				for i_6 = math.floor(math.min(var50.Y, var51.Y) / 3 + 0.5), math.floor(math.max(var50.Y, var51.Y) / 3 + 0.5) do
					for i_7 = math.floor(math.min(var50.Z, var51.Z) / 3 + 0.5), math.floor(math.max(var50.Z, var51.Z) / 3 + 0.5) do
						local vector3 = Vector3.new(i_5 * 3, i_6 * 3, i_7 * 3)
						if not CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr.Blocks, CoreUtil_upvr:Vector3ToTable(CoreUtil_upvr:ToDataPos(vector3))) then
							table.insert(tbl, vector3)
						end
					end
				end
			end
		end
		if 0 < #tbl then
			function var53(arg1, arg2) -- Line 170
				--[[ Upvalues[2]:
					[1]: unit_upvr (readonly)
					[2]: any_RoundPosToGridPos_result1_upvr (readonly)
				]]
				local tangent = math.tan(unit_upvr:Dot((arg2 - any_RoundPosToGridPos_result1_upvr).Unit))
				if (any_RoundPosToGridPos_result1_upvr - arg2).Magnitude + tangent * (arg2 - any_RoundPosToGridPos_result1_upvr).Magnitude * 5 >= (any_RoundPosToGridPos_result1_upvr - arg1).Magnitude + math.tan(unit_upvr:Dot((arg1 - any_RoundPosToGridPos_result1_upvr).Unit)) * (arg1 - any_RoundPosToGridPos_result1_upvr).Magnitude * 5 then
					tangent = false
				else
					tangent = true
				end
				return tangent
			end
			table.sort(tbl, var53)
			for _, v_4 in pairs(tbl) do
				i_5 = CoreUtil_upvr:ToDataPos(v_4)
				i_5 = 0
				for i_9, v_5 in pairs(CoreUtil_upvr:GetAdjacentPositions(CoreUtil_upvr:Vector3ToTable(i_5))) do
					if CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr.Blocks, v_5) then
						i_5 += 1
					end
				end
				if 0 < i_5 then
					v_5 = LocalPlayer_upvr
					i_9 = v_5.Character:GetPivot()
					if (i_9.Position - v_4).Magnitude < CoreUtil_upvr.PlacementRange then
						return v_4, true
					end
					return v_4, false
				end
			end
		end
	end
end
function RedOutPreviewPart(arg1) -- Line 209
	--[[ Upvalues[4]:
		[1]: var10_upvw (read and write)
		[2]: UpdatePreviewPart_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [55] 43. Error Block 13 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [55] 43. Error Block 13 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [56] 44. Error Block 14 start (CF ANALYSIS FAILED)
	UpdatePreviewPart_upvr(CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex).Id, true)
	-- KONSTANTERROR: [56] 44. Error Block 14 end (CF ANALYSIS FAILED)
end
function PositionPreviewPart() -- Line 228
	--[[ Upvalues[8]:
		[1]: var11_upvw (read and write)
		[2]: var10_upvw (read and write)
		[3]: var14_upvw (read and write)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
		[6]: any_RequireDefinitions_result1_upvr (readonly)
		[7]: mouse_upvr (readonly)
		[8]: const_vector_upvw (read and write)
	]]
	local MouseTargetGridPosition_result1, MouseTargetGridPosition_result2_2 = MouseTargetGridPosition()
	local var66
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var66 = MouseTargetGridPosition_result1
		return var66
	end
	if not var10_upvw or not MouseTargetGridPosition_result1 or not INLINED_2() then
		var66 = var11_upvw
	end
	var11_upvw = var66
	var66 = var11_upvw
	if not var66 then
	else
		if MouseTargetGridPosition_result2_2 then
			var66 = var14_upvw
			if var66 then
				var66 = false
				var14_upvw = var66
				var66 = RedOutPreviewPart
				var66(false)
				-- KONSTANTWARNING: GOTO [32] #30
			end
		end
		if not MouseTargetGridPosition_result2_2 then
			var66 = var14_upvw
			if not var66 then
				var66 = true
				var14_upvw = var66
				var66 = RedOutPreviewPart
				var66(true)
			end
		end
		var66 = CoreUtil_upvr:ToDataPos(CoreUtil_upvr:Vector3ToTable(var11_upvw))
		if not CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr.Blocks, var66) then
			CoreUtil_upvr:SetPosition(var10_upvw, var11_upvw)
		end
		if any_RequireDefinitions_result1_upvr.Block[var10_upvw.Name].CanBeRotated then
			if var11_upvw and mouse_upvr.Hit and var11_upvw.Y < mouse_upvr.Hit.Position.Y then
			elseif not var11_upvw or not mouse_upvr.Hit then
			end
			CoreUtil_upvr:SetRotation(var10_upvw, const_vector_upvw)
		end
	end
end
function PlaceBlock(arg1) -- Line 265
	--[[ Upvalues[9]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: var11_upvw (read and write)
		[5]: UpdatePreviewPart_upvr (readonly)
		[6]: const_vector_upvw (read and write)
		[7]: any_GetController_result1_upvr (readonly)
		[8]: var13_upvw (read and write)
		[9]: mouse_upvr (readonly)
	]]
	local any_GetSlotFromIndex_result1_upvr = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex)
	if any_GetSlotFromIndex_result1_upvr and any_GetSlotFromIndex_result1_upvr.Catagory == "Block" and any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_upvr.Id].CanBePlaced then
		local var92_upvr
		if var92_upvr then
			var92_upvr = any_GetSlotFromIndex_result1_upvr.Stack
			var92_upvr -= 1
			any_GetSlotFromIndex_result1_upvr.Stack = var92_upvr
			var92_upvr = UpdatePreviewPart_upvr
			var92_upvr(nil)
			local function INLINED_4() -- Internal function, doesn't exist in bytecode
				var92_upvr = const_vector_upvw
				return var92_upvr
			end
			if not any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_upvr.Id].CanBeRotated or not INLINED_4() then
				var92_upvr = Vector3.new(0, 0, 0)
			end
			coroutine.wrap(function() -- Line 273
				--[[ Upvalues[4]:
					[1]: any_GetController_result1_upvr (copied, readonly)
					[2]: any_GetSlotFromIndex_result1_upvr (readonly)
					[3]: var11_upvw (copied, read and write)
					[4]: var92_upvr (readonly)
				]]
				any_GetController_result1_upvr:PlaceBlock(any_GetSlotFromIndex_result1_upvr.Id, var11_upvw, var92_upvr)
			end)()
			if not any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_upvr.Id].BehaviourData or any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_upvr.Id].BehaviourData.Id ~= "Crop Behaviour" then return end
			if any_GetSlotFromIndex_result1_upvr.Stack == 0 or not arg1 then return end
			var13_upvw = true
			local BindableEvent_upvr = Instance.new("BindableEvent")
			local tbl_2 = {}
			table.insert(tbl_2, mouse_upvr.Button1Up:Connect(function() -- Line 288
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr (readonly)
				]]
				BindableEvent_upvr:Fire()
			end))
			local var98_upvw = false
			local var99_upvw
			table.insert(tbl_2, mouse_upvr.Move:Connect(function() -- Line 294
				--[[ Upvalues[10]:
					[1]: var98_upvw (read and write)
					[2]: mouse_upvr (copied, readonly)
					[3]: var11_upvw (readonly)
					[4]: CoreUtil_upvr (copied, readonly)
					[5]: any_GetController_result1_upvr_2 (copied, readonly)
					[6]: any_GetSlotFromIndex_result1_upvr (readonly)
					[7]: BindableEvent_upvr (readonly)
					[8]: var99_upvw (read and write)
					[9]: any_GetController_result1_upvr (copied, readonly)
					[10]: var92_upvr (readonly)
				]]
				if var98_upvw then
				else
					local MouseTargetGridPosition_result1_2, MouseTargetGridPosition_result2_4 = MouseTargetGridPosition()
					if MouseTargetGridPosition_result1_2 and MouseTargetGridPosition_result2_4 then
						if not mouse_upvr.Target or mouse_upvr.Target.Position == var11_upvw then return end
						local any_GetSlotFromIndex_result1_3 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex)
						if not any_GetSlotFromIndex_result1_3 or any_GetSlotFromIndex_result1_3.Id ~= any_GetSlotFromIndex_result1_upvr.Id then
							BindableEvent_upvr:Fire()
							return
						end
						if not var99_upvw then
							var99_upvw = MouseTargetGridPosition_result1_2.Y
						end
						if var99_upvw == MouseTargetGridPosition_result1_2.Y then
							if any_GetSlotFromIndex_result1_upvr.Stack == 0 then
								BindableEvent_upvr:Fire()
								print("StackEmpty")
							end
							var98_upvw = true
							if any_GetController_result1_upvr:PlaceBlock(any_GetSlotFromIndex_result1_upvr.Id, MouseTargetGridPosition_result1_2, var92_upvr) then
								local var103 = any_GetSlotFromIndex_result1_upvr
								var103.Stack -= 1
							end
							var98_upvw = false
						end
					end
				end
			end))
			BindableEvent_upvr.Event:Wait()
			BindableEvent_upvr:Destroy()
			for _, v in pairs(tbl_2) do
				v:Disconnect()
			end
			var13_upvw = false
		end
	end
end
UserInputService_upvr.InputBegan:Connect(function(arg1, arg2) -- Line 329
	--[[ Upvalues[2]:
		[1]: mouse_upvr (readonly)
		[2]: var10_upvw (read and write)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 4. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 4. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 5. Error Block 3 start (CF ANALYSIS FAILED)
	PlaceBlock(true)
	do
		return
	end
	-- KONSTANTERROR: [7] 5. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [12] 9. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [12] 9. Error Block 4 end (CF ANALYSIS FAILED)
end)
ContextActionService:BindAction("RotateR", RotatePreview, true, Enum.KeyCode.R, Enum.KeyCode.DPadRight)
ContextActionService:SetImage("RotateR", "rbxassetid://18398924875")
local any_GetButton_result1 = ContextActionService:GetButton("RotateR")
if any_GetButton_result1 then
	any_GetButton_result1.ZIndex = 3
	any_GetButton_result1.AnchorPoint = Vector2.new(0, 0)
	any_GetButton_result1.Position = UDim2.new(-2.3, 0, 0.1, 0)
end
ContextActionService:BindAction("RotateT", RotatePreview, true, Enum.KeyCode.T, Enum.KeyCode.DPadLeft)
ContextActionService:SetImage("RotateT", "rbxassetid://18398771946")
local any_GetButton_result1_2 = ContextActionService:GetButton("RotateT")
if any_GetButton_result1_2 then
	any_GetButton_result1_2.ZIndex = 3
	any_GetButton_result1_2.AnchorPoint = Vector2.new(0, 1)
	any_GetButton_result1_2.Position = UDim2.new(-2.3, 0, 0, 0)
end
game:GetService("RunService").RenderStepped:Connect(function() -- Line 395
	--[[ Upvalues[6]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_2 (readonly)
		[4]: var13_upvw (read and write)
		[5]: any_RequireDefinitions_result1_upvr (readonly)
		[6]: UpdatePreviewPart_upvr (readonly)
	]]
	if any_GetController_result1_upvr.IslandOwner ~= game.Players.LocalPlayer and not any_GetController_result1_upvr.CollabrativeBuilding then
	else
		local any_GetSlotFromIndex_result1_4 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_2.Inventory, any_GetController_result1_upvr_2.EquippedIndex)
		if not var13_upvw and any_GetSlotFromIndex_result1_4 and any_GetSlotFromIndex_result1_4.Catagory == "Block" then
			if any_RequireDefinitions_result1_upvr.Block[any_GetSlotFromIndex_result1_4.Id].CanBePlaced then
				local MouseTargetGridPosition_result1_4, MouseTargetGridPosition_result2_3 = MouseTargetGridPosition()
				if not MouseTargetGridPosition_result1_4 or not MouseTargetGridPosition_result2_3 then
				else
					UpdatePreviewPart_upvr(any_GetSlotFromIndex_result1_4.Id)
					PositionPreviewPart()
				end
			end
		end
		UpdatePreviewPart_upvr(nil)
	end
end)
return module_upvr

Script name: CombatController
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "CombatController";
})
any_CreateController_result1_upvr.Camps = {}
local tbl_upvr = {}
local tbl_upvr_2 = {}
local TweenService_upvr = game:GetService("TweenService")
function AttackEffects(arg1, arg2) -- Line 22
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	if not arg1 or not arg1.Parent or not arg1:FindFirstChild("Humanoid") or arg1.Humanoid.Health == 0 then
	else
		local Part_upvr = Instance.new("Part", workspace.ParticleStorage)
		Part_upvr.Size = Vector3.new(1, 1, 1)
		Part_upvr.Position = arg1.PrimaryPart.Position
		Part_upvr.Transparency = 1
		Part_upvr.CanCollide = false
		local clone = game.ReplicatedStorage.Prefabs.UI.CritUI:Clone()
		clone.Parent = Part_upvr
		clone.Adornee = Part_upvr
		clone.TextLabel.Text = arg2
		Part_upvr.Velocity = Vector3.new(math.random() * 2 - 1, 5, math.random() * 2 - 1) * 8
		TweenService_upvr:Create(clone.TextLabel, TweenInfo.new(1), {
			TextTransparency = 1;
			TextStrokeTransparency = 1;
		}):Play()
		task.delay(1, function() -- Line 49
			--[[ Upvalues[1]:
				[1]: Part_upvr (readonly)
			]]
			if Part_upvr and Part_upvr.Parent then
				Part_upvr:Destroy()
			end
		end)
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local LocalPlayer_upvr = game.Players.LocalPlayer
function Attack() -- Line 55
	--[[ Upvalues[6]:
		[1]: CoreUtil_upvr (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: LocalPlayer_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: tbl_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 79 start (CF ANALYSIS FAILED)
	local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(tbl_upvr_2.PlayerController.Inventory, tbl_upvr_2.PlayerController.EquippedIndex)
	if not any_GetSlotFromIndex_result1 then return end
	if not any_RequireDefinitions_result1_upvr.Tool[any_GetSlotFromIndex_result1.Id] then return end
	local Character = LocalPlayer_upvr.Character
	if not Character then return end
	if not Character:FindFirstChild("Humanoid") then return end
	if not Character:FindFirstChild("HumanoidRootPart") then return end
	local any_ItemHasEnchantment_result1 = CoreUtil_upvr:ItemHasEnchantment(any_GetSlotFromIndex_result1, "Giant")
	local var18 = CoreUtil_upvr
	local AttackRadius = var18.AttackRadius
	if any_ItemHasEnchantment_result1 or CoreUtil_upvr:ItemHasEnchantment(any_GetSlotFromIndex_result1, "Tiny") then
		if any_ItemHasEnchantment_result1 then
			var18 = 1.5
		else
			var18 = 0.5
		end
		AttackRadius *= var18
	end
	local OverlapParams_new_result1 = OverlapParams.new()
	OverlapParams_new_result1.FilterType = Enum.RaycastFilterType.Exclude
	OverlapParams_new_result1.FilterDescendantsInstances = {LocalPlayer_upvr.Character}
	local pairs_result1, pairs_result2, pairs_result3 = pairs(workspace:GetPartBoundsInRadius(LocalPlayer_upvr.Character.PrimaryPart.Position, AttackRadius, OverlapParams_new_result1))
	-- KONSTANTERROR: [0] 1. Error Block 79 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [135] 100. Error Block 26 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [135] 100. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [100] 74. Error Block 19 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [135.16]
	-- KONSTANTERROR: [100] 74. Error Block 19 end (CF ANALYSIS FAILED)
end
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 142
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr_2 (readonly)
	]]
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.MobService = Knit_upvr.GetService("MobService")
	tbl_upvr_2.BlockController = Knit_upvr.GetController("BlockController")
	tbl_upvr_2.PlayerController = Knit_upvr.GetController("PlayerController")
end
return any_CreateController_result1_upvr

Script name: UIController
  - Script: 


local Players_upvr = game:GetService("Players")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local UserInputService_upvr = game:GetService("UserInputService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "UIController";
})
any_CreateController_result1_upvr.ShiftDown = false
any_CreateController_result1_upvr.Processing = true
any_CreateController_result1_upvr.ButtonNoises = {}
local var9_upvw
local LocalPlayer_upvr_2 = Players_upvr.LocalPlayer
local tbl_7_upvr = {}
any_CreateController_result1_upvr.ToolBarDefs = {}
any_CreateController_result1_upvr.BackpackDefs = {}
any_CreateController_result1_upvr.Modules = {}
local var12_upvw
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local RunService_upvr = game:GetService("RunService")
local mouse_upvr = LocalPlayer_upvr_2:GetMouse()
function any_CreateController_result1_upvr.UpdateItemDisplay(arg1, arg2, arg3) -- Line 36
	--[[ Upvalues[7]:
		[1]: var9_upvw (read and write)
		[2]: var12_upvw (read and write)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
		[5]: CoreUtil_upvr (readonly)
		[6]: RunService_upvr (readonly)
		[7]: mouse_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local ItemTooltip_2_upvr = var9_upvw.ItemTooltip
	if not var12_upvw then
		var12_upvw = ItemTooltip_2_upvr.Size
	end
	arg2.ImageLabel.Image = ""
	for _, v in pairs(arg2.ViewportFrame:GetChildren()) do
		if v:IsA("BasePart") or v:IsA("Model") or v:IsA("Camera") then
			v:Destroy()
		end
	end
	if arg2.ImageLabel:FindFirstChild("EnchantmentFrame") then
		arg2.ImageLabel.EnchantmentFrame:Destroy()
	end
	local var36
	if arg2:FindFirstChild("Empty") then
		if not arg3 then
			var36 = true
		else
			var36 = false
		end
		arg2.Empty.Visible = var36
	end
	if not arg3 then
		if arg2:FindFirstChild("Stack") then
			var36 = false
			arg2.Stack.Visible = var36
		end
	else
		local var37_upvr = any_RequireDefinitions_result1_upvr[arg3.Catagory][arg3.Id]
		if type(var37_upvr.DisplayImage) == "string" then
			arg2.ImageLabel.Image = var37_upvr.DisplayImage
		else
			if not arg3.Catagory or not ReplicatedStorage_upvr.Prefabs:FindFirstChild(arg3.Catagory) then return end
			local SOME_2 = ReplicatedStorage_upvr.Prefabs[arg3.Catagory]:FindFirstChild(arg3.Id)
			if not SOME_2 then return end
			arg2.ViewportFrame.CurrentCamera = Instance.new("Camera", arg2.ViewportFrame)
			local clone_5 = SOME_2:Clone()
			clone_5.Parent = arg2.ViewportFrame
			if clone_5:IsA("Model") then
				clone_5:SetPrimaryPartCFrame(CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(0.3490658503988659, (math.pi/2), 0.17453292519943295))
				arg2.ViewportFrame.CurrentCamera.CFrame = CFrame.lookAt(clone_5.PrimaryPart.Position + Vector3.new(4, 4, 0), clone_5.PrimaryPart.Position)
			else
				clone_5.CFrame = CFrame.new(0, 0, 0) * CFrame.fromEulerAnglesXYZ(0.3490658503988659, (math.pi/2), 0.17453292519943295)
				arg2.ViewportFrame.CurrentCamera.CFrame = CFrame.lookAt(clone_5.Position + Vector3.new(4, 4, 0), clone_5.Position)
			end
		end
		if arg2:FindFirstChild("Stack") then
			if 1 < arg3.Stack then
				arg2.Stack.Text = tostring(arg3.Stack)
				arg2.Stack.Visible = true
			else
				arg2.Stack.Visible = false
			end
		end
		if arg3.Enchantments and arg3.Enchantments.RolledEnchantments then
			local Frame = Instance.new("Frame")
			Frame.Parent = arg2.ImageLabel
			Frame.Size = UDim2.fromScale(0.95, 0.225)
			Frame.AnchorPoint = Vector2.new(0.5, 0)
			Frame.Position = UDim2.fromScale(0.5, 0.05)
			Frame.BackgroundTransparency = 1
			Frame.ZIndex = 5
			Frame.Name = "EnchantmentFrame"
			local UIListLayout = Instance.new("UIListLayout")
			UIListLayout.FillDirection = Enum.FillDirection.Horizontal
			UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
			UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
			UIListLayout.Parent = Frame
			UIListLayout.Padding = UDim.new(0.066, 0)
			for i_5, _ in pairs(arg3.Enchantments.RolledEnchantments) do
				local ImageLabel = Instance.new("ImageLabel")
				ImageLabel.Parent = Frame
				ImageLabel.Size = UDim2.fromScale(0.225, 1)
				ImageLabel.ImageColor3 = CoreUtil_upvr.EnchantmentInfo[i_5].Color
				ImageLabel.ZIndex = 5
				ImageLabel.Name = i_5
				ImageLabel.Image = "rbxassetid://695499751"
				ImageLabel.BackgroundTransparency = 1
				local _
			end
		end
		local tbl_3_upvr = {}
		table.insert(tbl_3_upvr, arg2.ImageLabel.MouseEnter:Connect(function() -- Line 142
			--[[ Upvalues[6]:
				[1]: arg3 (readonly)
				[2]: CoreUtil_upvr (copied, readonly)
				[3]: ItemTooltip_2_upvr (readonly)
				[4]: var12_upvw (copied, read and write)
				[5]: RunService_upvr (copied, readonly)
				[6]: mouse_upvr (copied, readonly)
			]]
			if not arg3 then
			else
				ItemTooltip_2_upvr.Title.Text = arg3.Id
				ItemTooltip_2_upvr.Details.Text = CoreUtil_upvr:GetDefinitionFromId(arg3.Id).Description or ""
				if arg3.Enchantments and arg3.Enchantments.RolledEnchantments then
					for i_7, v_7 in pairs(arg3.Enchantments.RolledEnchantments) do
						local Color = CoreUtil_upvr.EnchantmentInfo[i_7].Color
						ItemTooltip_2_upvr.Title.Text = "<font color=\"rgb("..string.format("%d,%d,%d", Color.R * 255, Color.G * 255, Color.B * 255)..")\">"..i_7.."</font>"..' '..ItemTooltip_2_upvr.Title.Text
						ItemTooltip_2_upvr.Details.Text = ItemTooltip_2_upvr.Details.Text.." [ENCHANTMENT]: "..v_7
					end
				end
				local string_len_result1 = string.len(ItemTooltip_2_upvr.Details.Text)
				if 60 < string_len_result1 then
					ItemTooltip_2_upvr.Size = var12_upvw + UDim2.fromScale(string_len_result1 * 0.002, 0)
				else
					ItemTooltip_2_upvr.Size = var12_upvw
				end
				ItemTooltip_2_upvr.Visible = true
				while ItemTooltip_2_upvr.Visible and RunService_upvr.RenderStepped:Wait() do
					ItemTooltip_2_upvr.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
				end
			end
		end))
		table.insert(tbl_3_upvr, arg2.ImageLabel.MouseLeave:Connect(function() -- Line 179
			--[[ Upvalues[2]:
				[1]: arg3 (readonly)
				[2]: ItemTooltip_2_upvr (readonly)
			]]
			if arg3 and ItemTooltip_2_upvr.Title.Text:find(arg3.Id) then
				ItemTooltip_2_upvr.Visible = false
			end
		end))
		table.insert(tbl_3_upvr, arg2.ImageLabel:GetPropertyChangedSignal("Image"):Connect(function(arg1_2) -- Line 185
			--[[ Upvalues[2]:
				[1]: var37_upvr (readonly)
				[2]: tbl_3_upvr (readonly)
			]]
			if arg1_2 ~= var37_upvr.DisplayImage then
				for _, v_6 in pairs(tbl_3_upvr) do
					v_6:Disconnect()
				end
			end
		end))
	end
end
function any_CreateController_result1_upvr.WarningMessage(arg1, arg2) -- Line 194
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: var9_upvw (read and write)
		[3]: TweenService_upvr (readonly)
	]]
	local clone_2_upvr = ReplicatedStorage_upvr.Prefabs.UI.Alerts.WarningMessage:Clone()
	clone_2_upvr.Parent = var9_upvw.HUD.WarningsBox
	clone_2_upvr.Text = arg2
	TweenService_upvr:Create(clone_2_upvr, TweenInfo.new(0.2), {
		Size = UDim2.fromScale(1, 0.33);
	}):Play()
	task.delay(6, function() -- Line 202
		--[[ Upvalues[2]:
			[1]: TweenService_upvr (copied, readonly)
			[2]: clone_2_upvr (readonly)
		]]
		local any_Create_result1 = TweenService_upvr:Create(clone_2_upvr, TweenInfo.new(1), {
			TextTransparency = 1;
			TextStrokeTransparency = 1;
		})
		any_Create_result1:Play()
		any_Create_result1.Completed:Wait()
		clone_2_upvr:Destroy()
	end)
end
function any_CreateController_result1_upvr.RareItemEarnedMessage(arg1, arg2, arg3, arg4) -- Line 212
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: var9_upvw (read and write)
		[3]: TweenService_upvr (readonly)
	]]
	local var68 = 0
	local var69 = 0
	local var70 = 0
	if arg3 == "Uncommon" then
		var68 = 0
		var69 = 204
		var70 = 0
	elseif arg3 == "Rare" then
		var68 = 0
		var69 = 255
		var70 = 255
	elseif arg3 == "Epic" then
		var68 = 255
		var69 = 255
		var70 = 0
	elseif arg3 == "Legendary" then
		var68 = 0
		var69 = 0
		var70 = 255
	elseif arg3 == "Mythic" then
		var68 = 255
		var69 = 0
		var70 = 0
	end
	local clone_4_upvr = ReplicatedStorage_upvr.Prefabs.UI.Alerts.RareItemMessage:Clone()
	clone_4_upvr.Parent = var9_upvw.HUD.WarningsBox
	clone_4_upvr.Text = arg2..string.format(" <font color='rgb(%d, %d, %d)'>", var68, var69, var70)..arg3.."</font>".." item: <font color='rgb(255,255,0)'>"..arg4.."</font>!"
	TweenService_upvr:Create(clone_4_upvr, TweenInfo.new(0.2), {
		Size = UDim2.fromScale(1, 0.33);
	}):Play()
	task.delay(6, function() -- Line 236
		--[[ Upvalues[2]:
			[1]: TweenService_upvr (copied, readonly)
			[2]: clone_4_upvr (readonly)
		]]
		local any_Create_result1_2 = TweenService_upvr:Create(clone_4_upvr, TweenInfo.new(1), {
			TextTransparency = 1;
			TextStrokeTransparency = 1;
		})
		any_Create_result1_2:Play()
		any_Create_result1_2.Completed:Wait()
		clone_4_upvr:Destroy()
	end)
end
function any_CreateController_result1_upvr.Notification(arg1, arg2, arg3) -- Line 245
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
		[3]: var9_upvw (read and write)
		[4]: TweenService_upvr (readonly)
	]]
	if arg2 == "Level" then
		local clone = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.LevelTemp:Clone()
		clone.Main.Details.Title.Text = arg3.Catagory
		clone.Main.Details.SubCat.Text = arg3.Definition.Id.." UNLOCKED"
		any_CreateController_result1_upvr:UpdateItemDisplay(clone.Main.Details.Item, arg3.Definition)
	elseif arg2 == "PlayerLevel" then
		local clone_3 = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.PlayerLevelTemp:Clone()
		clone_3.Main.Details.Title.Text = "New Level Earned"
		clone_3.Main.Details.SubCat.Text = "Player".." Lvl "..arg3.LevelEarned
	elseif arg2 == "Gift" then
		workspace.Sound.UI.RecievedGift:Play()
		local clone_6 = ReplicatedStorage_upvr.Prefabs.UI.NotificationTemplates.GiftReceived:Clone()
		clone_6.Main.GiftName.Title.Text = arg3[2]:upper()
		clone_6.Main.Data.SubTitle.Text = "from "..arg3[1]:upper()
	end
	clone_6.Parent = var9_upvw.HUD.Notifications
	TweenService_upvr:Create(clone_6, TweenInfo.new(0.25), {
		Size = UDim2.fromScale(1, 0.2);
	}):Play()
	task.wait(0.25)
	TweenService_upvr:Create(clone_6.Main, TweenInfo.new(0.25), {
		Position = UDim2.fromScale(0, 0);
	}):Play()
	task.wait(3.25)
	TweenService_upvr:Create(clone_6.Main, TweenInfo.new(0.25), {
		Position = UDim2.fromScale(1, 0);
	}):Play()
	task.wait(0.25)
	TweenService_upvr:Create(clone_6, TweenInfo.new(0.25), {
		Size = UDim2.fromScale(0, 0);
	}):Play()
	task.wait(0.25)
	clone_6:Destroy()
end
function any_CreateController_result1_upvr.TeleportUI(arg1, arg2) -- Line 292
	--[[ Upvalues[3]:
		[1]: var9_upvw (read and write)
		[2]: CoreUtil_upvr (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	if arg2 then
		local _ = 0
	else
	end
	if arg2 then
		var9_upvw.TeleportLoad.Visible = true
	end
	local tbl = {"rbxassetid://136221297607101", "rbxassetid://95153176556549", "rbxassetid://131416737565810", "rbxassetid://91565459811987", "rbxassetid://115354466163250", "rbxassetid://107682877629212", "rbxassetid://113329646531178", "rbxassetid://76143816516289", "rbxassetid://85863130967708"}
	local TeleportUITips = CoreUtil_upvr.TeleportUITips
	var9_upvw.TeleportLoad.Quote.TextLabel.Text = TeleportUITips[math.random(1, #TeleportUITips)]
	var9_upvw.TeleportLoad.ImageLabel.Image = tbl[math.random(1, #tbl)]
	TweenService_upvr:Create(var9_upvw.TeleportLoad.Quote, TweenInfo.new(1), {
		BackgroundTransparency = 1;
	}):Play()
	local tbl_2 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_2.TextTransparency = 1
	TweenService_upvr:Create(var9_upvw.TeleportLoad.Quote.TextLabel, TweenInfo.new(1), tbl_2):Play()
	local tbl_8 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_8.TextTransparency = 1
	TweenService_upvr:Create(var9_upvw.TeleportLoad.Title.TextLabel, TweenInfo.new(1), tbl_8):Play()
	local tbl_6 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_6.ImageTransparency = 1
	TweenService_upvr:Create(var9_upvw.TeleportLoad.ImageLabel, TweenInfo.new(1), tbl_6):Play()
	local tbl_4 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	tbl_4.ImageTransparency = 1
	TweenService_upvr:Create(var9_upvw.TeleportLoad.Logo, TweenInfo.new(1), tbl_4):Play()
	if not arg2 then
		TweenService_upvr:Create(var9_upvw.TeleportLoad.Progress.TextLabel, TweenInfo.new(1), {
			TextTransparency = 1;
		}):Play()
		task.delay(1, function() -- Line 331
			--[[ Upvalues[1]:
				[1]: var9_upvw (copied, read and write)
			]]
			var9_upvw.TeleportLoad.Visible = false
		end)
	else
		coroutine.wrap(function() -- Line 333
			--[[ Upvalues[2]:
				[1]: var9_upvw (copied, read and write)
				[2]: TweenService_upvr (copied, readonly)
			]]
			local var94 = 1
			while var9_upvw.TeleportLoad.Visible do
				TweenService_upvr:Create(var9_upvw.TeleportLoad.LOADANIM['1'], TweenInfo.new(1), {
					BackgroundTransparency = var94;
				}):Play()
				task.wait(0.33)
				TweenService_upvr:Create(var9_upvw.TeleportLoad.LOADANIM['2'], TweenInfo.new(1), {
					BackgroundTransparency = var94;
				}):Play()
				task.wait(0.33)
				TweenService_upvr:Create(var9_upvw.TeleportLoad.LOADANIM['3'], TweenInfo.new(1), {
					BackgroundTransparency = var94;
				}):Play()
				local wait = task.wait
				wait(0.33)
				if var94 == 1 then
					wait = 0
				else
					wait = 1
				end
			end
		end)()
	end
end
local BindableEvent_upvr = Instance.new("BindableEvent")
local var100_upvw = false
local function coinsAddedAnimation_upvr(arg1) -- Line 355, Named "coinsAddedAnimation"
	--[[ Upvalues[5]:
		[1]: BindableEvent_upvr (readonly)
		[2]: var100_upvw (read and write)
		[3]: var9_upvw (read and write)
		[4]: TweenService_upvr (readonly)
		[5]: tbl_7_upvr (readonly)
	]]
	BindableEvent_upvr:Fire()
	task.wait()
	var100_upvw = true
	local Display = var9_upvw.HUD.CoinCounter.Main.Display
	TweenService_upvr:Create(Display, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {
		Size = UDim2.new(0.7, 10, 0.8, 10);
	}):Play()
	local var103_upvw = false
	local function _(arg1_3, arg2, arg3) -- Line 371, Named "Counter"
		local os_clock_result1_upvr_2 = os.clock()
		return function() -- Line 374
			--[[ Upvalues[5]:
				[1]: os_clock_result1_upvr_2 (readonly)
				[2]: arg1_3 (read and write)
				[3]: arg1_3 (readonly)
				[4]: arg2 (readonly)
				[5]: arg3 (readonly)
			]]
			arg1_3 += (arg2 - arg1_3) * math.min(1, (os.clock() - os_clock_result1_upvr_2) / arg3)
			return arg1_3
		end
	end
	local os_clock_result1_upvr = os.clock()
	local Coins_upvr = tbl_7_upvr.PlayerController.Coins
	local const_number_upvr = 1
	local function _() -- Line 374
		--[[ Upvalues[5]:
			[1]: os_clock_result1_upvr (readonly)
			[2]: arg1 (read and write)
			[3]: arg1 (readonly)
			[4]: Coins_upvr (readonly)
			[5]: const_number_upvr (readonly)
		]]
		arg1 += (Coins_upvr - arg1) * math.min(1, (os.clock() - os_clock_result1_upvr) / const_number_upvr)
		return arg1
	end
	repeat
		if var103_upvw then break end
		Coins_upvr = task.wait()
		if not Coins_upvr then break end
		Coins_upvr = _()
		local var111 = Coins_upvr
		os_clock_result1_upvr = math.floor(var111 + 0.5)
		Display.Text = os_clock_result1_upvr
		os_clock_result1_upvr = tbl_7_upvr.PlayerController.Coins
	until var111 == os_clock_result1_upvr
	var111 = BindableEvent_upvr.Event:Connect(function() -- Line 367
		--[[ Upvalues[1]:
			[1]: var103_upvw (read and write)
		]]
		var103_upvw = true
	end):Disconnect
	var111()
	var111 = TweenService_upvr
	local _ = {
		Size = UDim2.new(0.7, 0, 0.8, 0);
	}
	var111 = var111:Create(Display, TweenInfo.new(0.1, Enum.EasingStyle.Linear), _):Play
	var111()
	var111 = false
	var100_upvw = var111
end
function any_CreateController_result1_upvr.UpdateCoinCounts(arg1, arg2) -- Line 420
	--[[ Upvalues[3]:
		[1]: var9_upvw (read and write)
		[2]: tbl_7_upvr (readonly)
		[3]: coinsAddedAnimation_upvr (readonly)
	]]
	var9_upvw.HUD.CoinCounter.Main.Display.Text = tbl_7_upvr.PlayerController.Coins
	var9_upvw.Shop.Titles.CoinCount.TextLabel.Text = tbl_7_upvr.PlayerController.Coins
	var9_upvw.Mailbox.Header.CoinCount.TextLabel.Text = tbl_7_upvr.PlayerController.Coins
	var9_upvw.DailyRewards.CoinCount.TextLabel.Text = tbl_7_upvr.PlayerController.Coins
	local var113_upvw = false
	if arg2 and not var113_upvw then
		task.spawn(function() -- Line 427
			--[[ Upvalues[3]:
				[1]: var113_upvw (read and write)
				[2]: coinsAddedAnimation_upvr (copied, readonly)
				[3]: arg2 (readonly)
			]]
			var113_upvw = true
			coinsAddedAnimation_upvr(arg2)
			task.wait(1)
			var113_upvw = false
		end)
	end
end
local GamepadService_upvr = game:GetService("GamepadService")
function any_CreateController_result1_upvr.ToggleUI(arg1, arg2, arg3, ...) -- Line 437
	--[[ Upvalues[4]:
		[1]: any_CreateController_result1_upvr (readonly)
		[2]: var9_upvw (read and write)
		[3]: UserInputService_upvr (readonly)
		[4]: GamepadService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 83 start (CF ANALYSIS FAILED)
	if any_CreateController_result1_upvr.Processing then return end
	var9_upvw.HUD.Visible = false
	any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(false)
	any_CreateController_result1_upvr.Modules.ShopHandler:ToggleShop(false, ...)
	any_CreateController_result1_upvr.Modules.CraftingHandler:ToggleCrafting(false, ...)
	any_CreateController_result1_upvr.Modules.StatsHandler:ToggleStats(false)
	any_CreateController_result1_upvr.Modules.StoreHandler:ToggleStore(false, ...)
	any_CreateController_result1_upvr.Modules.SettingsHandler:ToggleSettings(false, ...)
	any_CreateController_result1_upvr.Modules.MailboxHandler:ToggleMailbox(false)
	any_CreateController_result1_upvr.Modules.DailyRewardsHandler:ToggleDailyRewards(false, ...)
	any_CreateController_result1_upvr.Modules.CollectionsHandler:ToggleCollections(false)
	any_CreateController_result1_upvr.Modules.IslandHandler:ToggleIsland(false, ...)
	any_CreateController_result1_upvr.Modules.TeleportHandler:ToggleTeleport(false)
	any_CreateController_result1_upvr.Modules.EnchantingHandler:ToggleEnchanting(false)
	any_CreateController_result1_upvr.Modules.QuestsHandler:ToggleQuestJournal(false)
	local ItemTooltip = var9_upvw.ItemTooltip
	if ItemTooltip.Visible then
		ItemTooltip.Visible = false
	end
	if arg3 and arg2 == "Shop" then
		any_CreateController_result1_upvr.Modules.ShopHandler:ToggleShop(true, ...)
		-- KONSTANTWARNING: GOTO [356] #250
	end
	-- KONSTANTERROR: [0] 1. Error Block 83 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [158] 110. Error Block 79 start (CF ANALYSIS FAILED)
	if arg3 and arg2 == "Inventory" then
		any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true)
	elseif arg3 and arg2 == "Crafting" then
		any_CreateController_result1_upvr.Modules.CraftingHandler:ToggleCrafting(true, ...)
	elseif arg3 and arg2 == "Stats" then
		any_CreateController_result1_upvr.Modules.StatsHandler:ToggleStats(true)
	elseif arg3 and arg2 == "Underling" then
		any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true, "Underling", ...)
	elseif arg3 and arg2 == "Storage" then
		any_CreateController_result1_upvr.Modules.InventoryHandler:ToggleInventory(true, "Storage", ...)
	elseif arg3 and arg2 == "Store" then
		any_CreateController_result1_upvr.Modules.StoreHandler:ToggleStore(true, ...)
	elseif arg3 and arg2 == "Settings" then
		any_CreateController_result1_upvr.Modules.SettingsHandler:ToggleSettings(true, ...)
	elseif arg3 and arg2 == "Mailbox" then
		any_CreateController_result1_upvr.Modules.MailboxHandler:ToggleMailbox(true)
	elseif arg3 and arg2 == "DailyRewards" then
		any_CreateController_result1_upvr.Modules.DailyRewardsHandler:ToggleDailyRewards(true, ...)
	elseif arg3 and arg2 == "Teleport" then
		any_CreateController_result1_upvr.Modules.TeleportHandler:ToggleTeleport(true)
	elseif arg3 and arg2 == "Collections" then
		any_CreateController_result1_upvr.Modules.CollectionsHandler:ToggleCollections(true)
	elseif arg3 and arg2 == "Island" then
		any_CreateController_result1_upvr.Modules.IslandHandler:ToggleIsland(true, ...)
	elseif arg3 and arg2 == "Enchanting" then
		any_CreateController_result1_upvr.Modules.EnchantingHandler:ToggleEnchanting(true, ...)
	elseif arg3 and arg2 == "Quests" then
		any_CreateController_result1_upvr.Modules.QuestsHandler:ToggleQuestJournal(true)
	else
		var9_upvw.HUD.Visible = true
	end
	-- KONSTANTERROR: [158] 110. Error Block 79 end (CF ANALYSIS FAILED)
end
local var117_upvw = 0
function UpdateHealthUI(arg1) -- Line 524
	--[[ Upvalues[4]:
		[1]: LocalPlayer_upvr_2 (readonly)
		[2]: var9_upvw (read and write)
		[3]: var117_upvw (read and write)
		[4]: TweenService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 18 start (CF ANALYSIS FAILED)
	local Humanoid_2 = LocalPlayer_upvr_2.Character.Humanoid
	local Progress = var9_upvw.HUD.HPBar.Progress
	if arg1 / Humanoid_2.MaxHealth == 1 then
		Progress.UIGradient.Color = ColorSequence.new(Color3.new(0, 0.839216, 0.0980392), Color3.new(0.0705882, 0.517647, 0))
		-- KONSTANTWARNING: GOTO [98] #70
	end
	-- KONSTANTERROR: [0] 1. Error Block 18 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 33. Error Block 19 start (CF ANALYSIS FAILED)
	if 0.35 <= arg1 / Humanoid_2.MaxHealth then
		Progress.UIGradient.Color = ColorSequence.new(Color3.new(0.890196, 0.858824, 0), Color3.new(0.635294, 0.552941, 0.141176))
	elseif arg1 / Humanoid_2.MaxHealth < 0.35 then
		Progress.UIGradient.Color = ColorSequence.new(Color3.new(158, 0, 0), Color3.new(0.886275, 0.45098, 0.0156863))
	end
	var9_upvw.HUD.HPBar.Progress.Size = UDim2.fromScale(arg1 / Humanoid_2.MaxHealth, 0.5)
	var9_upvw.HUD.HPBar.HP.Text = tostring(math.ceil(arg1)..'/'..Humanoid_2.MaxHealth).." HP"
	if 1 < var117_upvw - arg1 then
		TweenService_upvr:Create(var9_upvw.RadialBg, TweenInfo.new(0.2, Enum.EasingStyle.Exponential, Enum.EasingDirection.In, 0, true), {
			ImageTransparency = 0.33;
		}):Play()
	end
	var117_upvw = arg1
	-- KONSTANTERROR: [47] 33. Error Block 19 end (CF ANALYSIS FAILED)
end
local function CharAdded_upvr(arg1) -- Line 550, Named "CharAdded"
	local Humanoid = arg1:WaitForChild("Humanoid")
	Humanoid.HealthChanged:Connect(UpdateHealthUI)
	UpdateHealthUI(Humanoid.Health)
end
local function ChatMessage_upvr(arg1, arg2) -- Line 557, Named "ChatMessage"
	--[[ Upvalues[1]:
		[1]: tbl_7_upvr (readonly)
	]]
	if not tbl_7_upvr.PlayerController.Settings.General.ChatNotifications then
	else
		game:GetService("TextChatService"):WaitForChild("TextChannels").RBXSystem:DisplaySystemMessage(string.format("<font color=\"rgb(%d, %d, %d)\">", math.floor(arg1.R * 255), math.floor(arg1.G * 255), math.floor(arg1.B * 255)).."[SERVER] : "..arg2.."</font>")
	end
end
local function InitialiseBasicUISFX_upvr() -- Line 575, Named "InitialiseBasicUISFX"
	--[[ Upvalues[2]:
		[1]: var9_upvw (read and write)
		[2]: any_CreateController_result1_upvr (readonly)
	]]
	for _, v_2_upvr in pairs(var9_upvw:GetDescendants()) do
		if v_2_upvr:IsA("TextButton") or v_2_upvr:IsA("ImageButton") then
			if any_CreateController_result1_upvr.ButtonNoises[v_2_upvr] then
				v_2_upvr.MouseButton1Up:Connect(function() -- Line 582
					--[[ Upvalues[2]:
						[1]: any_CreateController_result1_upvr (copied, readonly)
						[2]: v_2_upvr (readonly)
					]]
					any_CreateController_result1_upvr.ButtonNoises[v_2_upvr]:Play()
				end)
			else
				v_2_upvr.MouseButton1Up:Connect(function() -- Line 588
					--[[ Upvalues[2]:
						[1]: any_CreateController_result1_upvr (copied, readonly)
						[2]: v_2_upvr (readonly)
					]]
					local var129
					local function INLINED() -- Internal function, doesn't exist in bytecode
						var129 = workspace.Sound.UI.ButtonClick1
						return var129
					end
					if math.random(1, 2) ~= 1 or not INLINED() then
						var129 = workspace.Sound.UI.ButtonClick2
					end
					any_CreateController_result1_upvr.ButtonNoises[v_2_upvr] = var129
					var129:Play()
				end)
			end
		end
	end
end
local Icon_upvr = require(ReplicatedStorage_upvr.Packages.TopbarPlus.Icon)
local function setupIcons_upvr() -- Line 599, Named "setupIcons"
	--[[ Upvalues[3]:
		[1]: Icon_upvr (readonly)
		[2]: any_CreateController_result1_upvr (readonly)
		[3]: var9_upvw (read and write)
	]]
	local any_setImageScale_result1_upvr = Icon_upvr.new():setName("SettingsIcon"):setImage("rbxassetid://130913120655655"):setImageScale(0.8)
	local any_setImageRatio_result1_upvr = Icon_upvr.new():setName("DailyRewardsIcon"):setImage("rbxassetid://109220531516536"):setImageScale(0.8):setImageRatio(0.8)
	any_setImageScale_result1_upvr.toggled:Connect(function(arg1) -- Line 612
		--[[ Upvalues[2]:
			[1]: any_setImageRatio_result1_upvr (readonly)
			[2]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_setImageRatio_result1_upvr:deselect()
		any_CreateController_result1_upvr:ToggleUI("Settings", arg1)
	end)
	var9_upvw.Settings.Close.MouseButton1Up:Connect(function() -- Line 617
		--[[ Upvalues[2]:
			[1]: any_setImageScale_result1_upvr (readonly)
			[2]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_setImageScale_result1_upvr:deselect()
		any_CreateController_result1_upvr:ToggleUI("Settings", false)
	end)
	any_setImageRatio_result1_upvr.toggled:Connect(function(arg1) -- Line 622
		--[[ Upvalues[2]:
			[1]: any_setImageScale_result1_upvr (readonly)
			[2]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_setImageScale_result1_upvr:deselect()
		any_CreateController_result1_upvr:ToggleUI("DailyRewards", arg1)
	end)
	var9_upvw:WaitForChild("DailyRewards"):WaitForChild("CloseButton").MouseButton1Up:Connect(function() -- Line 629
		--[[ Upvalues[2]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
			[2]: any_setImageRatio_result1_upvr (readonly)
		]]
		if any_CreateController_result1_upvr.Processing then
		else
			any_setImageRatio_result1_upvr:deselect()
			any_CreateController_result1_upvr:ToggleUI("DailyRewards", false)
		end
	end)
end
function any_CreateController_result1_upvr.KnitInit(arg1) -- Line 637
	--[[ Upvalues[5]:
		[1]: var9_upvw (read and write)
		[2]: LocalPlayer_upvr_2 (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
		[4]: TweenService_upvr (readonly)
		[5]: tbl_7_upvr (readonly)
	]]
	var9_upvw = game.StarterGui:WaitForChild("MainGui")
	var9_upvw.Parent = LocalPlayer_upvr_2:WaitForChild("PlayerGui")
	LocalPlayer_upvr_2.PlayerGui.ChildAdded:Connect(function(arg1_4) -- Line 642
		if arg1_4.Name == "MainGui" then
			arg1_4:Destroy()
		end
	end)
	any_CreateController_result1_upvr:TeleportUI(true)
	coroutine.wrap(function() -- Line 645
		--[[ Upvalues[3]:
			[1]: TweenService_upvr (copied, readonly)
			[2]: var9_upvw (copied, read and write)
			[3]: tbl_7_upvr (copied, readonly)
		]]
		TweenService_upvr:Create(var9_upvw.TeleportLoad.Progress.TextLabel, TweenInfo.new(1), {
			TextTransparency = 0;
		}):Play()
		while not (not tbl_7_upvr.BlockController or tbl_7_upvr.BlockController.IslandInitialised) and wait(1) do
			var9_upvw.TeleportLoad.Progress.TextLabel.Text = tostring((#workspace.Island:GetChildren()).." Blocks Loaded")
		end
	end)()
end
local tbl_upvr = {}
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 654
	--[[ Upvalues[13]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_7_upvr (readonly)
		[4]: ChatMessage_upvr (readonly)
		[5]: any_CreateController_result1_upvr (readonly)
		[6]: var9_upvw (read and write)
		[7]: LocalPlayer_upvr_2 (readonly)
		[8]: CharAdded_upvr (readonly)
		[9]: UserInputService_upvr (readonly)
		[10]: InitialiseBasicUISFX_upvr (readonly)
		[11]: Players_upvr (readonly)
		[12]: CoreUtil_upvr (readonly)
		[13]: setupIcons_upvr (readonly)
	]]
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.MarketService = Knit_upvr.GetService("MarketService")
	tbl_upvr.DataHandlerService = Knit_upvr.GetService("DataHandlerService")
	tbl_upvr.TaskService = Knit_upvr.GetService("TaskService")
	tbl_7_upvr.PlayerController = Knit_upvr.GetController("PlayerController")
	tbl_7_upvr.BlockController = Knit_upvr.GetController("BlockController")
	tbl_upvr.DataHandlerService.ChatMessage:Connect(ChatMessage_upvr)
	tbl_upvr.PlayerService.Warn:Connect(function(arg1_5) -- Line 666
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr:WarningMessage(arg1_5)
	end)
	tbl_upvr.PlayerService.RareItemEarned:Connect(function(arg1_6, arg2, arg3) -- Line 669
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr:RareItemEarnedMessage(arg1_6, arg2, arg3)
	end)
	tbl_upvr.MarketService.GiftNotif:Connect(function(arg1_7, arg2) -- Line 673
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		local tbl_5 = {}
		tbl_5[1] = arg1_7
		tbl_5[2] = arg2
		any_CreateController_result1_upvr:Notification("Gift", tbl_5)
	end)
	for i_3, v_3_upvr in pairs(workspace.Underlings:GetChildren()) do
		v_3_upvr:WaitForChild("HumanoidRootPart"):WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 678
			--[[ Upvalues[2]:
				[1]: any_CreateController_result1_upvr (copied, readonly)
				[2]: v_3_upvr (readonly)
			]]
			any_CreateController_result1_upvr:ToggleUI("Underling", true, v_3_upvr)
		end)
	end
	workspace.Underlings.ChildAdded:Connect(function(arg1_8) -- Line 677, Named "RigUnderling"
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		arg1_8:WaitForChild("HumanoidRootPart"):WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 678
			--[[ Upvalues[2]:
				[1]: any_CreateController_result1_upvr (copied, readonly)
				[2]: arg1_8 (readonly)
			]]
			any_CreateController_result1_upvr:ToggleUI("Underling", true, arg1_8)
		end)
	end)
	var9_upvw.ItemDetails.Title:GetPropertyChangedSignal("TextBounds"):Connect(function() -- Line 686
		--[[ Upvalues[1]:
			[1]: var9_upvw (copied, read and write)
		]]
		local TextBounds = var9_upvw.ItemDetails.Title.TextBounds
		var9_upvw.ItemDetails.Size = UDim2.new(0, TextBounds.X + 10, 0, TextBounds.Y + 10)
	end)
	LocalPlayer_upvr_2.CharacterAdded:Connect(CharAdded_upvr)
	if LocalPlayer_upvr_2.Character then
		i_3 = "Humanoid"
		local SOME = LocalPlayer_upvr_2.Character:WaitForChild(i_3)
		v_3_upvr = UpdateHealthUI
		SOME.HealthChanged:Connect(v_3_upvr)
		i_3 = SOME.Health
		UpdateHealthUI(i_3)
	end
	any_CreateController_result1_upvr.Modules.InventoryHandler = require(script.InventoryHandler)
	any_CreateController_result1_upvr.Modules.CraftingHandler = require(script.CraftingHandler)
	any_CreateController_result1_upvr.Modules.StatsHandler = require(script.StatsHandler)
	any_CreateController_result1_upvr.Modules.ShopHandler = require(script.ShopHandler)
	any_CreateController_result1_upvr.Modules.StoreHandler = require(script.StoreHandler)
	any_CreateController_result1_upvr.Modules.TaskHandler = require(script.TaskHandler)
	any_CreateController_result1_upvr.Modules.SettingsHandler = require(script.SettingsHandler)
	any_CreateController_result1_upvr.Modules.IslandHandler = require(script.IslandHandler)
	any_CreateController_result1_upvr.Modules.MailboxHandler = require(script.MailboxHandler)
	any_CreateController_result1_upvr.Modules.DailyRewardsHandler = require(script.DailyRewardsHandler)
	any_CreateController_result1_upvr.Modules.CollectionsHandler = require(script.CollectionsHandler)
	any_CreateController_result1_upvr.Modules.TeleportHandler = require(script.TeleportHandler)
	any_CreateController_result1_upvr.Modules.PopUpHandler = require(script.PopUpHandler)
	any_CreateController_result1_upvr.Modules.EffectsHandler = require(script.EffectsHandler)
	any_CreateController_result1_upvr.Modules.EnchantingHandler = require(script.EnchantingHandler)
	any_CreateController_result1_upvr.Modules.QuestsHandler = require(script.QuestsHandler)
	UserInputService_upvr.InputBegan:Connect(function(arg1_9) -- Line 713
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if arg1_9.KeyCode == Enum.KeyCode.LeftShift or arg1_9.KeyCode == Enum.KeyCode.ButtonL3 then
			any_CreateController_result1_upvr.ShiftDown = true
		end
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_10) -- Line 717
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		if arg1_10.KeyCode == Enum.KeyCode.LeftShift or arg1_10.KeyCode == Enum.KeyCode.ButtonL3 then
			any_CreateController_result1_upvr.ShiftDown = false
		end
	end)
	local LocalPlayer_upvr = game.Players.LocalPlayer
	UserInputService_upvr.InputEnded:Connect(function(arg1_11) -- Line 724
		--[[ Upvalues[1]:
			[1]: LocalPlayer_upvr (readonly)
		]]
		if arg1_11.KeyCode.Name == "F2" then
			if LocalPlayer_upvr.PlayerGui.MainGui.Enabled then
				LocalPlayer_upvr.PlayerGui.MainGui.Enabled = false
				return
			end
			LocalPlayer_upvr.PlayerGui.MainGui.Enabled = true
		end
	end)
	tbl_upvr.PlayerService.Teleporting:Connect(function() -- Line 734
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr:TeleportUI(true)
	end)
	tbl_upvr.PlayerService.DailyRewardAvailable:Connect(function() -- Line 738
		--[[ Upvalues[1]:
			[1]: any_CreateController_result1_upvr (copied, readonly)
		]]
		any_CreateController_result1_upvr.Modules.DailyRewardsHandler:ToggleDailyRewards(true)
	end)
	InitialiseBasicUISFX_upvr()
	any_CreateController_result1_upvr.Processing = false
	local MouseLockController = Players_upvr.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("CameraModule"):WaitForChild("MouseLockController")
	if MouseLockController:FindFirstChild("BoundKeys") then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		MouseLockController:FindFirstChild("BoundKeys").Value = "LeftControl,RightControl"
	else
		local StringValue = Instance.new("StringValue")
		StringValue.Name = "BoundKeys"
		StringValue.Value = "LeftControl,RightControl"
		StringValue.Parent = MouseLockController
	end
	task.spawn(function() -- Line 763
		--[[ Upvalues[4]:
			[1]: tbl_upvr (copied, readonly)
			[2]: var9_upvw (copied, read and write)
			[3]: CoreUtil_upvr (copied, readonly)
			[4]: tbl_7_upvr (copied, readonly)
		]]
		local _, any_await_result2 = tbl_upvr.TaskService:CompletedTasks():andThen():await()
		for _, v_4 in pairs(any_await_result2) do
			if v_4.Id == "Block by Block" then
				var9_upvw.Teleport.Grid.ButtonContainer.Citadel.Shader.Visible = false
			elseif v_4.Id == "Upgrades people Upgrades" then
				var9_upvw.Teleport.Grid.ButtonContainer.Mines.Shader.Visible = false
			elseif v_4.Id == "Slime Slayer" then
				var9_upvw.Teleport.Grid.ButtonContainer.Forest.Shader.Visible = false
			end
		end
		if 5 <= CoreUtil_upvr:PlayerLevelFromXP(tbl_7_upvr.PlayerController.Masteries.Overall) then
			var9_upvw.Teleport.Grid.ButtonContainer.Marketplace.Shader.Visible = false
		end
	end)
	setupIcons_upvr()
end
return any_CreateController_result1_upvr

Script name: InventoryHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local InventoryService_upvr = Knit.GetService("InventoryService")
local any_GetController_result1_upvr_3 = Knit.GetController("PlayerController")
local any_GetController_result1_upvr_2 = Knit.GetController("UIController")
local any_GetController_result1_upvr = Knit.GetController("BlockController")
local module_upvr = {
	InventorySpace = 0;
	FocusedStorages = {};
	CollectionUIObjects = {};
}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local Main = MainGui_upvr:WaitForChild("Inventory"):WaitForChild("Main")
local TabsBG = Main:WaitForChild("TabsBG")
local TabsNavigation_upvr = TabsBG:WaitForChild("TabsNavigation")
local Color3_fromRGB_result1_upvr_3 = Color3.fromRGB(8, 190, 54)
local Color3_fromRGB_result1_upvr_4 = Color3.fromRGB(100, 100, 100)
local tbl_4_upvr = {}
local tbl_5_upvr = {}
function InitialiseToolBar() -- Line 60
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: tbl_5_upvr (readonly)
	]]
	local ToolBar = MainGui_upvr:WaitForChild("HUD"):WaitForChild("ToolBar")
	for i = 1, 9 do
		table.insert(any_GetController_result1_upvr_2.ToolBarDefs, tbl_5_upvr.ToolBar.new(i, ToolBar:FindFirstChild(i)))
	end
end
function InitialiseBackpack() -- Line 68
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: tbl_5_upvr (readonly)
	]]
	for i_2 = 1, module_upvr.InventorySpace do
		table.insert(any_GetController_result1_upvr_2.BackpackDefs, tbl_5_upvr.Backpack.new(i_2))
	end
end
function UpdateSearch() -- Line 74
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
	]]
	local string_lower_result1 = string.lower(MainGui_upvr.Inventory.Main.SearchBG.SearchBar.Text)
	for _, v in pairs(any_GetController_result1_upvr_2.BackpackDefs) do
		local var30 = 9
		if v.Index > var30 then
			if v.Item then
				local var31 = false
				if string_lower_result1 ~= "" then
					var31 = not string.find(string.lower(v.Item.Id), string_lower_result1)
				end
				var30 = not var31
				v.UI.Visible = var30
			else
				if string_lower_result1 ~= "" then
					var30 = false
				else
					var30 = true
				end
				v.UI.Visible = var30
			end
		end
	end
end
function UpdateToolBar(arg1, arg2) -- Line 86
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr_2 (readonly)
	]]
	any_GetController_result1_upvr_2.ToolBarDefs[arg1]:UpdateItem(arg2)
end
function UpdateBackpack(arg1, arg2) -- Line 91
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr_2 (readonly)
	]]
	any_GetController_result1_upvr_2.BackpackDefs[arg1]:UpdateItem(arg2)
end
function UpdateStorageSlot(arg1, arg2) -- Line 96
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: tbl_5_upvr (readonly)
	]]
	local next_result1_2 = next(module_upvr.FocusedStorages)
	local var33
	if next_result1_2 == "Underling" then
	elseif next_result1_2 == "Storage" then
		var33 = tbl_5_upvr.Storages.InventoryObjects[arg1]
	end
	var33:UpdateItem(arg2)
end
function UpdateStorage(arg1, arg2) -- Line 111
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: tbl_5_upvr (readonly)
	]]
	if not arg1 or not arg2 then
	else
		local var36 = module_upvr.FocusedStorages[arg1]
		if var36 then
			local Storage = var36.Data.Storage
		end
		local var38 = var36
		if var38 then
			var38 = var36.Data.StorageCap
		end
		for i_16 = 1, var38 do
			local any_GetSlotFromIndex_result1_3 = CoreUtil_upvr:GetSlotFromIndex(arg2.Data.Storage, i_16)
			if any_GetSlotFromIndex_result1_3 or CoreUtil_upvr:GetSlotFromIndex(Storage, i_16) then
				UpdateStorageSlot(i_16, any_GetSlotFromIndex_result1_3)
			end
		end
		if var36 and Storage then
			i_16 = module_upvr.FocusedStorages
			i_16 = arg2.Data
			i_16[arg1].Data.Storage = i_16.Storage
		end
		i_16 = var36
		tbl_5_upvr.Storages:FilterStorageIndexes(i_16)
	end
end
function UpdateInventory(arg1) -- Line 136
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_3 (readonly)
		[4]: tbl_5_upvr (readonly)
	]]
	for i_4 = 1, module_upvr.InventorySpace do
		local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(arg1, i_4)
		local any_GetSlotFromIndex_result1_2 = CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, i_4)
		if any_GetSlotFromIndex_result1 or any_GetSlotFromIndex_result1_2 then
			if any_GetSlotFromIndex_result1_2 and not any_GetSlotFromIndex_result1 and 0 < i_4 and i_4 < 10 and i_4 == any_GetController_result1_upvr_3.EquippedIndex then
				any_GetController_result1_upvr_3:EquipItem(nil)
			end
			UpdateBackpack(i_4, any_GetSlotFromIndex_result1)
			if 0 < i_4 and i_4 < 10 then
			end
		end
	end
	any_GetController_result1_upvr_3.Inventory = arg1
	if tbl_5_upvr.Storages.StorageOpen then
		tbl_5_upvr.Storages:FilterStorageIndexes(tbl_5_upvr.Storages.StorageOpen)
	end
end
function UpdateInventorySpace(arg1) -- Line 164
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr.InventorySpace = arg1
end
function GetInventoryFromData(arg1) -- Line 168
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: any_GetController_result1_upvr_3 (readonly)
	]]
	if not arg1 or not arg1.Inventory then return end
	local var43 = module_upvr.FocusedStorages[string.split(arg1.Inventory, '&')[1]]
	if not var43 or not var43.Data then
	end
	return {
		Storage = any_GetController_result1_upvr_3.Inventory;
	}
end
function QuickSwap(arg1) -- Line 178
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_3 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 59 start (CF ANALYSIS FAILED)
	local next_result1, next_result2 = next(module_upvr.FocusedStorages)
	if not next_result1 then
		next_result1 = "Inventory"
	end
	local tbl_3 = {}
	if arg1.Inventory == "Inventory" then
		if next_result2 then
			local BehaviourId = next_result2.Data.BehaviourId
			if BehaviourId then
				BehaviourId = CoreUtil_upvr.IndexFilters[next_result2.Data.BehaviourId]
			end
			-- KONSTANTWARNING: GOTO [39] #27
		end
	end
	local var55 = 1
	local var56 = 1
	if next_result1 == "Inventory" then
		if 0 < arg1.Index and arg1.Index < 10 then
			var55 = 10
			var56 = module_upvr.InventorySpace
		else
			var55 = 1
			var56 = 9
		end
	elseif arg1.Inventory == "Inventory" then
		var55 = 1
		var56 = next_result2.Data.StorageCap
	else
		var55 = 1
		var56 = module_upvr.InventorySpace
	end
	if next_result1 == "Inventory" or arg1.Inventory ~= "Inventory" or not next_result1..'&'..next_result2.Index then
	end
	tbl_3.Inventory = "Inventory"
	tbl_3.Index = CoreUtil_upvr:GetFirstFreeInventorySpace(var56, any_GetController_result1_upvr_3.Inventory, {
		Min = var55;
		Max = var56;
	})
	-- KONSTANTERROR: [0] 1. Error Block 59 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [104] 72. Error Block 52 start (CF ANALYSIS FAILED)
	if arg1.Inventory ~= "Inventory" or not any_GetController_result1_upvr_3.Inventory then
	end
	-- KONSTANTERROR: [104] 72. Error Block 52 end (CF ANALYSIS FAILED)
end
function UpdateStorageServer(arg1, arg2, arg3) -- Line 233
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var58 = module_upvr.FocusedStorages[arg1]
	if var58 and var58.Index == arg2 then
		UpdateStorage(arg1, arg3)
	end
end
function SwapBackpackItem(arg1, arg2) -- Line 240
	--[[ Upvalues[5]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: InventoryService_upvr (readonly)
		[5]: any_GetController_result1_upvr_3 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var61
	if var61 ~= game.Players.LocalPlayer then
		var61 = any_GetController_result1_upvr.CollabrativeBuilding
		if not var61 then return end
	end
	local function INLINED_4() -- Internal function, doesn't exist in bytecode
		var61 = next(module_upvr.FocusedStorages)
		return var61
	end
	if arg1.Inventory ~= "Storage" or not INLINED_4() then
		var61 = arg1.Inventory
	end
	arg1.Inventory = var61
	local function INLINED_5() -- Internal function, doesn't exist in bytecode
		var61 = next(module_upvr.FocusedStorages)
		return var61
	end
	if arg2.Inventory ~= "Storage" or not INLINED_5() then
		var61 = arg2.Inventory
	end
	arg2.Inventory = var61
	var61 = module_upvr.FocusedStorages[arg1.Inventory]
	local var62 = module_upvr.FocusedStorages[arg2.Inventory]
	if not var61 or not arg1.Inventory..'&'..var61.Index then
	end
	arg1.Inventory = arg1.Inventory
	if not var62 or not arg2.Inventory..'&'..var62.Index then
	end
	arg2.Inventory = arg2.Inventory
	if arg1.Inventory ~= arg2.Inventory then
	else
	end
	if not CoreUtil_upvr:SwapInventorySlots(true, GetInventoryFromData(arg1), GetInventoryFromData(arg2), arg1.Index, arg2.Index, true) then
	else
		InventoryService_upvr:SwapInventoryIndexes(arg1.Inventory, arg2.Inventory, arg1.Index, arg2.Index)
		UpdateInventory(any_GetController_result1_upvr_3.Inventory)
		UpdateStorage(next(module_upvr.FocusedStorages))
		if arg1.Inventory == "Inventory" and not CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, arg1.Index) then
			UpdateBackpack(arg1.Index, nil)
			if 0 < arg1.Index and arg1.Index < 10 then
				-- KONSTANTWARNING: GOTO [200] #132
			end
		elseif arg1.Inventory ~= "Inventory" and not CoreUtil_upvr:GetSlotFromIndex(var61.Data.Storage, arg1.Index) then
			UpdateStorageSlot(arg1.Index, nil)
		end
		if any_GetController_result1_upvr_3.EquippedIndex == arg1.Index and arg1.Inventory == "Inventory" or any_GetController_result1_upvr_3.EquippedIndex == arg2.Index and arg2.Inventory == "Inventory" then
			any_GetController_result1_upvr_3:EquipItem(CoreUtil_upvr:GetSlotFromIndex(any_GetController_result1_upvr_3.Inventory, any_GetController_result1_upvr_3.EquippedIndex))
		end
	end
end
function CollectionUI(arg1, arg2) -- Line 284
	--[[ Upvalues[5]:
		[1]: module_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: MainGui_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: TweenService_upvr (readonly)
	]]
	local children = workspace.Sound.ItemPickup:GetChildren()
	children[math.random(1, #children)]:Play()
	local var64 = module_upvr.CollectionUIObjects[arg1.Id]
	if var64 then
		var64.Stack += arg2
		var64.UI.Title.Text = tostring("+ "..arg1.Id..' '..var64.Stack)
		var64.Timer = 5
	else
		local tbl = {
			Timer = 5;
		}
		tbl.Stack = arg2
		local var66 = tbl
		module_upvr.CollectionUIObjects[arg1.Id] = var66
		var66.UI = ReplicatedStorage_upvr.Prefabs.UI.CollectionItem:Clone()
		var66.UI.Title.Text = tostring("+ "..arg1.Id..' '..arg2)
		var66.UI.Parent = MainGui_upvr.HUD.LootNotifications
		any_GetController_result1_upvr_2:UpdateItemDisplay(var66.UI, arg1)
		TweenService_upvr:Create(var66.UI, TweenInfo.new(0.2), {
			Size = UDim2.new(0.99, 0, 0, 50);
		}):Play()
		task.wait(0.2)
		TweenService_upvr:Create(var66.UI.ImageLabel, TweenInfo.new(0.2), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var66.UI.ViewportFrame, TweenInfo.new(0.2), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var66.UI.Title, TweenInfo.new(0.2), {
			TextTransparency = 0;
		}):Play()
		TweenService_upvr:Create(var66.UI.Title.UIStroke, TweenInfo.new(0.2), {
			Transparency = 0;
		}):Play()
	end
end
function CollectionCleanUp() -- Line 324
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: TweenService_upvr (readonly)
	]]
	while task.wait(1) do
		for i_5, v_2 in pairs(module_upvr.CollectionUIObjects) do
			v_2.Timer -= 1
			if v_2.Timer == 0 then
				module_upvr.CollectionUIObjects[i_5] = nil
				TweenService_upvr:Create(v_2.UI.ViewportFrame, TweenInfo.new(0.2), {
					ImageTransparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.Title, TweenInfo.new(0.2), {
					TextTransparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.Title.UIStroke, TweenInfo.new(0.2), {
					Transparency = 1;
				}):Play()
				TweenService_upvr:Create(v_2.UI.ImageLabel, TweenInfo.new(0.2), {
					ImageTransparency = 1;
				}):Play()
				task.wait(0.2)
				TweenService_upvr:Create(v_2.UI, TweenInfo.new(0.2), {
					Size = UDim2.new(0, 0, 0, 0);
				}):Play()
				task.wait(0.2)
				v_2.UI:Destroy()
			end
		end
	end
end
function RareItem() -- Line 347
	workspace.Sound.RareItem:Play()
end
function EquipUpdate(arg1) -- Line 352
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr_3 (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	local var86 = false
	if any_GetController_result1_upvr_3.EquippedIndex ~= arg1.Index then
		var86 = arg1.Index
	end
	any_GetController_result1_upvr_3.EquippedIndex = var86
	local pairs_result1_2, pairs_result2_8, pairs_result3_2 = pairs(any_GetController_result1_upvr_2.ToolBarDefs)
	for _, v_3 in pairs_result1_2, pairs_result2_8, pairs_result3_2 do
		if v_3.Index == any_GetController_result1_upvr_3.EquippedIndex then
			TweenService_upvr:Create(v_3.UI, TweenInfo.new(0.1), {
				Size = UDim2.fromScale(0.2, 1.3);
			}):Play()
			v_3.UI.UIStroke.Thickness = 4
		else
			TweenService_upvr:Create(v_3.UI, TweenInfo.new(0.1), {
				Size = UDim2.fromScale(0.111, 1);
			}):Play()
			v_3.UI.UIStroke.Thickness = 1
		end
	end
	pairs_result3_2 = any_GetController_result1_upvr_3.EquippedIndex
	local var92 = pairs_result3_2
	if var92 then
		var92 = arg1.Item
	end
	any_GetController_result1_upvr_3:EquipItem(var92)
end
local tbl_7_upvr = {}
local Streamable_upvr = require(ReplicatedStorage_upvr.Packages.Streamable).Streamable
function module_upvr.InitialiseStorages(arg1) -- Line 372
	--[[ Upvalues[6]:
		[1]: tbl_7_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: Streamable_upvr (readonly)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: InventoryService_upvr (readonly)
	]]
	for i_7 = #tbl_7_upvr, 1, -1 do
		local var96_upvr = tbl_7_upvr[i_7]
		local any_split_result1 = var96_upvr:split('/')
		if not CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr.Blocks, {
			X = tonumber(any_split_result1[1]);
			Y = tonumber(any_split_result1[2]);
			Z = tonumber(any_split_result1[3]);
		}) then
			warn("No Storage Registered")
			return
		end
		local function _(arg1_2, arg2) -- Line 385
			--[[ Upvalues[3]:
				[1]: any_GetController_result1_upvr_2 (copied, readonly)
				[2]: InventoryService_upvr (copied, readonly)
				[3]: var96_upvr (readonly)
			]]
			arg1_2:WaitForChild("ProximityPrompt").Triggered:Connect(function() -- Line 387
				--[[ Upvalues[3]:
					[1]: any_GetController_result1_upvr_2 (copied, readonly)
					[2]: InventoryService_upvr (copied, readonly)
					[3]: var96_upvr (copied, readonly)
				]]
				if any_GetController_result1_upvr_2.Proccessing then
				else
					any_GetController_result1_upvr_2.Proccessing = true
					local _, any_await_result2_4 = InventoryService_upvr:GetStorageData(var96_upvr):andThen():await()
					if not any_await_result2_4 then return end
					any_GetController_result1_upvr_2:ToggleUI("Storage", true, any_await_result2_4, var96_upvr)
					any_GetController_result1_upvr_2.Proccessing = false
				end
			end)
			arg2:Add(function() -- Line 400
				warn("Storage despawned")
			end)
		end
		table.remove(tbl_7_upvr, i_7)
	end
end
local Color3_fromRGB_result1_upvr_2 = Color3.fromRGB(255, 255, 255)
local Color3_fromRGB_result1_upvr = Color3.fromRGB(11, 244, 84)
local function SetTabHighlightsColor_upvr(arg1) -- Line 414, Named "SetTabHighlightsColor"
	--[[ Upvalues[3]:
		[1]: tbl_4_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_2 (readonly)
		[3]: Color3_fromRGB_result1_upvr (readonly)
	]]
	for _, v_4 in pairs(tbl_4_upvr) do
		if v_4:IsA("GuiButton") then
			v_4.UIStroke.Color = Color3_fromRGB_result1_upvr_2
		end
	end
	if arg1 then
		arg1.UIStroke.Color = Color3_fromRGB_result1_upvr
	else
		for _, v_10 in pairs(tbl_4_upvr) do
			if v_10:IsA("GuiButton") and v_10.Text == "All" then
				v_10.UIStroke.Color = Color3_fromRGB_result1_upvr
				return
			end
		end
	end
end
local Backpack_upvr = Main:WaitForChild("Backpack")
function FilterInventory(arg1) -- Line 433
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: Backpack_upvr (readonly)
	]]
	for _, v_5 in pairs(any_GetController_result1_upvr_2.BackpackDefs) do
		if v_5.Index > 9 then
			if arg1 == "All" then
				v_5.UI.Visible = true
			else
				local var125
				if v_5.Item then
					if arg1 == v_5.Item.Catagory then
						var125 = true
					else
						var125 = false
					end
					v_5.UI.Visible = var125
				else
					var125 = false
					v_5.UI.Visible = var125
				end
			end
		end
	end
	Backpack_upvr.ScrollingFrame.CanvasPosition = Vector2.new(0, 0)
end
local Tabs_upvr = TabsBG:WaitForChild("Tabs")
local var127_upvw
function CreateTabs() -- Line 449
	--[[ Upvalues[6]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Tabs_upvr (readonly)
		[4]: var127_upvw (read and write)
		[5]: SetTabHighlightsColor_upvr (readonly)
		[6]: tbl_4_upvr (readonly)
	]]
	for i_10_upvr, v_6 in pairs(CoreUtil_upvr.InventoryLayoutOrder) do
		local clone_upvr = ReplicatedStorage_upvr.Prefabs.UI.InventoryTabTemplate:Clone()
		clone_upvr.LayoutOrder = v_6
		clone_upvr.Name = i_10_upvr
		clone_upvr.Icon.Image = CoreUtil_upvr.InventoryTabsImages[i_10_upvr]
		clone_upvr.Parent = Tabs_upvr
		clone_upvr.MouseButton1Up:Connect(function() -- Line 459
			--[[ Upvalues[4]:
				[1]: var127_upvw (copied, read and write)
				[2]: clone_upvr (readonly)
				[3]: SetTabHighlightsColor_upvr (copied, readonly)
				[4]: i_10_upvr (readonly)
			]]
			var127_upvw = clone_upvr
			SetTabHighlightsColor_upvr(clone_upvr)
			FilterInventory(i_10_upvr)
		end)
		table.insert(tbl_4_upvr, clone_upvr)
		if i_10_upvr == "All" then
			SetTabHighlightsColor_upvr(clone_upvr)
		end
	end
end
function CreateTabPages(arg1, arg2) -- Line 474
	--[[ Upvalues[4]:
		[1]: tbl_4_upvr (readonly)
		[2]: TabsNavigation_upvr (readonly)
		[3]: Color3_fromRGB_result1_upvr_4 (readonly)
		[4]: Color3_fromRGB_result1_upvr_3 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 22 start (CF ANALYSIS FAILED)
	local len = #tbl_4_upvr
	for i_11 = 1, len do
		local _ = {
			button = tbl_4_upvr[i_11];
			pageIndex = math.ceil(i_11 / 10);
		}
	end
	-- KONSTANTERROR: [0] 1. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [25] 21. Error Block 27 start (CF ANALYSIS FAILED)
	for _, v_7 in pairs({}) do
		if v_7.pageIndex == arg1 then
			v_7.button.Visible = true
		else
			v_7.button.Visible = false
		end
	end
	-- KONSTANTERROR: [25] 21. Error Block 27 end (CF ANALYSIS FAILED)
end
function FunctionaliseTabsNavigation() -- Line 521
	--[[ Upvalues[3]:
		[1]: TabsNavigation_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_4 (readonly)
		[3]: Color3_fromRGB_result1_upvr_3 (readonly)
	]]
	local var143_upvw = 1
	TabsNavigation_upvr.Left.MouseButton1Click:Connect(function() -- Line 524
		--[[ Upvalues[4]:
			[1]: var143_upvw (read and write)
			[2]: TabsNavigation_upvr (copied, readonly)
			[3]: Color3_fromRGB_result1_upvr_4 (copied, readonly)
			[4]: Color3_fromRGB_result1_upvr_3 (copied, readonly)
		]]
		var143_upvw -= 1
		if var143_upvw == 1 then
			TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
			TabsNavigation_upvr.Left.Interactable = false
		else
			if var143_upvw < 1 then
				var143_upvw = 1
				TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
				TabsNavigation_upvr.Left.Interactable = false
				return
			end
			TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_3
			TabsNavigation_upvr.Left.Interactable = true
		end
	end)
	TabsNavigation_upvr.Right.MouseButton1Click:Connect(function() -- Line 539
		--[[ Upvalues[3]:
			[1]: var143_upvw (read and write)
			[2]: TabsNavigation_upvr (copied, readonly)
			[3]: Color3_fromRGB_result1_upvr_4 (copied, readonly)
		]]
		var143_upvw += 1
		if 1 < var143_upvw then
			var143_upvw = 1
			TabsNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
			TabsNavigation_upvr.Right.Interactable = false
		end
	end)
	TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
	TabsNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
	TabsNavigation_upvr.Left.Interactable = false
	TabsNavigation_upvr.Right.Interactable = false
end
function module_upvr.ToggleInventory(arg1, arg2, arg3, arg4, arg5) -- Line 554
	--[[ Upvalues[5]:
		[1]: module_upvr (readonly)
		[2]: tbl_5_upvr (readonly)
		[3]: MainGui_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: any_GetController_result1_upvr_3 (readonly)
	]]
	for i_13, _ in pairs(module_upvr.FocusedStorages) do
		module_upvr.FocusedStorages[i_13] = nil
	end
	if not arg2 then
		tbl_5_upvr.Storages.StorageOpen = nil
	else
		UpdateSearch()
	end
	if arg4 then
		i_13 = 0.5
		MainGui_upvr.Inventory.Main.Position = UDim2.fromScale(0.3, i_13)
		any_GetController_result1_upvr_2.Processing = true
		if arg3 == "Underling" then
		elseif arg3 == "Storage" then
			local tbl_6 = {}
			tbl_6.Index = arg5
			tbl_6.Data = arg4
			module_upvr.FocusedStorages.Storage = tbl_6
			i_13 = tbl_6
			tbl_5_upvr.Storages:InitialiseStorageUI(i_13)
		end
		any_GetController_result1_upvr_2.Processing = false
	else
		module_upvr.StorageUIOpen = nil
		if MainGui_upvr.Inventory:FindFirstChild("Storage") then
			MainGui_upvr.Inventory.Storage.Visible = false
		end
		i_13 = 0.5
		MainGui_upvr.Inventory.Main.Position = UDim2.fromScale(0.5, i_13)
	end
	MainGui_upvr.Inventory.Main.Title.Text = "BASIC BACKPACK - "..tostring(#any_GetController_result1_upvr_3.Inventory)..'/'..tostring(module_upvr.InventorySpace)
	MainGui_upvr.Inventory.Visible = arg2
end
tbl_5_upvr.ToolBar = require(script.ToolBar)
tbl_5_upvr.Backpack = require(script.Backpack)
tbl_5_upvr.Storages = require(script.Storages)
game:GetService("ContextActionService"):BindAction("ToggleInventory", function(arg1, arg2) -- Line 614
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr_2:ToggleUI("Inventory", not MainGui_upvr.Inventory.Visible)
	end
end, false, Enum.KeyCode.E, Enum.KeyCode.ButtonY)
MainGui_upvr.HUD.ToolBar.InventoryButton.Button.MouseButton1Up:Connect(function() -- Line 621
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr_2:ToggleUI("Inventory", not MainGui_upvr.Inventory.Visible)
end)
MainGui_upvr.Inventory.Main.Close.MouseButton1Up:Connect(function() -- Line 625
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr_2 (readonly)
	]]
	any_GetController_result1_upvr_2:ToggleUI("Inventory", false)
end)
coroutine.wrap(CollectionCleanUp)()
tbl_5_upvr.ToolBar.EquipUpdate.Event:Connect(EquipUpdate)
tbl_5_upvr.Backpack.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_5_upvr.Backpack.QuickSwapUpdate.Event:Connect(QuickSwap)
tbl_5_upvr.Storages.SwapUpdate.Event:Connect(SwapBackpackItem)
tbl_5_upvr.Storages.QuickSwapUpdate.Event:Connect(QuickSwap)
local any_await_result1, any_await_result2_3 = InventoryService_upvr:GetInventory():andThen():await()
_ = any_await_result1 -- Setting global
any_GetController_result1_upvr_3.Inventory = any_await_result2_3
local any_await_result1_2, any_await_result2_2 = InventoryService_upvr:GetInventorySpace():andThen():await()
_ = any_await_result1_2 -- Setting global
module_upvr.InventorySpace = any_await_result2_2
InventoryService_upvr.InventoryUpdate:Connect(UpdateInventory)
InventoryService_upvr.StorageUpdate:Connect(UpdateStorageServer)
InventoryService_upvr.InventorySpaceUpdate:Connect(UpdateInventorySpace)
InventoryService_upvr.ItemCollected:Connect(CollectionUI)
InventoryService_upvr.RareItem:Connect(RareItem)
MainGui_upvr.Inventory.Main.SearchBG.SearchBar:GetPropertyChangedSignal("Text"):Connect(UpdateSearch)
Knit.GetService("MarketService").InventorySpace:Connect(function(arg1) -- Line 652
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: tbl_5_upvr (readonly)
	]]
	for i_14 = module_upvr.InventorySpace, arg1 do
		table.insert(any_GetController_result1_upvr_2.BackpackDefs, tbl_5_upvr.Backpack.new(i_14))
	end
	module_upvr.InventorySpace = arg1
end)
local var162_upvw = 1
game:GetService("UserInputService").InputBegan:Connect(function(arg1, arg2) -- Line 660
	--[[ Upvalues[2]:
		[1]: var162_upvw (read and write)
		[2]: any_GetController_result1_upvr_2 (readonly)
	]]
	if arg1.KeyCode == Enum.KeyCode.ButtonL1 then
		if var162_upvw <= 1 then
			var162_upvw = 9
		else
			var162_upvw -= 1
		end
		EquipUpdate(any_GetController_result1_upvr_2.ToolBarDefs[var162_upvw])
	elseif arg1.KeyCode == Enum.KeyCode.ButtonR1 then
		if 9 <= var162_upvw then
			var162_upvw = 1
		else
			var162_upvw += 1
		end
		EquipUpdate(any_GetController_result1_upvr_2.ToolBarDefs[var162_upvw])
	end
end)
InitialiseToolBar()
InitialiseBackpack()
UpdateInventory(any_GetController_result1_upvr_3.Inventory)
EquipUpdate(any_GetController_result1_upvr_2.ToolBarDefs[1])
FunctionaliseTabsNavigation()
CreateTabs()
CreateTabPages()
coroutine.wrap(function() -- Line 688
	--[[ Upvalues[4]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: InventoryService_upvr (readonly)
		[3]: tbl_7_upvr (readonly)
		[4]: module_upvr (readonly)
	]]
	repeat
		task.wait()
	until any_GetController_result1_upvr.IslandInitialised == true
	local _, any_await_result2 = InventoryService_upvr:GetStorages():andThen():await()
	for i_15_upvr, _ in pairs(any_await_result2) do
		coroutine.wrap(function() -- Line 693
			--[[ Upvalues[2]:
				[1]: tbl_7_upvr (copied, readonly)
				[2]: i_15_upvr (readonly)
			]]
			table.insert(tbl_7_upvr, i_15_upvr)
		end)()
	end
	InventoryService_upvr.StorageAdded:Connect(function(arg1) -- Line 694
		--[[ Upvalues[1]:
			[1]: tbl_7_upvr (copied, readonly)
		]]
		table.insert(tbl_7_upvr, arg1)
	end)
	repeat
		wait()
	until any_GetController_result1_upvr.IslandInitialised == true
	module_upvr:InitialiseStorages()
end)()
return module_upvr

Script name: ToolBar
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
module_upvr.EquipUpdate = Instance.new("BindableEvent")
local tbl_upvr = {Enum.KeyCode.One, Enum.KeyCode.Two, Enum.KeyCode.Three, Enum.KeyCode.Four, Enum.KeyCode.Five, Enum.KeyCode.Six, Enum.KeyCode.Seven, Enum.KeyCode.Eight, Enum.KeyCode.Nine}
function module_upvr.new(arg1, arg2) -- Line 38
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local tbl = {}
	tbl.Index = arg1
	tbl.UI = arg2
	tbl.Item = nil
	tbl.Selected = false
	local setmetatable_result1 = setmetatable(tbl, module_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
local ContextActionService_upvr = game:GetService("ContextActionService")
function module_upvr.Initialise(arg1) -- Line 55
	--[[ Upvalues[2]:
		[1]: ContextActionService_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
	ContextActionService_upvr:BindAction("Equip"..tostring(arg1.Index), function(arg1_2, arg2) -- Line 57
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg2 ~= Enum.UserInputState.End then
		else
			arg1:ToolSelected()
		end
	end, false, tbl_upvr[arg1.Index])
	arg1.UI.Button.MouseButton1Up:Connect(function() -- Line 62
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:ToolSelected()
	end)
end
local any_GetController_result1_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetController("UIController")
function module_upvr.UpdateItem(arg1, arg2) -- Line 69
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
function module_upvr.ToolSelected(arg1) -- Line 74
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr.EquipUpdate:Fire(arg1)
end
return module_upvr

Script name: Backpack
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_GetController_result1_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetController("UIController")
local module_upvr = {}
module_upvr.__index = module_upvr
module_upvr.SwapUpdate = Instance.new("BindableEvent")
module_upvr.QuickSwapUpdate = Instance.new("BindableEvent")
function module_upvr.new(arg1) -- Line 24
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local tbl_2 = {}
	tbl_2.Index = arg1
	tbl_2.UI = nil
	tbl_2.Item = nil
	local setmetatable_result1 = setmetatable(tbl_2, module_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local UserInputService_upvr = game:GetService("UserInputService")
local RunService_upvr = game:GetService("RunService")
function module_upvr.Initialise(arg1) -- Line 40
	--[[ Upvalues[6]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: UserInputService_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: module_upvr (readonly)
		[6]: RunService_upvr (readonly)
	]]
	local LocalPlayer_upvr = game.Players.LocalPlayer
	local Main_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui"):WaitForChild("Inventory"):WaitForChild("Main")
	if 0 < arg1.Index and arg1.Index < 10 then
		arg1.UI = Main_upvr:WaitForChild("Toolbar"):WaitForChild(arg1.Index)
	else
		arg1.UI = ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone()
		arg1.UI.Name = arg1.Index
		arg1.UI.Parent = Main_upvr:WaitForChild("Backpack"):WaitForChild("ScrollingFrame")
	end
	local mouse_upvr = LocalPlayer_upvr:GetMouse()
	local ItemTooltip_upvr = MainGui_upvr.ItemTooltip
	UserInputService_upvr.InputBegan:Connect(function(arg1_2) -- Line 58
		--[[ Upvalues[10]:
			[1]: arg1 (readonly)
			[2]: LocalPlayer_upvr (readonly)
			[3]: mouse_upvr (readonly)
			[4]: any_GetController_result1_upvr (copied, readonly)
			[5]: module_upvr (copied, readonly)
			[6]: ItemTooltip_upvr (readonly)
			[7]: UserInputService_upvr (copied, readonly)
			[8]: Main_upvr (readonly)
			[9]: RunService_upvr (copied, readonly)
			[10]: MainGui_upvr (copied, readonly)
		]]
		local UserInputType_upvr = arg1_2.UserInputType
		local var52
		if not arg1.Item or UserInputType_upvr ~= Enum.UserInputType.MouseButton1 and UserInputType_upvr ~= Enum.UserInputType.Touch and UserInputType_upvr ~= Enum.UserInputType.Gamepad1 then
		else
			var52 = mouse_upvr
			if not table.find(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, var52.Y), arg1.UI) then return end
			if any_GetController_result1_upvr.ShiftDown then
				module_upvr.QuickSwapUpdate:Fire({
					Index = arg1.Index;
					Inventory = "Inventory";
				})
				ItemTooltip_upvr.Visible = false
				return
			end
			local var54_upvw = false
			task.wait(0.1)
			UserInputService_upvr.InputEnded:Connect(function(arg1_5) -- Line 72
				--[[ Upvalues[4]:
					[1]: var54_upvw (read and write)
					[2]: UserInputType_upvr (readonly)
					[3]: arg1 (copied, readonly)
					[4]: module_upvr (copied, readonly)
				]]
				if not var54_upvw and arg1_5.UserInputType == UserInputType_upvr then
					var54_upvw = true
					module_upvr.QuickSwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Inventory";
					})
				end
			end):Disconnect()
			if var54_upvw then return end
			var52 = arg1
			local clone_upvr_2 = arg1.UI:Clone()
			var52 = mouse_upvr.Y
			clone_upvr_2.Position = UDim2.fromOffset(mouse_upvr.X, var52 + 32)
			clone_upvr_2.Parent = Main_upvr.Parent
			clone_upvr_2.AnchorPoint = Vector2.new(0.5, 0.5)
			clone_upvr_2.Size = UDim2.fromOffset(arg1.UI.AbsoluteSize.X, var52.UI.AbsoluteSize.Y)
			clone_upvr_2.ZIndex = 11
			arg1.UI.ViewportFrame.Visible = false
			arg1.UI.ImageLabel.Visible = false
			arg1.UI.Stack.Visible = false
			arg1.UI.Empty.Visible = true
			if clone_upvr_2:FindFirstChild("DisplayNum") then
				clone_upvr_2.DisplayNum.Visible = false
			end
			local tbl = {}
			local BindableEvent_upvr = Instance.new("BindableEvent")
			var52 = tbl
			table.insert(var52, RunService_upvr.RenderStepped:Connect(function() -- Line 106
				--[[ Upvalues[2]:
					[1]: clone_upvr_2 (readonly)
					[2]: mouse_upvr (copied, readonly)
				]]
				clone_upvr_2.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y + 32)
			end))
			var52 = tbl
			table.insert(var52, UserInputService_upvr.InputEnded:Connect(function(arg1_6) -- Line 110
				--[[ Upvalues[2]:
					[1]: UserInputType_upvr (readonly)
					[2]: BindableEvent_upvr (readonly)
				]]
				if arg1_6.UserInputType == UserInputType_upvr then
					BindableEvent_upvr:Fire()
				end
			end))
			var52 = MainGui_upvr.Inventory.Main.Backpack
			var52 = false
			var52.ScrollingFrame.ScrollingEnabled = var52
			BindableEvent_upvr.Event:Wait()
			var52 = MainGui_upvr.Inventory.Main.Backpack
			var52 = true
			var52.ScrollingFrame.ScrollingEnabled = var52
			var52 = tbl
			local pairs_result1, pairs_result2, pairs_result3_2 = pairs(var52)
			for _, v in pairs_result1, pairs_result2, pairs_result3_2 do
				v:Disconnect()
			end
			clone_upvr_2:Destroy()
			pairs_result2 = LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, mouse_upvr.Y)
			local pairs_result1_2, pairs_result2_3, pairs_result3 = pairs(pairs_result2)
			for _, v_2 in pairs_result1_2, pairs_result2_3, pairs_result3 do
				local tonumber_result1 = tonumber(v_2.Name)
				if tonumber_result1 then
					if v_2.Parent.Parent.Name == "Backpack" or v_2.Parent.Name == "Toolbar" then
						tonumber_result1 = "Inventory"
					else
						tonumber_result1 = "Storage"
					end
					module_upvr.SwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Inventory";
					}, {
						Index = tonumber(v_2.Name);
						Inventory = tonumber_result1;
					})
					ItemTooltip_upvr.Visible = false
				end
			end
			pairs_result2_3 = arg1.UI
			pairs_result2_3 = true
			pairs_result2_3.ViewportFrame.Visible = pairs_result2_3
			pairs_result2_3 = arg1.UI
			pairs_result2_3 = true
			pairs_result2_3.ImageLabel.Visible = pairs_result2_3
			pairs_result2_3 = arg1.UI
			if arg1.Item then
				if 1 < arg1.Item.Stack then
					pairs_result2_3 = true
					-- KONSTANTWARNING: GOTO [367] #248
				end
			end
			pairs_result2_3 = false
			pairs_result2_3.Stack.Visible = pairs_result2_3
			pairs_result2_3 = arg1.UI
			if not arg1.Item then
				pairs_result2_3 = true
			else
				pairs_result2_3 = false
			end
			pairs_result2_3.Empty.Visible = pairs_result2_3
		end
	end)
end
function module_upvr.UpdateItem(arg1, arg2) -- Line 146
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
return module_upvr

Script name: Storages
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_2 = Knit.GetController("BlockController")
local LocalPlayer_upvr = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
local module_upvr = {}
local tbl_3_upvr = {}
module_upvr.InventoryObjects = {}
module_upvr.StorageOpen = nil
module_upvr.QuickSwapUpdate = Instance.new("BindableEvent")
module_upvr.SwapUpdate = Instance.new("BindableEvent")
tbl_3_upvr.__index = tbl_3_upvr
function tbl_3_upvr.new(arg1, arg2, arg3) -- Line 36
	--[[ Upvalues[1]:
		[1]: tbl_3_upvr (readonly)
	]]
	local tbl_8 = {}
	tbl_8.Index = arg1
	tbl_8.Item = arg2
	tbl_8.UI = arg3
	local setmetatable_result1 = setmetatable(tbl_8, tbl_3_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
function module_upvr.FilterStorageIndexes(arg1, arg2) -- Line 52
	--[[ Upvalues[3]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: any_GetController_result1_upvr (readonly)
	]]
	-- KONSTANTERROR: Failed to generate AST for function `FilterStorageIndexes`:
runluau:3236: attempt to index nil with 'reads'
Traceback:
runluau:3236 function line_has_expr
runluau:8005 function CF_FORGLOOP
runluau:8060 function gen_from_hl_block
runluau:8131 function gen_from_hl_block
runluau:8113 function gen_from_hl_block
runluau:8131 function gen_from_hl_block
runluau:8340 function astgen
runluau:8357 function astgen_protected
runluau:4639 function expr_function
runluau:7707 function DUPCLOSURE
runluau:7954 function gen_from_insts
runluau:8053 function gen_from_hl_block
runluau:8340 function astgen
runluau:8357 function astgen_protected
runluau:8418 function decompile_bytecode
runluau:11983 function wrapped
runluau:11991
runluau:12015 function _decompile
runluau:12181 function decompile
runluau:12377

end
local TweenService_upvr = game:GetService("TweenService")
function StartBarTween(arg1, arg2) -- Line 87
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: any_GetController_result1_upvr_2 (readonly)
		[4]: TweenService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var50
	if not module_upvr.StorageOpen or module_upvr.StorageOpen.Index ~= arg1 then
	else
		if not MainGui_upvr.Inventory:FindFirstChild("Storage") then return end
		if not MainGui_upvr.Inventory.Storage.Storage:FindFirstChild(arg2) then return end
		local var51 = any_GetController_result1_upvr_2.ProcesserData[arg1][arg2]
		local var52 = var51.Current / var51.Last
		var50 = MainGui_upvr.Inventory
		var50 = arg2
		local _ = var50.Storage.Storage:FindFirstChild(var50)
		var50 = _.BarHolder
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var50 = UDim2.fromScale(var52, 1)
			return var50
		end
		if arg2 ~= "Fuel" or not INLINED() then
			var50 = UDim2.fromScale(1 - var52, 1)
		end
		var50.Bar.Size = var50
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var50 = 0
			return UDim2.fromScale(var50, 1)
		end
		if arg2 ~= "Fuel" or not INLINED_2() then
			var50 = 1
		end
		var50 = TweenService_upvr
		local _ = {
			Size = UDim2.fromScale(var50, 1);
		}
		var50 = var50:Create(_.BarHolder.Bar, TweenInfo.new(any_GetController_result1_upvr_2.ProcesserData[arg1][arg2].Current, Enum.EasingStyle.Linear), _):Play
		var50()
	end
end
function tbl_3_upvr.UpdateItem(arg1, arg2) -- Line 104
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
local UserInputService_upvr = game:GetService("UserInputService")
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local RunService_upvr = game:GetService("RunService")
function tbl_3_upvr.Initialise(arg1) -- Line 109
	--[[ Upvalues[7]:
		[1]: MainGui_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: mouse_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
		[6]: module_upvr (readonly)
		[7]: RunService_upvr (readonly)
	]]
	local ItemTooltip_upvr = MainGui_upvr.ItemTooltip
	UserInputService_upvr.InputBegan:Connect(function(arg1_2) -- Line 113
		--[[ Upvalues[9]:
			[1]: arg1 (readonly)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: mouse_upvr (copied, readonly)
			[4]: any_GetController_result1_upvr (copied, readonly)
			[5]: module_upvr (copied, readonly)
			[6]: ItemTooltip_upvr (readonly)
			[7]: UserInputService_upvr (copied, readonly)
			[8]: MainGui_upvr (copied, readonly)
			[9]: RunService_upvr (copied, readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local UserInputType_upvr = arg1_2.UserInputType
		local var115
		if not arg1.Item or UserInputType_upvr ~= Enum.UserInputType.MouseButton1 and UserInputType_upvr ~= Enum.UserInputType.Touch and UserInputType_upvr ~= Enum.UserInputType.Gamepad1 then
		else
			var115 = mouse_upvr
			if not table.find(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, var115.Y), arg1.UI) then return end
			if any_GetController_result1_upvr.ShiftDown then
				module_upvr.QuickSwapUpdate:Fire({
					Index = arg1.Index;
					Inventory = "Storage";
				})
				ItemTooltip_upvr.Visible = false
				return
			end
			local var117_upvw = false
			task.wait(0.1)
			UserInputService_upvr.InputEnded:Connect(function(arg1_5) -- Line 134
				--[[ Upvalues[4]:
					[1]: var117_upvw (read and write)
					[2]: UserInputType_upvr (readonly)
					[3]: arg1 (copied, readonly)
					[4]: module_upvr (copied, readonly)
				]]
				if not var117_upvw and arg1_5.UserInputType == UserInputType_upvr then
					var117_upvw = true
					module_upvr.QuickSwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Storage";
					})
				end
			end):Disconnect()
			if var117_upvw then return end
			var115 = arg1
			local clone_upvr_2 = arg1.UI:Clone()
			var115 = mouse_upvr.Y
			clone_upvr_2.Position = UDim2.fromOffset(mouse_upvr.X, var115 + 32)
			clone_upvr_2.Parent = MainGui_upvr.Inventory.Parent
			clone_upvr_2.AnchorPoint = Vector2.new(0.5, 0.5)
			clone_upvr_2.Size = UDim2.fromOffset(arg1.UI.AbsoluteSize.X, var115.UI.AbsoluteSize.Y)
			clone_upvr_2.ZIndex = 11
			arg1.UI.ViewportFrame.Visible = false
			arg1.UI.ImageLabel.Visible = false
			arg1.UI.Stack.Visible = false
			arg1.UI.Empty.Visible = true
			if clone_upvr_2:FindFirstChild("DisplayNum") then
				clone_upvr_2.DisplayNum.Visible = false
			end
			local tbl_11 = {}
			local BindableEvent_upvr_2 = Instance.new("BindableEvent")
			var115 = tbl_11
			table.insert(var115, RunService_upvr.RenderStepped:Connect(function() -- Line 168
				--[[ Upvalues[2]:
					[1]: clone_upvr_2 (readonly)
					[2]: mouse_upvr (copied, readonly)
				]]
				clone_upvr_2.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y + 32)
			end))
			var115 = tbl_11
			table.insert(var115, UserInputService_upvr.InputEnded:Connect(function(arg1_6) -- Line 172
				--[[ Upvalues[2]:
					[1]: UserInputType_upvr (readonly)
					[2]: BindableEvent_upvr_2 (readonly)
				]]
				if arg1_6.UserInputType == UserInputType_upvr then
					BindableEvent_upvr_2:Fire()
				end
			end))
			var115 = MainGui_upvr.Inventory.Main.Backpack
			var115 = false
			var115.ScrollingFrame.ScrollingEnabled = var115
			BindableEvent_upvr_2.Event:Wait()
			var115 = MainGui_upvr.Inventory.Main.Backpack
			var115 = true
			var115.ScrollingFrame.ScrollingEnabled = var115
			var115 = tbl_11
			local pairs_result1_2, pairs_result2, pairs_result3 = pairs(var115)
			for _, v_2 in pairs_result1_2, pairs_result2, pairs_result3 do
				v_2:Disconnect()
			end
			clone_upvr_2:Destroy()
			pairs_result2 = false
			for i_3, v_3 in pairs(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, mouse_upvr.Y)) do
				local var131
				if var131 then
					if v_3:IsDescendantOf(MainGui_upvr.Inventory.Main) then
						var131 = "Inventory"
					else
						var131 = "Storage"
					end
					module_upvr.SwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Storage";
					}, {
						Index = tonumber(v_3.Name);
						Inventory = var131;
					})
					pairs_result2 = true
				else
					var131 = v_3.Name
					if var131 == "Main" then
					end
				end
				local var134
			end
			if not pairs_result2 and true then
				local tbl_6 = {}
				var134 = arg1.Index
				tbl_6.Index = var134
				var134 = "Storage"
				tbl_6.Inventory = var134
				var134 = module_upvr.QuickSwapUpdate
				i_3 = tbl_6
				var134 = var134:Fire
				var134(i_3)
				var134 = ItemTooltip_upvr
				var134.Visible = false
			end
			var134 = arg1.UI
			var134 = true
			var134.ViewportFrame.Visible = var134
			var134 = arg1.UI
			var134 = true
			var134.ImageLabel.Visible = var134
			var134 = arg1.UI
			i_3 = arg1
			if i_3.Item then
				v_3 = arg1
				i_3 = v_3.Item
				i_3 = 0
				if i_3 < i_3.Stack then
					var134 = true
					-- KONSTANTWARNING: GOTO [391] #268
				end
			end
			var134 = false
			var134.Stack.Visible = var134
			var134 = arg1.UI
			i_3 = arg1
			if not i_3.Item then
				var134 = true
			else
				var134 = false
			end
			var134.Empty.Visible = var134
		end
	end)
end
function tbl_3_upvr.Destroy(arg1) -- Line 215
	arg1.UI:Destroy()
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function module_upvr.InitialiseStorageUI(arg1, arg2) -- Line 219
	--[[ Upvalues[7]:
		[1]: module_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: any_RequireDefinitions_result1_upvr (readonly)
		[7]: tbl_3_upvr (readonly)
	]]
	if not arg2 then
	else
		module_upvr.StorageOpen = nil
		for i_4, v_4 in pairs(module_upvr.InventoryObjects) do
			v_4:Destroy()
		end
		if MainGui_upvr.Inventory:FindFirstChild("Storage") then
			MainGui_upvr.Inventory.Storage:Destroy()
		end
		module_upvr.InventoryObjects = {}
		local BehaviourId = arg2.Data.BehaviourId
		if BehaviourId then
			v_4 = ReplicatedStorage_upvr
			i_4 = v_4.Prefabs
			i_4 = arg2.Data
			BehaviourId = i_4.UI.StorageUIs[i_4.BehaviourId]:Clone()
		end
		if not BehaviourId then
			v_4 = ReplicatedStorage_upvr.Prefabs
			i_4 = v_4.UI
		end
		i_4.StorageUIs.Chest:Clone().Name = "Storage"
		if arg2.Data.BehaviourId == "Underling" then
			i_4 = '/'
			local any_split_result1_2 = arg2.Index:split(i_4)
			local tbl_5 = {}
			v_4 = any_split_result1_2[1]
			i_4 = tonumber(v_4)
			tbl_5.X = i_4
			v_4 = any_split_result1_2[2]
			i_4 = tonumber(v_4)
			tbl_5.Y = i_4
			v_4 = any_split_result1_2[3]
			i_4 = tonumber(v_4)
			tbl_5.Z = i_4
			i_4 = CoreUtil_upvr:GetValueAtPosition(any_GetController_result1_upvr_2.Blocks, tbl_5)
			v_4 = i_4
			if v_4 then
				v_4 = any_RequireDefinitions_result1_upvr.Block[i_4.Id]
			end
			if v_4 and v_4.BehaviourData then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				i_4.StorageUIs.Chest:Clone().Title.Text = v_4.BehaviourData.UnderlingType
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				i_4.StorageUIs.Chest:Clone().Storage.ScrollingFrame.DisplayImage.ImageLabel.Image = v_4.DisplayImage
			end
			if CoreUtil_upvr.OnMobile then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				i_4.StorageUIs.Chest:Clone().Position = UDim2.fromScale(0.725, 0.458)
			end
		end
		for i_5 = 1, arg2.Data.StorageCap do
			local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(arg2.Data.Storage, i_5)
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			local SOME = i_4.StorageUIs.Chest:Clone().Storage.ScrollingFrame:FindFirstChild(i_5)
			if not SOME then
				SOME = ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone()
			end
			SOME.Name = i_5
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			SOME.Parent = i_4.StorageUIs.Chest:Clone().Storage.ScrollingFrame
			SOME.Empty.BackgroundColor3 = Color3.fromRGB(201, 217, 255)
			local any_new_result1 = tbl_3_upvr.new(i_5, any_GetSlotFromIndex_result1, SOME)
			any_new_result1:UpdateItem(any_GetSlotFromIndex_result1)
			table.insert(module_upvr.InventoryObjects, any_new_result1)
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		i_4.StorageUIs.Chest:Clone().Parent = MainGui_upvr.Inventory
		module_upvr.StorageOpen = arg2
		if any_GetController_result1_upvr_2.ProcesserData[arg2.Index] then
			StartBarTween(arg2.Index, "Progress")
			StartBarTween(arg2.Index, "Fuel")
		end
		module_upvr:FilterStorageIndexes(arg2)
	end
end
Knit.GetService("BlockService").ProcessorData:Connect(function(arg1, arg2, arg3, arg4) -- Line 277
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr_2 (readonly)
	]]
	if not any_GetController_result1_upvr_2.ProcesserData[arg1] then
		any_GetController_result1_upvr_2.ProcesserData[arg1] = {
			Fuel = {
				Current = 0;
				Last = 0;
			};
			Progress = {
				Current = 0;
				Last = 0;
			};
		}
	end
	any_GetController_result1_upvr_2.ProcesserData[arg1][arg2].Current = arg4
	any_GetController_result1_upvr_2.ProcesserData[arg1][arg2].Last = arg3
	StartBarTween(arg1, arg2)
end)
coroutine.wrap(function() -- Line 303
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr_2 (readonly)
	]]
	while task.wait(1) do
		for _, v in pairs(any_GetController_result1_upvr_2.ProcesserData) do
			v.Fuel.Current = math.clamp(v.Fuel.Current - 1, 0, v.Fuel.Current)
			v.Progress.Current = math.clamp(v.Progress.Current - 1, 0, v.Progress.Current)
		end
	end
end)()
return module_upvr

Script name: CraftingHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local Crafting = MainGui_upvr.Crafting
local CraftingGrid_upvr = Crafting:WaitForChild("CraftingGrid")
local CraftingMain_upvr = Crafting:WaitForChild("CraftingMain")
local TabsBG = Crafting:WaitForChild("TabsBG")
local TabsNavigation_upvr = TabsBG:WaitForChild("TabsNavigation")
local Color3_fromRGB_result1_upvr = Color3.fromRGB(8, 190, 54)
local Color3_fromRGB_result1_upvr_3 = Color3.fromRGB(100, 100, 100)
local var15_upvw
local var16_upvw = false
local tbl_upvr_3 = {}
local var18_upvw = 1
local var19_upvw
local tbl_5_upvr = {}
local var21_upvw = false
local var22_upvw = false
local tbl_upvr = {
	Light = {
		Sufficient = Color3.fromRGB(165, 165, 165);
		Insufficient = Color3.fromRGB(145, 0, 0);
	};
	Dark = {
		Sufficient = Color3.fromRGB(102, 102, 102);
		Insufficient = Color3.fromRGB(82, 0, 0);
	};
}
function FilterInventory(arg1) -- Line 69
	--[[ Upvalues[2]:
		[1]: tbl_5_upvr (readonly)
		[2]: CraftingGrid_upvr (readonly)
	]]
	for _, v in pairs(tbl_5_upvr) do
		local SearchTags = v.SearchTags
		v.UI.Visible = false
		if arg1 == "All" then
			v.UI.Visible = true
		elseif SearchTags ~= nil then
			for i_15 = 1, #SearchTags do
				if SearchTags[i_15] == arg1 then
					v.UI.Visible = true
				end
			end
		end
	end
	CraftingGrid_upvr.ScrollingFrame.CanvasPosition = Vector2.new(0, 0)
end
function UpdateSearch() -- Line 90
	--[[ Upvalues[1]:
		[1]: CraftingGrid_upvr (readonly)
	]]
	local string_lower_result1 = string.lower(CraftingGrid_upvr.SearchBar.Text)
	for _, v_2 in pairs(CraftingGrid_upvr.ScrollingFrame:GetChildren()) do
		if v_2:IsA("GuiButton") then
			local var41 = false
			if string_lower_result1 ~= "" then
				var41 = not string.find(string.lower(v_2.Name), string_lower_result1)
			end
			v_2.Visible = not var41
		end
	end
end
function UpdateYield(arg1, arg2) -- Line 98
	--[[ Upvalues[7]:
		[1]: var19_upvw (read and write)
		[2]: var18_upvw (read and write)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: var22_upvw (read and write)
		[6]: var21_upvw (read and write)
		[7]: CraftingMain_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
	if arg1 == "Sub" then
		var18_upvw = math.clamp(var18_upvw - arg2 or 1, 1, CoreUtil_upvr.MaxCraftingYield)
	else
		var18_upvw = math.clamp(var18_upvw + arg2 or 1, 1, CoreUtil_upvr.MaxCraftingYield)
	end
	local var42 = var19_upvw
	local pairs_result1_2, pairs_result2_5, pairs_result3_5 = pairs(var42.CraftIngredients)
	-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [86] 65. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [86] 65. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 33. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 33. Error Block 6 end (CF ANALYSIS FAILED)
end
function ToggleCraft(arg1) -- Line 128
	--[[ Upvalues[1]:
		[1]: CraftingMain_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local Craft = CraftingMain_upvr.ScrollingFrame.CraftTab.Craft
	local var47
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var47 = Color3.fromRGB(255, 255, 255)
		return var47
	end
	if not arg1 or not INLINED() then
		var47 = Color3.fromRGB(191, 191, 191)
	end
	Craft.TextColor3 = var47
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var47 = Color3.fromRGB(85, 255, 0)
		return var47
	end
	if not arg1 or not INLINED_2() then
		var47 = Color3.fromRGB(131, 131, 131)
	end
	Craft.BackgroundColor3 = var47
	var47 = Craft.UIStroke
	if not arg1 or not Color3.fromRGB(36, 108, 0) then
	end
	var47.Color = Color3.fromRGB(51, 51, 51)
end
function ValidateCraft(arg1) -- Line 135
	--[[ Upvalues[5]:
		[1]: var16_upvw (read and write)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_GetController_result1_upvr_2 (readonly)
		[4]: var18_upvw (read and write)
		[5]: any_GetController_result1_upvr (readonly)
	]]
	var16_upvw = CoreUtil_upvr:ValidateCraft(any_GetController_result1_upvr_2.Inventory, arg1, var18_upvw)
	if #any_GetController_result1_upvr_2.Inventory == any_GetController_result1_upvr.Modules.InventoryHandler.InventorySpace then
		if not CoreUtil_upvr:GetSameItemInInventory(any_GetController_result1_upvr_2.Inventory, {
			Id = arg1.Id;
			Catagory = arg1.Catagory;
		}) then
			var16_upvw = false
		end
	end
	if arg1.LevelReq and not CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, arg1.LevelReq) then
		var16_upvw = false
	end
	return var16_upvw
end
function InitialiseIngredients(arg1) -- Line 148
	--[[ Upvalues[7]:
		[1]: CraftingMain_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
		[5]: var18_upvw (read and write)
		[6]: tbl_upvr (readonly)
		[7]: any_GetController_result1_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var70
	for _, v_3 in pairs(CraftingMain_upvr.ScrollingFrame.CraftInfo.Ingredients:GetChildren()) do
		if not v_3:IsA("UIListLayout") and not v_3:IsA("UIGridLayout") and not v_3:IsA("UIStroke") then
			v_3:Destroy()
		end
	end
	for i_4, v_4 in pairs(arg1.CraftIngredients) do
		local var74
		if i_4 ~= "Output" and i_4 ~= "BenchType" then
			var74 = ReplicatedStorage_upvr
			local clone = var74.Prefabs.UI.IngredientTemplate:Clone()
			var74 = i_4
			local any_GetDefinitionFromId_result1 = CoreUtil_upvr:GetDefinitionFromId(var74)
			local any_GetSameItemInInventory_result1_3 = CoreUtil_upvr:GetSameItemInInventory(any_GetController_result1_upvr_2.Inventory, {
				Id = any_GetDefinitionFromId_result1.Id;
				Catagory = any_GetDefinitionFromId_result1.Catagory;
			})
			if 0 % 2 == 0 then
				var74 = "Light"
			else
				var74 = "Dark"
			end
			if not any_GetSameItemInInventory_result1_3 or not any_GetSameItemInInventory_result1_3.Stack then
			end
			if not any_GetSameItemInInventory_result1_3 or any_GetSameItemInInventory_result1_3.Stack < v_4 * var18_upvw then
				clone.Title.TextColor3 = Color3.fromRGB(255, 39, 39)
				clone.BackgroundColor3 = tbl_upvr[var74].Sufficient
			else
				clone.Title.TextColor3 = Color3.fromRGB(255, 255, 255)
				clone.BackgroundColor3 = tbl_upvr[var74].Sufficient
			end
			clone.Title.Text = i_4..' '..0.." / "..tostring(v_4 * var18_upvw)
			clone.Parent = CraftingMain_upvr.ScrollingFrame.CraftInfo.Ingredients
			any_GetController_result1_upvr:UpdateItemDisplay(clone, any_GetDefinitionFromId_result1)
		end
	end
	return nil
end
local Color3_fromRGB_result1_upvr_2 = Color3.fromRGB(195, 244, 241)
local Color3_fromRGB_result1_upvr_4 = Color3.fromRGB(11, 244, 84)
local function SetTabHighlightsColor_upvr(arg1) -- Line 191, Named "SetTabHighlightsColor"
	--[[ Upvalues[3]:
		[1]: tbl_upvr_3 (readonly)
		[2]: Color3_fromRGB_result1_upvr_2 (readonly)
		[3]: Color3_fromRGB_result1_upvr_4 (readonly)
	]]
	for _, v_5 in pairs(tbl_upvr_3) do
		if v_5:IsA("GuiButton") then
			v_5.UIStrokeA.Color = Color3_fromRGB_result1_upvr_2
		end
	end
	if arg1 then
		arg1.UIStrokeA.Color = Color3_fromRGB_result1_upvr_4
	else
		for _, v_14 in pairs(tbl_upvr_3) do
			if v_14:IsA("GuiButton") and v_14.Text == "All" then
				v_14.UIStrokeA.Color = Color3_fromRGB_result1_upvr_4
				return
			end
		end
	end
end
function CreateTabPages(arg1, arg2) -- Line 210
	--[[ Upvalues[4]:
		[1]: tbl_upvr_3 (readonly)
		[2]: TabsNavigation_upvr (readonly)
		[3]: Color3_fromRGB_result1_upvr_3 (readonly)
		[4]: Color3_fromRGB_result1_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 22 start (CF ANALYSIS FAILED)
	local len = #tbl_upvr_3
	for i_6 = 1, len do
		local _ = {
			button = tbl_upvr_3[i_6];
			pageIndex = math.ceil(i_6 / 10);
		}
	end
	-- KONSTANTERROR: [0] 1. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [25] 21. Error Block 27 start (CF ANALYSIS FAILED)
	for _, v_6 in pairs({}) do
		if v_6.pageIndex == arg1 then
			v_6.button.Visible = true
		else
			v_6.button.Visible = false
		end
	end
	-- KONSTANTERROR: [25] 21. Error Block 27 end (CF ANALYSIS FAILED)
end
local Tabs_upvr = TabsBG:WaitForChild("Tabs")
local var100_upvw
function CreateTabs() -- Line 256
	--[[ Upvalues[6]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Tabs_upvr (readonly)
		[4]: var100_upvw (read and write)
		[5]: SetTabHighlightsColor_upvr (readonly)
		[6]: tbl_upvr_3 (readonly)
	]]
	for i_8_upvr, v_7 in pairs(CoreUtil_upvr.CraftingLayoutOrder) do
		local clone_3_upvr = ReplicatedStorage_upvr.Prefabs.UI.CraftingTabTemplate:Clone()
		clone_3_upvr.Text = i_8_upvr
		clone_3_upvr.LayoutOrder = v_7
		clone_3_upvr.Parent = Tabs_upvr
		clone_3_upvr.MouseButton1Up:Connect(function() -- Line 264
			--[[ Upvalues[4]:
				[1]: var100_upvw (copied, read and write)
				[2]: clone_3_upvr (readonly)
				[3]: SetTabHighlightsColor_upvr (copied, readonly)
				[4]: i_8_upvr (readonly)
			]]
			var100_upvw = clone_3_upvr
			SetTabHighlightsColor_upvr(clone_3_upvr)
			FilterInventory(i_8_upvr)
		end)
		table.insert(tbl_upvr_3, clone_3_upvr)
		if i_8_upvr == "All" then
			SetTabHighlightsColor_upvr(clone_3_upvr)
		end
	end
end
function FunctionaliseTabsNavigation() -- Line 278
	--[[ Upvalues[3]:
		[1]: TabsNavigation_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_3 (readonly)
		[3]: Color3_fromRGB_result1_upvr (readonly)
	]]
	local var108_upvw = 1
	TabsNavigation_upvr.Left.MouseButton1Click:Connect(function() -- Line 282
		--[[ Upvalues[4]:
			[1]: var108_upvw (read and write)
			[2]: TabsNavigation_upvr (copied, readonly)
			[3]: Color3_fromRGB_result1_upvr_3 (copied, readonly)
			[4]: Color3_fromRGB_result1_upvr (copied, readonly)
		]]
		var108_upvw -= 1
		if var108_upvw == 1 then
			TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_3
			TabsNavigation_upvr.Left.Interactable = false
		else
			if var108_upvw < 1 then
				var108_upvw = 1
				TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_3
				TabsNavigation_upvr.Left.Interactable = false
				return
			end
			TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr
			TabsNavigation_upvr.Left.Interactable = true
		end
	end)
	TabsNavigation_upvr.Right.MouseButton1Click:Connect(function() -- Line 297
		--[[ Upvalues[3]:
			[1]: var108_upvw (read and write)
			[2]: TabsNavigation_upvr (copied, readonly)
			[3]: Color3_fromRGB_result1_upvr_3 (copied, readonly)
		]]
		var108_upvw += 1
		if 5 < var108_upvw then
			var108_upvw = 5
			TabsNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_3
			TabsNavigation_upvr.Right.Interactable = false
		end
	end)
	TabsNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_3
	TabsNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_3
	TabsNavigation_upvr.Left.Interactable = false
	TabsNavigation_upvr.Right.Interactable = false
end
function UpdateCrafting(arg1) -- Line 312
	--[[ Upvalues[6]:
		[1]: CraftingMain_upvr (readonly)
		[2]: var19_upvw (read and write)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: var18_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local ScrollingFrame = CraftingMain_upvr.ScrollingFrame
	var19_upvw = arg1
	any_GetController_result1_upvr:UpdateItemDisplay(ScrollingFrame.CraftInfo, arg1)
	local pairs_result1, _, pairs_result3_6 = pairs(ScrollingFrame:GetDescendants())
	local var142
	for i_9, v_8 in pairs_result1, var142, pairs_result3_6 do
		local var143
		local function INLINED_9() -- Internal function, doesn't exist in bytecode
			var143 = v_8:IsA("TextButton")
			return var143
		end
		local function INLINED_10() -- Internal function, doesn't exist in bytecode
			var143 = v_8:IsA("ImageLabel")
			return var143
		end
		local function INLINED_11() -- Internal function, doesn't exist in bytecode
			var143 = v_8:IsA("ImageButton")
			return var143
		end
		local function INLINED_12() -- Internal function, doesn't exist in bytecode
			var143 = v_8:IsA("ViewportFrame")
			return var143
		end
		local function INLINED_13() -- Internal function, doesn't exist in bytecode
			var143 = v_8:IsA("ScrollingFrame")
			return var143
		end
		if var143 or INLINED_9() or INLINED_10() or INLINED_11() or INLINED_12() or INLINED_13() then
			if arg1 then
				var143 = true
			else
				var143 = false
			end
			v_8.Visible = var143
		end
	end
	if not arg1 then
	else
		if arg1.LevelReq then
			i_9 = any_GetController_result1_upvr_2
			i_9 = arg1.LevelReq
			if not CoreUtil_upvr:IsMasterySucceeded(i_9.Masteries, i_9) then
				local _, any_GetCatagorysFromLevelReq_result2_2 = CoreUtil_upvr:GetCatagorysFromLevelReq(arg1.LevelReq)
				var143 = any_GetController_result1_upvr_2
				v_8 = var143.Masteries
				var143 = arg1.LevelReq
				local _, _, any_IsMasterySucceeded_result3_2 = CoreUtil_upvr:IsMasterySucceeded(v_8, var143)
				var143 = ScrollingFrame.CraftInfo.ImageLabel.LevelReq
				var143.Text = any_GetCatagorysFromLevelReq_result2_2:upper().." LEVEL "..tostring(any_IsMasterySucceeded_result3_2).." REQUIRED"
				var143 = ScrollingFrame.CraftInfo.ImageLabel.LevelReq
				var143.Visible = true
				-- KONSTANTWARNING: GOTO [126] #91
			end
		end
		any_GetCatagorysFromLevelReq_result2_2 = ScrollingFrame.CraftInfo.ImageLabel
		any_GetCatagorysFromLevelReq_result2_2 = false
		any_GetCatagorysFromLevelReq_result2_2.LevelReq.Visible = any_GetCatagorysFromLevelReq_result2_2
		var18_upvw = 1
		any_GetCatagorysFromLevelReq_result2_2 = ScrollingFrame.Amount
		local function INLINED_14() -- Internal function, doesn't exist in bytecode
			any_GetCatagorysFromLevelReq_result2_2 = tostring(arg1.CraftIngredients.Output * var18_upvw)
			return any_GetCatagorysFromLevelReq_result2_2
		end
		if not arg1.CraftIngredients.Output or not INLINED_14() then
			any_GetCatagorysFromLevelReq_result2_2 = tostring(var18_upvw)
		end
		any_GetCatagorysFromLevelReq_result2_2.AmountLabel.Text = any_GetCatagorysFromLevelReq_result2_2
		any_GetCatagorysFromLevelReq_result2_2 = ScrollingFrame.CraftInfo.ImageLabel
		any_GetCatagorysFromLevelReq_result2_2 = arg1.Id
		any_GetCatagorysFromLevelReq_result2_2.Title.Text = any_GetCatagorysFromLevelReq_result2_2
		any_GetCatagorysFromLevelReq_result2_2 = arg1
		InitialiseIngredients(any_GetCatagorysFromLevelReq_result2_2)
		any_GetCatagorysFromLevelReq_result2_2 = ValidateCraft(arg1)
		ToggleCraft(any_GetCatagorysFromLevelReq_result2_2)
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local tbl_upvr_2 = {}
function InitialiseCrafting() -- Line 346
	--[[ Upvalues[10]:
		[1]: tbl_5_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: var15_upvw (read and write)
		[5]: tbl_upvr_2 (readonly)
		[6]: ReplicatedStorage_upvr (readonly)
		[7]: CoreUtil_upvr (readonly)
		[8]: any_GetController_result1_upvr_2 (readonly)
		[9]: any_GetController_result1_upvr (readonly)
		[10]: SetTabHighlightsColor_upvr (readonly)
	]]
	table.clear(tbl_5_upvr)
	UpdateCrafting()
	for _, v_9 in pairs(MainGui_upvr.Crafting.CraftingGrid.ScrollingFrame:GetChildren()) do
		if not v_9:IsA("UIListLayout") and not v_9:IsA("UIGridLayout") then
			v_9:Destroy()
		end
	end
	for _, v_10 in pairs(any_RequireDefinitions_result1_upvr) do
		for _, v_11_upvr in pairs(v_10) do
			local var237
			local function INLINED_23() -- Internal function, doesn't exist in bytecode
				var237 = v_11_upvr.CraftIngredients
				return var237.BenchType
			end
			local function INLINED_24() -- Internal function, doesn't exist in bytecode
				var237 = var15_upvw
				var237 = v_11_upvr.CraftIngredients
				return var237.BenchType == var237
			end
			if v_11_upvr.CraftIngredients and (not var15_upvw or INLINED_23()) or INLINED_24() then
				var237 = v_11_upvr.Id
				tbl_upvr_2[var237] = v_11_upvr
				var237 = ReplicatedStorage_upvr.Prefabs.UI
				local clone_2 = var237.CraftingSlotTemplate:Clone()
				var237 = 0
				clone_2.Name = v_11_upvr.Id
				clone_2.Frame.Title.Text = v_11_upvr.Id
				clone_2.Frame.Shader.Visible = false
				for i_13, v_12 in pairs(v_11_upvr.CraftIngredients) do
					local function INLINED_25() -- Internal function, doesn't exist in bytecode
						local var245
						local any_GetSameItemInInventory_result1_2 = CoreUtil_upvr:GetSameItemInInventory(any_GetController_result1_upvr_2.Inventory, tbl_4)
						tbl_4.Catagory = any_GetDefinitionFromId_result1_2.Catagory
						tbl_4.Id = any_GetDefinitionFromId_result1_2.Id
						local tbl_4 = {}
						local any_GetDefinitionFromId_result1_2 = CoreUtil_upvr:GetDefinitionFromId(i_13)
						return i_13 ~= "Output"
					end
					local function INLINED_27() -- Internal function, doesn't exist in bytecode
						var237 += var245
						if not any_GetSameItemInInventory_result1_2 or not INLINED_26() then
							var245 = v_12
						end
						local function INLINED_26() -- Internal function, doesn't exist in bytecode
							var245 = math.clamp(v_12 - any_GetSameItemInInventory_result1_2.Stack, 0, math.huge)
							return var245
						end
						return any_GetSameItemInInventory_result1_2
					end
					local function INLINED_28() -- Internal function, doesn't exist in bytecode
						var245 = any_GetSameItemInInventory_result1_2.Stack
						return var245 < v_12
					end
					local function INLINED_29() -- Internal function, doesn't exist in bytecode
						var245 = v_11_upvr.LevelReq
						return var245
					end
					local function INLINED_30() -- Internal function, doesn't exist in bytecode
						var245 = CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, v_11_upvr.LevelReq)
						return var245
					end
					if i_13 ~= "BenchType" and i_13 ~= "Output" and INLINED_25() and i_13 ~= "BenchType" and (not INLINED_27() or INLINED_28() or INLINED_29() and not INLINED_30()) then
						var245 = v_11_upvr.LevelReq
						if var245 then
							var245 = CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, v_11_upvr.LevelReq)
							if not var245 then
								var245 = clone_2.Frame.Title
								var245.TextColor3 = Color3.fromRGB(214, 0, 0)
							end
						end
						var245 = clone_2.Frame.Shader
						var245.Visible = true
					end
				end
				table.insert(tbl_5_upvr, {
					UI = clone_2;
					IngredientsMissing = var237;
					LevelReq = v_11_upvr.LevelReq;
					SearchTags = v_11_upvr.SearchTags;
					Catagory = v_11_upvr.Catagory;
					Id = v_11_upvr.Id;
				})
				any_GetController_result1_upvr:UpdateItemDisplay(clone_2.Frame, v_11_upvr)
				clone_2.MouseButton1Up:Connect(function() -- Line 405
					--[[ Upvalues[2]:
						[1]: any_GetController_result1_upvr (copied, readonly)
						[2]: v_11_upvr (readonly)
					]]
					if any_GetController_result1_upvr.Processing then
					else
						UpdateCrafting(v_11_upvr)
					end
				end)
			end
		end
	end
	table.sort(tbl_5_upvr, function(arg1, arg2) -- Line 416
		--[[ Upvalues[2]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: any_GetController_result1_upvr_2 (copied, readonly)
		]]
		local any_IsMasterySucceeded_result1_3, any_IsMasterySucceeded_result2 = CoreUtil_upvr:IsMasterySucceeded(any_GetController_result1_upvr_2.Masteries, arg1.LevelReq)
		local Masteries_3 = any_GetController_result1_upvr_2.Masteries
		local any_IsMasterySucceeded_result1_2, any_IsMasterySucceeded_result2_3 = CoreUtil_upvr:IsMasterySucceeded(Masteries_3, arg2.LevelReq)
		if any_IsMasterySucceeded_result1_3 == nil then
			Masteries_3 = true
		else
			Masteries_3 = any_IsMasterySucceeded_result1_3
		end
		local var254 = Masteries_3
		if any_IsMasterySucceeded_result1_2 == nil then
			Masteries_3 = true
		else
			Masteries_3 = any_IsMasterySucceeded_result1_2
		end
		local var255 = Masteries_3
		if var254 and not var255 then
			Masteries_3 = true
			return Masteries_3
		end
		if var254 then
			if var255 then
				Masteries_3 = arg1.IngredientsMissing
				if Masteries_3 == arg2.IngredientsMissing then
					Masteries_3 = arg1.Catagory
					if Masteries_3 == arg2.Catagory then
						if arg2.Id >= arg1.Id then
							Masteries_3 = false
						else
							Masteries_3 = true
						end
						return Masteries_3
					end
					if arg2.Catagory >= arg1.Catagory then
						Masteries_3 = false
					else
						Masteries_3 = true
					end
					return Masteries_3
				end
				if arg1.IngredientsMissing >= arg2.IngredientsMissing then
				else
				end
				return true
			end
		end
		if not var254 then
			if not var255 then
				if (any_IsMasterySucceeded_result2 or 0) >= (any_IsMasterySucceeded_result2_3 or 0) then
				else
				end
				return true
			end
		end
	end)
	for _, v_13 in pairs(tbl_5_upvr) do
		v_13.UI.Parent = MainGui_upvr.Crafting.CraftingGrid.ScrollingFrame
	end
	UpdateSearch()
	SetTabHighlightsColor_upvr()
end
function module.ToggleCrafting(arg1, arg2, arg3) -- Line 456
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: var15_upvw (read and write)
		[3]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		var15_upvw = arg3
		if arg2 then
			InitialiseCrafting()
		end
		MainGui_upvr.Crafting.Visible = arg2
	end
end
MainGui_upvr.Crafting.CraftingGrid.SearchBar:GetPropertyChangedSignal("Text"):Connect(UpdateSearch)
game:GetService("ContextActionService"):BindAction("Toggle Crafting", function(arg1, arg2) -- Line 466
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Crafting", not MainGui_upvr.Crafting.Visible)
	end
end, false, Enum.KeyCode.C)
MainGui_upvr.HUD.ToolBar.CraftButton.Button.MouseButton1Up:Connect(function() -- Line 470
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Crafting", not MainGui_upvr.Crafting.Visible)
end)
local InventoryService_upvr = Knit.GetService("InventoryService")
CraftingMain_upvr.ScrollingFrame.CraftTab.Craft.MouseButton1Up:Connect(function() -- Line 474
	--[[ Upvalues[5]:
		[1]: var16_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: InventoryService_upvr (readonly)
		[4]: var19_upvw (read and write)
		[5]: var18_upvw (read and write)
	]]
	if var16_upvw and not any_GetController_result1_upvr.Processing then
		any_GetController_result1_upvr.Processing = true
		local _, any_await_result2 = InventoryService_upvr:Craft(var19_upvw, var18_upvw):andThen():await()
		if any_await_result2 then
			workspace.Sound.UI.Craft:Play()
			InitialiseCrafting()
			UpdateCrafting(var19_upvw)
		else
			any_GetController_result1_upvr:WarningMessage("Error crafting")
		end
		any_GetController_result1_upvr.Processing = false
	end
end)
local tbl_upvr_4 = {1, 2, 5, 10, 50, 100}
CraftingMain_upvr.ScrollingFrame.Amount.Add.MouseButton1Down:Connect(function() -- Line 491
	--[[ Upvalues[5]:
		[1]: var22_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: tbl_upvr_4 (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: CraftingMain_upvr (readonly)
	]]
	if not var22_upvw and any_GetController_result1_upvr.Processing then
	else
		local _ = 1
		var22_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, CraftingMain_upvr.ScrollingFrame.Amount.Add.MouseButton1Up)
		while task.wait() and var22_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
CraftingMain_upvr.ScrollingFrame.Amount.Subtract.MouseButton1Down:Connect(function() -- Line 511
	--[[ Upvalues[5]:
		[1]: var21_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: tbl_upvr_4 (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: CraftingMain_upvr (readonly)
	]]
	if not var21_upvw and any_GetController_result1_upvr.Processing then
	else
		local _ = 1
		var21_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, CraftingMain_upvr.ScrollingFrame.Amount.Subtract.MouseButton1Up)
		while task.wait() and var21_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
CraftingMain_upvr.ScrollingFrame.Amount.Add.MouseButton1Up:Connect(function() -- Line 529
	--[[ Upvalues[1]:
		[1]: var22_upvw (read and write)
	]]
	var22_upvw = false
end)
CraftingMain_upvr.ScrollingFrame.Amount.Subtract.MouseButton1Up:Connect(function() -- Line 533
	--[[ Upvalues[1]:
		[1]: var21_upvw (read and write)
	]]
	var21_upvw = false
end)
MainGui_upvr.Crafting.Titles.Close.MouseButton1Up:Connect(function() -- Line 537
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Crafting", false)
end)
FunctionaliseTabsNavigation()
CreateTabs()
CreateTabPages()
return module

Script name: ShopHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local tbl_3_upvw = {}
local var9_upvw = 1
local var10_upvw
local var11_upvw
local var12_upvw = false
local var13_upvw = "Buy"
local var14_upvw = false
local var15_upvw = false
function UpdateSearch() -- Line 28
	--[[ Upvalues[4]:
		[1]: MainGui_upvr (readonly)
		[2]: tbl_3_upvw (read and write)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr_2 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1_3, pairs_result2_3, pairs_result3_5 = pairs(MainGui_upvr.Shop.ShopGrid.ScrollingFrame:GetChildren())
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [76] 53. Error Block 10 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [76] 53. Error Block 10 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [26] 17. Error Block 18 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [76.6]
	if nil then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if nil then
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [76.8]
			if not nil then
				-- KONSTANTWARNING: GOTO [76] #53
			end
		end
		if string.lower(MainGui_upvr.Shop.ShopGrid.SearchBar.Text) ~= "" then
		end
	end
	-- KONSTANTERROR: [26] 17. Error Block 18 end (CF ANALYSIS FAILED)
end
function UpdateYield(arg1) -- Line 42
	--[[ Upvalues[4]:
		[1]: var13_upvw (read and write)
		[2]: var10_upvw (read and write)
		[3]: var9_upvw (read and write)
		[4]: MainGui_upvr (readonly)
	]]
	local var31
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var31 = var10_upvw.EconomyInfo.BuyPrice
		return var31
	end
	if var13_upvw ~= "Buy" or not INLINED() then
		var31 = var10_upvw.EconomyInfo.SellPrice
	end
	if arg1 == "Sub" then
		var9_upvw = math.clamp(var9_upvw - 1, 1, 100)
	else
		var9_upvw = math.clamp(var9_upvw + 1, 1, 100)
	end
	if var9_upvw == var9_upvw then return end
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.AmountLabel.Text = var9_upvw
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.ItemInfo.Total.Text = tostring(var31 * var9_upvw)
	local ValidateAction_result1 = ValidateAction(var10_upvw)
	ToggleAction(ValidateAction_result1)
	return ValidateAction_result1
end
function ToggleAction(arg1) -- Line 64
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: var13_upvw (read and write)
		[3]: var12_upvw (read and write)
	]]
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action.Text = var13_upvw
	local var34
	if var13_upvw == "Buy" then
		var34 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var34 = Color3.fromRGB(255, 255, 255)
			return var34
		end
		if not arg1 or not INLINED_2() then
			var34 = Color3.fromRGB(191, 191, 191)
		end
		var34.Action.TextColor3 = var34
		var34 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_3() -- Internal function, doesn't exist in bytecode
			var34 = Color3.fromRGB(85, 255, 0)
			return var34
		end
		if not arg1 or not INLINED_3() then
			var34 = Color3.fromRGB(131, 131, 131)
		end
		var34.Action.BackgroundColor3 = var34
		var34 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action
		local function INLINED_4() -- Internal function, doesn't exist in bytecode
			var34 = Color3.fromRGB(36, 108, 0)
			return var34
		end
		if not arg1 or not INLINED_4() then
			var34 = Color3.fromRGB(51, 51, 51)
		end
		var34.UIStroke.Color = var34
	else
		var34 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_5() -- Internal function, doesn't exist in bytecode
			var34 = Color3.fromRGB(255, 255, 255)
			return var34
		end
		if not arg1 or not INLINED_5() then
			var34 = Color3.fromRGB(191, 191, 191)
		end
		var34.Action.TextColor3 = var34
		var34 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab
		local function INLINED_6() -- Internal function, doesn't exist in bytecode
			var34 = Color3.fromRGB(255, 0, 0)
			return var34
		end
		if not arg1 or not INLINED_6() then
			var34 = Color3.fromRGB(131, 131, 131)
		end
		var34.Action.BackgroundColor3 = var34
		var34 = MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action
		local function INLINED_7() -- Internal function, doesn't exist in bytecode
			var34 = Color3.fromRGB(108, 0, 0)
			return var34
		end
		if not arg1 or not INLINED_7() then
			var34 = Color3.fromRGB(51, 51, 51)
		end
		var34.UIStroke.Color = var34
	end
	var12_upvw = arg1
end
function ValidateAction(arg1) -- Line 83
	--[[ Upvalues[5]:
		[1]: var13_upvw (read and write)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: var9_upvw (read and write)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: CoreUtil_upvr (readonly)
	]]
	if var13_upvw == "Buy" then
		if arg1.EconomyInfo.BuyPrice * var9_upvw <= any_GetController_result1_upvr_2.Coins then
			if #any_GetController_result1_upvr_2.Inventory == any_GetController_result1_upvr.Modules.InventoryHandler.InventorySpace and not CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, arg1.Id) then
				return false
			end
			return true
		end
		return false
	end
	local any_GetItemInInventory_result1 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr_2.Inventory, arg1.Id)
	if any_GetItemInInventory_result1 and var9_upvw <= any_GetItemInInventory_result1.Stack then
		return true
	end
	return false
end
function UpdateShop(arg1) -- Line 108
	--[[ Upvalues[5]:
		[1]: MainGui_upvr (readonly)
		[2]: var10_upvw (read and write)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: var9_upvw (read and write)
		[5]: var13_upvw (read and write)
	]]
	-- KONSTANTERROR: Failed to generate AST for function `UpdateShop`:
runluau:8223: assertion failed!
Traceback:
runluau:8223 function gen_condition
runluau:8163 function gen_from_hl_block
runluau:8131 function gen_from_hl_block
runluau:8131 function gen_from_hl_block
runluau:8340 function astgen
runluau:8357 function astgen_protected
runluau:4639 function expr_function
runluau:7714 function NEWCLOSURE
runluau:7954 function gen_from_insts
runluau:8053 function gen_from_hl_block
runluau:8340 function astgen
runluau:8357 function astgen_protected
runluau:8418 function decompile_bytecode
runluau:11983 function wrapped
runluau:11991
runluau:12015 function _decompile
runluau:12181 function decompile
runluau:12377

end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function Initialise(arg1) -- Line 137
	--[[ Upvalues[9]:
		[1]: tbl_3_upvw (read and write)
		[2]: var10_upvw (read and write)
		[3]: MainGui_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: var13_upvw (read and write)
		[6]: any_GetController_result1_upvr_2 (readonly)
		[7]: CoreUtil_upvr (readonly)
		[8]: ReplicatedStorage_upvr (readonly)
		[9]: any_GetController_result1_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	UpdateShop(nil)
	tbl_3_upvw = {}
	var10_upvw = nil
	local _, pairs_result2, pairs_result3_4 = pairs(MainGui_upvr.Shop.ShopGrid.ScrollingFrame:GetChildren())
	local var69
	for _, v in var69, pairs_result2, pairs_result3_4 do
		if not v:IsA("UIListLayout") and not v:IsA("UIGridLayout") then
			v:Destroy()
		end
	end
	local function INLINED_8() -- Internal function, doesn't exist in bytecode
		var69 = any_RequireDefinitions_result1_upvr.Npc[arg1.Id]
		return var69
	end
	if not arg1 or not INLINED_8() then
	else
		local function INLINED_9() -- Internal function, doesn't exist in bytecode
			var69 = any_RequireDefinitions_result1_upvr.Npc[arg1.Id].Store
			return var69
		end
		if var13_upvw ~= "Buy" or not INLINED_9() then
			var69 = any_GetController_result1_upvr_2.Inventory
		end
		local tbl_2 = {}
		for _, v_2 in pairs(var69) do
			local var74
			local function INLINED_10() -- Internal function, doesn't exist in bytecode
				var74 = v_2
				return var74
			end
			if var13_upvw ~= "Buy" or not INLINED_10() then
				var74 = v_2.Id
			end
			local any_GetDefinitionFromId_result1_upvr = CoreUtil_upvr:GetDefinitionFromId(var74)
			if any_GetDefinitionFromId_result1_upvr and (var13_upvw ~= "Sell" or any_GetDefinitionFromId_result1_upvr.EconomyInfo.SellPrice) or var13_upvw ~= "Buy" or any_GetDefinitionFromId_result1_upvr.EconomyInfo.BuyPrice then
				local clone = ReplicatedStorage_upvr.Prefabs.UI.CraftingSlotTemplate:Clone()
				local tbl = {
					UI = clone;
				}
				if var13_upvw ~= "Buy" or not any_GetDefinitionFromId_result1_upvr.EconomyInfo.BuyPrice then
				end
				tbl.Price = any_GetDefinitionFromId_result1_upvr.EconomyInfo.SellPrice
				table.insert(tbl_2, tbl)
				clone.Name = any_GetDefinitionFromId_result1_upvr.Id
				clone.Frame.Title.Text = any_GetDefinitionFromId_result1_upvr.Id
				if var13_upvw == "Buy" and any_GetController_result1_upvr_2.Coins < any_GetDefinitionFromId_result1_upvr.EconomyInfo.BuyPrice then
					clone.Frame.Shader.Visible = true
				end
				tbl_3_upvw[any_GetDefinitionFromId_result1_upvr.Id] = any_GetDefinitionFromId_result1_upvr
				any_GetController_result1_upvr:UpdateItemDisplay(clone.Frame, any_GetDefinitionFromId_result1_upvr)
				clone.MouseButton1Up:Connect(function() -- Line 179
					--[[ Upvalues[2]:
						[1]: any_GetController_result1_upvr (copied, readonly)
						[2]: any_GetDefinitionFromId_result1_upvr (readonly)
					]]
					if any_GetController_result1_upvr.Processing then
					else
						UpdateShop(any_GetDefinitionFromId_result1_upvr)
					end
				end)
			end
		end
		table.sort(tbl_2, function(arg1_2, arg2) -- Line 186
			local var80
			if arg1_2.Price >= arg2.Price then
				var80 = false
			else
				var80 = true
			end
			return var80
		end)
		for _, v_3 in pairs(tbl_2) do
			any_GetDefinitionFromId_result1_upvr = MainGui_upvr.Shop.ShopGrid.ScrollingFrame
			v_3.UI.Parent = any_GetDefinitionFromId_result1_upvr
		end
		UpdateSearch()
	end
end
function module.ToggleShop(arg1, arg2, arg3) -- Line 195
	--[[ Upvalues[2]:
		[1]: var11_upvw (read and write)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 and arg3 then
		if arg3.Gender == "Male" then
			workspace.Sound.UI.MaleNpcNoise:Play()
		else
			workspace.Sound.UI.FemaleNpcNoise:Play()
		end
		var11_upvw = arg3
		Initialise(arg3)
	end
	if not arg2 then
		var11_upvw = nil
	end
	MainGui_upvr.Shop.Visible = arg2
end
MainGui_upvr.Shop.ShopGrid.SearchBar.Changed:Connect(UpdateSearch)
MainGui_upvr.Shop.ShopGrid.Toggle.MouseButton1Up:Connect(function() -- Line 218
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: var13_upvw (read and write)
		[3]: var11_upvw (read and write)
	]]
	if var13_upvw == "Buy" then
		var13_upvw = "Sell"
		MainGui_upvr.Shop.ShopGrid.Toggle.Text = "SWITCH TO BUY"
		MainGui_upvr.Shop.ShopGrid.Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
		MainGui_upvr.Shop.ShopGrid.Toggle.BackgroundColor3 = Color3.fromRGB(85, 255, 0)
		MainGui_upvr.Shop.ShopGrid.Toggle.UIStrokeA.Color = Color3.fromRGB(36, 108, 0)
	else
		var13_upvw = "Buy"
		MainGui_upvr.Shop.ShopGrid.Toggle.Text = "SWITCH TO SELL"
		MainGui_upvr.Shop.ShopGrid.Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
		MainGui_upvr.Shop.ShopGrid.Toggle.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		MainGui_upvr.Shop.ShopGrid.Toggle.UIStrokeA.Color = Color3.fromRGB(108, 0, 0)
	end
	Initialise(var11_upvw)
end)
local InventoryService_upvr = Knit.GetService("InventoryService")
local PlayerService_upvr = Knit.GetService("PlayerService")
MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.Action.MouseButton1Up:Connect(function() -- Line 240
	--[[ Upvalues[8]:
		[1]: var12_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: var13_upvw (read and write)
		[4]: InventoryService_upvr (readonly)
		[5]: var10_upvw (read and write)
		[6]: var9_upvw (read and write)
		[7]: PlayerService_upvr (readonly)
		[8]: var11_upvw (read and write)
	]]
	if var12_upvw and not any_GetController_result1_upvr.Processing then
		any_GetController_result1_upvr.Processing = true
		local var88
		if var13_upvw == "Buy" then
			local any_await_result1_2, any_await_result2 = InventoryService_upvr:Buy(var10_upvw, var9_upvw):andThen():await()
			_ = any_await_result1_2 -- Setting global
			var88 = any_await_result2
		else
			local any_await_result1, any_await_result2_2 = InventoryService_upvr:Sell(var10_upvw, var9_upvw):andThen():await()
			_ = any_await_result1 -- Setting global
			var88 = any_await_result2_2
		end
		if var88 then
			if var13_upvw == "Buy" then
				workspace.Sound.UI.ShopPurchase:Play()
			elseif 0 < var9_upvw and var9_upvw <= 10 then
				workspace.Sound.UI.ShopSmallSell:Play()
			elseif 10 < var9_upvw and var9_upvw <= 50 then
				workspace.Sound.UI.ShopMediumSell:Play()
			else
				workspace.Sound.UI.ShopLargeSell:Play()
			end
			PlayerService_upvr:GetCoins():andThen():await()
			UpdateShop(var10_upvw)
		else
			any_GetController_result1_upvr:WarningMessage("Error purchasing")
		end
		if var11_upvw then
			Initialise(var11_upvw)
		end
		any_GetController_result1_upvr.Processing = false
	end
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Add.MouseButton1Down:Connect(function() -- Line 283
	--[[ Upvalues[4]:
		[1]: var15_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: MainGui_upvr (readonly)
	]]
	if not var15_upvw and any_GetController_result1_upvr.Processing then
	else
		var15_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Add.MouseButton1Up)
		while wait() and var15_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			if UpdateYield("Add") ~= UpdateYield("Add") then
				UpdateYield("Sub")
				return
			end
		end
	end
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Subtract.MouseButton1Down:Connect(function() -- Line 298
	--[[ Upvalues[4]:
		[1]: var14_upvw (read and write)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: MainGui_upvr (readonly)
	]]
	if not var14_upvw and any_GetController_result1_upvr.Processing then
	else
		var14_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Subtract.MouseButton1Up)
		repeat
			if not wait() then break end
			if not var14_upvw then break end
			workspace.Sound.UI.CountAdjust:Play()
		until UpdateYield("Sub") ~= UpdateYield("Sub")
	end
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Add.MouseButton1Up:Connect(function() -- Line 312
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	var15_upvw = false
end)
MainGui_upvr.Shop.ShopMain.ScrollingFrame.Amount.Subtract.MouseButton1Up:Connect(function() -- Line 316
	--[[ Upvalues[1]:
		[1]: var14_upvw (read and write)
	]]
	var14_upvw = false
end)
MainGui_upvr.Shop.Titles.Close.MouseButton1Up:Connect(function() -- Line 320
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Shop", false)
end)
return module

Script name: StoreHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local MarketService_upvr = Knit.GetService("MarketService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module_upvr = {
	StoreObjects = {};
}
local LocalPlayer = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer.PlayerGui:WaitForChild("MainGui")
local var9_upvw
local var10_upvw = 0
local function _(arg1) -- Line 57, Named "ToggleGiftUI"
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: var9_upvw (read and write)
	]]
	MainGui_upvr.GiftPlayer.Visible = arg1
	if var9_upvw and arg1 then
		MainGui_upvr.GiftPlayer.Main.Title.Text = "GIFT .."
		var9_upvw.Def.Id:upper()
	end
end
local function _(arg1, arg2) -- Line 62, Named "BuyStoreItem"
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MarketService_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		any_GetController_result1_upvr.Processing = true
		local _, any_await_result2_5 = MarketService_upvr:PurchaseItem(arg1.Id, arg2):andThen():await()
		if any_await_result2_5 and arg1.Def.ProductType == "GamePass" then
			arg1:Bought()
		end
		any_GetController_result1_upvr.Processing = false
	end
end
local function _(arg1, arg2, arg3) -- Line 78, Named "GiftStoreItem"
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MarketService_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		any_GetController_result1_upvr.Processing = true
		local _, _ = MarketService_upvr:GiftItem(arg1.Id, arg2, arg3):andThen():await()
		any_GetController_result1_upvr.Processing = false
	end
end
local function ResizeStoreCellsize_upvr() -- Line 87, Named "ResizeStoreCellsize"
	--[[ Upvalues[1]:
		[1]: MainGui_upvr (readonly)
	]]
	MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(1, 0, 0, MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.AbsoluteWindowSize.X * 0.318)
	MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame.UIGridLayout.AbsoluteContentSize.Y)
	task.wait(1)
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local StoreObj_upvr = require(script.StoreObj)
function module_upvr.Initialise(arg1) -- Line 98
	--[[ Upvalues[11]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: StoreObj_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: MainGui_upvr (readonly)
		[5]: module_upvr (readonly)
		[6]: any_GetController_result1_upvr (readonly)
		[7]: MarketService_upvr (readonly)
		[8]: var9_upvw (read and write)
		[9]: var10_upvw (read and write)
		[10]: CoreUtil_upvr (readonly)
		[11]: ResizeStoreCellsize_upvr (readonly)
	]]
	local _, pairs_result2, pairs_result3_7 = pairs(any_RequireDefinitions_result1_upvr.Store)
	local var56
	for i, v in var56, pairs_result2, pairs_result3_7 do
		local any_new_result1_upvr = StoreObj_upvr.new(v)
		if v.Type == "Theme" then
			any_new_result1_upvr.UI = ReplicatedStorage_upvr.Prefabs.UI.ThemePassTemp:Clone()
			any_new_result1_upvr.UiParent = MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame
			any_new_result1_upvr.UI.ImageLabel.Image = v.DisplayData.Background
			if v.IsNew then
				any_new_result1_upvr.UI.New.Visible = true
			end
			for i_2, v_2 in pairs(v.DisplayData.Title) do
				any_new_result1_upvr.UI.Title[tostring(i_2)].Text = v_2
				any_new_result1_upvr.UI.Title[tostring(i_2)].UIStroke.Color = v.DisplayData.TitleStroke
			end
			for i_3, v_3 in pairs(v.DisplayData.Products) do
				any_new_result1_upvr.UI.Products[i_3].Title.Text = v_3.Title
				any_new_result1_upvr.UI.Products[i_3].Title.UIStroke.Color = v.DisplayData.TitleStroke
				any_new_result1_upvr.UI.Products[i_3].ImageLabel.Image = v_3.Image
			end
			for _, v_4 in pairs(any_new_result1_upvr.UI.Options:GetChildren()) do
				if #v.Price < tonumber(v_4.Name) then
					v_4.Visible = false
				end
			end
			for i_5_upvr, v_5 in pairs(v.Price) do
				any_new_result1_upvr.UI.LayoutOrder = -v.LayoutOrder
				any_new_result1_upvr.UI.Options[i_5_upvr].Description.Text = v.DisplayData.Purchases[i_5_upvr].Description
				any_new_result1_upvr.UI.Options[i_5_upvr].Description.UIStroke.Color = v.DisplayData.TitleStroke
				any_new_result1_upvr.UI.Options[i_5_upvr].Buy.Amount.Text = v_5
				if not table.find(module_upvr.Passes, v.Id) then
					any_new_result1_upvr.UI.Options[i_5_upvr].Buy.MouseButton1Down:Connect(function() -- Line 141
						--[[ Upvalues[4]:
							[1]: any_new_result1_upvr (readonly)
							[2]: i_5_upvr (readonly)
							[3]: any_GetController_result1_upvr (copied, readonly)
							[4]: MarketService_upvr (copied, readonly)
						]]
						local var71 = any_new_result1_upvr
						if any_GetController_result1_upvr.Processing then
						else
							any_GetController_result1_upvr.Processing = true
							local _, any_await_result2_3 = MarketService_upvr:PurchaseItem(var71.Id, i_5_upvr):andThen():await()
							if any_await_result2_3 and var71.Def.ProductType == "GamePass" then
								var71:Bought()
							end
							any_GetController_result1_upvr.Processing = false
						end
					end)
				else
					any_new_result1_upvr.UI.Options[i_5_upvr].Buy.Amount.Text = "Owned"
				end
				if v.Giftable then
					any_new_result1_upvr.UI.Options[i_5_upvr].Gift.Visible = true
					any_new_result1_upvr.UI.Options[i_5_upvr].Gift.MouseButton1Down:Connect(function() -- Line 150
						--[[ Upvalues[5]:
							[1]: var9_upvw (copied, read and write)
							[2]: any_new_result1_upvr (readonly)
							[3]: var10_upvw (copied, read and write)
							[4]: i_5_upvr (readonly)
							[5]: MainGui_upvr (copied, readonly)
						]]
						var9_upvw = any_new_result1_upvr
						var10_upvw = i_5_upvr
						MainGui_upvr.GiftPlayer.Visible = true
						if var9_upvw then
							MainGui_upvr.GiftPlayer.Main.Title.Text = "GIFT .."
							var9_upvw.Def.Id:upper()
						end
					end)
				end
			end
		elseif v.Type == "Custom" then
			i_5_upvr = ReplicatedStorage_upvr
			any_new_result1_upvr.UI = i_5_upvr.Prefabs.UI.CustomStoreSlots[v.DisplayData.PrefabName]:Clone()
			i_5_upvr = MainGui_upvr
			any_new_result1_upvr.UiParent = i_5_upvr.Store.Main.StoreGrid.ScrollingFrame
			for _, v_8 in pairs(any_new_result1_upvr.UI.Options:GetChildren()) do
				if #v.Price < tonumber(v_8.Name) then
					v_8.Visible = false
				end
			end
			for i_9_upvr, v_9 in pairs(v.Price) do
				any_new_result1_upvr.UI.LayoutOrder = -v.LayoutOrder
				any_new_result1_upvr.UI.Options[i_9_upvr].Buy.Amount.Text = v_9
				if not table.find(module_upvr.Passes, v.Id) then
					any_new_result1_upvr.UI.Options[i_9_upvr].Buy.MouseButton1Down:Connect(function() -- Line 178
						--[[ Upvalues[4]:
							[1]: any_new_result1_upvr (readonly)
							[2]: i_9_upvr (readonly)
							[3]: any_GetController_result1_upvr (copied, readonly)
							[4]: MarketService_upvr (copied, readonly)
						]]
						local var82 = any_new_result1_upvr
						if any_GetController_result1_upvr.Processing then
						else
							any_GetController_result1_upvr.Processing = true
							local _, any_await_result2_4 = MarketService_upvr:PurchaseItem(var82.Id, i_9_upvr):andThen():await()
							if any_await_result2_4 and var82.Def.ProductType == "GamePass" then
								var82:Bought()
							end
							any_GetController_result1_upvr.Processing = false
						end
					end)
				else
					any_new_result1_upvr.UI.Options[i_9_upvr].Buy.Amount.Text = "Owned"
				end
				if v.Giftable then
					any_new_result1_upvr.UI.Options[i_9_upvr].Gift.Visible = true
					any_new_result1_upvr.UI.Options[i_9_upvr].Gift.MouseButton1Down:Connect(function() -- Line 187
						--[[ Upvalues[5]:
							[1]: var9_upvw (copied, read and write)
							[2]: any_new_result1_upvr (readonly)
							[3]: var10_upvw (copied, read and write)
							[4]: i_9_upvr (readonly)
							[5]: MainGui_upvr (copied, readonly)
						]]
						var9_upvw = any_new_result1_upvr
						var10_upvw = i_9_upvr
						MainGui_upvr.GiftPlayer.Visible = true
						if var9_upvw then
							MainGui_upvr.GiftPlayer.Main.Title.Text = "GIFT .."
							var9_upvw.Def.Id:upper()
						end
					end)
				end
			end
		else
			i_9_upvr = MainGui_upvr
			any_new_result1_upvr.UiParent = i_9_upvr.Store.Main.StoreGrid.ScrollingFrame
			any_new_result1_upvr.UI = ReplicatedStorage_upvr.Prefabs.UI.GamePassTemp:Clone()
			any_new_result1_upvr.UI.LayoutOrder = -v.LayoutOrder
			any_new_result1_upvr.UI.ProductName.Text = v.Id
			any_new_result1_upvr.UI.Description.Text = v.DisplayData.Description
			any_new_result1_upvr.UI.Buy.Amount.Text = v.Price[1]
			any_new_result1_upvr.UI.ImageLabel.Image = v.DisplayData.DisplayImage
			if not table.find(module_upvr.Passes, v.Id) then
				any_new_result1_upvr.UI.Buy.MouseButton1Down:Connect(function() -- Line 209
					--[[ Upvalues[3]:
						[1]: any_new_result1_upvr (readonly)
						[2]: any_GetController_result1_upvr (copied, readonly)
						[3]: MarketService_upvr (copied, readonly)
					]]
					local var87 = any_new_result1_upvr
					if any_GetController_result1_upvr.Processing then
					else
						any_GetController_result1_upvr.Processing = true
						local _, any_await_result2_2 = MarketService_upvr:PurchaseItem(var87.Id, 1):andThen():await()
						if any_await_result2_2 and var87.Def.ProductType == "GamePass" then
							var87:Bought()
						end
						any_GetController_result1_upvr.Processing = false
					end
				end)
			else
				any_new_result1_upvr.UI.Buy.Amount.Text = "Owned"
			end
			if v.Giftable then
				any_new_result1_upvr.UI.Gift.Visible = true
				any_new_result1_upvr.UI.Gift.MouseButton1Down:Connect(function() -- Line 218
					--[[ Upvalues[4]:
						[1]: var9_upvw (copied, read and write)
						[2]: any_new_result1_upvr (readonly)
						[3]: var10_upvw (copied, read and write)
						[4]: MainGui_upvr (copied, readonly)
					]]
					var9_upvw = any_new_result1_upvr
					var10_upvw = 1
					MainGui_upvr.GiftPlayer.Visible = true
					if var9_upvw then
						MainGui_upvr.GiftPlayer.Main.Title.Text = "GIFT .."
						var9_upvw.Def.Id:upper()
					end
				end)
			end
		end
		module_upvr.StoreObjects[i] = any_new_result1_upvr
	end
	var56 = ""
	for _, v_6 in pairs(CoreUtil_upvr.StoreOrder) do
		if module_upvr.StoreObjects[v_6] then
			var56 = var56..'1'
			module_upvr.StoreObjects[v_6].UI.Name = var56
			module_upvr.StoreObjects[v_6].UI.Parent = module_upvr.StoreObjects[v_6].UiParent
			module_upvr.StoreObjects[v_6] = nil
		end
	end
	for _, v_7 in pairs(module_upvr.StoreObjects) do
		var56 = var56..'1'
		v_7.UI.Name = var56
		v_7.UI.Parent = v_7.UiParent
	end
	ResizeStoreCellsize_upvr()
	MainGui_upvr.Store.Main.StoreGrid.ScrollingFrame:GetPropertyChangedSignal("AbsoluteWindowSize"):Connect(ResizeStoreCellsize_upvr)
end
local var97_upvw
function module_upvr.ToggleStore(arg1, arg2) -- Line 270
	--[[ Upvalues[4]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: var97_upvw (read and write)
		[3]: MarketService_upvr (readonly)
		[4]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		if arg2 then
			workspace.Sound.UI.OpenStore:Play()
			if not var97_upvw then
				MarketService_upvr:OpenedShop()
			end
			MainGui_upvr.HUD.RightPanel.ShopButton.New.Visible = false
			var97_upvw = true
		end
		MainGui_upvr.Store.Visible = arg2
	end
end
local any_await_result1, any_await_result2 = MarketService_upvr:GetPasses(LocalPlayer):andThen():await()
_ = any_await_result1 -- Setting global
module_upvr.Passes = any_await_result2
game:GetService("ContextActionService"):BindAction("ToggleStore", function(arg1, arg2) -- Line 285
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Store", not MainGui_upvr.Store.Visible)
	end
end, false, Enum.KeyCode.B)
MainGui_upvr.HUD.RightPanel.ShopButton.Button.MouseButton1Up:Connect(function() -- Line 290
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Store", not MainGui_upvr.Store.Visible)
end)
MainGui_upvr.Store.Main.Close.MouseButton1Up:Connect(function() -- Line 294
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Store", false)
end)
MainGui_upvr.GiftPlayer.Main.Gift.MouseButton1Up:Connect(function() -- Line 298
	--[[ Upvalues[5]:
		[1]: MainGui_upvr (readonly)
		[2]: var9_upvw (read and write)
		[3]: var10_upvw (read and write)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: MarketService_upvr (readonly)
	]]
	local Text_upvr = MainGui_upvr.GiftPlayer.Main.Username.Text
	local var105_upvw
	pcall(function() -- Line 303
		--[[ Upvalues[2]:
			[1]: var105_upvw (read and write)
			[2]: Text_upvr (readonly)
		]]
		var105_upvw = game.Players:GetUserIdFromNameAsync(Text_upvr)
	end)
	if var105_upvw then
		if any_GetController_result1_upvr.Processing then
		else
			any_GetController_result1_upvr.Processing = true
			local _, _ = MarketService_upvr:GiftItem(var9_upvw.Id, var10_upvw, MainGui_upvr.GiftPlayer.Main.Username.Text):andThen():await()
			any_GetController_result1_upvr.Processing = false
		end
		var9_upvw = nil
		var10_upvw = 0
		MainGui_upvr.GiftPlayer.Visible = false
	else
		any_GetController_result1_upvr:WarningMessage(Text_upvr.." Is not a valid player")
	end
end)
MainGui_upvr.GiftPlayer.Main.Close.MouseButton1Up:Connect(function() -- Line 319
	--[[ Upvalues[3]:
		[1]: var9_upvw (read and write)
		[2]: var10_upvw (read and write)
		[3]: MainGui_upvr (readonly)
	]]
	var9_upvw = nil
	var10_upvw = 0
	MainGui_upvr.GiftPlayer.Visible = false
end)
local any_await_result1_2, any_await_result2_6 = MarketService_upvr:HasOpenedShop():andThen():await()
_ = any_await_result1_2 -- Setting global
var97_upvw = any_await_result2_6
if not var97_upvw then
	MainGui_upvr.HUD.RightPanel.ShopButton.New.Visible = true
end
module_upvr:Initialise()
return module_upvr

Script name: StoreObj
  - Script: 


local _ = require(game:GetService("ReplicatedStorage").Packages.Knit)
local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1) -- Line 18
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {
		Id = arg1.Id;
		UI = nil;
		UiParent = nil;
	}
	module.Def = arg1
	return setmetatable(module, module_2_upvr)
end
function module_2_upvr.Bought(arg1) -- Line 33
	if arg1.Def.Type == "Theme" then
		for i, _ in pairs(arg1.Def.Price) do
			arg1.UI.Options[i].Buy.Amount.Text = "Owned"
		end
	else
		arg1.UI.Buy.Amount.Text = "Owned"
	end
end
return module_2_upvr

Script name: IslandHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local MarketService = Knit.GetService("MarketService")
local PlayerService_upvr = Knit.GetService("PlayerService")
local any_GetController_result1_2_upvr = Knit.GetController("UIController")
local any_GetController_result1 = Knit.GetController("BlockController")
local module_upvr = {}
local LocalPlayer = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer.PlayerGui:WaitForChild("MainGui")
local Main_upvr = MainGui_upvr.IslandSettings.Main
local var11_upvw = "Options"
local var12_upvw = "Defult"
local var13_upvw = "Defult"
any_GetController_result1_2_upvr.Unlocks = {
	Portals = {};
	Skys = {};
}
function SelectSky(arg1) -- Line 31
	--[[ Upvalues[3]:
		[1]: var13_upvw (read and write)
		[2]: PlayerService_upvr (readonly)
		[3]: Main_upvr (readonly)
	]]
	if var13_upvw == arg1 then
	else
		local _, any_await_result2 = PlayerService_upvr:CosmeticChange("Sky", arg1):andThen():await()
		if not any_await_result2 then return end
		for _, v_7 in pairs(Main_upvr.SkySelectPanel.ScrollingFrame:GetChildren()) do
			if not v_7:IsA("UIListLayout") and not v_7:IsA("UIGridLayout") then
				if v_7.Name == arg1 then
					v_7.Data.SelectButton.Text = "Selected"
				else
					v_7.Data.SelectButton.Text = "Select"
				end
			end
		end
		var13_upvw = arg1
	end
end
function SelectPortal(arg1) -- Line 51
	--[[ Upvalues[3]:
		[1]: var12_upvw (read and write)
		[2]: PlayerService_upvr (readonly)
		[3]: Main_upvr (readonly)
	]]
	if var12_upvw == arg1 then
	else
		local _, any_await_result2_2 = PlayerService_upvr:CosmeticChange("Portal", arg1):andThen():await()
		if not any_await_result2_2 then return end
		for _, v_8 in pairs(Main_upvr.PortalSelectPanel.ScrollingFrame:GetChildren()) do
			if not v_8:IsA("UIListLayout") and not v_8:IsA("UIGridLayout") then
				if v_8.Name == arg1 then
					v_8.Data.SelectButton.Text = "Selected"
				else
					v_8.Data.SelectButton.Text = "Select"
				end
			end
		end
		var12_upvw = arg1
	end
end
local any_RequireDefinitions_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):RequireDefinitions()
function module_upvr.Initialise(arg1) -- Line 71
	--[[ Upvalues[6]:
		[1]: Main_upvr (readonly)
		[2]: any_GetController_result1_2_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
		[5]: var12_upvw (read and write)
		[6]: var13_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	for _, v in pairs(Main_upvr.PortalSelectPanel.ScrollingFrame:GetChildren()) do
		if not v:IsA("UIListLayout") and not v:IsA("UIGridLayout") then
			v:Destroy()
		end
	end
	for _, v_2_upvr in pairs(any_GetController_result1_2_upvr.Unlocks.Portals) do
		local var158
		for _, v_3 in pairs(any_RequireDefinitions_result1_upvr.Store) do
			if v_3.ExtraData and v_3.ExtraData.ThemeId == v_2_upvr then
				var158 = v_3
			end
		end
		local clone = ReplicatedStorage_upvr.Prefabs.UI.CosmeticOptionTemplate:Clone()
		if not var158 or not var158.DisplayData.PortalBG then
		end
		clone.Data.ImageLabel.Image = clone.Data.ImageLabel.Image
		clone.Data.Title.Text = v_2_upvr
		clone.Parent = Main_upvr.PortalSelectPanel.ScrollingFrame
		clone.Name = v_2_upvr
		if v_2_upvr == var12_upvw then
			clone.Data.SelectButton.Text = "Selected"
		else
			clone.Data.SelectButton.Text = "Select"
		end
		clone.Data.SelectButton.MouseButton1Up:Connect(function() -- Line 101
			--[[ Upvalues[2]:
				[1]: any_GetController_result1_2_upvr (copied, readonly)
				[2]: v_2_upvr (readonly)
			]]
			if any_GetController_result1_2_upvr.Processing then
			else
				any_GetController_result1_2_upvr.Processing = true
				SelectPortal(v_2_upvr)
				any_GetController_result1_2_upvr.Processing = false
			end
		end)
	end
	for _, v_4 in pairs(Main_upvr.SkySelectPanel.ScrollingFrame:GetChildren()) do
		var158 = v_4:IsA("UIListLayout")
		if not var158 then
			var158 = v_4:IsA("UIGridLayout")
			if not var158 then
				var158 = v_4:Destroy
				var158()
			end
		end
	end
	for _, v_5_upvr in pairs(any_GetController_result1_2_upvr.Unlocks.Skys) do
		var158 = nil
		for _, v_6 in pairs(any_RequireDefinitions_result1_upvr.Store) do
			if v_6.ExtraData and v_6.ExtraData.ThemeId == v_5_upvr then
				var158 = v_6
			end
		end
		local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.CosmeticOptionTemplate:Clone()
		if not var158 or not var158.DisplayData.SkyBG then
		end
		clone_2.Data.ImageLabel.Image = clone_2.Data.ImageLabel.Image
		clone_2.Data.Title.Text = v_5_upvr
		clone_2.Parent = Main_upvr.SkySelectPanel.ScrollingFrame
		clone_2.Name = v_5_upvr
		if v_5_upvr == var13_upvw then
			clone_2.Data.SelectButton.Text = "Selected"
		else
			clone_2.Data.SelectButton.Text = "Select"
		end
		clone_2.Data.SelectButton.MouseButton1Up:Connect(function() -- Line 136
			--[[ Upvalues[2]:
				[1]: any_GetController_result1_2_upvr (copied, readonly)
				[2]: v_5_upvr (readonly)
			]]
			if any_GetController_result1_2_upvr.Processing then
			else
				any_GetController_result1_2_upvr.Processing = true
				SelectSky(v_5_upvr)
				any_GetController_result1_2_upvr.Processing = false
			end
		end)
	end
end
function module_upvr.UpdatePage(arg1, arg2) -- Line 147
	--[[ Upvalues[2]:
		[1]: var11_upvw (read and write)
		[2]: Main_upvr (readonly)
	]]
	var11_upvw = arg2
	if arg2 == "Options" then
		Main_upvr.IslandOptions.Visible = true
		Main_upvr.PortalSelectPanel.Visible = false
		Main_upvr.SkySelectPanel.Visible = false
	else
		if arg2 == "Portals" then
			Main_upvr.IslandOptions.Visible = false
			Main_upvr.PortalSelectPanel.Visible = true
			Main_upvr.SkySelectPanel.Visible = false
			return
		end
		if arg2 == "Skys" then
			Main_upvr.IslandOptions.Visible = false
			Main_upvr.PortalSelectPanel.Visible = false
			Main_upvr.SkySelectPanel.Visible = true
		end
	end
end
function module_upvr.ToggleIsland(arg1, arg2) -- Line 173
	--[[ Upvalues[1]:
		[1]: MainGui_upvr (readonly)
	]]
	MainGui_upvr.IslandSettings.Visible = arg2
end
game:GetService("ContextActionService"):BindAction("Toggle Island", function(arg1, arg2) -- Line 180
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_2_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_2_upvr:ToggleUI("Island", not MainGui_upvr.IslandSettings.Visible)
	end
end, false, Enum.KeyCode.L)
MainGui_upvr.HUD.RightPanel.IslandButton.Button.MouseButton1Up:Connect(function() -- Line 184
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_2_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_2_upvr:ToggleUI("Island", not MainGui_upvr.IslandSettings.Visible)
end)
MainGui_upvr.IslandSettings.Main.Navigation.SkyButton.MouseButton1Up:Connect(function() -- Line 188
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr:UpdatePage("Skys")
end)
MainGui_upvr.IslandSettings.Main.Navigation.PortalButton.MouseButton1Up:Connect(function() -- Line 192
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr:UpdatePage("Portals")
end)
MainGui_upvr.IslandSettings.Main.Navigation.SettingsButton.MouseButton1Up:Connect(function() -- Line 196
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr:UpdatePage("Options")
end)
local tbl_upvr_2 = {"Can Join", "Friends Only", "Cannot Join"}
local tbl_upvr = {"No One", "Friends Only", "Everyone"}
MainGui_upvr.IslandSettings.Main.IslandOptions.JoinPerms.Toggle.MouseButton1Up:Connect(function() -- Line 213
	--[[ Upvalues[4]:
		[1]: any_GetController_result1_2_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: tbl_upvr_2 (readonly)
		[4]: PlayerService_upvr (readonly)
	]]
	local var180 = any_GetController_result1_2_upvr
	if 3 < any_GetController_result1_2_upvr.OptionData.IslandJoining + 1 then
		var180 = 1
	else
		var180 = any_GetController_result1_2_upvr.OptionData.IslandJoining + 1
	end
	var180.OptionData.IslandJoining = var180
	MainGui_upvr.IslandSettings.Main.IslandOptions.JoinPerms.Toggle.Text = tbl_upvr_2[any_GetController_result1_2_upvr.OptionData.IslandJoining]
	PlayerService_upvr:UpdateIslandOption("IslandJoining", any_GetController_result1_2_upvr.OptionData.IslandJoining)
end)
MainGui_upvr.IslandSettings.Main.IslandOptions.PublicBuildPerms.Toggle.MouseButton1Up:Connect(function() -- Line 220
	--[[ Upvalues[4]:
		[1]: any_GetController_result1_2_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: PlayerService_upvr (readonly)
	]]
	local var182 = any_GetController_result1_2_upvr
	if 3 < any_GetController_result1_2_upvr.OptionData.CollaborativeBuilding + 1 then
		var182 = 1
	else
		var182 = any_GetController_result1_2_upvr.OptionData.CollaborativeBuilding + 1
	end
	var182.OptionData.CollaborativeBuilding = var182
	MainGui_upvr.IslandSettings.Main.IslandOptions.PublicBuildPerms.Toggle.Text = tbl_upvr[any_GetController_result1_2_upvr.OptionData.CollaborativeBuilding]
	PlayerService_upvr:UpdateIslandOption("CollaborativeBuilding", any_GetController_result1_2_upvr.OptionData.CollaborativeBuilding)
end)
MainGui_upvr.IslandSettings.Main.IslandOptions.TimeOfDay.Toggle.MouseButton1Up:Connect(function() -- Line 226
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_2_upvr (readonly)
		[2]: MainGui_upvr (readonly)
		[3]: PlayerService_upvr (readonly)
	]]
	local var184 = any_GetController_result1_2_upvr
	if any_GetController_result1_2_upvr.OptionData.Time == "Noon" then
		var184 = "Night"
	else
		var184 = "Noon"
	end
	var184.OptionData.Time = var184
	MainGui_upvr.IslandSettings.Main.IslandOptions.TimeOfDay.Toggle.Text = any_GetController_result1_2_upvr.OptionData.Time
	PlayerService_upvr:UpdateIslandOption("Time", any_GetController_result1_2_upvr.OptionData.Time)
end)
MainGui_upvr.IslandSettings.Main.Close.MouseButton1Up:Connect(function() -- Line 233
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_2_upvr (readonly)
	]]
	any_GetController_result1_2_upvr:ToggleUI("Island", false)
end)
MarketService.CosmeticsUpdated:Connect(function(arg1) -- Line 237
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_2_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	any_GetController_result1_2_upvr.Unlocks = arg1
	module_upvr:Initialise()
end)
local any_await_result1, any_await_result2_3 = MarketService:GetCosmetics():andThen():await()
_ = any_await_result1 -- Setting global
any_GetController_result1_2_upvr.Unlocks = any_await_result2_3
local any_await_result1_2, any_await_result2_4 = PlayerService_upvr:GetIslandOptions():andThen():await()
_ = any_await_result1_2 -- Setting global
any_GetController_result1_2_upvr.OptionData = any_await_result2_4
if any_GetController_result1_2_upvr.OptionData.CollaborativeBuilding == 1 then
	any_GetController_result1.CollabrativeBuilding = false
elseif any_GetController_result1_2_upvr.OptionData.CollaborativeBuilding == 2 and not LocalPlayer:IsFriendsWith(any_GetController_result1.IslandOwner.UserId) then
	any_GetController_result1.CollabrativeBuilding = false
else
	any_GetController_result1.CollabrativeBuilding = true
end
MainGui_upvr.IslandSettings.Main.IslandOptions.JoinPerms.Toggle.Text = tbl_upvr_2[any_GetController_result1_2_upvr.OptionData.IslandJoining]
MainGui_upvr.IslandSettings.Main.IslandOptions.TimeOfDay.Toggle.Text = any_GetController_result1_2_upvr.OptionData.Time
MainGui_upvr.IslandSettings.Main.IslandOptions.PublicBuildPerms.Toggle.Text = tbl_upvr[any_GetController_result1_2_upvr.OptionData.CollaborativeBuilding]
module_upvr:Initialise()
module_upvr:UpdatePage(var11_upvw)
SelectSky(any_GetController_result1_2_upvr.Unlocks.Equipped.Sky)
SelectPortal(any_GetController_result1_2_upvr.Unlocks.Equipped.Portal)
return module_upvr

Script name: TaskHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TutorialHandler_upvr = require(script.TutorialHandler)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local module_upvr = {
	TaskSlotObjects = {};
}
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local _ = {
	Empty = "rbxassetid://17714797185";
	Check = "rbxassetid://17714796919";
	ExclemationMark = "rbxassetid://10100312307";
}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local TweenService_upvr = game:GetService("TweenService")
function EventToggled(arg1, arg2) -- Line 29
	--[[ Upvalues[3]:
		[1]: MainGui_upvr (readonly)
		[2]: TweenService_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if arg1.Def.Hidden then
	else
		MainGui_upvr.Event.Main.Title.Text = arg1.Id
		for i_2, v_2 in pairs(MainGui_upvr.Event.Main.Rewards:GetChildren()) do
			if v_2:IsA("TextLabel") then
				v_2:Destroy()
			end
		end
		if arg2 == "Start" then
			i_2 = workspace
			i_2.Sound.Event.EventStart:Play()
			i_2 = MainGui_upvr
			local Main_2 = i_2.Event.Main
			i_2 = arg1.TaskSavedData
			if i_2.IsEvent then
				Main_2 = "Event Started"
			else
				Main_2 = "Quest Started"
			end
			Main_2.Status.Text = Main_2
			i_2 = MainGui_upvr
			v_2 = arg1.Def
			i_2 = v_2.TaskDisplay
			i_2.Event.Main.Description.Text = i_2[1].Title
		elseif arg2 == "Failed" then
			i_2 = workspace
			i_2.Sound.Event.EventFailed:Play()
			i_2 = MainGui_upvr
			local Main = i_2.Event.Main
			i_2 = arg1.TaskSavedData
			if i_2.IsEvent then
				Main = "Event Failed"
			else
				Main = "Quest Failed"
			end
			Main.Status.Text = Main
			i_2 = MainGui_upvr
			i_2.Event.Main.Description.Text = ""
			local var55
		elseif arg2 == "Completed" then
			i_2 = workspace
			var55 = i_2.Sound.Event
			var55.EventComplete:Play()
			i_2 = MainGui_upvr
			var55 = i_2.Event.Main
			local var56 = var55
			i_2 = arg1.TaskSavedData
			if i_2.IsEvent then
				var56 = "Event Complete"
			else
				var56 = "Quest Complete"
			end
			var56.Status.Text = var56
			i_2 = MainGui_upvr
			if arg1.Rewards then
			else
			end
			i_2.Event.Main.Description.Text = ""
		end
		i_2 = MainGui_upvr
		for _, v_3 in pairs(i_2.Event.Main:GetDescendants()) do
			if v_3:IsA("TextLabel") then
				TweenService_upvr:Create(v_3, TweenInfo.new(1), {
					TextTransparency = 0;
					TextStrokeTransparency = 0;
				}):Play()
			end
		end
		task.wait(2)
		if arg2 == "Completed" and arg1.Rewards then
			for i_4, v_4 in pairs(arg1.Rewards) do
				if i_4 == "Items" then
					for i_5, v_5 in pairs(v_4) do
						local clone = ReplicatedStorage_upvr.Prefabs.UI.EventReward:Clone()
						clone.Text = i_5..' '..tostring(v_5)
						clone.Parent = MainGui_upvr.Event.Main.Rewards
						workspace.Sound.ItemPickup:GetChildren()[math.random(1, #workspace.Sound.ItemPickup:GetChildren())]:Play()
						task.wait(1)
					end
				elseif i_4 == "Block" then
					i_5 = ReplicatedStorage_upvr
					local clone_3 = i_5.Prefabs.UI.EventReward:Clone()
					i_5 = ' '
					v_5 = tostring(v_4.Count)
					clone_3.Text = v_4.Id..i_5..v_5
					v_5 = MainGui_upvr
					i_5 = v_5.Event
					clone_3.Parent = i_5.Main.Rewards
					v_5 = workspace
					i_5 = v_5.Sound
					i_5 = math.random
					v_5 = 1
					i_5 = i_5(v_5, #workspace.Sound.ItemPickup:GetChildren())
					i_5.ItemPickup:GetChildren()[i_5]:Play()
					task.wait(1)
				else
					i_5 = ReplicatedStorage_upvr
					local clone_2 = i_5.Prefabs.UI.EventReward:Clone()
					i_5 = ' '
					v_5 = tostring(v_4)
					clone_2.Text = i_4..i_5..v_5
					v_5 = MainGui_upvr
					i_5 = v_5.Event
					clone_2.Parent = i_5.Main.Rewards
					v_5 = workspace
					i_5 = v_5.Sound
					i_5 = math.random
					v_5 = 1
					i_5 = i_5(v_5, #workspace.Sound.ItemPickup:GetChildren())
					i_5.ItemPickup:GetChildren()[i_5]:Play()
					task.wait(1)
				end
			end
		end
		task.wait(2)
		for _, v_6 in pairs(MainGui_upvr.Event.Main:GetDescendants()) do
			if v_6:IsA("TextLabel") then
				TweenService_upvr:Create(v_6, TweenInfo.new(1), {
					TextTransparency = 1;
					TextStrokeTransparency = 1;
				}):Play()
			end
		end
	end
end
local TaskSlotObject_upvr = require(script.TaskSlotObject)
function NewTask(arg1) -- Line 108
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: TaskSlotObject_upvr (readonly)
	]]
	if module_upvr.TaskSlotObjects[arg1.Index] then
	else
		local any_new_result1 = TaskSlotObject_upvr.new(arg1)
		module_upvr.TaskSlotObjects[arg1.Index] = any_new_result1
		if not arg1.Def.Hidden then
			any_new_result1:Initialise()
		end
	end
end
function TaskCompleted(arg1) -- Line 122
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var76 = module_upvr.TaskSlotObjects[arg1.Index]
	if not var76 then
	else
		EventToggled(arg1, "Completed")
		if arg1.TaskSavedData.IsEvent then
			var76:Destroy()
			module_upvr.TaskSlotObjects[arg1.Index] = nil
		end
	end
end
function TaskFailed(arg1) -- Line 138
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var77 = module_upvr.TaskSlotObjects[arg1.Index]
	if not var77 then
	elseif arg1.TaskSavedData.IsEvent then
		EventToggled(arg1, "Failed")
		var77:Destroy()
		module_upvr.TaskSlotObjects[arg1.Index] = nil
	end
end
function UpdateTask(arg1) -- Line 155
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: any_RequireDefinitions_result1_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: TutorialHandler_upvr (readonly)
	]]
	local var82 = module_upvr.TaskSlotObjects[arg1.Index]
	if not var82 then
	else
		var82.TaskObject = arg1
		for i_7, v_7 in pairs(arg1.Progress) do
			local TaskParams = arg1.Def.TaskParams
			local var89 = TaskParams[i_7]
			local var90
			if var90 then
				TaskParams = true
			else
				var90 = any_RequireDefinitions_result1_upvr.TaskType[var82.Def.TaskIds[i_7]]
				TaskParams = var90.IsCompleted
				var90 = game.Players.LocalPlayer
				TaskParams = TaskParams(var90, var82.TaskObject.Progress[i_7], var89)
			end
			if arg1.InstaComplete then
				var90 = true
			else
				var90 = any_RequireDefinitions_result1_upvr.TaskType[var82.Def.TaskIds[i_7]].IsCompleted(game.Players.LocalPlayer, v_7, var89)
			end
			if not TaskParams and var90 then
				if CoreUtil_upvr:IsTutorialQuest(arg1) then
					TutorialHandler_upvr:DestroyTutorialTask(arg1, i_7)
				end
				if not arg1.Def.Hidden then
					workspace.Sound.QuestComplete:Play()
					if arg1.Progress[i_7 + 1] and arg1.Def.Structured then
						var82:AddTab(arg1.Def.TaskDisplay[i_7 + 1].Title)
					else
						var82:Destroy()
						module_upvr.TaskSlotObjects[arg1.Index] = nil
						return
					end
				end
			end
			var82:UpdateTab(i_7, v_7)
		end
	end
end
function SubtaskActivation(arg1, arg2, arg3) -- Line 197
	--[[ Upvalues[3]:
		[1]: CoreUtil_upvr (readonly)
		[2]: TutorialHandler_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
	]]
	if not arg1 then
	else
		if CoreUtil_upvr:IsTutorialQuest(arg2) then
			TutorialHandler_upvr:NewTutorialTask(arg2, arg3)
		end
		any_RequireDefinitions_result1_upvr.TaskType[arg2.Def.TaskIds[arg3]].ActivationFunction(arg2, arg3)
	end
end
local TaskService_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetService("TaskService")
coroutine.wrap(function() -- Line 238
	--[[ Upvalues[1]:
		[1]: TaskService_upvr (readonly)
	]]
	local _, any_await_result2 = TaskService_upvr:GetTasks():andThen():await()
	for _, v in pairs(any_await_result2) do
		NewTask(v)
	end
	TaskService_upvr.NewTask:Connect(NewTask)
	TaskService_upvr.UpdateTask:Connect(UpdateTask)
	TaskService_upvr.Subtask:Connect(SubtaskActivation)
	TaskService_upvr.TaskCompleted:Connect(TaskCompleted)
end)()
return module_upvr

Script name: TaskSlotObject
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TweenService_upvr = game:GetService("TweenService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local _ = require(ReplicatedStorage_upvr.Packages.Knit)
local module_upvr = {}
module_upvr.__index = module_upvr
local tbl_upvr = {
	Empty = "rbxassetid://17714722979";
	Check = "rbxassetid://17714722979";
	ExclemationMark = "rbxassetid://10100312307";
}
function module_upvr.new(arg1) -- Line 24
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local module = {
		Id = arg1.Id;
		Def = arg1.Def;
	}
	module.TaskObject = arg1
	module.UITabs = {}
	module.UI = ReplicatedStorage_upvr.Prefabs.UI.TaskUI:Clone()
	module.Initialised = false
	return setmetatable(module, module_upvr)
end
function ResizeFrame(arg1) -- Line 42
	local var8 = #arg1:GetChildren() - 1
	local var9 = var8 + 1
	if var8 == 0 then
		var9 = 0
	else
		var9 = 1 / (var8 + 1)
	end
	arg1.Parent.Size = UDim2.fromScale(arg1.Parent.Size.X.Scale, var8 * 0.02 + 0.02)
	arg1.Position = UDim2.fromScale(arg1.Position.X.Scale, var9)
	arg1.Size = UDim2.fromScale(arg1.Size.X.Scale, 1 / (var8 + 1))
	arg1.Parent.QuestTitle.Size = UDim2.fromScale(arg1.Parent.QuestTitle.Size.X.Scale, 1 / var9)
end
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function module_upvr.Initialise(arg1) -- Line 58
	--[[ Upvalues[4]:
		[1]: MainGui_upvr (readonly)
		[2]: TweenService_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	arg1.UI.Parent = MainGui_upvr.HUD.QuestDisplay
	local any_Create_result1 = TweenService_upvr:Create(arg1.UI, TweenInfo.new(1), {
		Size = UDim2.fromScale(1, 0.1);
	})
	any_Create_result1:Play()
	any_Create_result1.Completed:Wait()
	arg1.UI.QuestTitle.Text = arg1.Id:upper()
	arg1.UI.Main.ChildAdded:Connect(function() -- Line 73
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		ResizeFrame(arg1.UI.Main)
	end)
	for i, v in pairs(arg1.TaskObject.Progress) do
		local var22 = arg1.Def.TaskDisplay[i]
		arg1:AddTab(var22.Title..CoreUtil_upvr:ProgressTextDecode(var22.ProgressText, arg1.TaskObject, i))
		if arg1.InstaComplete then break end
		if not arg1.Def.Structured or not any_RequireDefinitions_result1_upvr.TaskType[arg1.Def.TaskIds[i]].IsCompleted(game.Players.LocalPlayer, v, arg1.Def.TaskParams[i]) then break end
	end
	for _, v_2 in pairs(arg1.UI:GetDescendants()) do
		if v_2:IsA("ImageLabel") then
			TweenService_upvr:Create(v_2, TweenInfo.new(1), {
				ImageTransparency = 0;
			}):Play()
		elseif v_2:IsA("TextLabel") then
			TweenService_upvr:Create(v_2, TweenInfo.new(1), {
				TextTransparency = 0;
			}):Play()
		end
	end
	arg1.Initialised = true
end
function module_upvr.AddTab(arg1, arg2) -- Line 106
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: tbl_upvr (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	local clone = ReplicatedStorage_upvr.Prefabs.UI.TaskDesc:Clone()
	clone.Parent = arg1.UI.Main
	clone.Name = tostring(#arg1.UITabs + 1)
	clone.QuestName.Text = arg2
	clone.QuestStatus.Image = tbl_upvr.Empty
	if arg1.Initialised then
		TweenService_upvr:Create(clone.QuestStatus, TweenInfo.new(1), {
			ImageTransparency = 0;
		}):Play()
		TweenService_upvr:Create(clone.QuestName, TweenInfo.new(1), {
			TextTransparency = 0;
		}):Play()
	end
	table.insert(arg1.UITabs, clone)
end
function module_upvr.Destroy(arg1) -- Line 124
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	for _, v_3 in pairs(arg1.UI:GetDescendants()) do
		if v_3:IsA("ImageLabel") then
			TweenService_upvr:Create(v_3, TweenInfo.new(1), {
				ImageTransparency = 1;
			}):Play()
		elseif v_3:IsA("TextLabel") then
			TweenService_upvr:Create(v_3, TweenInfo.new(1), {
				TextTransparency = 1;
				TextStrokeTransparency = 1;
			}):Play()
		end
	end
	task.wait(1)
	TweenService_upvr:Create(arg1.UI, TweenInfo.new(1), {
		Size = UDim2.fromScale(0.4, 0);
	}):Play()
	task.wait(1)
	arg1.UI:Destroy()
end
function module_upvr.UpdateTab(arg1, arg2, arg3) -- Line 143
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local var39 = arg1.UITabs[arg2]
	if not var39 then
	else
		var39.QuestName.Text = arg1.Def.TaskDisplay[arg2].Title..CoreUtil_upvr:ProgressTextDecode(arg1.Def.TaskDisplay[arg2].ProgressText, arg1.TaskObject, arg2)
	end
end
return module_upvr

Script name: TutorialHandler
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local PlayerService_upvr = require(ReplicatedStorage.Packages.Knit).GetService("PlayerService")
local module = {}
local LocalPlayer_upvr = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
local BindableEvent_upvr_2 = Instance.new("BindableEvent")
local BindableEvent_upvr = Instance.new("BindableEvent")
local var10_upvw = true
function LoadDialog(arg1, arg2, arg3) -- Line 27
	--[[ Upvalues[6]:
		[1]: var10_upvw (read and write)
		[2]: CoreUtil_upvr (readonly)
		[3]: BindableEvent_upvr (readonly)
		[4]: MainGui_upvr (readonly)
		[5]: PlayerService_upvr (readonly)
		[6]: LocalPlayer_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var27
	if not var27 then
	else
		var27 = CoreUtil_upvr.TutorialDialogPaths[arg1.Id]
		if var27 then
			var27 = CoreUtil_upvr.TutorialDialogPaths[arg1.Id][arg2]
		end
		if not var27 or not next(var27) or var27.Place and CoreUtil_upvr.PlaceIds[var27.Place] ~= game.PlaceId then return end
		if var27.OnComplete and arg3 == "Started" then return end
		if not var27.OnComplete and arg3 == "Completed" then return end
		BindableEvent_upvr:Fire("Skip")
		if MainGui_upvr.TutorialDialog.Visible then
			MainGui_upvr.TutorialDialog:GetPropertyChangedSignal("Visible"):Wait()
		end
		MainGui_upvr.TutorialDialog.Visible = true
		repeat
			if not var27 then break end
			if not var27.Text then break end
			MainGui_upvr.TutorialDialog.TextLabel.Text = var27.Text:split('|')[1]
			if var27.Options then
				for i, v in pairs(var27.Options) do
					MainGui_upvr.TutorialDialog.Options[i].Text = v.ButtonText or ""
					MainGui_upvr.TutorialDialog.Options[i].Visible = true
				end
			else
				MainGui_upvr.TutorialDialog.Skip.Visible = true
			end
			local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(nil, BindableEvent_upvr.Event, MainGui_upvr.TutorialDialog.Options[1].MouseButton1Up, MainGui_upvr.TutorialDialog.Skip.TextButton.MouseButton1Down)
			MainGui_upvr.TutorialDialog.Skip.Visible = false
			for _, v_2 in pairs(MainGui_upvr.TutorialDialog.Options:GetChildren()) do
				if not v_2:IsA("UIListLayout") then
					v_2.Visible = false
				end
			end
		until any_CustomYeild_result1 == "Cancelled" and any_CustomYeild_result1 == "Skip" and not var27.Options[1].Text:split('|')[1 + 1]
		MainGui_upvr.TutorialDialog.Visible = false
		if any_CustomYeild_result1 == "Cancelled" then
			var10_upvw = false
			PlayerService_upvr:CancelTutorial(LocalPlayer_upvr)
		end
	end
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function module.NewTutorialTask(arg1, arg2, arg3) -- Line 92
	--[[ Upvalues[2]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: BindableEvent_upvr_2 (readonly)
	]]
	local var37 = any_RequireDefinitions_result1_upvr.Task[arg2.Id]
	if var37.RunTutorial and not any_RequireDefinitions_result1_upvr.TaskType[arg2.Def.TaskIds[arg3]].IsCompleted(game.Players.LocalPlayer, arg2.Progress[arg3], arg2.Def.TaskParams[arg3]) then
		coroutine.wrap(LoadDialog)(arg2, arg3, "Started")
		var37.RunTutorial(arg2, arg3, BindableEvent_upvr_2)
	end
end
function module.DestroyTutorialTask(arg1, arg2, arg3) -- Line 107
	--[[ Upvalues[1]:
		[1]: BindableEvent_upvr_2 (readonly)
	]]
	coroutine.wrap(LoadDialog)(arg2, arg3, "Completed")
	BindableEvent_upvr_2:Fire(arg2.Id, arg3)
end
MainGui_upvr.TutorialDialog.Options[2].MouseButton1Up:Connect(function() -- Line 112
	--[[ Upvalues[1]:
		[1]: BindableEvent_upvr (readonly)
	]]
	BindableEvent_upvr:Fire("Cancelled")
end)
local any_await_result1, any_await_result2 = PlayerService_upvr:CanShowTutorial():andThen():await()
_ = any_await_result1 -- Setting global
var10_upvw = any_await_result2
return module

Script name: SettingsHandler
  - Script: 


local RunService_upvr = game:GetService("RunService")
local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)
local PlayerService_upvr = Knit.GetService("PlayerService")
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
local any_GetController_result1_upvr_3 = Knit.GetController("SoundController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
function SnapSlider(arg1, arg2) -- Line 26
	if arg2 ~= 0 or not arg1 then
	end
	return math.floor(arg1 / arg2 + 0.5) * arg2
end
local TweenService_upvr = game:GetService("TweenService")
function MovePill(arg1, arg2) -- Line 31
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	local tbl = {}
	local var11
	if arg1 then
		var11 = 0
	else
		var11 = 1
	end
	tbl.AnchorPoint = Vector2.new(var11, 0.5)
	TweenService_upvr:Create(arg2, TweenInfo.new(0.1), tbl):Play()
end
function SetToggleBackground(arg1, arg2) -- Line 36
	if arg1 then
		arg2.BackgroundColor3 = Color3.fromRGB(68, 255, 0)
	else
		arg2.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	end
end
function FunctionalisePillToggle(arg1, arg2) -- Line 45
	local BindableEvent_upvr_2 = Instance.new("BindableEvent")
	MovePill(arg2, arg1.Pill)
	SetToggleBackground(arg2, arg1)
	arg1.Button.MouseButton1Down:Connect(function() -- Line 54
		--[[ Upvalues[3]:
			[1]: arg2 (read and write)
			[2]: BindableEvent_upvr_2 (readonly)
			[3]: arg1 (readonly)
		]]
		arg2 = not arg2
		BindableEvent_upvr_2:Fire(arg2)
		MovePill(arg2, arg1.Pill)
		SetToggleBackground(arg2, arg1)
	end)
	return BindableEvent_upvr_2
end
local UserInputService_upvr = game:GetService("UserInputService")
function FunctionaliseSlider(arg1) -- Line 66
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
	]]
	local var15_upvw = false
	local BindableEvent_upvr = Instance.new("BindableEvent")
	local var18_upvw = 0
	arg1.Button.MouseButton1Down:Connect(function() -- Line 73
		--[[ Upvalues[6]:
			[1]: var15_upvw (read and write)
			[2]: RunService_upvr (copied, readonly)
			[3]: UserInputService_upvr (copied, readonly)
			[4]: arg1 (readonly)
			[5]: var18_upvw (read and write)
			[6]: BindableEvent_upvr (readonly)
		]]
		var15_upvw = true
		while var15_upvw and RunService_upvr.RenderStepped:Wait() do
			local Position = arg1.Button.Position
			local SnapSlider_result1 = SnapSlider((UserInputService_upvr:GetMouseLocation().X - arg1.AbsolutePosition.X) / arg1.AbsoluteSize.X, 0.01)
			local clamped = math.clamp(SnapSlider_result1, 0, 1)
			if clamped ~= var18_upvw then
				BindableEvent_upvr:Fire(clamped)
			end
			var18_upvw = math.clamp(SnapSlider_result1, 0, 1)
			arg1.Button.Position = UDim2.new(var18_upvw, 0, Position.Y.Scale, Position.Y.Offset)
		end
		BindableEvent_upvr:Fire(var18_upvw, true)
	end)
	UserInputService_upvr.InputEnded:Connect(function(arg1_2) -- Line 92
		--[[ Upvalues[1]:
			[1]: var15_upvw (read and write)
		]]
		if arg1_2.UserInputType == Enum.UserInputType.MouseButton1 then
			var15_upvw = false
		end
	end)
	UserInputService_upvr.TouchEnded:Connect(function() -- Line 98
		--[[ Upvalues[1]:
			[1]: var15_upvw (read and write)
		]]
		var15_upvw = false
	end)
	return BindableEvent_upvr
end
local any_GetController_result1_upvr_2 = Knit.GetController("UIController")
function module.ToggleSettings(arg1, arg2) -- Line 106
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		MainGui_upvr.Settings.Visible = arg2
	end
end
local Players_upvr = game:GetService("Players")
local function _(arg1) -- Line 111, Named "toggleOtherPlayerTitles"
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v in pairs(Players_upvr:GetPlayers()) do
		if not v.Character then return end
		local Head_2 = v.Character:FindFirstChild("Head")
		if Head_2 then
			local PlayerTitleGui = Head_2:FindFirstChild("PlayerTitleGui")
			local var45
			if PlayerTitleGui then
				PlayerTitleGui.Enabled = arg1
				if arg1 then
					var45 = 0
				else
					var45 = 100
				end
				v.NameDisplayDistance = var45
			end
		end
	end
end
FunctionaliseSlider(MainGui_upvr.Settings.Main.Titles.SFX.Slider).Event:Connect(function(arg1, arg2) -- Line 131
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_3 (readonly)
		[2]: PlayerService_upvr (readonly)
	]]
	any_GetController_result1_upvr_3:AdjustVolume("SFX", arg1 * 4)
	if arg2 then
		PlayerService_upvr:UpdateAudio("SFX", arg1)
	end
end)
FunctionaliseSlider(MainGui_upvr.Settings.Main.Titles.Music.Slider).Event:Connect(function(arg1, arg2) -- Line 137
	--[[ Upvalues[2]:
		[1]: PlayerService_upvr (readonly)
		[2]: any_GetController_result1_upvr_3 (readonly)
	]]
	if arg2 then
		PlayerService_upvr:UpdateAudio("Music", arg1)
	end
	any_GetController_result1_upvr_3:AdjustVolume("Music", arg1 * 4)
end)
MainGui_upvr.HUD.QuestsDisplay.Visible = any_GetController_result1_upvr.Settings.General.QuestToggle
FunctionalisePillToggle(MainGui_upvr.Settings.Main.Titles.QuestToggle.Toggle, any_GetController_result1_upvr.Settings.General.QuestToggle).Event:Connect(function(arg1) -- Line 144
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: PlayerService_upvr (readonly)
	]]
	MainGui_upvr.HUD.QuestsDisplay.Visible = arg1
	PlayerService_upvr:ToggleQuestUI(arg1)
end)
FunctionalisePillToggle(MainGui_upvr.Settings.Main.Titles.PlayerTitles.Toggle, any_GetController_result1_upvr.Settings.General.PlayerTitles).Event:Connect(function(arg1) -- Line 150
	--[[ Upvalues[1]:
		[1]: PlayerService_upvr (readonly)
	]]
	PlayerService_upvr:TogglePlayerTitle(arg1)
end)
FunctionalisePillToggle(MainGui_upvr.Settings.Main.Titles.ChatNotifications.Toggle, any_GetController_result1_upvr.Settings.General.ChatNotifications).Event:Connect(function(arg1) -- Line 155
	--[[ Upvalues[1]:
		[1]: PlayerService_upvr (readonly)
	]]
	PlayerService_upvr:ToggleChatNotifcations(arg1)
end)
FunctionalisePillToggle(MainGui_upvr.Settings.Main.Titles.XpEffects.Toggle, any_GetController_result1_upvr.Settings.General.XpEffects).Event:Connect(function(arg1) -- Line 160
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: PlayerService_upvr (readonly)
	]]
	any_GetController_result1_upvr.Settings.General.XpEffects = arg1
	PlayerService_upvr:ToggleXpEffects(arg1)
end)
coroutine.wrap(function() -- Line 166
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: any_GetController_result1_upvr_3 (readonly)
		[4]: MainGui_upvr (readonly)
	]]
	repeat
		RunService_upvr.RenderStepped:Wait()
	until not any_GetController_result1_upvr.Settings or any_GetController_result1_upvr_3.Initialised == true
	MainGui_upvr.Settings.Main.Titles.Music.Slider.Button.Position = UDim2.fromScale(any_GetController_result1_upvr.Settings.Audio.Music, 0.5)
	MainGui_upvr.Settings.Main.Titles.SFX.Slider.Button.Position = UDim2.fromScale(any_GetController_result1_upvr.Settings.Audio.SFX, 0.5)
	any_GetController_result1_upvr_3:AdjustVolume("SFX", any_GetController_result1_upvr.Settings.Audio.SFX * 4)
	any_GetController_result1_upvr_3:AdjustVolume("Music", any_GetController_result1_upvr.Settings.Audio.Music * 4)
end)()
return module

Script name: StatsHandler
  - Script: 


local any_GetController_result1_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit).GetController("UIController")
local module = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local tbl_upvr = {}
local var9_upvw = "Mastery"
function ChangePage(arg1) -- Line 26
	--[[ Upvalues[2]:
		[1]: var9_upvw (read and write)
		[2]: MainGui_upvr (readonly)
	]]
	var9_upvw = arg1
	for _, v in pairs(MainGui_upvr.Stats.Pages:GetChildren()) do
		local var17
		if v.Name ~= arg1 then
			var17 = false
		else
			var17 = true
		end
		v.Visible = var17
	end
end
function UpdatePages() -- Line 33
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	tbl_upvr.MasteryHandler:UpdateMasteries()
end
function module.ToggleStats(arg1, arg2) -- Line 37
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		if arg2 then
			UpdatePages()
		end
		MainGui_upvr.Stats.Visible = arg2
	end
end
MainGui_upvr.HUD.RightPanel.StatsButton.Button.MouseButton1Up:Connect(function() -- Line 44
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Stats", not MainGui_upvr.Stats.Visible)
end)
game:GetService("ContextActionService"):BindAction("Toggle Stats", function(arg1, arg2) -- Line 48
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	if arg2 == Enum.UserInputState.End then
		any_GetController_result1_upvr:ToggleUI("Stats", not MainGui_upvr.Stats.Visible)
	end
end, false, Enum.KeyCode.J, Enum.KeyCode.DPadDown)
MainGui_upvr.Stats.Titles.Close.MouseButton1Up:Connect(function() -- Line 53
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Stats", false)
end)
for _, v_2_upvr in pairs(MainGui_upvr.Stats.Navigation:GetChildren()) do
	if v_2_upvr:IsA("TextButton") then
		v_2_upvr.MouseButton1Up:Connect(function() -- Line 59
			--[[ Upvalues[2]:
				[1]: v_2_upvr (readonly)
				[2]: MainGui_upvr (readonly)
			]]
			ChangePage(v_2_upvr.Name)
			MainGui_upvr.Stats.Titles.Mastery.Text = string.upper(v_2_upvr.Name)
		end)
	end
end
tbl_upvr.MasteryHandler = require(script.MasteryHandler)
tbl_upvr.BadgeHandler = require(script.BadgeHandler)
tbl_upvr.StatisticsHandler = require(script.StatisticsHandler)
return module

Script name: MasteryHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local PlayerService_upvr = Knit.GetService("PlayerService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
local module_upvr = {}
local MainGui = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
local any_GetLevelReqDefs_result1_upvr = CoreUtil_upvr:GetLevelReqDefs()
local Mastery = MainGui.Stats.Pages.Mastery
local CategoriesTabs_upvr = Mastery.CategoriesTabs
local LevelSteps_upvr = Mastery.LevelSteps
local SubCategoriesTabs_upvr = Mastery.SubCategoriesTabs
local SubCategoriesNavigation_upvr = Mastery.SubCategoriesNavigation
local var15_upvw = 1
local Color3_fromRGB_result1_upvr_3 = Color3.fromRGB(195, 244, 241)
local Color3_fromRGB_result1_upvr_4 = Color3.fromRGB(11, 244, 84)
local Color3_fromRGB_result1_upvr = Color3.fromRGB(8, 190, 54)
local Color3_fromRGB_result1_upvr_2 = Color3.fromRGB(100, 100, 100)
local var20_upvw = "Combat"
local var21_upvw = "Overall"
local tbl_upvr = {}
local MasteryInfo_upvr = Mastery.MasteryInfo
local function displayLevelStepsInfo_upvr(arg1, arg2) -- Line 60, Named "displayLevelStepsInfo"
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: MasteryInfo_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var24 = any_GetController_result1_upvr_2.Masteries[arg1][arg2] or 0
	local var25
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var25 = CoreUtil_upvr:MasteryLevelFromXP(var24)
		return var25
	end
	if arg2 ~= "Overall" or not INLINED() then
		var25 = CoreUtil_upvr:SubMasteryLevelFromXP(var24)
	end
	if arg2 ~= "Overall" or not CoreUtil_upvr.MasteryFromXP then
		local SubMasteryFromXP = CoreUtil_upvr.SubMasteryFromXP
	end
	MasteryInfo_upvr.Level.Text = "LVL "..tostring(var25)
	MasteryInfo_upvr.NextLevel.Text = "LVL "..tostring(var25 + 1)
	if not SubMasteryFromXP[var25 + 1] then
		MasteryInfo_upvr.NextLevel.Text = "MAX LVL"
	end
	if not SubMasteryFromXP[var25] then
		-- KONSTANTWARNING: GOTO [76] #62
	end
	if not SubMasteryFromXP[var25 + 1] then
		local _ = 1
	elseif not (var24 / SubMasteryFromXP[var25 + 1]) then
	end
	MasteryInfo_upvr.XPBarBG.XPBar.Size = UDim2.fromScale(math.clamp(0, 0, 1), 1)
	local var28
	if not var28 and SubMasteryFromXP[var25] then
		var28 = SubMasteryFromXP[var25]
	elseif not SubMasteryFromXP[var25] and 0 < var25 then
		var28 = tostring(var24)
	end
	MasteryInfo_upvr.XPBarBG.OverallXP.Text = tostring(math.ceil(var24))..'/'..var28
end
local XPBar_upvr = MainGui.HUD.XPBar
local var30_upvw
local var31_upvw = false
function module_upvr.UpdateMasteries(arg1) -- Line 85
	--[[ Upvalues[12]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: XPBar_upvr (readonly)
		[4]: var30_upvw (read and write)
		[5]: PlayerService_upvr (readonly)
		[6]: any_GetController_result1_upvr (readonly)
		[7]: any_GetLevelReqDefs_result1_upvr (readonly)
		[8]: LevelSteps_upvr (readonly)
		[9]: var31_upvw (read and write)
		[10]: displayLevelStepsInfo_upvr (readonly)
		[11]: var20_upvw (read and write)
		[12]: var21_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 87 start (CF ANALYSIS FAILED)
	local any_PlayerLevelFromXP_result1, _ = CoreUtil_upvr:PlayerLevelFromXP(any_GetController_result1_upvr_2.Masteries.Overall)
	local var45
	for i, v in pairs(CoreUtil_upvr.PlayerFromXP) do
		if i <= any_PlayerLevelFromXP_result1 and var45 < v then
			var45 = v
		end
	end
	if not CoreUtil_upvr.PlayerFromXP[any_PlayerLevelFromXP_result1 + 1] then
	else
	end
	XPBar_upvr.Progress.Size = UDim2.fromScale((any_GetController_result1_upvr_2.Masteries.Overall - var45) / (CoreUtil_upvr.PlayerFromXP[any_PlayerLevelFromXP_result1 + 1] - var45), 0.5)
	XPBar_upvr.Level.Text = "Level "..tostring(any_PlayerLevelFromXP_result1)
	if var30_upvw and var30_upvw < any_PlayerLevelFromXP_result1 then
		workspace.Sound.UI.LevelUp:Play()
		local tbl_upvr_2 = {
			LevelEarned = any_PlayerLevelFromXP_result1;
		}
		PlayerService_upvr:LevelUpFX()
		coroutine.wrap(function() -- Line 110
			--[[ Upvalues[2]:
				[1]: any_GetController_result1_upvr (copied, readonly)
				[2]: tbl_upvr_2 (readonly)
			]]
			any_GetController_result1_upvr:Notification("PlayerLevel", tbl_upvr_2)
		end)()
	end
	var30_upvw = any_PlayerLevelFromXP_result1
	tbl_upvr_2 = false
	local pairs_result1_2, pairs_result2, pairs_result3_6 = pairs(any_GetLevelReqDefs_result1_upvr)
	-- KONSTANTERROR: [0] 1. Error Block 87 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [380] 269. Error Block 57 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [380] 269. Error Block 57 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [104] 77. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [104] 77. Error Block 14 end (CF ANALYSIS FAILED)
end
local function displayLevelSteps_upvr(arg1, arg2) -- Line 199, Named "displayLevelSteps"
	--[[ Upvalues[1]:
		[1]: LevelSteps_upvr (readonly)
	]]
	for _, v_2 in pairs(LevelSteps_upvr:GetChildren()) do
		if v_2:IsA("Frame") then
			local Category = v_2:GetAttribute("Category")
			local SubCategory = v_2:GetAttribute("SubCategory")
			if Category and SubCategory and Category == arg1 and SubCategory == arg2 then
				v_2.Visible = true
			else
				v_2.Visible = false
			end
		end
	end
end
local function setSubCategoryTabHighlightsColor_upvr(arg1) -- Line 215, Named "setSubCategoryTabHighlightsColor"
	--[[ Upvalues[3]:
		[1]: SubCategoriesTabs_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_3 (readonly)
		[3]: Color3_fromRGB_result1_upvr_4 (readonly)
	]]
	for _, v_3 in pairs(SubCategoriesTabs_upvr:GetChildren()) do
		if v_3:IsA("GuiButton") then
			v_3.UIStroke.Color = Color3_fromRGB_result1_upvr_3
		end
	end
	arg1.UIStroke.Color = Color3_fromRGB_result1_upvr_4
end
local function setCategoryTabHighlightsColor_upvr(arg1) -- Line 225, Named "setCategoryTabHighlightsColor"
	--[[ Upvalues[3]:
		[1]: CategoriesTabs_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_3 (readonly)
		[3]: Color3_fromRGB_result1_upvr_4 (readonly)
	]]
	for _, v_4 in pairs(CategoriesTabs_upvr:GetChildren()) do
		if v_4:IsA("GuiButton") then
			v_4.UIStroke.Color = Color3_fromRGB_result1_upvr_3
		end
	end
	arg1.UIStroke.Color = Color3_fromRGB_result1_upvr_4
end
local function handleSubCategoriesPages_upvr(arg1, arg2) -- Line 234, Named "handleSubCategoriesPages"
	--[[ Upvalues[6]:
		[1]: tbl_upvr (readonly)
		[2]: setSubCategoryTabHighlightsColor_upvr (readonly)
		[3]: var15_upvw (read and write)
		[4]: SubCategoriesNavigation_upvr (readonly)
		[5]: Color3_fromRGB_result1_upvr_2 (readonly)
		[6]: Color3_fromRGB_result1_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 30 start (CF ANALYSIS FAILED)
	local var85
	for i_5 = 1, #tbl_upvr do
		if tbl_upvr[i_5]:IsA("GuiButton") and tbl_upvr[i_5]:GetAttribute("Category") == arg2 then
			var85 += 1
			table.insert({}, {
				button = tbl_upvr[i_5];
				pageIndex = math.ceil(var85 / 10);
			})
			if arg1 == 1 and tbl_upvr[i_5]:GetAttribute("SubCategory") == "Overall" then
				setSubCategoryTabHighlightsColor_upvr(tbl_upvr[i_5])
			end
		end
	end
	-- KONSTANTERROR: [0] 1. Error Block 30 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 49. Error Block 35 start (CF ANALYSIS FAILED)
	var15_upvw = math.ceil(var85 / 10)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	for _, v_5 in pairs({}) do
		if v_5.pageIndex == arg1 then
			v_5.button.Visible = true
		else
			v_5.button.Visible = false
		end
	end
	-- KONSTANTERROR: [61] 49. Error Block 35 end (CF ANALYSIS FAILED)
end
function FunctionaliseCategoriesTabs() -- Line 288
	--[[ Upvalues[7]:
		[1]: SubCategoriesTabs_upvr (readonly)
		[2]: CategoriesTabs_upvr (readonly)
		[3]: setCategoryTabHighlightsColor_upvr (readonly)
		[4]: var20_upvw (read and write)
		[5]: displayLevelSteps_upvr (readonly)
		[6]: displayLevelStepsInfo_upvr (readonly)
		[7]: handleSubCategoriesPages_upvr (readonly)
	]]
	local function displaySubCategoriesTabs_upvr(arg1) -- Line 289, Named "displaySubCategoriesTabs"
		--[[ Upvalues[1]:
			[1]: SubCategoriesTabs_upvr (copied, readonly)
		]]
		for _, v_6 in pairs(SubCategoriesTabs_upvr:GetChildren()) do
			if v_6:IsA("GuiButton") then
				local Category_4 = v_6:GetAttribute("Category")
				if Category_4 and Category_4 == arg1 then
					v_6.Visible = true
				else
					v_6.Visible = false
				end
			end
		end
	end
	for _, v_7_upvr in pairs(CategoriesTabs_upvr:GetChildren()) do
		local Category_3_upvr = v_7_upvr:GetAttribute("Category")
		if v_7_upvr:GetAttribute("Category") == "Combat" then
			setCategoryTabHighlightsColor_upvr(v_7_upvr)
		end
		if v_7_upvr:IsA("GuiButton") and Category_3_upvr then
			v_7_upvr.MouseButton1Click:Connect(function() -- Line 309
				--[[ Upvalues[8]:
					[1]: var20_upvw (copied, read and write)
					[2]: Category_3_upvr (readonly)
					[3]: displaySubCategoriesTabs_upvr (readonly)
					[4]: displayLevelSteps_upvr (copied, readonly)
					[5]: displayLevelStepsInfo_upvr (copied, readonly)
					[6]: setCategoryTabHighlightsColor_upvr (copied, readonly)
					[7]: v_7_upvr (readonly)
					[8]: handleSubCategoriesPages_upvr (copied, readonly)
				]]
				var20_upvw = Category_3_upvr
				displaySubCategoriesTabs_upvr(Category_3_upvr)
				displayLevelSteps_upvr(Category_3_upvr, "Overall")
				displayLevelStepsInfo_upvr(Category_3_upvr, "Overall")
				setCategoryTabHighlightsColor_upvr(v_7_upvr)
				handleSubCategoriesPages_upvr(1, Category_3_upvr)
			end)
		end
	end
	displaySubCategoriesTabs_upvr("Combat")
end
function FunctionaliseSubCategoriesTabs() -- Line 324
	--[[ Upvalues[5]:
		[1]: SubCategoriesTabs_upvr (readonly)
		[2]: setSubCategoryTabHighlightsColor_upvr (readonly)
		[3]: var21_upvw (read and write)
		[4]: displayLevelSteps_upvr (readonly)
		[5]: displayLevelStepsInfo_upvr (readonly)
	]]
	for _, v_8_upvr in pairs(SubCategoriesTabs_upvr:GetChildren()) do
		local Category_2_upvr = v_8_upvr:GetAttribute("Category")
		local SubCategory_upvr = v_8_upvr:GetAttribute("SubCategory")
		if SubCategory_upvr == "Overall" and Category_2_upvr == "Combat" then
			setSubCategoryTabHighlightsColor_upvr(v_8_upvr)
		end
		if v_8_upvr:IsA("GuiButton") and Category_2_upvr and SubCategory_upvr then
			v_8_upvr.MouseButton1Click:Connect(function() -- Line 332
				--[[ Upvalues[7]:
					[1]: var21_upvw (copied, read and write)
					[2]: SubCategory_upvr (readonly)
					[3]: displayLevelSteps_upvr (copied, readonly)
					[4]: Category_2_upvr (readonly)
					[5]: displayLevelStepsInfo_upvr (copied, readonly)
					[6]: setSubCategoryTabHighlightsColor_upvr (copied, readonly)
					[7]: v_8_upvr (readonly)
				]]
				var21_upvw = SubCategory_upvr
				displayLevelSteps_upvr(Category_2_upvr, SubCategory_upvr)
				displayLevelStepsInfo_upvr(Category_2_upvr, SubCategory_upvr)
				setSubCategoryTabHighlightsColor_upvr(v_8_upvr)
			end)
		end
	end
	displayLevelSteps_upvr("Combat", "Overall")
	displayLevelStepsInfo_upvr("Combat", "Overall")
end
function FunctionaliseSubCategoriesNavigation() -- Line 346
	--[[ Upvalues[6]:
		[1]: SubCategoriesNavigation_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_2 (readonly)
		[3]: Color3_fromRGB_result1_upvr (readonly)
		[4]: handleSubCategoriesPages_upvr (readonly)
		[5]: var20_upvw (read and write)
		[6]: var15_upvw (read and write)
	]]
	local var111_upvw = 1
	SubCategoriesNavigation_upvr.Left.MouseButton1Click:Connect(function() -- Line 349
		--[[ Upvalues[6]:
			[1]: var111_upvw (read and write)
			[2]: SubCategoriesNavigation_upvr (copied, readonly)
			[3]: Color3_fromRGB_result1_upvr_2 (copied, readonly)
			[4]: Color3_fromRGB_result1_upvr (copied, readonly)
			[5]: handleSubCategoriesPages_upvr (copied, readonly)
			[6]: var20_upvw (copied, read and write)
		]]
		var111_upvw -= 1
		if var111_upvw == 1 then
			SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_2
			SubCategoriesNavigation_upvr.Left.Interactable = false
		elseif var111_upvw < 1 then
			var111_upvw = 1
			SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_2
			SubCategoriesNavigation_upvr.Left.Interactable = false
		else
			SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr
			SubCategoriesNavigation_upvr.Left.Interactable = true
		end
		handleSubCategoriesPages_upvr(var111_upvw, var20_upvw)
	end)
	SubCategoriesNavigation_upvr.Right.MouseButton1Click:Connect(function() -- Line 365
		--[[ Upvalues[6]:
			[1]: var111_upvw (read and write)
			[2]: var15_upvw (copied, read and write)
			[3]: SubCategoriesNavigation_upvr (copied, readonly)
			[4]: Color3_fromRGB_result1_upvr_2 (copied, readonly)
			[5]: handleSubCategoriesPages_upvr (copied, readonly)
			[6]: var20_upvw (copied, read and write)
		]]
		var111_upvw += 1
		if var15_upvw < var111_upvw then
			var111_upvw = var15_upvw
			SubCategoriesNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_2
			SubCategoriesNavigation_upvr.Right.Interactable = false
		end
		handleSubCategoriesPages_upvr(var111_upvw, var20_upvw)
	end)
	SubCategoriesNavigation_upvr.Left.BackgroundColor3 = Color3_fromRGB_result1_upvr_2
	SubCategoriesNavigation_upvr.Right.BackgroundColor3 = Color3_fromRGB_result1_upvr_2
	SubCategoriesNavigation_upvr.Left.Interactable = false
	SubCategoriesNavigation_upvr.Right.Interactable = false
end
function InitialiseMasteries() -- Line 381
	--[[ Upvalues[11]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: PlayerService_upvr (readonly)
		[3]: any_GetLevelReqDefs_result1_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
		[5]: CategoriesTabs_upvr (readonly)
		[6]: CoreUtil_upvr (readonly)
		[7]: tbl_upvr (readonly)
		[8]: SubCategoriesTabs_upvr (readonly)
		[9]: LevelSteps_upvr (readonly)
		[10]: any_GetController_result1_upvr (readonly)
		[11]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if not any_GetController_result1_upvr_2.Masteries then
		local any_await_result1, any_await_result2 = PlayerService_upvr:GetMasteries():andThen():await()
		_ = any_await_result1 -- Setting global
		any_GetController_result1_upvr_2.Masteries = any_await_result2
	end
	for i_10, v_9 in pairs(any_GetLevelReqDefs_result1_upvr) do
		local clone_5 = ReplicatedStorage_upvr.Prefabs.UI.CategoryTabTemplate:Clone()
		clone_5.Text = i_10
		clone_5:SetAttribute("Category", i_10)
		clone_5.Parent = CategoriesTabs_upvr
		for i_11, v_10 in pairs(v_9) do
			local clone = ReplicatedStorage_upvr.Prefabs.UI.SubCategoryTabTemplate:Clone()
			clone.Text = i_11
			clone.Visible = false
			local var156 = CoreUtil_upvr.MasteryLayoutOrder[i_10][i_11]
			if var156 then
				clone.LayoutOrder = var156
			end
			table.insert(tbl_upvr, clone)
			clone:SetAttribute("Category", i_10)
			clone:SetAttribute("SubCategory", i_11)
			clone.Parent = SubCategoriesTabs_upvr
			for i_12, v_11 in pairs(v_10) do
				table.insert({}, {
					LevelReq = i_12;
					Rewards = v_11;
				})
				local var163
			end
			table.sort(var163, function(arg1, arg2) -- Line 419
				local var165
				if arg1.LevelReq >= arg2.LevelReq then
					var165 = false
				else
					var165 = true
				end
				return var165
			end)
			for _, v_12 in pairs(var163) do
				local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.LevelStep:Clone()
				clone_2.Name = tostring(1)..'-'..i_10..'-'..i_11
				clone_2.Level.Text = "Level "..tostring(v_12.LevelReq)
				clone_2.XP.Text = tostring(any_GetController_result1_upvr_2.Masteries[i_10][i_11] or 0)..'/'..CoreUtil_upvr.PlayerFromXP[v_12.LevelReq]
				clone_2:SetAttribute("Category", i_10)
				clone_2:SetAttribute("SubCategory", i_11)
				clone_2.Parent = LevelSteps_upvr
				if v_12.Rewards.SetItems then
					any_GetController_result1_upvr:UpdateItemDisplay(clone_2.Item, CoreUtil_upvr:GetDefinitionFromId(v_12.Rewards.SetItems[1].ItemId))
					clone_2.ItemName.Text = v_12.Rewards.SetItems[1].ItemId
				elseif v_12.Rewards.UnlockedItems then
					any_GetController_result1_upvr:UpdateItemDisplay(clone_2.Item, CoreUtil_upvr:GetDefinitionFromId(v_12.Rewards.UnlockedItems[1].ItemId))
					clone_2.ItemName.Text = v_12.Rewards.UnlockedItems[1].ItemId
				end
			end
		end
	end
	table.sort(tbl_upvr, function(arg1, arg2) -- Line 447
		local var171
		if arg1.LayoutOrder >= arg2.LayoutOrder then
			var171 = false
		else
			var171 = true
		end
		return var171
	end)
	FunctionaliseCategoriesTabs()
	FunctionaliseSubCategoriesTabs()
	FunctionaliseSubCategoriesNavigation()
	module_upvr:UpdateMasteries()
end
function VisualiseXP(arg1, arg2) -- Line 455
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 35 start (CF ANALYSIS FAILED)
	local var176
	if not CoreUtil_upvr:ValidateHumanoid(game.Players.LocalPlayer.Character) then
	else
		var176 = game.Players
		var176 = math.abs((var176.LocalPlayer.Character.PrimaryPart.Position - arg1).unit.Y)
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var176 = (var176.LocalPlayer.Character.PrimaryPart.Position - arg1).unit:Cross(Vector3.new(0, 1, 0))
			return var176.unit
		end
		if var176 >= 0.99 or not INLINED_2() then
			var176 = (var176.LocalPlayer.Character.PrimaryPart.Position - arg1).unit:Cross(Vector3.new(1, 0, 0))
		end
		var176 = 0
		if arg2 < 1 then
			var176 = 2
			-- KONSTANTWARNING: GOTO [71] #49
		end
		-- KONSTANTERROR: [0] 1. Error Block 35 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [60] 40. Error Block 36 start (CF ANALYSIS FAILED)
		if arg2 < 5 then
			var176 = 3
		elseif arg2 < 10 then
			var176 = 4
		else
			var176 = 5
		end
		for _ = 1, var176 do
			local clone_4_upvr = ReplicatedStorage_upvr.Prefabs.XpOrb:Clone()
			clone_4_upvr.Parent = workspace
			clone_4_upvr.Position = arg1
			local var179 = math.random(33, 77) / 100
			if 0 < var179 then
			end
			CoreUtil_upvr:TweenBezier(clone_4_upvr, arg1, -(var176.LocalPlayer.Character.PrimaryPart.Position - arg1).unit * 5 + arg1 + var176.unit * math.random(-5, 5), game.Players.LocalPlayer.Character.HumanoidRootPart, var179)
			task.delay(var179, function() -- Line 494
				--[[ Upvalues[1]:
					[1]: clone_4_upvr (readonly)
				]]
				clone_4_upvr:Destroy()
				local clone_3 = workspace.Sound.XP:Clone()
				clone_3.Parent = workspace
				clone_3.PlaybackSpeed = math.random(35, 65) / 10
				clone_3:Play()
				clone_3.Ended:Wait()
				clone_3:Destroy()
			end)
			table.insert({}, clone_4_upvr)
		end
		task.wait(var179)
		-- KONSTANTERROR: [60] 40. Error Block 36 end (CF ANALYSIS FAILED)
	end
end
PlayerService_upvr.UpdateMasteries:Connect(function(arg1, arg2, arg3) -- Line 516
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: module_upvr (readonly)
	]]
	if arg2 and any_GetController_result1_upvr_2.Settings.General.XpEffects then
		VisualiseXP(arg2, arg3)
	end
	any_GetController_result1_upvr_2.Masteries = arg1
	module_upvr:UpdateMasteries()
end)
InitialiseMasteries()
var31_upvw = true
return module_upvr

Script name: BadgeHandler
  - Script: 


local Players_upvr = game:GetService("Players")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local PlayerService_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetService("PlayerService")
local module_upvr = {
	BadgeObjects = {};
	BadgesInitialised = false;
}
local Catagorys_upvr = Players_upvr.LocalPlayer.PlayerGui:WaitForChild("MainGui"):WaitForChild("Stats"):WaitForChild("Pages"):WaitForChild("Achievements"):WaitForChild("Catagorys")
local function SetBadgeVisibility_upvr(arg1, arg2) -- Line 41, Named "SetBadgeVisibility"
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var6 = module_upvr.BadgeObjects[arg1]
	if not var6 then
	else
		var6.UI.EquipButton.Visible = arg2
		if arg2 then
			var6.UI.BadgeImage.ImageTransparency = 0
			var6.UI.BadgeTitle.TextTransparency = 0
			var6.UI.BadgeDesc.TextTransparency = 0
			var6.UI.UIStroke.Transparency = 0
			var6.UI.BadgeImage.UIStroke.Transparency = 0
			return
		end
		var6.UI.BadgeImage.ImageTransparency = 0.8
		var6.UI.BadgeTitle.TextTransparency = 0.8
		var6.UI.BadgeDesc.TextTransparency = 0.8
		var6.UI.UIStroke.Transparency = 0.8
		var6.UI.BadgeImage.UIStroke.Transparency = 0.8
	end
end
local function ResizeBadges_upvr() -- Line 67, Named "ResizeBadges"
	--[[ Upvalues[1]:
		[1]: Catagorys_upvr (readonly)
	]]
	Catagorys_upvr.CanvasSize = UDim2.fromOffset(0, Catagorys_upvr.UIGridLayout.AbsoluteContentSize.Y + 15)
	task.wait(1)
end
function module_upvr.UpdateEarnedBadge(arg1, arg2) -- Line 75
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: SetBadgeVisibility_upvr (readonly)
	]]
	repeat
		task.wait()
	until module_upvr.BadgesInitialised
	local var7 = module_upvr.BadgeObjects[arg2]
	if not var7 then
	else
		var7[arg2].HasBadge = true
		SetBadgeVisibility_upvr(arg2, true)
	end
end
local BadgeService_upvr = game:GetService("BadgeService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function InitialiseBadges() -- Line 90
	--[[ Upvalues[10]:
		[1]: BadgeService_upvr (readonly)
		[2]: Players_upvr (readonly)
		[3]: PlayerService_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: Catagorys_upvr (readonly)
		[7]: module_upvr (readonly)
		[8]: SetBadgeVisibility_upvr (readonly)
		[9]: TableUtil_upvr (readonly)
		[10]: ResizeBadges_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local function GetBadgeData_upvr(arg1) -- Line 92, Named "GetBadgeData"
		--[[ Upvalues[2]:
			[1]: BadgeService_upvr (copied, readonly)
			[2]: GetBadgeData_upvr (readonly)
		]]
		local pcall_result1, pcall_result2 = pcall(function() -- Line 93
			--[[ Upvalues[2]:
				[1]: BadgeService_upvr (copied, readonly)
				[2]: arg1 (readonly)
			]]
			return BadgeService_upvr:GetBadgeInfoAsync(arg1)
		end)
		if not pcall_result1 or not pcall_result2 then
			task.wait(1)
			return GetBadgeData_upvr(arg1)
		end
		return pcall_result2
	end
	local function GetOwnedBadges_upvr(arg1) -- Line 104, Named "GetOwnedBadges"
		--[[ Upvalues[2]:
			[1]: BadgeService_upvr (copied, readonly)
			[2]: Players_upvr (copied, readonly)
		]]
		local module_upvr_2 = {}
		local tbl_upvr = {}
		local module_upvr_3 = {}
		local function checkBadges_upvr(arg1_2) -- Line 111, Named "checkBadges"
			--[[ Upvalues[4]:
				[1]: module_upvr_3 (readonly)
				[2]: BadgeService_upvr (copied, readonly)
				[3]: Players_upvr (copied, readonly)
				[4]: module_upvr_2 (readonly)
			]]
			for i = 1, #arg1_2, 10 do
				table.clear(module_upvr_3)
				table.move(arg1_2, i, i + 10, #module_upvr_3, module_upvr_3)
				local _, pcall_result2_2 = pcall(function() -- Line 116
					--[[ Upvalues[3]:
						[1]: BadgeService_upvr (copied, readonly)
						[2]: Players_upvr (copied, readonly)
						[3]: module_upvr_3 (copied, readonly)
					]]
					return BadgeService_upvr:CheckUserBadgesAsync(Players_upvr.LocalPlayer.UserId, module_upvr_3)
				end)
				if pcall_result2_2 and typeof(pcall_result2_2) ~= "string" then
					for _, v in pairs(pcall_result2_2) do
						table.insert(module_upvr_2, v)
					end
				end
			end
		end
		checkBadges_upvr(arg1)
		if 0 < #tbl_upvr then
			task.delay(60, function() -- Line 138
				--[[ Upvalues[3]:
					[1]: tbl_upvr (readonly)
					[2]: checkBadges_upvr (readonly)
					[3]: module_upvr_2 (readonly)
				]]
				print("Retrying", #tbl_upvr, "badges", tbl_upvr)
				checkBadges_upvr(tbl_upvr)
				return module_upvr_2
			end)
		else
			return module_upvr_2
		end
	end
	local _, any_await_result2 = PlayerService_upvr:GetEquippedAchievement(Players_upvr.LocalPlayer):andThen():await()
	local var49_upvw
	task.spawn(function() -- Line 151
		--[[ Upvalues[3]:
			[1]: var49_upvw (read and write)
			[2]: GetOwnedBadges_upvr (readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		var49_upvw = GetOwnedBadges_upvr(CoreUtil_upvr.Badges)
	end)
	for i_3, v_2_upvr in pairs(CoreUtil_upvr.Badges) do
		local GetBadgeData_upvr_result1_upvr = GetBadgeData_upvr(v_2_upvr)
		local var55 = false
		if var49_upvw then
			if table.find(var49_upvw, v_2_upvr) ~= nil then
				var55 = true
				-- KONSTANTWARNING: GOTO [59] #48
			end
		else
			var55 = BadgeService_upvr:UserHasBadgeAsync(Players_upvr.LocalPlayer.UserId, v_2_upvr)
		end
		local tbl_2_upvr = {
			BadgeInfo = GetBadgeData_upvr_result1_upvr;
			HasBadge = var55;
			BadgeId = v_2_upvr;
			BadgeIndex = i_3;
			UI = ReplicatedStorage_upvr.Prefabs.UI.BadgeTemplate:Clone();
		}
		if not GetBadgeData_upvr_result1_upvr.IconImageId or not "rbxassetid://"..tostring(GetBadgeData_upvr_result1_upvr.IconImageId) then
		end
		tbl_2_upvr.UI.BadgeImage.Image = "rbxthumb://type=BadgeIcon&id="..v_2_upvr.."&w=150&h=150"
		tbl_2_upvr.UI.BadgeTitle.Text = GetBadgeData_upvr_result1_upvr.Name or "ERROR GETTING BADGE NAME"
		tbl_2_upvr.UI.BadgeDesc.Text = GetBadgeData_upvr_result1_upvr.Description or "ERROR GETTING BADGE DESCRIPTION"
		tbl_2_upvr.UI.Parent = Catagorys_upvr
		tbl_2_upvr.UI.BadgeTitle.UIGradient.Color = CoreUtil_upvr.BadgeRarityGradients[CoreUtil_upvr.BadgeTitleColors[v_2_upvr]]
		tbl_2_upvr.UI.UIStroke.UIGradient.Color = CoreUtil_upvr.BadgeRarityGradients[CoreUtil_upvr.BadgeTitleColors[v_2_upvr]]
		module_upvr.BadgeObjects[v_2_upvr] = tbl_2_upvr
		SetBadgeVisibility_upvr(v_2_upvr, var55)
		if any_await_result2 == v_2_upvr then
			tbl_2_upvr.UI.EquipButton.EquipLabel.Text = "Equipped"
		else
			tbl_2_upvr.UI.EquipButton.EquipLabel.Text = "Equip"
		end
		local function resetButtons_upvr() -- Line 195, Named "resetButtons"
			--[[ Upvalues[1]:
				[1]: module_upvr (copied, readonly)
			]]
			for _, v_3 in pairs(module_upvr.BadgeObjects) do
				v_3.UI.EquipButton.EquipLabel.Text = "Equip"
				if v_3.HasBadge then
					v_3.UI.EquipButton.Visible = true
				else
					v_3.UI.EquipButton.Visible = false
				end
			end
		end
		tbl_2_upvr.UI.EquipButton.MouseButton1Click:Connect(function() -- Line 206
			--[[ Upvalues[5]:
				[1]: PlayerService_upvr (copied, readonly)
				[2]: GetBadgeData_upvr_result1_upvr (readonly)
				[3]: v_2_upvr (readonly)
				[4]: resetButtons_upvr (readonly)
				[5]: tbl_2_upvr (readonly)
			]]
			PlayerService_upvr:EquipAchievement(GetBadgeData_upvr_result1_upvr, v_2_upvr)
			resetButtons_upvr()
			tbl_2_upvr.UI.EquipButton.EquipLabel.Text = "Equipped"
		end)
	end
	for _, v_4 in pairs(module_upvr.BadgeObjects) do
		tbl_2_upvr = {}
		resetButtons_upvr = v_4
		table.insert(tbl_2_upvr, resetButtons_upvr)
		local var67
	end
	table.sort(var67, function(arg1, arg2) -- Line 219
		--[[ Upvalues[1]:
			[1]: CoreUtil_upvr (copied, readonly)
		]]
		local tbl = {
			Common = 1;
			Uncommon = 2;
			Rare = 3;
			Epic = 4;
			Legendary = 5;
			Mythic = 6;
		}
		local var70 = tbl[CoreUtil_upvr.BadgeTitleColors[arg1.BadgeId]]
		if var70 == tbl[CoreUtil_upvr.BadgeTitleColors[arg2.BadgeId]] then
			if arg2.BadgeIndex >= arg1.BadgeIndex then
				var70 = false
			else
				var70 = true
			end
			return var70
		end
		if tbl[CoreUtil_upvr.BadgeTitleColors[arg2.BadgeId]] >= tbl[CoreUtil_upvr.BadgeTitleColors[arg1.BadgeId]] then
			var70 = false
		else
			var70 = true
		end
		return var70
	end)
	local any_Reverse_result1 = TableUtil_upvr.Reverse(var67)
	for i_6 = 1, #any_Reverse_result1 do
		any_Reverse_result1[i_6].UI.Name = ""..'i'
		local _
	end
	tbl_2_upvr = Catagorys_upvr.UIGridLayout.AbsoluteContentSize.Y
	Catagorys_upvr.CanvasSize = UDim2.fromOffset(0, tbl_2_upvr + 15)
	task.wait(1)
	Catagorys_upvr:GetPropertyChangedSignal("AbsoluteWindowSize"):Connect(ResizeBadges_upvr)
	Catagorys_upvr.UIGridLayout.Changed:Connect(function(arg1) -- Line 249
		--[[ Upvalues[1]:
			[1]: Catagorys_upvr (copied, readonly)
		]]
		if arg1 ~= "AbsoluteContentSize" then
		else
			Catagorys_upvr.CanvasSize = UDim2.fromOffset(0, Catagorys_upvr.UIGridLayout.AbsoluteContentSize.Y + 15)
			task.wait(1)
		end
	end)
end
PlayerService_upvr.BadgeEarned:Connect(function(arg1) -- Line 259
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr:UpdateEarnedBadge(arg1)
end)
coroutine.wrap(InitialiseBadges)()
module_upvr.BadgesInitialised = true
return module_upvr

Script name: StatisticsHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local TaskService = require(ReplicatedStorage_upvr.Packages.Knit).GetService("TaskService")
local MainGui_upvr = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
function UpdateStatistics(arg1) -- Line 23
	--[[ Upvalues[1]:
		[1]: MainGui_upvr (readonly)
	]]
	for _, v in pairs(arg1) do
		for i_2, v_2 in pairs(v) do
			local SOME = MainGui_upvr.Stats.Pages.PlayerStats.ScrollingFrame:FindFirstChild(i_2)
			if SOME then
				SOME.Stat.Text = i_2.." : "..tostring(v_2)
			end
		end
	end
end
function InitialiseStatistics(arg1) -- Line 33
	--[[ Upvalues[2]:
		[1]: MainGui_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local ScrollingFrame = MainGui_upvr.Stats.Pages.PlayerStats.ScrollingFrame
	for _, v_3 in pairs(ScrollingFrame:GetChildren()) do
		if v_3:IsA("Frame") then
			v_3:Destroy()
		end
	end
	for i_4, v_4 in pairs(arg1) do
		local clone = ReplicatedStorage_upvr.Prefabs.UI.StatsPrefabs.Category:Clone()
		clone.Name = i_4
		clone.Title.Text = i_4
		clone.Parent = ScrollingFrame
		for i_5, v_5 in pairs(v_4) do
			local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.StatsPrefabs.Stat:Clone()
			clone_2.Stat.Text = i_5.." : "..tostring(v_5)
			clone_2.Parent = ScrollingFrame
			clone_2.Name = i_5
		end
	end
end
TaskService.StatsUpdated:Connect(function(arg1) -- Line 64
	UpdateStatistics(arg1)
end)
local any_await_result1, any_await_result2 = TaskService:GetStats():andThen():await()
if any_await_result1 then
	InitialiseStatistics(any_await_result2)
end
return {}

Script name: PopUpHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local PlayerService = Knit.GetService("PlayerService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module_upvr = {}
local LocalPlayer = game.Players.LocalPlayer
local PopupFrame_upvr = LocalPlayer.PlayerGui:WaitForChild("MainGui"):WaitForChild("PopupFrame")
local Tutorial_upvr = LocalPlayer.PlayerGui:WaitForChild("MainGui"):WaitForChild("Tutorial")
local var9_upvw = 1
function ChangePage(arg1) -- Line 27
	--[[ Upvalues[2]:
		[1]: var9_upvw (read and write)
		[2]: PopupFrame_upvr (readonly)
	]]
	local var18
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var18 = #PopupFrame_upvr.PageFrame.Pages:GetChildren()
		return var18
	end
	if #PopupFrame_upvr.PageFrame.Pages:GetChildren() >= arg1 or not INLINED() then
		var18 = arg1
	end
	var9_upvw = var18
	var18 = pairs(PopupFrame_upvr.PageFrame.Pages:GetChildren())
	for _, v in pairs(PopupFrame_upvr.PageFrame.Pages:GetChildren()) do
		local var22
		if tonumber(v.Name) ~= var9_upvw then
			var22 = false
		else
			var22 = true
		end
		for _, v_2 in pairs(v:GetChildren()) do
			if v_2:IsA("GuiObject") then
				v_2.Visible = var22
			end
		end
	end
end
local TweenService_upvr = game:GetService("TweenService")
function InitialisePage(arg1, arg2) -- Line 37
	--[[ Upvalues[3]:
		[1]: TweenService_upvr (readonly)
		[2]: PopupFrame_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg1 then
		TweenService_upvr:Create(PopupFrame_upvr, TweenInfo.new(1), {
			Position = UDim2.fromScale(0.5, 2);
		}):Play()
		task.delay(1, function() -- Line 41
			--[[ Upvalues[1]:
				[1]: PopupFrame_upvr (copied, readonly)
			]]
			PopupFrame_upvr.Visible = false
		end)
	end
	PopupFrame_upvr.Title.TextLabel.Text = ""
	for _, v_3 in pairs(PopupFrame_upvr.PageFrame.Pages:GetChildren()) do
		v_3:Destroy()
	end
	if not arg1 then
	else
		local SOME = ReplicatedStorage_upvr.Prefabs.UI.PopUps:FindFirstChild(arg1)
		if not SOME then return end
		PopupFrame_upvr.Title.TextLabel.Text = arg2
		for _, v_4 in pairs(SOME:GetChildren()) do
			local clone = v_4:Clone()
			for _, v_5 in pairs(clone:GetChildren()) do
				if v_5:IsA("GuiObject") then
					v_5.Visible = false
				end
			end
			clone.Parent = PopupFrame_upvr.PageFrame.Pages
		end
		ChangePage(1)
		PopupFrame_upvr.Visible = true
		TweenService_upvr:Create(PopupFrame_upvr, TweenInfo.new(1), {
			Position = UDim2.fromScale(0.5, 0.5);
		}):Play()
	end
end
function module_upvr.TogglePopup(arg1, arg2, arg3, arg4) -- Line 77
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	if any_GetController_result1_upvr.UIProcessing then
		repeat
			wait()
		until not any_GetController_result1_upvr.UIProcessing
	end
	any_GetController_result1_upvr.UIProcessing = true
	InitialisePage(arg2 and arg3, arg4)
	any_GetController_result1_upvr.UIProcessing = false
end
Tutorial_upvr.Main.Close.MouseButton1Up:Connect(function() -- Line 88
	--[[ Upvalues[1]:
		[1]: Tutorial_upvr (readonly)
	]]
	Tutorial_upvr.Visible = false
end)
PopupFrame_upvr.PageFrame.PageForward.MouseButton1Up:Connect(function() -- Line 92
	--[[ Upvalues[2]:
		[1]: var9_upvw (read and write)
		[2]: PopupFrame_upvr (readonly)
	]]
	ChangePage(math.clamp(var9_upvw + 1, 1, #PopupFrame_upvr.PageFrame.Pages:GetChildren()))
end)
PopupFrame_upvr.PageFrame.PageBack.MouseButton1Up:Connect(function() -- Line 96
	--[[ Upvalues[2]:
		[1]: var9_upvw (read and write)
		[2]: PopupFrame_upvr (readonly)
	]]
	ChangePage(math.clamp(var9_upvw - 1, 1, #PopupFrame_upvr.PageFrame.Pages:GetChildren()))
end)
local any_setImageScale_result1_upvr = require(ReplicatedStorage_upvr.Packages.TopbarPlus.Icon).new():setName("UpdateNotesIcon"):setImage("rbxassetid://88783903574193"):setImageScale(0.8)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
any_setImageScale_result1_upvr.toggled:Connect(function(arg1) -- Line 112
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if any_GetController_result1_upvr.UIProcessing then
	else
		any_GetController_result1_upvr.UIProcessing = true
		InitialisePage(CoreUtil_upvr.Version, "NEW UPDATE "..CoreUtil_upvr.Version)
		any_GetController_result1_upvr.UIProcessing = false
	end
end)
PopupFrame_upvr.Close.MouseButton1Up:Connect(function() -- Line 119
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: any_setImageScale_result1_upvr (readonly)
	]]
	module_upvr:TogglePopup(false)
	any_setImageScale_result1_upvr:deselect()
end)
local _, any_await_result2 = PlayerService:GameHasUpdated():andThen():await()
local _, any_await_result2_2 = PlayerService:CanShowTutorial():andThen():await()
if not any_await_result2_2 and any_await_result2 then
	module_upvr:TogglePopup(true, any_await_result2, "NEW UPDATE "..any_await_result2)
end
return module_upvr

Script name: MailboxHandler
  - Script: 


local Players_upvr = game:GetService("Players")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local InventoryService_upvr = Knit.GetService("InventoryService")
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
local any_GetController_result1_upvr_2 = Knit.GetController("UIController")
local module_upvr = {
	Mailbox = {};
}
local MainGui = Players_upvr.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local Mailbox_upvr = MainGui:WaitForChild("Mailbox")
local MailConfirmation_upvr = MainGui:WaitForChild("MailConfirmation")
local MailGrid_upvr = Mailbox_upvr:WaitForChild("MailGrid")
local BG_upvr = Mailbox_upvr:WaitForChild("MailTabs"):WaitForChild("BG")
local ClaimableMail_upvr = MailGrid_upvr:WaitForChild("ClaimableMail")
local SendMail_upvr = MailGrid_upvr:WaitForChild("SendMail")
local ItemSelection_upvr = MailGrid_upvr:WaitForChild("ItemSelection")
local var17_upvw
local var18_upvw
local var19_upvw = 0
local var20_upvw = 0
local tbl_upvr = {1, 2, 5, 10, 50, 100}
local var22_upvw
local var23_upvw
function UsernameSearch() -- Line 57
	--[[ Upvalues[3]:
		[1]: SendMail_upvr (readonly)
		[2]: var18_upvw (read and write)
		[3]: Players_upvr (readonly)
	]]
	if SendMail_upvr.NameEntry.Text == game.Players.LocalPlayer.Name then
	else
		local var28_upvw
		pcall(function() -- Line 62
			--[[ Upvalues[2]:
				[1]: var28_upvw (read and write)
				[2]: SendMail_upvr (copied, readonly)
			]]
			var28_upvw = game:GetService("Players"):GetUserIdFromNameAsync(SendMail_upvr.NameEntry.Text)
		end)
		var18_upvw = var28_upvw
		if var18_upvw then
			local any_GetUserThumbnailAsync_result1_2, any_GetUserThumbnailAsync_result2 = Players_upvr:GetUserThumbnailAsync(var18_upvw, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
			if any_GetUserThumbnailAsync_result2 then
				SendMail_upvr.PlayerImage.Image = any_GetUserThumbnailAsync_result1_2
				return
			end
		end
		SendMail_upvr.PlayerImage.Image = ""
	end
end
function UpdateGridSearch(arg1) -- Line 79
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local string_lower_result1 = string.lower(arg1.Text)
	for _, v in pairs(arg1.Parent.ScrollingFrame:GetChildren()) do
		if v:IsA("GuiButton") then
			local any_GetDefinitionFromId_result1_2 = CoreUtil_upvr:GetDefinitionFromId(v.Name)
			if any_GetDefinitionFromId_result1_2 and any_GetDefinitionFromId_result1_2.EconomyInfo and any_GetDefinitionFromId_result1_2.EconomyInfo.SellPrice then
				local var41 = false
				if string_lower_result1 ~= "" then
					var41 = not string.find(string.lower(v.Name), string_lower_result1)
				end
				v.Visible = not var41
			else
				v.Visible = false
			end
		end
	end
end
local Color3_fromRGB_result1_upvr_4 = Color3.fromRGB(3, 207, 218)
local Color3_fromRGB_result1_upvr_3 = Color3.fromRGB(36, 213, 248)
local TweenService_upvr = game:GetService("TweenService")
local TweenInfo_new_result1_upvr = TweenInfo.new(0.15, Enum.EasingStyle.Circular, Enum.EasingDirection.Out)
local Color3_fromRGB_result1_upvr_2 = Color3.fromRGB(131, 131, 131)
local Color3_fromRGB_result1_upvr = Color3.fromRGB(51, 51, 51)
local function setTabSelected_upvr(arg1) -- Line 93, Named "setTabSelected"
	--[[ Upvalues[7]:
		[1]: BG_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_4 (readonly)
		[3]: Color3_fromRGB_result1_upvr_3 (readonly)
		[4]: TweenService_upvr (readonly)
		[5]: TweenInfo_new_result1_upvr (readonly)
		[6]: Color3_fromRGB_result1_upvr_2 (readonly)
		[7]: Color3_fromRGB_result1_upvr (readonly)
	]]
	for _, v_2 in pairs(BG_upvr:GetChildren()) do
		if v_2:IsA("Frame") then
			if v_2.Name == arg1 then
				v_2.Button.BackgroundColor3 = Color3_fromRGB_result1_upvr_4
				v_2.Button.UIStroke.Color = Color3_fromRGB_result1_upvr_3
				local any_Create_result1_upvr = TweenService_upvr:Create(v_2.Button, TweenInfo_new_result1_upvr, {
					Position = UDim2.new(0.5, 5, v_2.Button.Position.Y.Scale, 0);
				})
				any_Create_result1_upvr:Play()
				any_Create_result1_upvr.Completed:Connect(function() -- Line 104
					--[[ Upvalues[1]:
						[1]: any_Create_result1_upvr (readonly)
					]]
					any_Create_result1_upvr:Destroy()
				end)
			else
				any_Create_result1_upvr = v_2.Button
				any_Create_result1_upvr.BackgroundColor3 = Color3_fromRGB_result1_upvr_2
				any_Create_result1_upvr = v_2.Button.UIStroke
				any_Create_result1_upvr.Color = Color3_fromRGB_result1_upvr
				any_Create_result1_upvr = TweenService_upvr
				local tbl = {}
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				tbl.Position = UDim2.new(0.5, 0, v_2.Button.Position.Y.Scale, 0)
				any_Create_result1_upvr = any_Create_result1_upvr:Create(v_2.Button, TweenInfo_new_result1_upvr, tbl)
				local var57_upvr = any_Create_result1_upvr
				var57_upvr:Play()
				var57_upvr.Completed:Connect(function() -- Line 113
					--[[ Upvalues[1]:
						[1]: var57_upvr (readonly)
					]]
					var57_upvr:Destroy()
				end)
			end
		end
	end
end
local function SetInventoryItem_upvr(arg1) -- Line 121, Named "SetInventoryItem"
	--[[ Upvalues[8]:
		[1]: CoreUtil_upvr (readonly)
		[2]: var17_upvw (read and write)
		[3]: var19_upvw (read and write)
		[4]: SendMail_upvr (readonly)
		[5]: any_GetController_result1_upvr_2 (readonly)
		[6]: ItemSelection_upvr (readonly)
		[7]: var20_upvw (read and write)
		[8]: any_GetController_result1_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var59
	if arg1 then
		var59 = arg1.Id
		local any_GetDefinitionFromId_result1 = CoreUtil_upvr:GetDefinitionFromId(var59)
	end
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var59 = arg1.Id
		var59 = var17_upvw
		return var59.Id ~= var59
	end
	if not arg1 or not var17_upvw or INLINED() then
		var19_upvw = 1
	end
	var59 = SendMail_upvr
	if arg1 then
		var59 = true
	else
		var59 = false
	end
	var59.ImageLabel.Visible = var59
	if not arg1 then
		-- KONSTANTWARNING: GOTO [36] #29
	end
	SendMail_upvr.SelectItemButton.Text = ""
	if not arg1 then
	else
	end
	SendMail_upvr.SelectItemButton.SelectLabel.Text = ""
	any_GetController_result1_upvr_2:UpdateItemDisplay(SendMail_upvr, arg1)
	ItemSelection_upvr.Amount.AmountLabel.Text = '1'
	if not arg1 or not tostring(var19_upvw) then
	end
	SendMail_upvr.Amount.Text = ""
	var17_upvw = arg1
	if not any_GetDefinitionFromId_result1 or not any_GetDefinitionFromId_result1.EconomyInfo or not any_GetDefinitionFromId_result1.EconomyInfo.SellPrice or not math.floor(var19_upvw * any_GetDefinitionFromId_result1.EconomyInfo.SellPrice / 100) then
	end
	var20_upvw = 0
	SendMail_upvr.SendingCost.Amount.Text = tostring(var20_upvw)
	if any_GetController_result1_upvr.Coins >= var20_upvw or not Color3.fromRGB(255, 0, 0) then
	end
	SendMail_upvr.SendingCost.Amount.TextColor3 = Color3.fromRGB(255, 255, 255)
end
local function UpdateYield_upvr(arg1, arg2) -- Line 144, Named "UpdateYield"
	--[[ Upvalues[6]:
		[1]: var19_upvw (read and write)
		[2]: var17_upvw (read and write)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: ItemSelection_upvr (readonly)
		[6]: SendMail_upvr (readonly)
	]]
	if arg1 == "Sub" then
		var19_upvw = math.clamp(var19_upvw - arg2 or 1, 1, 100000000)
	else
		var19_upvw = math.clamp(var19_upvw + arg2 or 1, 1, 100000000)
	end
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		local any_GetItemInInventory_result1 = CoreUtil_upvr:GetItemInInventory(any_GetController_result1_upvr.Inventory, var17_upvw.Id)
		return any_GetItemInInventory_result1
	end
	if var17_upvw and (not INLINED_2() or any_GetItemInInventory_result1.Stack <= var19_upvw) then
		var19_upvw = any_GetItemInInventory_result1.Stack
	end
	if var19_upvw == var19_upvw then return end
	ItemSelection_upvr.Amount.AmountLabel.Text = tostring(var19_upvw)
	SendMail_upvr.Amount.Text = tostring(var19_upvw)..'x'
	return true
end
local function RefreshGrid_upvr(arg1) -- Line 170, Named "RefreshGrid"
	--[[ Upvalues[9]:
		[1]: ClaimableMail_upvr (readonly)
		[2]: ItemSelection_upvr (readonly)
		[3]: module_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: SetInventoryItem_upvr (readonly)
		[6]: ReplicatedStorage_upvr (readonly)
		[7]: any_GetController_result1_upvr_2 (readonly)
		[8]: InventoryService_upvr (readonly)
		[9]: MailGrid_upvr (readonly)
	]]
	if arg1 ~= "Mailbox" or not ClaimableMail_upvr.ScrollingFrame then
		local ScrollingFrame_upvr = ItemSelection_upvr.ScrollingFrame
	end
	if arg1 ~= "Mailbox" or not module_upvr.Mailbox then
	end
	if arg1 ~= "Mailbox" then
		SetInventoryItem_upvr(nil)
	end
	for _, v_3 in pairs(ScrollingFrame_upvr:GetChildren()) do
		if v_3:IsA("ImageButton") then
			v_3:Destroy()
		end
	end
	for _, v_4_upvr in pairs(any_GetController_result1_upvr.Inventory) do
		local clone_upvr = ReplicatedStorage_upvr.Prefabs.UI.MailItemSlotTemplate:Clone()
		clone_upvr.Parent = ScrollingFrame_upvr
		clone_upvr.Name = v_4_upvr.Id
		any_GetController_result1_upvr_2:UpdateItemDisplay(clone_upvr.Frame, v_4_upvr)
		if arg1 == "Mailbox" then
			clone_upvr.Frame.AcceptButton.Visible = true
			clone_upvr.Frame.RejectButton.Visible = true
			clone_upvr.Frame.AcceptButton.MouseButton1Up:Connect(function() -- Line 196
				--[[ Upvalues[4]:
					[1]: any_GetController_result1_upvr_2 (copied, readonly)
					[2]: InventoryService_upvr (copied, readonly)
					[3]: v_4_upvr (readonly)
					[4]: clone_upvr (readonly)
				]]
				if any_GetController_result1_upvr_2.Processing then
				else
					any_GetController_result1_upvr_2.Processing = true
					local _, _ = InventoryService_upvr:ClaimMail(v_4_upvr.SpecificIndex, true):andThen():await()
					any_GetController_result1_upvr_2.Processing = false
					clone_upvr:Destroy()
				end
			end)
			clone_upvr.Frame.RejectButton.MouseButton1Up:Connect(function() -- Line 204
				--[[ Upvalues[4]:
					[1]: any_GetController_result1_upvr_2 (copied, readonly)
					[2]: InventoryService_upvr (copied, readonly)
					[3]: v_4_upvr (readonly)
					[4]: clone_upvr (readonly)
				]]
				if any_GetController_result1_upvr_2.Processing then
				else
					any_GetController_result1_upvr_2.Processing = true
					local _, _ = InventoryService_upvr:ClaimMail(v_4_upvr.SpecificIndex, false):andThen():await()
					any_GetController_result1_upvr_2.Processing = false
					clone_upvr:Destroy()
				end
			end)
		else
			clone_upvr.MouseButton1Up:Connect(function() -- Line 214
				--[[ Upvalues[4]:
					[1]: ScrollingFrame_upvr (readonly)
					[2]: clone_upvr (readonly)
					[3]: SetInventoryItem_upvr (copied, readonly)
					[4]: v_4_upvr (readonly)
				]]
				for _, v_5 in pairs(ScrollingFrame_upvr:GetChildren()) do
					if v_5:IsA("ImageButton") then
						v_5.Frame.UIStroke.Color = Color3.fromRGB(45, 45, 45)
					end
				end
				clone_upvr.Frame.UIStroke.Color = Color3.fromRGB(24, 236, 0)
				SetInventoryItem_upvr(v_4_upvr)
			end)
		end
	end
	UpdateGridSearch(MailGrid_upvr.ClaimableMail.SearchBar)
	UpdateGridSearch(MailGrid_upvr.ItemSelection.SearchBar)
end
function module_upvr.ToggleMailbox(arg1, arg2) -- Line 235
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: Mailbox_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		Mailbox_upvr.Visible = arg2
	end
end
function module_upvr.Init(arg1) -- Line 240
	--[[ Upvalues[2]:
		[1]: setTabSelected_upvr (readonly)
		[2]: RefreshGrid_upvr (readonly)
	]]
	setTabSelected_upvr("SendTab")
	RefreshGrid_upvr("Mailbox")
	RefreshGrid_upvr("Inventory")
end
Mailbox_upvr:WaitForChild("Header"):WaitForChild("CloseButton").MouseButton1Up:Connect(function() -- Line 254
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr_2 (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		any_GetController_result1_upvr_2:ToggleUI("Mailbox", false)
	end
end)
MailConfirmation_upvr.Header.CloseButton.MouseButton1Up:Connect(function() -- Line 259
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: MailConfirmation_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		MailConfirmation_upvr.Visible = false
		any_GetController_result1_upvr_2:ToggleUI("Mailbox", true)
	end
end)
MailConfirmation_upvr.Window.SendMail.YesButton.MouseButton1Up:Connect(function() -- Line 265
	--[[ Upvalues[9]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: MailConfirmation_upvr (readonly)
		[3]: InventoryService_upvr (readonly)
		[4]: var18_upvw (read and write)
		[5]: var17_upvw (read and write)
		[6]: var19_upvw (read and write)
		[7]: SendMail_upvr (readonly)
		[8]: ItemSelection_upvr (readonly)
		[9]: SetInventoryItem_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		any_GetController_result1_upvr_2.Processing = true
		MailConfirmation_upvr.Window.SendMail.YesButton.Text = "Processing"
		local any_await_result1_2, any_await_result2 = InventoryService_upvr:SendMail(var18_upvw, var17_upvw.Id, var19_upvw, SendMail_upvr.MessageEntry.Text):andThen():await()
		MailConfirmation_upvr.Window.SendMail.YesButton.Text = "Yes"
		any_GetController_result1_upvr_2.Processing = false
		MailConfirmation_upvr.Visible = false
		any_GetController_result1_upvr_2:ToggleUI("Mailbox", true)
		SendMail_upvr.Visible = true
		ItemSelection_upvr.Visible = false
		SetInventoryItem_upvr(nil)
		SendMail_upvr.NameEntry.Text = ""
		SendMail_upvr.MessageEntry.Text = ""
		if not any_await_result1_2 or not any_await_result2 then
			any_GetController_result1_upvr_2:ToggleUI("Mailbox", false)
		end
	end
end)
MailConfirmation_upvr.Window.SendMail.NoButton.MouseButton1Up:Connect(function() -- Line 290
	--[[ Upvalues[4]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: MailConfirmation_upvr (readonly)
		[3]: SendMail_upvr (readonly)
		[4]: ItemSelection_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		MailConfirmation_upvr.Visible = false
		any_GetController_result1_upvr_2:ToggleUI("Mailbox", true)
		SendMail_upvr.Visible = true
		ItemSelection_upvr.Visible = false
	end
end)
BG_upvr:WaitForChild("GiftsTab"):WaitForChild("Button").MouseButton1Up:Connect(function() -- Line 300
	--[[ Upvalues[5]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: ClaimableMail_upvr (readonly)
		[3]: SendMail_upvr (readonly)
		[4]: ItemSelection_upvr (readonly)
		[5]: setTabSelected_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		ClaimableMail_upvr.Visible = true
		SendMail_upvr.Visible = false
		ItemSelection_upvr.Visible = false
		setTabSelected_upvr("GiftsTab")
	end
end)
BG_upvr:WaitForChild("SendTab"):WaitForChild("Button").MouseButton1Up:Connect(function() -- Line 308
	--[[ Upvalues[5]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: ClaimableMail_upvr (readonly)
		[3]: SendMail_upvr (readonly)
		[4]: ItemSelection_upvr (readonly)
		[5]: setTabSelected_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		ClaimableMail_upvr.Visible = false
		SendMail_upvr.Visible = true
		ItemSelection_upvr.Visible = false
		setTabSelected_upvr("SendTab")
	end
end)
SendMail_upvr.SelectItemButton.MouseButton1Up:Connect(function() -- Line 316
	--[[ Upvalues[4]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: RefreshGrid_upvr (readonly)
		[3]: SendMail_upvr (readonly)
		[4]: ItemSelection_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		RefreshGrid_upvr("Inventory")
		SendMail_upvr.Visible = false
		ItemSelection_upvr.Visible = true
	end
end)
SendMail_upvr.SendButton.MouseButton1Up:Connect(function() -- Line 323
	--[[ Upvalues[7]:
		[1]: var18_upvw (read and write)
		[2]: var17_upvw (read and write)
		[3]: var19_upvw (read and write)
		[4]: any_GetController_result1_upvr (readonly)
		[5]: var20_upvw (read and write)
		[6]: MailConfirmation_upvr (readonly)
		[7]: any_GetController_result1_upvr_2 (readonly)
	]]
	if not var18_upvw or not var17_upvw or var19_upvw <= 0 or any_GetController_result1_upvr.Coins < var20_upvw then
	else
		MailConfirmation_upvr.Window.SendMail.MessageBG.ConfirmationMessage.Text = "Are you sure you want to send "..tostring(var19_upvw)..' '..var17_upvw.Id.." to "..game.Players:GetNameFromUserIdAsync(var18_upvw)..'?'
		MailConfirmation_upvr.Visible = true
		any_GetController_result1_upvr_2:ToggleUI("Mailbox", false)
	end
end)
ItemSelection_upvr.SendButton.MouseButton1Up:Connect(function() -- Line 338
	--[[ Upvalues[4]:
		[1]: SendMail_upvr (readonly)
		[2]: ItemSelection_upvr (readonly)
		[3]: SetInventoryItem_upvr (readonly)
		[4]: var17_upvw (read and write)
	]]
	SendMail_upvr.Visible = true
	ItemSelection_upvr.Visible = false
	SetInventoryItem_upvr(var17_upvw)
end)
SendMail_upvr.NameEntry.Changed:Connect(UsernameSearch)
MailGrid_upvr.ClaimableMail.SearchBar.Changed:Connect(function() -- Line 347
	--[[ Upvalues[1]:
		[1]: MailGrid_upvr (readonly)
	]]
	UpdateGridSearch(MailGrid_upvr.ClaimableMail.SearchBar)
end)
MailGrid_upvr.ItemSelection.SearchBar.Changed:Connect(function() -- Line 351
	--[[ Upvalues[1]:
		[1]: MailGrid_upvr (readonly)
	]]
	UpdateGridSearch(MailGrid_upvr.ItemSelection.SearchBar)
end)
ItemSelection_upvr.Amount.Add.MouseButton1Down:Connect(function() -- Line 355
	--[[ Upvalues[6]:
		[1]: var22_upvw (read and write)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: UpdateYield_upvr (readonly)
		[4]: tbl_upvr (readonly)
		[5]: CoreUtil_upvr (readonly)
		[6]: ItemSelection_upvr (readonly)
	]]
	if not var22_upvw and any_GetController_result1_upvr_2.Processing then
	else
		local _ = 1
		var22_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, ItemSelection_upvr.Amount.Add.MouseButton1Up)
		while wait() and var22_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
ItemSelection_upvr.Amount.Subtract.MouseButton1Down:Connect(function() -- Line 374
	--[[ Upvalues[6]:
		[1]: var23_upvw (read and write)
		[2]: any_GetController_result1_upvr_2 (readonly)
		[3]: UpdateYield_upvr (readonly)
		[4]: tbl_upvr (readonly)
		[5]: CoreUtil_upvr (readonly)
		[6]: ItemSelection_upvr (readonly)
	]]
	if not var23_upvw and any_GetController_result1_upvr_2.Processing then
	else
		local _ = 1
		var23_upvw = true
		CoreUtil_upvr:CustomYeild(0.5, ItemSelection_upvr.Amount.Subtract.MouseButton1Up)
		while wait() and var23_upvw do
			workspace.Sound.UI.CountAdjust:Play()
			if 0.5 <= tick() - tick() then
			end
		end
	end
end)
ItemSelection_upvr.Amount.Add.MouseButton1Up:Connect(function() -- Line 391
	--[[ Upvalues[1]:
		[1]: var22_upvw (read and write)
	]]
	var22_upvw = false
end)
ItemSelection_upvr.Amount.Subtract.MouseButton1Up:Connect(function() -- Line 395
	--[[ Upvalues[1]:
		[1]: var23_upvw (read and write)
	]]
	var23_upvw = false
end)
InventoryService_upvr.UpdateMail:Connect(function(arg1, arg2) -- Line 399
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: module_upvr (readonly)
		[3]: RefreshGrid_upvr (readonly)
	]]
	any_GetController_result1_upvr_2:Notification("Gift", arg2)
	module_upvr.Mailbox = arg1
	RefreshGrid_upvr("Mailbox")
end)
local any_await_result1, any_await_result2_2 = InventoryService_upvr:GetMail():andThen():await()
_ = any_await_result1 -- Setting global
module_upvr.Mailbox = any_await_result2_2
module_upvr:Init()
return module_upvr

Script name: EffectsHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function InitialiseEffectUI() -- Line 25
	--[[ Upvalues[5]:
		[1]: MainGui_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	for _, v in pairs(MainGui_upvr.HUD.EffectPanel:GetChildren()) do
		if v:IsA("Frame") then
			v:Destroy()
		end
	end
	for _, v_2 in pairs(any_GetController_result1_upvr.Effects) do
		local any_GetCurrentTier_result1_2 = CoreUtil_upvr:GetCurrentTier(v_2)
		local var30
		if any_GetCurrentTier_result1_2 then
			local var31 = any_RequireDefinitions_result1_upvr.Effects[v_2.Id]
			var30 = v_2
			local any_GetTotalEffectTime_result1_2, any_GetTotalEffectTime_result2_2 = CoreUtil_upvr:GetTotalEffectTime(var30)
			local function INLINED() -- Internal function, doesn't exist in bytecode
				var30 = CoreUtil_upvr:FormatTime(any_GetTotalEffectTime_result1_2)
				return var30
			end
			if not any_GetTotalEffectTime_result1_2 or 0 >= any_GetTotalEffectTime_result1_2 or not INLINED() then
				var30 = ""
			end
			local clone = ReplicatedStorage_upvr.Prefabs.UI.EffectTemp:Clone()
			clone.Name = v_2.Id
			clone.ImageButton.Image = var31.DisplayImage
			clone.UIGradient.Color = var31.Gradient
			clone.Title.Text = var31.Id
			if any_GetTotalEffectTime_result2_2 then
			else
			end
			clone.Time.Text = var30
			clone.Tier.Text = CoreUtil_upvr.RomanNumerals[any_GetCurrentTier_result1_2.Tier]
			clone.Parent = MainGui_upvr.HUD.EffectPanel
		end
	end
end
local any_await_result1, any_await_result2 = Knit.GetService("PlayerService"):GetEffects():andThen():await()
_ = any_await_result1 -- Setting global
any_GetController_result1_upvr.Effects = any_await_result2
Knit.GetService("EffectService").UpdateEffect:Connect(function(arg1) -- Line 62
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr.Effects = arg1
	InitialiseEffectUI()
end)
InitialiseEffectUI()
coroutine.wrap(function() -- Line 69
	--[[ Upvalues[3]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: MainGui_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	while wait(1) do
		for i_3, v_3 in pairs(any_GetController_result1_upvr.Effects) do
			local any_GetCurrentTier_result1 = CoreUtil_upvr:GetCurrentTier(v_3)
			if not any_GetCurrentTier_result1.Active then
				if any_GetCurrentTier_result1.Time then
					if any_GetCurrentTier_result1.Time <= 0 then
					else
						any_GetCurrentTier_result1.Time -= 1
					end
				end
				local SOME = MainGui_upvr.HUD.EffectPanel:FindFirstChild(i_3)
				local var52
				if SOME then
					var52 = v_3
					local any_GetTotalEffectTime_result1, any_GetTotalEffectTime_result2 = CoreUtil_upvr:GetTotalEffectTime(var52)
					local function INLINED_2() -- Internal function, doesn't exist in bytecode
						var52 = CoreUtil_upvr:FormatTime(any_GetTotalEffectTime_result1)
						return var52
					end
					if not any_GetTotalEffectTime_result1 or 0 >= any_GetTotalEffectTime_result1 or not INLINED_2() then
						var52 = ""
					end
					if any_GetTotalEffectTime_result2 then
					else
					end
					SOME.Time.Text = var52
					SOME.Tier.Text = CoreUtil_upvr.RomanNumerals[any_GetCurrentTier_result1.Tier]
				end
			end
		end
	end
end)()
return {}

Script name: DailyRewardsHandler
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage.Packages.Knit)
local InventoryService_upvr = Knit.GetService("InventoryService")
local PlayerService_upvr = Knit.GetService("PlayerService")
local any_GetController_result1_upvr_2 = Knit.GetController("UIController")
local module_upvr = {
	DailyRewardsList = {};
	ClaimedRewards = {};
	DailyRewardsStreak = 1;
	LastLogin = nil;
	TimeUntilNextReward = 0;
}
local LocalPlayer = game:GetService("Players").LocalPlayer
local MainGui = LocalPlayer.PlayerGui:WaitForChild("MainGui")
local DailyRewards_upvr = MainGui:WaitForChild("DailyRewards")
local TimerBG = DailyRewards_upvr:WaitForChild("TimerBG")
local Rewards_upvr = DailyRewards_upvr:WaitForChild("BG"):WaitForChild("Rewards")
local RestoreButton_upvr = TimerBG:WaitForChild("RestoreButton")
local Timer_upvr = TimerBG:WaitForChild("Frame"):WaitForChild("Timer")
function module_upvr.ToggleDailyRewards(arg1, arg2) -- Line 50
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr_2 (readonly)
		[2]: DailyRewards_upvr (readonly)
	]]
	if any_GetController_result1_upvr_2.Processing then
	else
		DailyRewards_upvr.Visible = arg2
	end
end
function module_upvr.UpdateDailyRewardsDisplay(arg1) -- Line 55
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: PlayerService_upvr (readonly)
		[3]: Rewards_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local any_await_result1_8, any_await_result2_4 = PlayerService_upvr:GetClaimedDailyRewards():andThen():await()
	_ = any_await_result1_8 -- Setting global
	module_upvr.ClaimedRewards = any_await_result2_4
	for _, v in ipairs(Rewards_upvr:GetChildren()) do
		if v:IsA("Frame") then
			local SlotIndex_3 = v:GetAttribute("SlotIndex")
			if SlotIndex_3 then
				local var47 = module_upvr.DailyRewardsStreak - 7 + SlotIndex_3
				local var48
				if 7 < module_upvr.DailyRewardsStreak and SlotIndex_3 ~= var47 then
					var48 = module_upvr.DailyRewardsList[var47]
				end
				if SlotIndex_3 == 8 then
					var48 = module_upvr.DailyRewardsList[30]
				elseif module_upvr.DailyRewardsStreak == 30 then
					local var49 = var47 - 1
					var48 = module_upvr.DailyRewardsList[var49]
				end
				if var48 then
					v.Amount.Text = 'x'..var48.amount
					v.Day.Text = "Day "..var48.index
					local any_GetDefinitionFromId_result1_2 = CoreUtil_upvr:GetDefinitionFromId(var48.itemName)
					if any_GetDefinitionFromId_result1_2 then
						v.Icon.Image = any_GetDefinitionFromId_result1_2.DisplayImage
						v:SetAttribute("ItemId", any_GetDefinitionFromId_result1_2.Id)
						v:SetAttribute("ItemDescription", any_GetDefinitionFromId_result1_2.Description)
					elseif var48.itemType == "Coins" then
						v.Icon.Image = "rbxassetid://17162074005"
					end
				end
				if 7 < module_upvr.DailyRewardsStreak then
					if table.find(module_upvr.ClaimedRewards, var49) then
						v.Checkmark.Visible = true
						v.ClaimButton.Visible = false
						v.Icon.Visible = true
					elseif var49 <= module_upvr.DailyRewardsStreak then
						v.Checkmark.Visible = false
						v.ClaimButton.Visible = true
					else
						v.Checkmark.Visible = false
						v.ClaimButton.Visible = false
					end
				elseif table.find(module_upvr.ClaimedRewards, SlotIndex_3) then
					v.Checkmark.Visible = true
					v.ClaimButton.Visible = false
				elseif SlotIndex_3 <= module_upvr.DailyRewardsStreak then
					v.Checkmark.Visible = false
					v.ClaimButton.Visible = true
				else
					v.Checkmark.Visible = false
					v.ClaimButton.Visible = false
				end
				if SlotIndex_3 == 8 then
					v.Checkmark.Visible = false
					v.ClaimButton.Visible = false
					if 30 <= module_upvr.DailyRewardsStreak then
						v.ClaimButton.Visible = true
					end
					if table.find(module_upvr.ClaimedRewards, 30) then
						v.ClaimButton.Visible = false
						v.Checkmark.Visible = true
					end
				end
			end
		end
	end
end
function module_upvr.UpdateRewardTimerDisplay(arg1) -- Line 145
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: PlayerService_upvr (readonly)
		[3]: Timer_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	local any_await_result1_2, any_await_result2_8 = PlayerService_upvr:GetLastLogin():andThen():await()
	_ = any_await_result1_2 -- Setting global
	module_upvr.LastLogin = any_await_result2_8
	if not module_upvr.LastLogin then
		Timer_upvr.Text = ""
	else
		module_upvr.TimeUntilNextReward = (86400) - (os.time() - module_upvr.LastLogin)
		Timer_upvr.Text = CoreUtil_upvr:FormatTime(module_upvr.TimeUntilNextReward) or ""
	end
end
local function handleClaimButtons_upvr() -- Line 156, Named "handleClaimButtons"
	--[[ Upvalues[3]:
		[1]: Rewards_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: InventoryService_upvr (readonly)
	]]
	for i_2_upvr, v_2_upvr in ipairs(Rewards_upvr:GetChildren()) do
		if v_2_upvr:IsA("Frame") then
			local tbl_upvr = {}
			v_2_upvr.ClaimButton.MouseButton1Down:Connect(function() -- Line 161
				--[[ Upvalues[5]:
					[1]: tbl_upvr (readonly)
					[2]: i_2_upvr (readonly)
					[3]: v_2_upvr (readonly)
					[4]: module_upvr (copied, readonly)
					[5]: InventoryService_upvr (copied, readonly)
				]]
				-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
				if tbl_upvr[i_2_upvr] then
				else
					local SlotIndex = v_2_upvr:GetAttribute("SlotIndex")
					if not SlotIndex then return end
					tbl_upvr[i_2_upvr] = true
					if 7 < module_upvr.DailyRewardsStreak then
						if module_upvr.DailyRewardsStreak == 30 then
							local var61
						end
						if SlotIndex == 8 and 30 <= module_upvr.DailyRewardsStreak then
							var61 = 30
						end
						local any_await_result1, any_await_result2_2 = InventoryService_upvr:ClaimDailyReward(var61):andThen():await()
						_ = any_await_result1 -- Setting global
						if any_await_result2_2 then
							table.insert(module_upvr.ClaimedRewards, var61)
							-- KONSTANTWARNING: GOTO [92] #70
						end
					else
						var61 = InventoryService_upvr:ClaimDailyReward(SlotIndex):andThen():await()
						local any_await_result1_9, any_await_result2_3 = InventoryService_upvr:ClaimDailyReward(SlotIndex):andThen():await()
						_ = any_await_result1_9 -- Setting global
						if any_await_result2_3 then
							any_await_result1_9 = table.insert
							any_await_result1_9(module_upvr.ClaimedRewards, SlotIndex)
						end
					end
					-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
					-- KONSTANTERROR: [92] 70. Error Block 16 start (CF ANALYSIS FAILED)
					workspace.Sound.UI.Craft:Play()
					module_upvr:UpdateDailyRewardsDisplay()
					tbl_upvr[i_2_upvr] = false
					-- KONSTANTERROR: [92] 70. Error Block 16 end (CF ANALYSIS FAILED)
				end
			end)
			local Size_upvr = v_2_upvr.ClaimButton.Size
			v_2_upvr.ClaimButton.MouseEnter:Connect(function() -- Line 203
				--[[ Upvalues[2]:
					[1]: v_2_upvr (readonly)
					[2]: Size_upvr (readonly)
				]]
				v_2_upvr.ClaimButton.Size = UDim2.fromScale(Size_upvr.X.Scale * 1.04, Size_upvr.Y.Scale * 1.04)
			end)
			v_2_upvr.ClaimButton.MouseLeave:Connect(function() -- Line 207
				--[[ Upvalues[2]:
					[1]: v_2_upvr (readonly)
					[2]: Size_upvr (readonly)
				]]
				v_2_upvr.ClaimButton.Size = UDim2.fromScale(Size_upvr.X.Scale, Size_upvr.Y.Scale)
			end)
		end
	end
end
local ItemTooltip_upvr = MainGui:WaitForChild("ItemTooltip")
local RunService_upvr = game:GetService("RunService")
local mouse_upvr = LocalPlayer:GetMouse()
local function handleRewardSlots_upvr() -- Line 214, Named "handleRewardSlots"
	--[[ Upvalues[5]:
		[1]: Rewards_upvr (readonly)
		[2]: ItemTooltip_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: RunService_upvr (readonly)
		[5]: mouse_upvr (readonly)
	]]
	for _, v_3 in ipairs(Rewards_upvr:GetChildren()) do
		if v_3:IsA("Frame") then
			local ItemId_upvr = v_3:GetAttribute("ItemId")
			v_3.MouseEnter:Connect(function() -- Line 218
				--[[ Upvalues[5]:
					[1]: ItemId_upvr (readonly)
					[2]: ItemTooltip_upvr (copied, readonly)
					[3]: CoreUtil_upvr (copied, readonly)
					[4]: RunService_upvr (copied, readonly)
					[5]: mouse_upvr (copied, readonly)
				]]
				if not ItemId_upvr then
				else
					ItemTooltip_upvr.Title.Text = ' '..ItemId_upvr
					ItemTooltip_upvr.Visible = true
					local any_GetDefinitionFromId_result1 = CoreUtil_upvr:GetDefinitionFromId(ItemId_upvr)
					if any_GetDefinitionFromId_result1 then
						ItemTooltip_upvr.Details.Text = any_GetDefinitionFromId_result1.Description or ""
					end
					while ItemTooltip_upvr.Visible and RunService_upvr.RenderStepped:Wait() do
						ItemTooltip_upvr.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y)
					end
				end
			end)
			v_3.MouseLeave:Connect(function() -- Line 238
				--[[ Upvalues[2]:
					[1]: ItemId_upvr (readonly)
					[2]: ItemTooltip_upvr (copied, readonly)
				]]
				if ItemId_upvr and ItemTooltip_upvr.Title.Text == ' '..ItemId_upvr then
					ItemTooltip_upvr.Visible = false
				end
			end)
		end
	end
end
function module_upvr.Init(arg1) -- Line 247
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: InventoryService_upvr (readonly)
		[3]: PlayerService_upvr (readonly)
	]]
	local any_await_result1_6, any_await_result2_7 = InventoryService_upvr:GetDailyRewards():andThen():await()
	_ = any_await_result1_6 -- Setting global
	module_upvr.DailyRewardsList = any_await_result2_7
	local any_await_result1_5, any_await_result2_6 = PlayerService_upvr:GetClaimedDailyRewards():andThen():await()
	_ = any_await_result1_5 -- Setting global
	module_upvr.ClaimedRewards = any_await_result2_6
	local any_await_result1_4, any_await_result2 = PlayerService_upvr:GetDailyRewardsStreak():andThen():await()
	_ = any_await_result1_4 -- Setting global
	module_upvr.DailyRewardsStreak = any_await_result2
	local any_await_result1_7, any_await_result2_5 = PlayerService_upvr:GetLastLogin():andThen():await()
	_ = any_await_result1_7 -- Setting global
	module_upvr.LastLogin = any_await_result2_5
end
local any_GetController_result1_upvr = Knit.GetController("PlayerController")
PlayerService_upvr.DailyRewardStreakUpdated:Connect(function(arg1, arg2) -- Line 255
	--[[ Upvalues[8]:
		[1]: module_upvr (readonly)
		[2]: Timer_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: handleClaimButtons_upvr (readonly)
		[5]: handleRewardSlots_upvr (readonly)
		[6]: any_GetController_result1_upvr (readonly)
		[7]: RestoreButton_upvr (readonly)
		[8]: any_GetController_result1_upvr_2 (readonly)
	]]
	module_upvr.DailyRewardsStreak = arg1
	module_upvr:UpdateDailyRewardsDisplay()
	module_upvr:UpdateRewardTimerDisplay()
	task.spawn(function() -- Line 261
		--[[ Upvalues[3]:
			[1]: module_upvr (copied, readonly)
			[2]: Timer_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		while task.wait(1) and module_upvr.TimeUntilNextReward ~= 0 do
			local var92 = module_upvr
			var92.TimeUntilNextReward -= 1
			Timer_upvr.Text = CoreUtil_upvr:FormatTime(module_upvr.TimeUntilNextReward) or ""
		end
	end)
	handleClaimButtons_upvr()
	handleRewardSlots_upvr()
	if any_GetController_result1_upvr.Coins < 5000 then
		RestoreButton_upvr.Amount.TextColor3 = Color3.fromRGB(255, 0, 0)
	end
	if arg1 and arg2 and arg1 == 1 and 1 < arg2 and arg2 < 30 then
		RestoreButton_upvr.Visible = true
	else
		RestoreButton_upvr.Visible = false
	end
	any_GetController_result1_upvr_2:ToggleUI("DailyRewards", true)
end)
local var94_upvw = false
RestoreButton_upvr.Activated:Connect(function() -- Line 285
	--[[ Upvalues[4]:
		[1]: var94_upvw (read and write)
		[2]: InventoryService_upvr (readonly)
		[3]: module_upvr (readonly)
		[4]: RestoreButton_upvr (readonly)
	]]
	if var94_upvw then
	else
		var94_upvw = true
		local _, any_await_result2_9 = InventoryService_upvr:RestoreDailyRewardsStreak():andThen():await()
		if any_await_result2_9 then
			module_upvr:UpdateDailyRewardsDisplay()
			RestoreButton_upvr.Visible = false
		end
		task.wait(1)
		var94_upvw = false
	end
end)
module_upvr:Init()
return module_upvr

Script name: TeleportHandler
  - Script: 


local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module = {}
local MainGui = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
local Teleport_upvr = MainGui:WaitForChild("Teleport")
local ButtonContainer_upvr = Teleport_upvr:WaitForChild("Grid"):WaitForChild("ButtonContainer")
local TweenService_upvr = game:GetService("TweenService")
local PlayerService_upvr = Knit.GetService("PlayerService")
local function setupButtons_upvr() -- Line 34, Named "setupButtons"
	--[[ Upvalues[3]:
		[1]: ButtonContainer_upvr (readonly)
		[2]: TweenService_upvr (readonly)
		[3]: PlayerService_upvr (readonly)
	]]
	for _, v in pairs(ButtonContainer_upvr:GetChildren()) do
		local TeleportLocation_upvr = v:GetAttribute("TeleportLocation")
		if v:IsA("Frame") and TeleportLocation_upvr then
			local TeleportButton_upvr = v.TeleportButton
			local var20_upvr = TeleportButton_upvr.Size + UDim2.fromScale(0.04, 0.04)
			local any_Create_result1_upvr = TweenService_upvr:Create(v, TweenInfo.new(0.07, Enum.EasingStyle.Sine), {
				Size = v.Size + UDim2.fromScale(0.07, 0);
			})
			TeleportButton_upvr.MouseEnter:Connect(function() -- Line 46
				--[[ Upvalues[3]:
					[1]: TeleportButton_upvr (readonly)
					[2]: var20_upvr (readonly)
					[3]: any_Create_result1_upvr (readonly)
				]]
				TeleportButton_upvr.Size = var20_upvr
				any_Create_result1_upvr:Play()
			end)
			local Size_upvr = TeleportButton_upvr.Size
			local any_Create_result1_upvr_2 = TweenService_upvr:Create(v, TweenInfo.new(0.07, Enum.EasingStyle.Sine), {
				Size = v.Size;
			})
			TeleportButton_upvr.MouseLeave:Connect(function() -- Line 51
				--[[ Upvalues[3]:
					[1]: TeleportButton_upvr (readonly)
					[2]: Size_upvr (readonly)
					[3]: any_Create_result1_upvr_2 (readonly)
				]]
				TeleportButton_upvr.Size = Size_upvr
				any_Create_result1_upvr_2:Play()
			end)
			local var26_upvw = false
			TeleportButton_upvr.MouseButton1Up:Connect(function() -- Line 57
				--[[ Upvalues[3]:
					[1]: var26_upvw (read and write)
					[2]: PlayerService_upvr (copied, readonly)
					[3]: TeleportLocation_upvr (readonly)
				]]
				if var26_upvw then
				else
					var26_upvw = true
					task.spawn(function() -- Line 62
						--[[ Upvalues[2]:
							[1]: PlayerService_upvr (copied, readonly)
							[2]: TeleportLocation_upvr (copied, readonly)
						]]
						PlayerService_upvr:RequestTeleport(TeleportLocation_upvr)
					end)
					task.wait(0.5)
					var26_upvw = false
				end
			end)
		end
	end
end
function module.ToggleTeleport(arg1, arg2) -- Line 73
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: Teleport_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		Teleport_upvr.Visible = arg2
	end
end
function module.Init(arg1) -- Line 80
	--[[ Upvalues[1]:
		[1]: setupButtons_upvr (readonly)
	]]
	setupButtons_upvr()
end
Teleport_upvr:WaitForChild("Header"):WaitForChild("Close").MouseButton1Up:Connect(function() -- Line 85
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		any_GetController_result1_upvr:ToggleUI("Teleport", false)
	end
end)
MainGui:WaitForChild("HUD"):WaitForChild("RightPanel"):WaitForChild("TeleportButton"):WaitForChild("Button").MouseButton1Up:Connect(function() -- Line 90
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: Teleport_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Teleport", not Teleport_upvr.Visible)
end)
module:Init()
return module

Script name: EnchantingHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local InventoryService_upvr = Knit.GetService("InventoryService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module = {}
local tbl_upvw = {}
local MainGui_upvr = game.Players.LocalPlayer.PlayerGui:WaitForChild("MainGui")
local var9_upvw
local var10_upvw
local RunService_upvr = game:GetService("RunService")
local function shakeCamera_upvr() -- Line 32, Named "shakeCamera"
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local var13_upvr = tick() + 1
	local CurrentCamera_upvr = game.Workspace.CurrentCamera
	RunService_upvr:BindToRenderStep("CameraShake", Enum.RenderPriority.Camera.Value + 1, function() -- Line 38
		--[[ Upvalues[3]:
			[1]: var13_upvr (readonly)
			[2]: RunService_upvr (copied, readonly)
			[3]: CurrentCamera_upvr (readonly)
		]]
		local tick_result1 = tick()
		if var13_upvr < tick_result1 then
			RunService_upvr:UnbindFromRenderStep("CameraShake")
			CurrentCamera_upvr.CFrame = CurrentCamera_upvr.CFrame
		else
			local var16 = (1) - (var13_upvr - tick_result1)
			CurrentCamera_upvr.CFrame *= CFrame.new(math.random() * var16 - var16 / 2, math.random() * var16 - var16 / 2, math.random() * var16 - var16 / 2)
		end
	end)
end
function SetInventoryItem(arg1, arg2) -- Line 58
	--[[ Upvalues[5]:
		[1]: var9_upvw (read and write)
		[2]: var10_upvw (read and write)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: MainGui_upvr (readonly)
		[5]: tbl_upvw (read and write)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 36 start (CF ANALYSIS FAILED)
	if arg2 == "Tool" then
		var9_upvw = arg1
	end
	if arg2 == "Item" then
		var10_upvw = arg1
	end
	local var21 = var9_upvw
	if var21 then
		var21 = var9_upvw.ItemSlot
	end
	any_GetController_result1_upvr:UpdateItemDisplay(MainGui_upvr.Enchanting.Pages.Enchanting.Item, var21)
	local var22 = var10_upvw
	if var22 then
		var22 = var10_upvw.ItemSlot
	end
	any_GetController_result1_upvr:UpdateItemDisplay(MainGui_upvr.Enchanting.Pages.Enchanting.Relic, var22)
	for i, v in pairs(tbl_upvw) do
		v.UI.Visible = true
	end
	if var9_upvw then
		var9_upvw.UI.Visible = false
		v = MainGui_upvr.Enchanting
		i = v.Pages
		i = 255
		v = 255
		i.Enchanting.Item.Required.TextColor3 = Color3.fromRGB(255, i, v)
		-- KONSTANTWARNING: GOTO [101] #68
	end
	-- KONSTANTERROR: [0] 1. Error Block 36 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [82] 56. Error Block 34 start (CF ANALYSIS FAILED)
	MainGui_upvr.Enchanting.Pages.Enchanting.Item.Required.TextColor3 = Color3.fromRGB(255, 0, 0)
	if var10_upvw then
		var10_upvw.UI.Visible = false
		MainGui_upvr.Enchanting.Pages.Enchanting.Relic.Required.TextColor3 = Color3.fromRGB(255, 255, 255)
	else
		MainGui_upvr.Enchanting.Pages.Enchanting.Relic.Required.TextColor3 = Color3.fromRGB(255, 0, 0)
	end
	if var9_upvw and var10_upvw then
		MainGui_upvr.Enchanting.Pages.Enchanting.EnchantButton.Shader.Visible = false
	else
		MainGui_upvr.Enchanting.Pages.Enchanting.EnchantButton.Shader.Visible = true
		-- KONSTANTERROR: [82] 56. Error Block 34 end (CF ANALYSIS FAILED)
	end
end
local any_GetController_result1_upvr_2 = Knit.GetController("PlayerController")
function Initialise(arg1) -- Line 90
	--[[ Upvalues[6]:
		[1]: MainGui_upvr (readonly)
		[2]: tbl_upvw (read and write)
		[3]: any_GetController_result1_upvr_2 (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: any_GetController_result1_upvr (readonly)
	]]
	for _, v_2 in pairs(tbl_upvw) do
		v_2.UI:Destroy()
	end
	tbl_upvw = {}
	SetInventoryItem(nil, "Tool")
	SetInventoryItem(nil, "Item")
	for _, v_3_upvr in pairs(any_GetController_result1_upvr_2.Inventory) do
		local any_GetDefinitionFromId_result1 = CoreUtil_upvr:GetDefinitionFromId(v_3_upvr.Id)
		if any_GetDefinitionFromId_result1.Catagory == "Tool" and CoreUtil_upvr.ItemEnchantments[any_GetDefinitionFromId_result1.SubCatagory] or any_GetDefinitionFromId_result1.Id == "Enchantment Rune" then
			local tbl_upvr = {
				ItemSlot = v_3_upvr;
				UI = ReplicatedStorage_upvr.Prefabs.UI.EnchantmentTemp:Clone();
			}
			tbl_upvr.UI.Parent = MainGui_upvr.Enchanting.Pages.Enchanting.ItemSelection.ScrollingFrame
			tbl_upvr.UI.Name = v_3_upvr.Id
			tbl_upvr.UI.MouseButton1Up:Connect(function() -- Line 115
				--[[ Upvalues[2]:
					[1]: tbl_upvr (readonly)
					[2]: v_3_upvr (readonly)
				]]
				SetInventoryItem(tbl_upvr, v_3_upvr.Catagory)
			end)
			any_GetController_result1_upvr:UpdateItemDisplay(tbl_upvr.UI.Frame, v_3_upvr)
			table.insert(tbl_upvw, tbl_upvr)
		end
	end
end
function module.ToggleEnchanting(arg1, arg2, arg3) -- Line 127
	--[[ Upvalues[1]:
		[1]: MainGui_upvr (readonly)
	]]
	if arg2 and arg3 then
		if arg3.Gender == "Male" then
			workspace.Sound.UI.MaleNpcNoise:Play()
		else
			workspace.Sound.UI.FemaleNpcNoise:Play()
		end
		Initialise(arg3)
	end
	MainGui_upvr.Enchanting.Visible = arg2
end
MainGui_upvr.Enchanting.Titles.Close.MouseButton1Up:Connect(function() -- Line 140
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Enchanting", false)
end)
MainGui_upvr.Enchanting.Pages.Enchanting.Item.Button.MouseButton1Up:Connect(function() -- Line 144
	SetInventoryItem(nil, "Tool")
end)
MainGui_upvr.Enchanting.Pages.Enchanting.Relic.Button.MouseButton1Up:Connect(function() -- Line 148
	SetInventoryItem(nil, "Item")
end)
MainGui_upvr.Enchanting.Pages.Enchanting.EnchantButton.MouseButton1Up:Connect(function() -- Line 152
	--[[ Upvalues[4]:
		[1]: var9_upvw (read and write)
		[2]: var10_upvw (read and write)
		[3]: any_GetController_result1_upvr (readonly)
		[4]: InventoryService_upvr (readonly)
	]]
	if var9_upvw and var10_upvw and not any_GetController_result1_upvr.Processing then
		any_GetController_result1_upvr:ToggleUI("Enchanting", false)
		InventoryService_upvr:EnchantItem(var9_upvw.ItemSlot.Index, var10_upvw.ItemSlot.Index):andThen():await()
	end
end)
local BindableEvent_upvr = Instance.new("BindableEvent")
local TweenService_upvr = game:GetService("TweenService")
local TweenInfo_new_result1_upvr = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, false, 0)
InventoryService_upvr.ItemEnchanted:Connect(function(arg1) -- Line 161
	--[[ Upvalues[6]:
		[1]: BindableEvent_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: TweenService_upvr (readonly)
		[4]: MainGui_upvr (readonly)
		[5]: TweenInfo_new_result1_upvr (readonly)
		[6]: shakeCamera_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	BindableEvent_upvr:Fire(true)
	task.wait(0.1)
	local any_Create_result1_2 = TweenService_upvr:Create(MainGui_upvr.ItemEnchanted.Main.Sunburst, TweenInfo_new_result1_upvr, {
		Rotation = 360;
	})
	workspace.Sound.Enchanting.ItemEnchanted:Play()
	workspace.Sound.Enchanting.Enchant.PlaybackSpeed = 1
	workspace.Sound.Enchanting.GoodEnchant.PlaybackSpeed = 1
	MainGui_upvr.ItemEnchanted.Main.Item.Image = CoreUtil_upvr:GetDefinitionFromId(arg1.Id).DisplayImage
	MainGui_upvr.ItemEnchanted.Main.TextLabel.Text = arg1.Id
	TweenService_upvr:Create(MainGui_upvr.ItemEnchanted.Main, TweenInfo.new(1), {
		Size = UDim2.fromScale(0.153, 0.329);
	}):Play()
	TweenService_upvr:Create(MainGui_upvr.ItemEnchanted.EnchantShadow, TweenInfo.new(1), {
		BackgroundTransparency = 0.5;
	}):Play()
	any_Create_result1_2:Play()
	local _, pairs_result2, pairs_result3 = pairs(arg1.Enchantments.RolledEnchantments)
	local var63
	for i_4, v_4 in var63, pairs_result2, pairs_result3 do
		if not CoreUtil_upvr:CustomYeild(1.5, BindableEvent_upvr.Event) then
			local any_CustomYeild_result1_2 = CoreUtil_upvr:CustomYeild(0.5, BindableEvent_upvr.Event)
		end
		if not any_CustomYeild_result1_2 and CoreUtil_upvr.EnchantmentInfo[i_4].Rarity == "Legendary" then
			local any_Create_result1 = TweenService_upvr:Create(MainGui_upvr.ItemEnchanted.EnchantmentDark, TweenInfo.new(1), {
				ImageTransparency = 0.25;
			})
			any_Create_result1:Play()
			workspace.Sound.Enchanting.Rumble:Play()
			shakeCamera_upvr()
			if not any_CustomYeild_result1_2 then
			end
			workspace.Sound.Enchanting.Rumble:Stop()
			any_Create_result1:Cancel()
		end
		if CoreUtil_upvr.EnchantmentInfo[i_4].Quality == "Good" then
			workspace.Sound.Enchanting.GoodEnchant:Play()
			local GoodEnchant = workspace.Sound.Enchanting.GoodEnchant
			GoodEnchant.PlaybackSpeed += 0.33
			MainGui_upvr.RadialBg.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			MainGui_upvr.ItemEnchanted.EnchantmentDark.ImageTransparency = 1
			TweenService_upvr:Create(MainGui_upvr.ItemEnchanted.Main, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, true), {
				Size = UDim2.fromScale(0.191, 0.411);
			}):Play()
		else
			workspace.Sound.Enchanting.Enchant:Play()
			local Enchant = workspace.Sound.Enchanting.Enchant
			Enchant.PlaybackSpeed += 0.33
		end
		local Color = CoreUtil_upvr.EnchantmentInfo[i_4].Color
		MainGui_upvr.ItemEnchanted.Main.TextLabel.Text = "<font color=\"rgb("..string.format("%d,%d,%d", Color.R * 255, Color.G * 255, Color.B * 255)..")\">"..i_4.."</font>"..' '..MainGui_upvr.ItemEnchanted.Main.TextLabel.Text
		MainGui_upvr.ItemEnchanted.Main.Item.ImageColor3 = Color3.fromRGB(255, 255, 255)
		MainGui_upvr.ItemEnchanted.Main.Sunburst.ImageColor3 = Color
	end
	var63 = nil
	if not CoreUtil_upvr:CustomYeild(1, BindableEvent_upvr.Event) then
		i_4 = 3
		v_4 = BindableEvent_upvr.Event
		local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(i_4, v_4)
	end
	if not any_CustomYeild_result1 then
		v_4 = MainGui_upvr.ItemEnchanted
		i_4 = v_4.Main
		v_4 = TweenInfo.new(1)
		var63 = TweenService_upvr:Create(i_4, v_4, {
			Position = UDim2.fromScale(0.5, -2.5);
		})
		var63:Play()
		v_4 = MainGui_upvr.ItemEnchanted
		i_4 = v_4.EnchantShadow
		v_4 = TweenInfo.new(1)
		TweenService_upvr:Create(i_4, v_4, {
			BackgroundTransparency = 1;
		}):Play()
	end
	if not any_CustomYeild_result1 then
		i_4 = 1
		v_4 = BindableEvent_upvr.Event
	end
	MainGui_upvr.ItemEnchanted.EnchantShadow.BackgroundTransparency = 1
	MainGui_upvr.ItemEnchanted.EnchantmentDark.ImageTransparency = 1
	MainGui_upvr.ItemEnchanted.Main.Item.ImageColor3 = Color3.fromRGB(0, 0, 0)
	MainGui_upvr.ItemEnchanted.Main.Sunburst.ImageColor3 = Color3.fromRGB(0, 0, 0)
	MainGui_upvr.ItemEnchanted.Main.Sunburst.Rotation = 0
	MainGui_upvr.ItemEnchanted.Main.TextLabel.Text = arg1.Id
	MainGui_upvr.ItemEnchanted.Main.Item.Image = ""
	MainGui_upvr.ItemEnchanted.Main.Size = UDim2.fromScale(0, 0)
	if var63 then
		var63:Cancel()
	end
	MainGui_upvr.ItemEnchanted.Main.Position = UDim2.fromScale(0.5, 0.5)
	any_Create_result1_2:Cancel()
end)
return module

Script name: CollectionsHandler
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module = {}
local MainGui = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
local Collections_2_upvr = MainGui:WaitForChild("Collections")
local ScrollingFrame_upvr = Collections_2_upvr:WaitForChild("Grid"):WaitForChild("ScrollingFrame")
local tbl_upvr = {}
local function filterCollections_upvr(arg1) -- Line 44, Named "filterCollections"
	--[[ Upvalues[1]:
		[1]: ScrollingFrame_upvr (readonly)
	]]
	for _, v in pairs(ScrollingFrame_upvr:GetChildren()) do
		if v:IsA("CanvasGroup") then
			if v:GetAttribute("CollectionCategory") == arg1 then
				v.Visible = true
			else
				v.Visible = false
			end
		end
	end
end
local Color3_fromRGB_result1_upvr_2 = Color3.fromRGB(126, 126, 126)
local Color3_fromRGB_result1_upvr = Color3.fromRGB(11, 244, 84)
local function setTabHighlightsColor_upvr(arg1) -- Line 57, Named "setTabHighlightsColor"
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: Color3_fromRGB_result1_upvr_2 (readonly)
		[3]: Color3_fromRGB_result1_upvr (readonly)
	]]
	for _, v_2 in pairs(tbl_upvr) do
		v_2.UIStrokeA.Color = Color3_fromRGB_result1_upvr_2
	end
	if arg1 then
		arg1.UIStrokeA.Color = Color3_fromRGB_result1_upvr
	else
		for _, v_12 in pairs(tbl_upvr) do
			if v_12.Text == "All" then
				v_12.UIStrokeA.Color = Color3_fromRGB_result1_upvr
				return
			end
		end
	end
end
local Tabs_upvr = Collections_2_upvr:WaitForChild("TabsBG"):WaitForChild("Tabs")
local var28_upvw = "Tools"
local function createTabs_upvr() -- Line 74, Named "createTabs"
	--[[ Upvalues[7]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Tabs_upvr (readonly)
		[4]: var28_upvw (read and write)
		[5]: setTabHighlightsColor_upvr (readonly)
		[6]: filterCollections_upvr (readonly)
		[7]: tbl_upvr (readonly)
	]]
	for i_3_upvr, v_3 in pairs(CoreUtil_upvr.CollectionsLayoutOrder) do
		local clone_upvr = ReplicatedStorage_upvr.Prefabs.UI.Collections.CollectionTabTemplate:Clone()
		clone_upvr.Text = i_3_upvr
		clone_upvr.LayoutOrder = v_3
		clone_upvr.Parent = Tabs_upvr
		clone_upvr.MouseButton1Up:Connect(function() -- Line 82
			--[[ Upvalues[5]:
				[1]: var28_upvw (copied, read and write)
				[2]: clone_upvr (readonly)
				[3]: setTabHighlightsColor_upvr (copied, readonly)
				[4]: filterCollections_upvr (copied, readonly)
				[5]: i_3_upvr (readonly)
			]]
			var28_upvw = clone_upvr
			setTabHighlightsColor_upvr(clone_upvr)
			filterCollections_upvr(i_3_upvr)
		end)
		if i_3_upvr == "Tools" then
			setTabHighlightsColor_upvr(clone_upvr)
		end
		table.insert(tbl_upvr, clone_upvr)
	end
end
local function updateCollectionsStatus_upvr(arg1, arg2) -- Line 96, Named "updateCollectionsStatus"
	--[[ Upvalues[1]:
		[1]: ScrollingFrame_upvr (readonly)
	]]
	for _, v_4 in pairs(ScrollingFrame_upvr:GetChildren()) do
		if v_4:IsA("CanvasGroup") then
			local CollectionName = v_4:GetAttribute("CollectionName")
			for _, v_5 in pairs(v_4.Items.ItemsContainer:GetChildren()) do
				if v_5:IsA("Frame") then
					if not arg1[CollectionName] then
						v_5.BackgroundTransparency = 0.5
						v_5.ImageLabel.ImageColor3 = Color3.fromRGB(0, 0, 0)
					elseif table.find(arg1[CollectionName], v_5:GetAttribute("ItemName")) then
						v_5.ImageLabel.ImageColor3 = Color3.fromRGB(255, 255, 255)
						v_5.Shader.Visible = false
						v_5.UIStroke.Thickness = 2
					else
						v_5.BackgroundTransparency = 0.5
						v_5.ImageLabel.ImageColor3 = Color3.fromRGB(0, 0, 0)
					end
				end
			end
			for _, v_6 in pairs(arg2) do
				if CollectionName == v_6 then
					v_4.Checkmark.Visible = true
					v_4.FinishedText.Visible = true
					for _, v_7 in pairs(v_4.Items.ItemsContainer:GetChildren()) do
						if v_7:IsA("Frame") then
							v_7.Shader.Visible = false
							v_7.ImageLabel.ImageColor3 = Color3.fromRGB(255, 255, 255)
							v_7.UIStroke.Thickness = 2
						end
					end
				end
			end
		end
	end
end
local function createCollections_upvr() -- Line 139, Named "createCollections"
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: ScrollingFrame_upvr (readonly)
		[4]: any_GetController_result1_upvr (readonly)
	]]
	local Collections = ReplicatedStorage_upvr.Prefabs.UI.Collections
	for i_8, v_8 in pairs(CoreUtil_upvr.CollectionRewards) do
		for _, v_9 in ipairs(v_8) do
			local clone_3 = Collections.CollectionGroupTemplate:Clone()
			clone_3.CollectionName.Text = v_9.collectionName
			clone_3:SetAttribute("CollectionCategory", i_8)
			clone_3:SetAttribute("CollectionName", v_9.collectionName)
			clone_3.Parent = ScrollingFrame_upvr
			for _, v_10 in ipairs(v_9.collectionItems) do
				local clone_2 = Collections.CollectionItemTemplate:Clone()
				clone_2:SetAttribute("ItemName", v_10.itemName)
				any_GetController_result1_upvr:UpdateItemDisplay(clone_2, CoreUtil_upvr:GetDefinitionFromId(v_10.itemName))
				clone_2.Title.Text = v_10.itemName
				clone_2.Parent = clone_3.Items.ItemsContainer
			end
			for _, v_11 in ipairs(v_9.collectionRewards) do
				local clone = Collections.CollectionRewardTemplate:Clone()
				local var89
				if v_11.amount and 1 < v_11.amount then
					var89 = " (x"..tostring(v_11.amount)..')'
				end
				clone.Text = v_11.itemName..var89
				clone.Parent = clone_3.Rewards.RewardsContainer
			end
		end
	end
end
function module.ToggleCollections(arg1, arg2) -- Line 174
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: Collections_2_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		Collections_2_upvr.Visible = arg2
	end
end
function module.Init(arg1) -- Line 180
	--[[ Upvalues[3]:
		[1]: createCollections_upvr (readonly)
		[2]: createTabs_upvr (readonly)
		[3]: filterCollections_upvr (readonly)
	]]
	createCollections_upvr()
	createTabs_upvr()
	filterCollections_upvr("Tools")
end
Collections_2_upvr:WaitForChild("Header"):WaitForChild("Close").MouseButton1Up:Connect(function() -- Line 187
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		any_GetController_result1_upvr:ToggleUI("Collections", false)
	end
end)
MainGui:WaitForChild("HUD"):WaitForChild("RightPanel"):WaitForChild("CollectionsButton"):WaitForChild("Button").MouseButton1Up:Connect(function() -- Line 192
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: Collections_2_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Collections", not Collections_2_upvr.Visible)
end)
Knit.GetService("InventoryService").UpdateCollections:Connect(function(arg1, arg2) -- Line 196
	--[[ Upvalues[1]:
		[1]: updateCollectionsStatus_upvr (readonly)
	]]
	updateCollectionsStatus_upvr(arg1, arg2)
end)
module:Init()
return module

Script name: QuestsHandler
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local Knit = require(ReplicatedStorage.Packages.Knit)
local TaskService_upvr = Knit.GetService("TaskService")
local any_GetController_result1_upvr = Knit.GetController("UIController")
local module_upvr = {
	Tasks = {};
	CompletedTasks = {};
	QuestListFrames = {};
	PinnedQuestID = "";
	PinnedTutorialQuestID = "";
	PinnedSocialQuestID = "";
	QuestPinned = false;
	InitialQuestsFramesCreated = false;
}
local MainGui = game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("MainGui")
local QuestsDisplay_upvr = MainGui:WaitForChild("HUD"):WaitForChild("QuestsDisplay")
local QuestJournal_upvr = MainGui:WaitForChild("QuestJournal")
local Container = QuestJournal_upvr:WaitForChild("Container")
local QuestFrame_upvr = QuestsDisplay_upvr:WaitForChild("Quests"):WaitForChild("QuestFrame")
local TutorialFrame_upvr = QuestsDisplay_upvr:WaitForChild("Quests"):WaitForChild("TutorialFrame")
local SocialFrame_upvr = QuestsDisplay_upvr:WaitForChild("Quests"):WaitForChild("SocialFrame")
local QuestsList_upvr = Container:WaitForChild("QuestSelection"):WaitForChild("QuestsList")
local BG_upvr = Container:WaitForChild("QuestDetails"):WaitForChild("BG")
local PinButton_upvr = BG_upvr:WaitForChild("PinButton")
local StepsContainer_upvr = BG_upvr:WaitForChild("Steps"):WaitForChild("StepsContainer")
local RewardsContainer_upvr = BG_upvr:WaitForChild("RewardFrame"):WaitForChild("RewardsContainer")
local Quests_upvr = ReplicatedStorage:WaitForChild("Prefabs"):WaitForChild("UI"):WaitForChild("Quests")
local function _() -- Line 63, Named "getTasks"
	--[[ Upvalues[2]:
		[1]: TaskService_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local _, any_await_result2 = TaskService_upvr:GetTasks():andThen():await()
	module_upvr.Tasks = any_await_result2
	local _, any_await_result2_11 = TaskService_upvr:CompletedTasks():andThen():await()
	module_upvr.CompletedTasks = any_await_result2_11
end
local function _() -- Line 72, Named "clearPinnedQuest"
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: QuestFrame_upvr (readonly)
	]]
	module_upvr.PinnedQuestID = ""
	QuestFrame_upvr.QuestName.Text = ""
	QuestFrame_upvr.QuestStep.Text = ""
	QuestFrame_upvr.Visible = false
end
local function _() -- Line 80, Named "clearPinnedTutorialQuest"
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: TutorialFrame_upvr (readonly)
	]]
	module_upvr.PinnedTutorialQuestID = ""
	TutorialFrame_upvr.QuestName.Text = ""
	TutorialFrame_upvr.QuestStep.Text = ""
	TutorialFrame_upvr.Visible = false
end
local function _() -- Line 88, Named "clearPinnedSocialQuest"
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: SocialFrame_upvr (readonly)
	]]
	module_upvr.PinnedSocialQuestID = ""
	SocialFrame_upvr.QuestName.Text = ""
	SocialFrame_upvr.QuestStep.Text = ""
	SocialFrame_upvr.Visible = false
end
local function clearQuestDetails_upvr() -- Line 96, Named "clearQuestDetails"
	--[[ Upvalues[3]:
		[1]: BG_upvr (readonly)
		[2]: StepsContainer_upvr (readonly)
		[3]: RewardsContainer_upvr (readonly)
	]]
	BG_upvr.QuestName.Text = "Select A Quest"
	for _, v in pairs(StepsContainer_upvr:GetChildren()) do
		if v.Name == "QuestStep" then
			v:Destroy()
		end
	end
	for _, v_2 in pairs(RewardsContainer_upvr:GetChildren()) do
		if v_2.Name == "QuestReward" then
			v_2:Destroy()
		end
	end
end
local function displayQuestDetails_upvr(arg1) -- Line 112, Named "displayQuestDetails"
	--[[ Upvalues[8]:
		[1]: clearQuestDetails_upvr (readonly)
		[2]: PinButton_upvr (readonly)
		[3]: BG_upvr (readonly)
		[4]: module_upvr (readonly)
		[5]: Quests_upvr (readonly)
		[6]: StepsContainer_upvr (readonly)
		[7]: CoreUtil_upvr (readonly)
		[8]: RewardsContainer_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 52 start (CF ANALYSIS FAILED)
	clearQuestDetails_upvr()
	PinButton_upvr.Visible = true
	BG_upvr.QuestName.Text = arg1.Id
	BG_upvr:SetAttribute("TaskID", arg1.Id)
	if arg1.Catagory == "Getting Started" then
		BG_upvr:SetAttribute("IsTutorialQuest", true)
		BG_upvr:SetAttribute("IsSocialQuest", false)
		PinButton_upvr.PinStatus.Image = "rbxassetid://71944826924421"
		-- KONSTANTWARNING: GOTO [98] #72
	end
	-- KONSTANTERROR: [0] 1. Error Block 52 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [43] 32. Error Block 53 start (CF ANALYSIS FAILED)
	if arg1.Catagory == "Events" then
		BG_upvr:SetAttribute("IsTutorialQuest", false)
		BG_upvr:SetAttribute("IsSocialQuest", true)
		PinButton_upvr.PinStatus.Image = "rbxassetid://71944826924421"
	else
		BG_upvr:SetAttribute("IsTutorialQuest", false)
		BG_upvr:SetAttribute("IsSocialQuest", false)
		if arg1.Id == module_upvr.PinnedQuestID then
			PinButton_upvr.PinStatus.Image = "rbxassetid://71944826924421"
		else
			PinButton_upvr.PinStatus.Image = "rbxassetid://96812930379625"
		end
	end
	for i_3, v_3 in ipairs(arg1.TaskDisplay) do
		local clone = Quests_upvr.QuestStepTemplate:Clone()
		clone.Name = "QuestStep"
		clone.Parent = StepsContainer_upvr
		for _, v_4 in pairs(module_upvr.Tasks) do
			if v_4.Id == arg1.Id then
				clone.StepName.Text = v_3.Title
				if v_3.ProgressText and v_3.ProgressText ~= "" then
					clone.StepProgress.Text = CoreUtil_upvr:ProgressTextDecode(v_3.ProgressText, v_4, i_3)
				elseif i_3 < CoreUtil_upvr:GetCurrentTaskFromStructured(v_4) then
					clone.StepProgress.Text = "✅"
				else
					clone.StepProgress.Text = "🔲"
				end
			end
		end
	end
	for _, v_5 in pairs(arg1.TaskRewards) do
		if v_5 ~= nil then
			for i_6, v_6 in pairs(v_5) do
				v_4 = Quests_upvr.QuestRewardTemplate:Clone()
				v_4.Text = `• <font color="rgb(255, 255, 255)"> {v_6} </font> <font color="rgb(255, 255, 0)"> {i_6} </font>`
				v_4.Name = "QuestReward"
				v_4.Parent = RewardsContainer_upvr
			end
		end
	end
	-- KONSTANTERROR: [43] 32. Error Block 53 end (CF ANALYSIS FAILED)
end
local function createQuestSelectionFrame_upvr(arg1, arg2) -- Line 176, Named "createQuestSelectionFrame"
	--[[ Upvalues[5]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: Quests_upvr (readonly)
		[3]: displayQuestDetails_upvr (readonly)
		[4]: QuestsList_upvr (readonly)
		[5]: module_upvr (readonly)
	]]
	local var56_upvr = any_RequireDefinitions_result1_upvr.Task[arg1.Id]
	local var57
	if not var56_upvr then
	else
		if var56_upvr.Hidden or var56_upvr.Catagory == "Badges" then return end
		local clone_2 = Quests_upvr.QuestSelectionTemplate:Clone()
		var57 = arg1.Id
		clone_2.QuestName.Text = var57
		if var56_upvr.Catagory == "Getting Started" then
			var57 = "Tutorial"
		elseif var56_upvr.Catagory == "Events" then
			var57 = "Social"
		else
			var57 = "General"
		end
		clone_2.QuestCategory.Text = var57
		clone_2.LayoutOrder = 1
		clone_2:SetAttribute("TaskID", arg1.Id)
		if arg2 then
			var57 = true
			clone_2.Completed.Visible = var57
			var57 = false
			clone_2.DetailsButton.Visible = var57
			clone_2.LayoutOrder = 2
		end
		var57 = clone_2.DetailsButton
		var57.Activated:Connect(function() -- Line 207
			--[[ Upvalues[2]:
				[1]: displayQuestDetails_upvr (copied, readonly)
				[2]: var56_upvr (readonly)
			]]
			displayQuestDetails_upvr(var56_upvr)
		end)
		clone_2.Parent = QuestsList_upvr
		var57 = module_upvr
		var57 = arg1.Id
		var57.QuestListFrames[var57] = clone_2
	end
end
local function displayPinnedQuest_upvr() -- Line 216, Named "displayPinnedQuest"
	--[[ Upvalues[4]:
		[1]: TaskService_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: QuestFrame_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	local _, any_await_result2_3 = TaskService_upvr:GetPinnedTaskID():andThen():await()
	if any_await_result2_3 then
		module_upvr.PinnedQuestID = any_await_result2_3
		module_upvr.QuestPinned = true
		for _, v_7 in pairs(module_upvr.Tasks) do
			local var73
			if var73 == any_await_result2_3 then
				var73 = QuestFrame_upvr.QuestName
				var73.Text = v_7.Id
				var73 = QuestFrame_upvr
				var73.Visible = true
				var73 = v_7.Def.Structured
				if var73 then
					var73 = CoreUtil_upvr:GetCurrentTaskFromStructured(v_7)
					QuestFrame_upvr.QuestStep.Text = `• {v_7.Def.TaskDisplay[var73].Title} {CoreUtil_upvr:ProgressTextDecode(v_7.Def.TaskDisplay[var73].ProgressText, v_7, var73)}`
				else
					var73 = ""
					for i_12, v_12 in pairs(v_7.Def.TaskDisplay) do
						var73 = var73..`• {v_12.Title} {CoreUtil_upvr:ProgressTextDecode(v_12.ProgressText, v_7, i_12)} <br/>`
					end
					QuestFrame_upvr.QuestStep.Text = `{var73}`
				end
			end
		end
	else
		module_upvr.QuestPinned = false
		module_upvr.PinnedQuestID = ""
		QuestFrame_upvr.QuestName.Text = ""
		QuestFrame_upvr.QuestStep.Text = ""
		QuestFrame_upvr.Visible = false
	end
end
local function displayPinnedTutorialQuest_upvr(arg1) -- Line 251, Named "displayPinnedTutorialQuest"
	--[[ Upvalues[4]:
		[1]: TaskService_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: TutorialFrame_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	local _, any_await_result2_5 = TaskService_upvr:GetTasks():andThen():await()
	module_upvr.Tasks = any_await_result2_5
	local _, any_await_result2_10 = TaskService_upvr:CompletedTasks():andThen():await()
	module_upvr.CompletedTasks = any_await_result2_10
	for _, v_8 in pairs(module_upvr.Tasks) do
		local var92
		if var92 == arg1 then
			var92 = module_upvr
			var92.PinnedTutorialQuestID = arg1
			var92 = TutorialFrame_upvr.QuestName
			var92.Text = v_8.Id
			var92 = TutorialFrame_upvr
			var92.Visible = true
			var92 = v_8.Def.Structured
			if var92 then
				var92 = CoreUtil_upvr:GetCurrentTaskFromStructured(v_8)
				TutorialFrame_upvr.QuestStep.Text = `• {v_8.Def.TaskDisplay[var92].Title} {CoreUtil_upvr:ProgressTextDecode(v_8.Def.TaskDisplay[var92].ProgressText, v_8, var92)}`
			else
				var92 = ""
				for i_13, v_13 in pairs(v_8.Def.TaskDisplay) do
					var92 = var92..`• {v_13.Title} {CoreUtil_upvr:ProgressTextDecode(v_13.ProgressText, v_8, i_13)}`
				end
				TutorialFrame_upvr.QuestStep.Text = `{var92}`
			end
		end
	end
end
local function checkForActiveTutorialQuests_upvr() -- Line 280, Named "checkForActiveTutorialQuests"
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: any_RequireDefinitions_result1_upvr (readonly)
		[3]: displayPinnedTutorialQuest_upvr (readonly)
		[4]: TutorialFrame_upvr (readonly)
	]]
	for i_9, _ in pairs(module_upvr.QuestListFrames) do
		local var103 = any_RequireDefinitions_result1_upvr.Task[i_9]
		if var103 and var103.Catagory == "Getting Started" then
			for _, v_10 in pairs(module_upvr.Tasks) do
				if v_10.Id == i_9 then
					displayPinnedTutorialQuest_upvr(i_9)
					TutorialFrame_upvr.Visible = true
					return
				end
			end
		end
	end
end
local function _(arg1) -- Line 296, Named "checkForNextTutorialQuests"
	--[[ Upvalues[4]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: TutorialFrame_upvr (readonly)
		[4]: displayPinnedTutorialQuest_upvr (readonly)
	]]
	local var109 = any_RequireDefinitions_result1_upvr.Task[arg1.Id]
	if var109 and var109.Catagory == "Getting Started" then
		module_upvr.PinnedTutorialQuestID = ""
		TutorialFrame_upvr.QuestName.Text = ""
		TutorialFrame_upvr.QuestStep.Text = ""
		TutorialFrame_upvr.Visible = false
		local NextTasks_3 = var109.NextTasks
		if NextTasks_3 and 0 < #NextTasks_3 then
			displayPinnedTutorialQuest_upvr(NextTasks_3[1])
		end
	end
end
local function displayPinnedSocialQuest_upvr(arg1) -- Line 308, Named "displayPinnedSocialQuest"
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: SocialFrame_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	for _, v_11 in pairs(module_upvr.Tasks) do
		local var122
		if var122 == arg1 then
			var122 = module_upvr
			var122.PinnedSocialQuestID = arg1
			var122 = SocialFrame_upvr.QuestName
			var122.Text = v_11.Id
			var122 = SocialFrame_upvr
			var122.Visible = true
			var122 = v_11.Def.Structured
			if var122 then
				var122 = CoreUtil_upvr:GetCurrentTaskFromStructured(v_11)
				SocialFrame_upvr.QuestStep.Text = `• {v_11.Def.TaskDisplay[var122].Title} {CoreUtil_upvr:ProgressTextDecode(v_11.Def.TaskDisplay[var122].ProgressText, v_11, var122)}`
			else
				var122 = ""
				for i_14, v_14 in pairs(v_11.Def.TaskDisplay) do
					var122 = var122..`• {v_14.Title} {CoreUtil_upvr:ProgressTextDecode(v_14.ProgressText, v_11, i_14)}`
				end
				SocialFrame_upvr.QuestStep.Text = `{var122}`
			end
		end
	end
end
local function _(arg1) -- Line 335, Named "setQuestCompleted"
	--[[ Upvalues[6]:
		[1]: module_upvr (readonly)
		[2]: QuestFrame_upvr (readonly)
		[3]: clearQuestDetails_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: TutorialFrame_upvr (readonly)
		[6]: displayPinnedTutorialQuest_upvr (readonly)
	]]
	module_upvr.QuestPinned = false
	module_upvr.PinnedQuestID = ""
	QuestFrame_upvr.QuestName.Text = ""
	QuestFrame_upvr.QuestStep.Text = ""
	QuestFrame_upvr.Visible = false
	clearQuestDetails_upvr()
	local var129 = module_upvr.QuestListFrames[arg1.Id]
	if var129 then
		var129.Completed.Visible = true
		var129.DetailsButton.Visible = false
		var129.LayoutOrder = 2
	end
	local var130 = any_RequireDefinitions_result1_upvr.Task[arg1.Id]
	if var130 and var130.Catagory == "Getting Started" then
		module_upvr.PinnedTutorialQuestID = ""
		TutorialFrame_upvr.QuestName.Text = ""
		TutorialFrame_upvr.QuestStep.Text = ""
		TutorialFrame_upvr.Visible = false
		local NextTasks_4 = var130.NextTasks
		if NextTasks_4 and 0 < #NextTasks_4 then
			displayPinnedTutorialQuest_upvr(NextTasks_4[1])
		end
	end
end
local function setupConnections_upvr() -- Line 351, Named "setupConnections"
	--[[ Upvalues[13]:
		[1]: PinButton_upvr (readonly)
		[2]: BG_upvr (readonly)
		[3]: module_upvr (readonly)
		[4]: QuestFrame_upvr (readonly)
		[5]: TaskService_upvr (readonly)
		[6]: displayPinnedQuest_upvr (readonly)
		[7]: QuestsDisplay_upvr (readonly)
		[8]: displayPinnedTutorialQuest_upvr (readonly)
		[9]: displayPinnedSocialQuest_upvr (readonly)
		[10]: any_RequireDefinitions_result1_upvr (readonly)
		[11]: displayQuestDetails_upvr (readonly)
		[12]: clearQuestDetails_upvr (readonly)
		[13]: TutorialFrame_upvr (readonly)
	]]
	local var133_upvw = false
	PinButton_upvr.Activated:Connect(function() -- Line 353
		--[[ Upvalues[8]:
			[1]: var133_upvw (read and write)
			[2]: BG_upvr (copied, readonly)
			[3]: module_upvr (copied, readonly)
			[4]: QuestFrame_upvr (copied, readonly)
			[5]: TaskService_upvr (copied, readonly)
			[6]: PinButton_upvr (copied, readonly)
			[7]: displayPinnedQuest_upvr (copied, readonly)
			[8]: QuestsDisplay_upvr (copied, readonly)
		]]
		if not var133_upvw then
			var133_upvw = true
			if BG_upvr:GetAttribute("IsTutorialQuest") or BG_upvr:GetAttribute("IsSocialQuest") then return end
			if module_upvr.QuestPinned then
				module_upvr.QuestPinned = false
				module_upvr.PinnedQuestID = ""
				QuestFrame_upvr.QuestName.Text = ""
				QuestFrame_upvr.QuestStep.Text = ""
				QuestFrame_upvr.Visible = false
				TaskService_upvr:PinTask("")
				if PinButton_upvr.PinStatus.Image == "rbxassetid://96812930379625" then
					module_upvr.QuestPinned = true
					TaskService_upvr:PinTask(BG_upvr:GetAttribute("TaskID"))
					displayPinnedQuest_upvr()
					-- KONSTANTWARNING: GOTO [90] #71
				end
			else
				module_upvr.QuestPinned = true
				TaskService_upvr:PinTask(BG_upvr:GetAttribute("TaskID"))
				displayPinnedQuest_upvr()
			end
			local var134 = PinButton_upvr
			if module_upvr.QuestPinned then
				var134 = "rbxassetid://71944826924421"
			else
				var134 = "rbxassetid://96812930379625"
			end
			var134.PinStatus.Image = var134
			QuestsDisplay_upvr.Quests.Visible = module_upvr.QuestPinned
			task.wait(0.3)
			var133_upvw = false
		end
	end)
	TaskService_upvr.NewTask:Connect(function(arg1) -- Line 389
		--[[ Upvalues[1]:
			[1]: module_upvr (copied, readonly)
		]]
		if not module_upvr.InitialQuestsFramesCreated then
		else
			for i_15, _ in pairs(module_upvr.QuestListFrames) do
				if i_15 == arg1.Id then return end
			end
			module_upvr:UpdateQuestSelectionList(arg1)
		end
	end)
	TaskService_upvr.UpdateTask:Connect(function(arg1) -- Line 399
		--[[ Upvalues[8]:
			[1]: TaskService_upvr (copied, readonly)
			[2]: module_upvr (copied, readonly)
			[3]: displayPinnedQuest_upvr (copied, readonly)
			[4]: displayPinnedTutorialQuest_upvr (copied, readonly)
			[5]: displayPinnedSocialQuest_upvr (copied, readonly)
			[6]: BG_upvr (copied, readonly)
			[7]: any_RequireDefinitions_result1_upvr (copied, readonly)
			[8]: displayQuestDetails_upvr (copied, readonly)
		]]
		if arg1.Def.Catagory == "Badges" or arg1.Def.Hidden then
		else
			local _, any_await_result2_8 = TaskService_upvr:GetTasks():andThen():await()
			module_upvr.Tasks = any_await_result2_8
			local _, any_await_result2_7 = TaskService_upvr:CompletedTasks():andThen():await()
			module_upvr.CompletedTasks = any_await_result2_7
			displayPinnedQuest_upvr()
			if arg1.Def.Catagory == "Getting Started" then
				displayPinnedTutorialQuest_upvr(arg1.Id)
			elseif arg1.Def.Catagory == "Events" then
				displayPinnedSocialQuest_upvr(arg1.Id)
			end
			for i_16, _ in pairs(module_upvr.QuestListFrames) do
				if i_16 == arg1.Id then
					module_upvr:UpdateQuestSelectionList()
				end
				local TaskID = BG_upvr:GetAttribute("TaskID")
				if TaskID == i_16 then
					local var163 = any_RequireDefinitions_result1_upvr.Task[TaskID]
					if var163 then
						displayQuestDetails_upvr(var163)
					end
				end
			end
		end
	end)
	TaskService_upvr.TaskCompleted:Connect(function(arg1) -- Line 432
		--[[ Upvalues[6]:
			[1]: module_upvr (copied, readonly)
			[2]: QuestFrame_upvr (copied, readonly)
			[3]: clearQuestDetails_upvr (copied, readonly)
			[4]: any_RequireDefinitions_result1_upvr (copied, readonly)
			[5]: TutorialFrame_upvr (copied, readonly)
			[6]: displayPinnedTutorialQuest_upvr (copied, readonly)
		]]
		module_upvr.QuestPinned = false
		module_upvr.PinnedQuestID = ""
		QuestFrame_upvr.QuestName.Text = ""
		QuestFrame_upvr.QuestStep.Text = ""
		QuestFrame_upvr.Visible = false
		clearQuestDetails_upvr()
		local var165 = module_upvr.QuestListFrames[arg1.Id]
		if var165 then
			var165.Completed.Visible = true
			var165.DetailsButton.Visible = false
			var165.LayoutOrder = 2
		end
		local var166 = any_RequireDefinitions_result1_upvr.Task[arg1.Id]
		if var166 and var166.Catagory == "Getting Started" then
			module_upvr.PinnedTutorialQuestID = ""
			TutorialFrame_upvr.QuestName.Text = ""
			TutorialFrame_upvr.QuestStep.Text = ""
			TutorialFrame_upvr.Visible = false
			local NextTasks_2 = var166.NextTasks
			if NextTasks_2 then
				if 0 < #NextTasks_2 then
					displayPinnedTutorialQuest_upvr(NextTasks_2[1])
				end
			end
		end
	end)
end
function module_upvr.UpdateQuestSelectionList(arg1, arg2) -- Line 438
	--[[ Upvalues[3]:
		[1]: createQuestSelectionFrame_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: QuestsList_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [1] 2. Error Block 20 start (CF ANALYSIS FAILED)
	createQuestSelectionFrame_upvr(arg2, false)
	QuestsList_upvr.CanvasSize = UDim2.fromOffset(QuestsList_upvr.CanvasSize.X.Offset, QuestsList_upvr.UIListLayout.AbsoluteContentSize.Y + 100)
	-- KONSTANTERROR: [1] 2. Error Block 20 end (CF ANALYSIS FAILED)
end
function module_upvr.ToggleQuestJournal(arg1, arg2) -- Line 460
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: QuestJournal_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		QuestJournal_upvr.Visible = arg2
	end
end
function module_upvr.Init(arg1) -- Line 466
	--[[ Upvalues[5]:
		[1]: TaskService_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: setupConnections_upvr (readonly)
		[4]: displayPinnedQuest_upvr (readonly)
		[5]: checkForActiveTutorialQuests_upvr (readonly)
	]]
	local _, any_await_result2_6 = TaskService_upvr:GetTasks():andThen():await()
	module_upvr.Tasks = any_await_result2_6
	local _, any_await_result2_2 = TaskService_upvr:CompletedTasks():andThen():await()
	module_upvr.CompletedTasks = any_await_result2_2
	module_upvr:UpdateQuestSelectionList()
	module_upvr.InitialQuestsFramesCreated = true
	setupConnections_upvr()
	displayPinnedQuest_upvr()
	checkForActiveTutorialQuests_upvr()
end
QuestJournal_upvr:WaitForChild("Header"):WaitForChild("Close").MouseButton1Up:Connect(function() -- Line 476
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	if any_GetController_result1_upvr.Processing then
	else
		any_GetController_result1_upvr:ToggleUI("Quests", false)
	end
end)
MainGui:WaitForChild("HUD"):WaitForChild("RightPanel"):WaitForChild("QuestJournalButton"):WaitForChild("Button").MouseButton1Up:Connect(function() -- Line 481
	--[[ Upvalues[2]:
		[1]: any_GetController_result1_upvr (readonly)
		[2]: QuestJournal_upvr (readonly)
	]]
	any_GetController_result1_upvr:ToggleUI("Quests", not QuestJournal_upvr.Visible)
end)
module_upvr:Init()
return module_upvr

Script name: SoundController
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local tbl_upvr = {}
local any_CreateController_result1_upvr = Knit_upvr.CreateController({
	Name = "SoundController";
})
any_CreateController_result1_upvr.ChangeTrackEvent = Instance.new("BindableEvent")
any_CreateController_result1_upvr.CurrentTrack = workspace.Sound.IslandMusicDay
any_CreateController_result1_upvr.SoundVolumes = {
	SFX = 0;
	Music = 0;
}
any_CreateController_result1_upvr.SoundInstances = {
	SFX = {};
	Music = {};
}
function InitialiseSound(arg1) -- Line 28
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	local _1_3 = arg1:GetTags()[1]
	local module = {
		Type = _1_3;
		DefultVolume = arg1.Volume;
	}
	arg1.Volume *= any_CreateController_result1_upvr.SoundVolumes[_1_3]
	any_CreateController_result1_upvr.SoundInstances[_1_3][arg1] = module
	return module
end
function DestroySound(arg1) -- Line 43
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.SoundInstances[arg1:GetTags()[1]][arg1] = nil
end
function any_CreateController_result1_upvr.AdjustVolume(arg1, arg2, arg3) -- Line 49
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.SoundVolumes[arg2] = arg3
	for i, v in pairs(any_CreateController_result1_upvr.SoundInstances[arg2]) do
		i.Volume = v.DefultVolume * arg3
	end
end
function any_CreateController_result1_upvr.PlaySound(arg1, arg2) -- Line 57
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	local _1 = arg2:GetTags()[1]
	if not _1 then
		warn("No Tag on sound")
	else
		if not any_CreateController_result1_upvr.SoundInstances[_1][arg2] then
		end
		arg2:Play()
	end
end
function any_CreateController_result1_upvr.ChangeTrack(arg1, arg2) -- Line 69
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	any_CreateController_result1_upvr.CurrentTrack = arg2
	any_CreateController_result1_upvr.ChangeTrackEvent:Fire()
end
function any_CreateController_result1_upvr.StopSound(arg1, arg2) -- Line 74
	--[[ Upvalues[1]:
		[1]: any_CreateController_result1_upvr (readonly)
	]]
	local _1_2 = arg2:GetTags()[1]
	if not _1_2 then
		warn("No Tag on sound")
	else
		if not any_CreateController_result1_upvr.SoundInstances[_1_2][arg2] then
			warn("No data on sound")
			return
		end
		arg2:Stop()
	end
end
function InitialiseRadio() -- Line 86
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: any_CreateController_result1_upvr (readonly)
	]]
	repeat
		local var22
		var22()
		var22 = tbl_upvr.PlayerController.Settings
	until var22
	var22 = {}
	local var23 = 1
	if CoreUtil_upvr.PlaceIds.Island == game.PlaceId then
		var22 = {workspace.Sound.IslandMusicDay, workspace.Sound.IslandMusicNight}
	elseif CoreUtil_upvr.PlaceIds.Citadel == game.PlaceId then
		var22 = {workspace.Sound.HubMusic}
	elseif CoreUtil_upvr.PlaceIds.Mines == game.PlaceId then
		var22 = {workspace.Sound.MinesMusic}
	elseif CoreUtil_upvr.PlaceIds.Forest == game.PlaceId then
		var22 = {workspace.Sound.ForestMusic}
	end
	for i_2, v_2 in pairs(var22) do
		v_2:Play()
		v_2:Pause()
	end
	any_CreateController_result1_upvr.CurrentTrack = var22[var23]
	while true do
		any_CreateController_result1_upvr.CurrentTrack:Resume()
		i_2 = nil
		v_2 = any_CreateController_result1_upvr.ChangeTrackEvent.Event
		CoreUtil_upvr:CustomYeild(i_2, v_2, any_CreateController_result1_upvr.CurrentTrack.DidLoop, any_CreateController_result1_upvr.CurrentTrack.Ended)
		any_CreateController_result1_upvr.CurrentTrack:Pause()
		i_2 = var23 + 1
		local var31
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var31 = var23 + 1
			return var31
		end
		if not var22[i_2] or not INLINED() then
			var31 = 1
		end
		var31 = any_CreateController_result1_upvr
		var31.CurrentTrack = var22[var31]
	end
end
local tbl_upvr_2 = {}
local CollectionService_upvr = game:GetService("CollectionService")
local Promise_upvr = require(Knit_upvr.Util.Promise)
function any_CreateController_result1_upvr.KnitStart(arg1) -- Line 122
	--[[ Upvalues[6]:
		[1]: tbl_upvr_2 (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: CollectionService_upvr (readonly)
		[5]: Promise_upvr (readonly)
		[6]: any_CreateController_result1_upvr (readonly)
	]]
	tbl_upvr_2.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr_2.PlayerService = Knit_upvr.GetService("PlayerService")
	tbl_upvr.UIController = Knit_upvr.GetController("UIController")
	tbl_upvr.PlayerController = Knit_upvr.GetController("PlayerController")
	for _, v_3 in pairs(CollectionService_upvr:GetTagged("SFX")) do
		InitialiseSound(v_3)
	end
	for _, v_4 in pairs(CollectionService_upvr:GetTagged("Music")) do
		InitialiseSound(v_4)
	end
	CollectionService_upvr:GetInstanceAddedSignal("SFX"):Connect(InitialiseSound)
	CollectionService_upvr:GetInstanceAddedSignal("Music"):Connect(InitialiseSound)
	Promise_upvr.new(InitialiseRadio)
	tbl_upvr_2.PlayerService.PlayerJoined:Connect(function() -- Line 140
		workspace.Sound.UI.PlayerJoined:Play()
	end)
	any_CreateController_result1_upvr.Initialised = true
end
return any_CreateController_result1_upvr

Script name: FlyingScriptForPass
  - Script: 


local UserInputService = game:GetService("UserInputService")
local any_await_result1, any_await_result2 = require(game.ReplicatedStorage.Packages.Knit).GetService("MarketService"):GetPasses():andThen():await()
if not table.find(any_await_result2, "Creator Mode") and not table.find(any_await_result2, "Flight Mode") and not table.find(any_await_result2, "Island Flight") then
else
	if UserInputService.KeyboardEnabled or UserInputService.GamepadEnabled then
		local LocalPlayer = game.Players.LocalPlayer
		repeat
			task.wait()
		until LocalPlayer.Character
		local Character_upvr = LocalPlayer.Character
		local HumanoidRootPart_upvr_2 = Character_upvr:WaitForChild("HumanoidRootPart")
		local var7_upvw = false
		local tbl_upvr = {
			space = 0;
		}
		local var9_upvw = 0
		local var10_upvw = 0.4
		if UserInputService.GamepadEnabled then
			var10_upvw = 1
		end
		function coolDownCount() -- Line 28
			--[[ Upvalues[1]:
				[1]: var9_upvw (read and write)
			]]
			while 0 < var9_upvw do
				task.wait(0.25)
				var9_upvw -= 1
			end
		end
		local var11_upvw = false
		local var12_upvw = false
		local var13_upvw = false
		local var14_upvw = false
		local var15_upvw = false
		local var16_upvw = false
		local var17_upvw = 0
		local var18_upvw = 0
		local function startFlight() -- Line 44
			--[[ Upvalues[1]:
				[1]: HumanoidRootPart_upvr_2 (readonly)
			]]
			local BodyPosition_3 = Instance.new("BodyPosition")
			BodyPosition_3.Parent = HumanoidRootPart_upvr_2
			BodyPosition_3.Position = HumanoidRootPart_upvr_2.Position
			BodyPosition_3.D = 10
			BodyPosition_3.P = 10000
			BodyPosition_3.MaxForce = Vector3.new(400000, 400000, 400000)
		end
		startFlight = startFlight -- Setting global
		local function stopFlight() -- Line 53
			--[[ Upvalues[1]:
				[1]: HumanoidRootPart_upvr_2 (readonly)
			]]
			HumanoidRootPart_upvr_2:FindFirstChild("BodyPosition"):Destroy()
		end
		stopFlight = stopFlight -- Setting global
		UserInputService.InputBegan:Connect(function(arg1, arg2) -- Line 58
			--[[ Upvalues[10]:
				[1]: var9_upvw (read and write)
				[2]: tbl_upvr (readonly)
				[3]: var10_upvw (read and write)
				[4]: var7_upvw (read and write)
				[5]: var11_upvw (read and write)
				[6]: var13_upvw (read and write)
				[7]: var14_upvw (read and write)
				[8]: var15_upvw (read and write)
				[9]: var16_upvw (read and write)
				[10]: var12_upvw (read and write)
			]]
			if arg2 then
			else
				if arg1.KeyCode ~= Enum.KeyCode.Space then
				else
				end
				if arg1.KeyCode == Enum.KeyCode.Space and var9_upvw == 0 then
					if os.clock() - tbl_upvr.space <= var10_upvw then
						if not var7_upvw then
							var7_upvw = true
							startFlight()
						else
							var7_upvw = false
							stopFlight()
						end
						var9_upvw = 4
						task.spawn(coolDownCount)
					end
					tbl_upvr.space = os.clock()
				end
				if true then
					var11_upvw = true
				end
				if arg1.KeyCode == Enum.KeyCode.W then
					var13_upvw = true
				end
				if arg1.KeyCode == Enum.KeyCode.A then
					var14_upvw = true
				end
				if arg1.KeyCode == Enum.KeyCode.S then
					var15_upvw = true
				end
				if arg1.KeyCode == Enum.KeyCode.D then
					var16_upvw = true
				end
				if arg1.KeyCode == Enum.KeyCode.Z then
					var12_upvw = true
				end
			end
		end)
		UserInputService.InputChanged:Connect(function(arg1) -- Line 95
			--[[ Upvalues[12]:
				[1]: var9_upvw (read and write)
				[2]: tbl_upvr (readonly)
				[3]: var10_upvw (read and write)
				[4]: var7_upvw (read and write)
				[5]: var11_upvw (read and write)
				[6]: var12_upvw (read and write)
				[7]: var18_upvw (read and write)
				[8]: var13_upvw (read and write)
				[9]: var17_upvw (read and write)
				[10]: var14_upvw (read and write)
				[11]: var15_upvw (read and write)
				[12]: var16_upvw (read and write)
			]]
			local var22
			if arg1.KeyCode ~= Enum.KeyCode.ButtonA then
				var22 = false
			else
				var22 = true
			end
			if var22 and var9_upvw == 0 then
				if os.clock() - tbl_upvr.space <= var10_upvw then
					if not var7_upvw then
						var7_upvw = true
						startFlight()
					else
						var7_upvw = false
						stopFlight()
					end
					var9_upvw = 4
					task.spawn(coolDownCount)
				end
				tbl_upvr.space = os.clock()
			end
			if var22 then
				var11_upvw = true
			end
			if arg1.KeyCode == Enum.KeyCode.ButtonL3 then
				var12_upvw = true
			end
			if arg1.KeyCode == Enum.KeyCode.Thumbstick1 then
				if var18_upvw < arg1.Position.Y then
					var13_upvw = true
				end
				if arg1.Position.X < var17_upvw then
					var14_upvw = true
				end
				if arg1.Position.Y < var18_upvw then
					var15_upvw = true
				end
				if var17_upvw < arg1.Position.X then
					var16_upvw = true
				end
			end
		end)
		UserInputService.InputEnded:Connect(function(arg1) -- Line 136
			--[[ Upvalues[8]:
				[1]: var11_upvw (read and write)
				[2]: var13_upvw (read and write)
				[3]: var14_upvw (read and write)
				[4]: var15_upvw (read and write)
				[5]: var16_upvw (read and write)
				[6]: var12_upvw (read and write)
				[7]: var17_upvw (read and write)
				[8]: var18_upvw (read and write)
			]]
			if arg1.KeyCode == Enum.KeyCode.Space then
				var11_upvw = false
			end
			if arg1.KeyCode == Enum.KeyCode.W then
				var13_upvw = false
			end
			if arg1.KeyCode == Enum.KeyCode.A then
				var14_upvw = false
			end
			if arg1.KeyCode == Enum.KeyCode.S then
				var15_upvw = false
			end
			if arg1.KeyCode == Enum.KeyCode.D then
				var16_upvw = false
			end
			if arg1.KeyCode == Enum.KeyCode.Z or arg1.KeyCode == Enum.KeyCode.ButtonL3 then
				var12_upvw = false
			end
			if arg1.KeyCode == Enum.KeyCode.Thumbstick1 then
				var13_upvw = false
				var14_upvw = false
				var15_upvw = false
				var16_upvw = false
			end
			var17_upvw = arg1.Position.X
			var18_upvw = arg1.Position.Y
		end)
		local CurrentCamera_upvr_2 = game.Workspace.CurrentCamera
		game:GetService("RunService").Stepped:Connect(function() -- Line 167
			--[[ Upvalues[10]:
				[1]: var7_upvw (read and write)
				[2]: CurrentCamera_upvr_2 (readonly)
				[3]: HumanoidRootPart_upvr_2 (readonly)
				[4]: var13_upvw (read and write)
				[5]: var15_upvw (read and write)
				[6]: var16_upvw (read and write)
				[7]: var14_upvw (read and write)
				[8]: var11_upvw (read and write)
				[9]: var12_upvw (read and write)
				[10]: Character_upvr (readonly)
			]]
			if var7_upvw then
				local var26 = -(Vector3.new(CurrentCamera_upvr_2.CFrame.X, HumanoidRootPart_upvr_2.Position.Y, CurrentCamera_upvr_2.CFrame.Z) - HumanoidRootPart_upvr_2.Position).Unit
				local any_Cross_result1_2 = var26:Cross(Vector3.new(0, 1, 0))
				HumanoidRootPart_upvr_2.BodyPosition.Position = HumanoidRootPart_upvr_2.Position
				if var13_upvw then
					local BodyPosition_5 = HumanoidRootPart_upvr_2.BodyPosition
					BodyPosition_5.Position += var26 / 2
				end
				if var15_upvw then
					local BodyPosition_12 = HumanoidRootPart_upvr_2.BodyPosition
					BodyPosition_12.Position -= var26 / 2
				end
				if var16_upvw then
					local BodyPosition_13 = HumanoidRootPart_upvr_2.BodyPosition
					BodyPosition_13.Position += any_Cross_result1_2 / 2
				end
				if var14_upvw then
					local BodyPosition_2 = HumanoidRootPart_upvr_2.BodyPosition
					BodyPosition_2.Position -= any_Cross_result1_2 / 2
				end
				if var11_upvw then
					local BodyPosition_14 = HumanoidRootPart_upvr_2.BodyPosition
					BodyPosition_14.Position += Vector3.new(0, 0.5, 0)
				end
				if var12_upvw then
					local BodyPosition_7 = HumanoidRootPart_upvr_2.BodyPosition
					BodyPosition_7.Position -= Vector3.new(0, 0.5, 0)
				end
				if Character_upvr.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
					var7_upvw = false
					stopFlight()
				end
			end
		end)
		return
	end
	if UserInputService.TouchEnabled then
		HumanoidRootPart_upvr_2 = game
		Character_upvr = HumanoidRootPart_upvr_2.Players
		local LocalPlayer_2 = Character_upvr.LocalPlayer
		Character_upvr = script:WaitForChild("FlyButton")
		local var35_upvr = Character_upvr
		HumanoidRootPart_upvr_2 = LocalPlayer_2.PlayerGui:WaitForChild("MainGui")
		local CustomTouchGui = HumanoidRootPart_upvr_2:WaitForChild("CustomTouchGui")
		var35_upvr.Parent = CustomTouchGui
		var35_upvr.Visible = true
		local FlyControls_upvr = script:WaitForChild("FlyControls")
		FlyControls_upvr.Parent = CustomTouchGui
		repeat
			task.wait()
		until LocalPlayer_2.Character
		local HumanoidRootPart_upvr = LocalPlayer_2.Character:WaitForChild("HumanoidRootPart")
		local var39_upvw = false
		local var40_upvw = false
		local var41_upvw = false
		local var42_upvw = false
		local var43_upvw = false
		local var44_upvw = false
		local var45_upvw = false
		function startFlight() -- Line 234
			--[[ Upvalues[4]:
				[1]: HumanoidRootPart_upvr (readonly)
				[2]: var35_upvr (readonly)
				[3]: var39_upvw (read and write)
				[4]: FlyControls_upvr (readonly)
			]]
			local BodyPosition_6 = Instance.new("BodyPosition")
			BodyPosition_6.Parent = HumanoidRootPart_upvr
			BodyPosition_6.Position = HumanoidRootPart_upvr.Position
			BodyPosition_6.D = 10
			BodyPosition_6.P = 10000
			BodyPosition_6.MaxForce = Vector3.new(400000, 400000, 400000)
			var35_upvr.Image = "rbxassetid://15168583363"
			var39_upvw = true
			FlyControls_upvr.Visible = true
		end
		function stopFlight() -- Line 247
			--[[ Upvalues[4]:
				[1]: HumanoidRootPart_upvr (readonly)
				[2]: var35_upvr (readonly)
				[3]: var39_upvw (read and write)
				[4]: FlyControls_upvr (readonly)
			]]
			HumanoidRootPart_upvr:FindFirstChild("BodyPosition"):Destroy()
			var35_upvr.Image = "rbxassetid://15168570614"
			var39_upvw = false
			FlyControls_upvr.Visible = false
		end
		var35_upvr.Activated:Connect(function() -- Line 256
			--[[ Upvalues[1]:
				[1]: var39_upvw (read and write)
			]]
			if not var39_upvw then
				startFlight()
			else
				stopFlight()
			end
		end)
		FlyControls_upvr.ForwardB.InputBegan:Connect(function() -- Line 264
			--[[ Upvalues[1]:
				[1]: var42_upvw (read and write)
			]]
			var42_upvw = true
		end)
		FlyControls_upvr.ForwardB.InputEnded:Connect(function() -- Line 267
			--[[ Upvalues[1]:
				[1]: var42_upvw (read and write)
			]]
			var42_upvw = false
		end)
		FlyControls_upvr.BackB.InputBegan:Connect(function() -- Line 271
			--[[ Upvalues[1]:
				[1]: var44_upvw (read and write)
			]]
			var44_upvw = true
		end)
		FlyControls_upvr.BackB.InputEnded:Connect(function() -- Line 274
			--[[ Upvalues[1]:
				[1]: var44_upvw (read and write)
			]]
			var44_upvw = false
		end)
		FlyControls_upvr.LeftB.InputBegan:Connect(function() -- Line 278
			--[[ Upvalues[1]:
				[1]: var43_upvw (read and write)
			]]
			var43_upvw = true
		end)
		FlyControls_upvr.LeftB.InputEnded:Connect(function() -- Line 281
			--[[ Upvalues[1]:
				[1]: var43_upvw (read and write)
			]]
			var43_upvw = false
		end)
		FlyControls_upvr.RightB.InputBegan:Connect(function() -- Line 285
			--[[ Upvalues[1]:
				[1]: var45_upvw (read and write)
			]]
			var45_upvw = true
		end)
		FlyControls_upvr.RightB.InputEnded:Connect(function() -- Line 288
			--[[ Upvalues[1]:
				[1]: var45_upvw (read and write)
			]]
			var45_upvw = false
		end)
		FlyControls_upvr.UpB.InputBegan:Connect(function() -- Line 292
			--[[ Upvalues[1]:
				[1]: var40_upvw (read and write)
			]]
			var40_upvw = true
		end)
		FlyControls_upvr.UpB.InputEnded:Connect(function() -- Line 295
			--[[ Upvalues[1]:
				[1]: var40_upvw (read and write)
			]]
			var40_upvw = false
		end)
		FlyControls_upvr.DownB.InputBegan:Connect(function() -- Line 299
			--[[ Upvalues[1]:
				[1]: var41_upvw (read and write)
			]]
			var41_upvw = true
		end)
		FlyControls_upvr.DownB.InputEnded:Connect(function() -- Line 302
			--[[ Upvalues[1]:
				[1]: var41_upvw (read and write)
			]]
			var41_upvw = false
		end)
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		local CurrentCamera_upvr = game.Workspace.CurrentCamera
		game:GetService("RunService").Stepped:Connect(function() -- Line 309
			--[[ Upvalues[9]:
				[1]: var39_upvw (read and write)
				[2]: CurrentCamera_upvr (readonly)
				[3]: HumanoidRootPart_upvr (readonly)
				[4]: var42_upvw (read and write)
				[5]: var44_upvw (read and write)
				[6]: var45_upvw (read and write)
				[7]: var43_upvw (read and write)
				[8]: var40_upvw (read and write)
				[9]: var41_upvw (read and write)
			]]
			if var39_upvw then
				local var62 = -(Vector3.new(CurrentCamera_upvr.CFrame.X, HumanoidRootPart_upvr.Position.Y, CurrentCamera_upvr.CFrame.Z) - HumanoidRootPart_upvr.Position).Unit
				local any_Cross_result1 = var62:Cross(Vector3.new(0, 1, 0))
				HumanoidRootPart_upvr.BodyPosition.Position = HumanoidRootPart_upvr.Position
				if var42_upvw then
					local BodyPosition_11 = HumanoidRootPart_upvr.BodyPosition
					BodyPosition_11.Position += var62 / 2
				end
				if var44_upvw then
					local BodyPosition = HumanoidRootPart_upvr.BodyPosition
					BodyPosition.Position -= var62 / 2
				end
				if var45_upvw then
					local BodyPosition_8 = HumanoidRootPart_upvr.BodyPosition
					BodyPosition_8.Position += any_Cross_result1 / 2
				end
				if var43_upvw then
					local BodyPosition_4 = HumanoidRootPart_upvr.BodyPosition
					BodyPosition_4.Position -= any_Cross_result1 / 2
				end
				if var40_upvw then
					local BodyPosition_10 = HumanoidRootPart_upvr.BodyPosition
					BodyPosition_10.Position += Vector3.new(0, 0.5, 0)
				end
				if var41_upvw then
					local BodyPosition_9 = HumanoidRootPart_upvr.BodyPosition
					BodyPosition_9.Position -= Vector3.new(0, 0.5, 0)
				end
			end
		end)
	end
end

Script name: Health
  - Script: 

-- [FilteringEnabled] Server Scripts are IMPOSSIBLE to save

Script name: DisableRagdolling
  - Script: 


task.wait(1)
local Humanoid = script.Parent:WaitForChild("Humanoid")
Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)

Script name: firstPersonHandler
  - Script: 


local UserInputService_upvr = game:GetService("UserInputService")
local LocalPlayer_upvr = game.Players.LocalPlayer
local tbl_upvr = {"Chest", "Crafting", "Inventory", "IslandSettings", "Settings", "Shop", "Stats", "Store", "Underling"}
local CurrentCamera_upvr = workspace.CurrentCamera
function isFirstPerson() -- Line 19
	--[[ Upvalues[3]:
		[1]: LocalPlayer_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
		[3]: CurrentCamera_upvr (readonly)
	]]
	local Character = LocalPlayer_upvr.Character
	if Character == nil or not Character:FindFirstChild("Head") then
		return false
	end
	if UserInputService_upvr.MouseBehavior == Enum.MouseBehavior.LockCenter and (Character.Head.CFrame.p - CurrentCamera_upvr.CFrame.p).magnitude < 3 then
		return true
	end
	return false
end
local MainGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
function isGuiOnScreen() -- Line 29
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: MainGui_upvr (readonly)
	]]
	for _, v in pairs(tbl_upvr) do
		if MainGui_upvr:FindFirstChild(v) and MainGui_upvr[v].Visible then
			return true
		end
	end
	return false
end
game:GetService("RunService").RenderStepped:Connect(function() -- Line 39
	--[[ Upvalues[2]:
		[1]: UserInputService_upvr (readonly)
		[2]: LocalPlayer_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local isFirstPerson_result1 = isFirstPerson()
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 4. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 4. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 3 start (CF ANALYSIS FAILED)
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.Default
	-- KONSTANTERROR: [8] 7. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 10. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [13] 10. Error Block 4 end (CF ANALYSIS FAILED)
end)

Script name: HighPerformanceWater
  - Script: 


-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local var1
if not game:IsLoaded() then
	game.Loaded:Wait()
end
local UserInputService_upvr = game:GetService("UserInputService")
var1 = "Libraries"
var1 = "Zone"
local module_upvr_2 = require(script:WaitForChild(var1):WaitForChild(var1))
local module_upvr = require(script:WaitForChild("Libraries"):WaitForChild("UnderwaterLighting"))
var1 = game:GetService("Players")
var1 = var1.LocalPlayer.Character
if not var1 then
	var1 = var1.LocalPlayer.CharacterAdded:Wait()
end
repeat
	task.wait()
until var1:FindFirstChildOfClass("Humanoid")
local class_Humanoid_upvr = var1:FindFirstChildOfClass("Humanoid")
local HumanoidRootPart_upvr = var1:WaitForChild("HumanoidRootPart")
if not script.PartFolder.Value then
	local any_GetTagged_result1 = game:GetService("CollectionService"):GetTagged(script.CollectionServiceTag.Value)
end
if typeof(any_GetTagged_result1) == "table" and #any_GetTagged_result1 < 1 then
	local var9_upvw
end
if not var9_upvw then
	error("Please set a folder that contains the parts for the player to swim in OR tag your parts using collection service")
end
local any_new_result1_upvw = module_upvr_2.new(var9_upvw)
local function folderChanged() -- Line 49
	--[[ Upvalues[3]:
		[1]: any_new_result1_upvw (read and write)
		[2]: module_upvr_2 (readonly)
		[3]: var9_upvw (read and write)
	]]
	any_new_result1_upvw = module_upvr_2.new(var9_upvw)
end
if script.PartFolder.Value then
	var9_upvw.ChildAdded:Connect(folderChanged)
	var9_upvw.ChildRemoved:Connect(folderChanged)
else
	game:GetService("CollectionService"):GetInstanceAddedSignal(script.CollectionServiceTag.Value):Connect(folderChanged)
	game:GetService("CollectionService"):GetInstanceRemovedSignal(script.CollectionServiceTag.Value):Connect(folderChanged)
end
local function _() -- Line 61, Named "getKeycodesPressed"
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	local module = {}
	for _, v in UserInputService_upvr:GetKeysPressed(), nil do
		table.insert(module, v.KeyCode)
	end
	return module
end
local var17_upvw = false
local var18_upvw
local TouchEnabled_upvr = UserInputService_upvr.TouchEnabled
local module_2_upvr = require(script:WaitForChild("Libraries"):WaitForChild("SwimModule"))
local var21_upvw = false
local var22_upvr = HumanoidRootPart_upvr.AssemblyMass * workspace.Gravity
local any_Connect_result1_upvr = game:GetService("RunService").Heartbeat:Connect(function() -- Line 72
	--[[ Upvalues[11]:
		[1]: var17_upvw (read and write)
		[2]: var18_upvw (read and write)
		[3]: HumanoidRootPart_upvr (readonly)
		[4]: any_new_result1_upvw (read and write)
		[5]: TouchEnabled_upvr (readonly)
		[6]: module_2_upvr (readonly)
		[7]: UserInputService_upvr (readonly)
		[8]: var21_upvw (read and write)
		[9]: var22_upvr (readonly)
		[10]: class_Humanoid_upvr (readonly)
		[11]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var55
	if var17_upvw then
	else
		if var18_upvw then
			var18_upvw:Disconnect()
			var18_upvw = nil
		end
		local any_findPoint_result1 = any_new_result1_upvw:findPoint(HumanoidRootPart_upvr.CFrame:ToWorldSpace(CFrame.new(0, 1, -0.75)))
		local any_findPoint_result1_upvr = any_new_result1_upvw:findPoint(HumanoidRootPart_upvr.CFrame:ToWorldSpace(CFrame.new(0, -2.572, -0.75)))
		var55 = workspace.CurrentCamera
		local function gOut_upvr() -- Line 90, Named "gOut"
			--[[ Upvalues[3]:
				[1]: TouchEnabled_upvr (copied, readonly)
				[2]: module_2_upvr (copied, readonly)
				[3]: var17_upvw (copied, read and write)
			]]
			if not TouchEnabled_upvr then
				module_2_upvr:GetOut()
				module_2_upvr:Stop()
			else
				for _ = 1, 20 do
					module_2_upvr:GetOut()
					module_2_upvr:Stop()
				end
				var17_upvw = true
				task.wait(0.25)
				var17_upvw = false
			end
		end
		var55 = {}
		for i_2, v_2 in UserInputService_upvr:GetKeysPressed(), nil do
			table.insert(var55, v_2.KeyCode)
		end
		if not Enum.KeyCode.Space then
			i_2 = nil
			v_2 = nil
			for i_3, v_3 in UserInputService_upvr:GetKeysPressed(), i_2, v_2 do
				table.insert({}, v_3.KeyCode)
				local var60
			end
		end
		if table.find(var55, table.find(var60, Enum.KeyCode.ButtonA)) and not any_new_result1_upvw:findPoint(HumanoidRootPart_upvr.CFrame:ToWorldSpace(CFrame.new(0, 1.322, -0.75))) and any_findPoint_result1_upvr then
			gOut_upvr()
		end
		if any_findPoint_result1 and any_findPoint_result1_upvr then
			module_2_upvr:Start()
			if var21_upvw then
				module_2_upvr:CreateAntiGrav()
				var21_upvw = false
				-- KONSTANTWARNING: GOTO [166] #129
			end
		elseif not any_findPoint_result1 and not any_findPoint_result1_upvr then
			module_2_upvr:Stop()
		elseif not any_findPoint_result1 and any_findPoint_result1_upvr then
			module_2_upvr:ClearAntiGrav()
			var21_upvw = true
		end
		for _, v_4 in UserInputService_upvr:GetKeysPressed(), nil do
			v_3 = {}
			i_3 = table.insert
			i_3(v_3, v_4.KeyCode)
		end
		local function INLINED() -- Internal function, doesn't exist in bytecode
			for i_5, v_5 in UserInputService_upvr:GetKeysPressed(), nil do
				v_3 = {}
				i_3 = table.insert
				i_3(v_3, v_5.KeyCode)
			end
			return table.find({}, Enum.KeyCode.ButtonA)
		end
		if table.find({}, Enum.KeyCode.Space) or INLINED() then
			local class_VectorForce_2 = HumanoidRootPart_upvr:FindFirstChildOfClass("VectorForce")
			if class_VectorForce_2 then
				i_5 = "Configuration"
				i_5 = "CharDensityUp"
				class_VectorForce_2.Force = Vector3.new(0, var22_upvr * script:WaitForChild(i_5):GetAttribute(i_5), 0)
				-- KONSTANTWARNING: GOTO [291] #221
			end
		else
			local class_VectorForce = HumanoidRootPart_upvr:FindFirstChildOfClass("VectorForce")
			if class_VectorForce then
				if class_Humanoid_upvr.MoveDirection.Magnitude == 0 then
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if any_new_result1_upvw:findPoint(HumanoidRootPart_upvr.CFrame:ToWorldSpace(CFrame.new(0, 1.322, -0.75))) then
						i_5 = "Configuration"
						i_5 = "CharDensity"
						class_VectorForce.Force = Vector3.new(0, var22_upvr * script:WaitForChild(i_5):GetAttribute(i_5), 0)
						-- KONSTANTWARNING: GOTO [291] #221
					end
				else
					class_VectorForce.Force = Vector3.new(0, var22_upvr, 0)
				end
			end
		end
		local any_findPoint_result1_upvr_2 = any_new_result1_upvw:findPoint(HumanoidRootPart_upvr.CFrame:ToWorldSpace(CFrame.new(0, 1.322, -0.75)))
		var18_upvw = game:GetService("UserInputService").TouchTapInWorld:Connect(function() -- Line 143
			--[[ Upvalues[4]:
				[1]: module_2_upvr (copied, readonly)
				[2]: any_findPoint_result1_upvr_2 (readonly)
				[3]: any_findPoint_result1_upvr (readonly)
				[4]: gOut_upvr (readonly)
			]]
			if not module_2_upvr.Enabled or any_findPoint_result1_upvr_2 or not any_findPoint_result1_upvr then
			else
				gOut_upvr()
			end
		end)
		if any_new_result1_upvw:findPoint(var55.CFrame.Position) then
			module_upvr:Add()
			return
		end
		module_upvr:Remove()
	end
end)
local function _() -- Line 157, Named "died"
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: any_Connect_result1_upvr (readonly)
	]]
	module_upvr:Remove()
	any_Connect_result1_upvr:Disconnect()
end

Script name: UnderwaterLighting
  - Script: 


local module = {}
local Lighting_upvr = game:GetService("Lighting")
local Atmosphere_upvr = script:WaitForChild("Atmosphere")
local Sky_upvr = script:WaitForChild("Sky")
local tbl_upvr = {}
function module.Add(arg1) -- Line 14
	--[[ Upvalues[4]:
		[1]: Lighting_upvr (readonly)
		[2]: tbl_upvr (readonly)
		[3]: Atmosphere_upvr (readonly)
		[4]: Sky_upvr (readonly)
	]]
	if enabled then
	else
		enabled = true -- Setting global
		for _, v in Lighting_upvr:GetChildren() do
			v.Parent = script
			table.insert(tbl_upvr, v)
		end
		Atmosphere_upvr.Parent = Lighting_upvr
		Sky_upvr.Parent = Lighting_upvr
	end
end
function module.Remove(arg1) -- Line 27
	--[[ Upvalues[3]:
		[1]: Lighting_upvr (readonly)
		[2]: Atmosphere_upvr (readonly)
		[3]: Sky_upvr (readonly)
	]]
	if not enabled then
	else
		enabled = false -- Setting global
		for _, v_2 in script:GetChildren() do
			v_2.Parent = Lighting_upvr
		end
		Atmosphere_upvr.Parent = script
		Sky_upvr.Parent = script
	end
end
return module

Script name: Zone
  - Script: 


local longstring1 = "Zone parts must belong to the 'Default' (0) CollisionGroup! Consider using zone:relocate() if you wish to move zones outside of workspace to prevent them interacting with other parts."
-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local RunService_upvr = game:GetService("RunService")
local var2
if RunService_upvr:IsClient() then
	local LocalPlayer_upvr = game:GetService("Players").LocalPlayer
end
local enums_upvr = require(script.Enum).enums
local Janitor_upvr = require(script.Janitor)
local ZonePlusReference = require(script.ZonePlusReference)
local any_getObject_result1 = ZonePlusReference.getObject()
local ZoneController = script.ZoneController
local Tracker_upvr = ZoneController.Tracker
var2 = ZoneController
local var2_2_upvr = require(var2)
if game:GetService("RunService"):IsClient() then
	var2 = "Client"
else
	var2 = "Server"
end
if any_getObject_result1 then
	local SOME = any_getObject_result1:FindFirstChild(var2)
end
if SOME then
	return require(any_getObject_result1.Value)
end
local module_6_upvr = {}
module_6_upvr.__index = module_6_upvr
if not SOME then
	ZonePlusReference.addToReplicatedStorage()
end
module_6_upvr.enum = enums_upvr
local HttpService_upvr = game:GetService("HttpService")
local Signal_upvr = require(script.Signal)
function module_6_upvr.new(arg1) -- Line 34
	--[[ Upvalues[7]:
		[1]: module_6_upvr (readonly)
		[2]: enums_upvr (readonly)
		[3]: Janitor_upvr (readonly)
		[4]: HttpService_upvr (readonly)
		[5]: var2_2_upvr (readonly)
		[6]: Signal_upvr (readonly)
		[7]: LocalPlayer_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local module_2_upvr = {}
	setmetatable(module_2_upvr, module_6_upvr)
	local typeof_result1_2 = typeof(arg1)
	if typeof_result1_2 ~= "table" and typeof_result1_2 ~= "Instance" then
		error("The zone container must be a model, folder, basepart or table!")
	end
	module_2_upvr.accuracy = enums_upvr.Accuracy.High
	module_2_upvr.autoUpdate = true
	module_2_upvr.respectUpdateQueue = true
	local any_new_result1 = Janitor_upvr.new()
	module_2_upvr.janitor = any_new_result1
	module_2_upvr._updateConnections = any_new_result1:add(Janitor_upvr.new(), "destroy")
	module_2_upvr.container = arg1
	module_2_upvr.zoneParts = {}
	module_2_upvr.overlapParams = {}
	module_2_upvr.region = nil
	module_2_upvr.volume = nil
	module_2_upvr.boundMin = nil
	module_2_upvr.boundMax = nil
	module_2_upvr.recommendedMaxParts = nil
	module_2_upvr.zoneId = HttpService_upvr:GenerateGUID()
	module_2_upvr.activeTriggers = {}
	module_2_upvr.occupants = {}
	module_2_upvr.trackingTouchedTriggers = {}
	module_2_upvr.enterDetection = enums_upvr.Detection.Centre
	module_2_upvr.exitDetection = enums_upvr.Detection.Centre
	module_2_upvr._currentEnterDetection = nil
	module_2_upvr._currentExitDetection = nil
	module_2_upvr.totalPartVolume = 0
	module_2_upvr.allZonePartsAreBlocks = true
	module_2_upvr.trackedItems = {}
	module_2_upvr.settingsGroupName = nil
	module_2_upvr.worldModel = workspace
	module_2_upvr.onItemDetails = {}
	module_2_upvr.itemsToUntrack = {}
	var2_2_upvr.updateDetection(module_2_upvr)
	module_2_upvr.updated = any_new_result1:add(Signal_upvr.new(), "destroy")
	local tbl_4 = {"player", "part", "localPlayer", "item"}
	for _, v_upvr in pairs(tbl_4) do
		local var47_upvw = 0
		local var48_upvw = 0
		for _, v_2 in pairs({"entered", "exited"}) do
			local any_add_result1 = any_new_result1:add(Signal_upvr.new(true), "destroy")
			local var53_upvr = v_2:sub(1, 1):upper()..v_2:sub(2)
			module_2_upvr[v_upvr..var53_upvr] = any_add_result1
			any_add_result1.connectionsChanged:Connect(function(arg1_2) -- Line 106
				--[[ Upvalues[7]:
					[1]: v_upvr (readonly)
					[2]: LocalPlayer_upvr (copied, readonly)
					[3]: var53_upvr (readonly)
					[4]: var48_upvw (read and write)
					[5]: var47_upvw (read and write)
					[6]: var2_2_upvr (copied, readonly)
					[7]: module_2_upvr (readonly)
				]]
				if v_upvr == "localPlayer" and not LocalPlayer_upvr and arg1_2 == 1 then
					error("Can only connect to 'localPlayer%s' on the client!":format(var53_upvr))
				end
				var48_upvw = var47_upvw
				var47_upvw += arg1_2
				if var48_upvw == 0 and 0 < var47_upvw then
					var2_2_upvr._registerConnection(module_2_upvr, v_upvr, var53_upvr)
				elseif 0 < var48_upvw and var47_upvw == 0 then
					var2_2_upvr._deregisterConnection(module_2_upvr, v_upvr)
				end
			end)
			local var55
		end
	end
	module_6_upvr.touchedConnectionActions = {}
	for _, v_3 in pairs(tbl_4) do
		local var59_upvr = module_2_upvr["_%sTouchedZone":format(v_3)]
		if var59_upvr then
			module_2_upvr.trackingTouchedTriggers[v_3] = {}
			module_6_upvr.touchedConnectionActions[v_3] = function(arg1_3) -- Line 130
				--[[ Upvalues[2]:
					[1]: var59_upvr (readonly)
					[2]: module_2_upvr (readonly)
				]]
				var59_upvr(module_2_upvr, arg1_3)
			end
		end
	end
	module_2_upvr:_update()
	var2_2_upvr._registerZone(module_2_upvr)
	var55:add(function() -- Line 141
		--[[ Upvalues[2]:
			[1]: var2_2_upvr (copied, readonly)
			[2]: module_2_upvr (readonly)
		]]
		var2_2_upvr._deregisterZone(module_2_upvr)
	end, true)
	return module_2_upvr
end
function module_6_upvr.fromRegion(arg1, arg2) -- Line 148
	--[[ Upvalues[1]:
		[1]: module_6_upvr (readonly)
	]]
	local Model_upvr = Instance.new("Model")
	local function createCube_upvr(arg1_4, arg2_2) -- Line 151, Named "createCube"
		--[[ Upvalues[2]:
			[1]: createCube_upvr (readonly)
			[2]: Model_upvr (readonly)
		]]
		if 2024 < arg2_2.X or 2024 < arg2_2.Y or 2024 < arg2_2.Z then
			local var63 = arg2_2 * 0.25
			local var64 = arg2_2 * 0.5
			createCube_upvr(arg1_4 * CFrame.new(-var63.X, -var63.Y, -var63.Z), var64)
			createCube_upvr(arg1_4 * CFrame.new(-var63.X, -var63.Y, var63.Z), var64)
			createCube_upvr(arg1_4 * CFrame.new(-var63.X, var63.Y, -var63.Z), var64)
			createCube_upvr(arg1_4 * CFrame.new(-var63.X, var63.Y, var63.Z), var64)
			createCube_upvr(arg1_4 * CFrame.new(var63.X, -var63.Y, -var63.Z), var64)
			createCube_upvr(arg1_4 * CFrame.new(var63.X, -var63.Y, var63.Z), var64)
			createCube_upvr(arg1_4 * CFrame.new(var63.X, var63.Y, -var63.Z), var64)
			createCube_upvr(arg1_4 * CFrame.new(var63.X, var63.Y, var63.Z), var64)
		else
			local Part_2 = Instance.new("Part")
			Part_2.CFrame = arg1_4
			Part_2.Size = arg2_2
			Part_2.Anchored = true
			Part_2.Parent = Model_upvr
		end
	end
	createCube_upvr(arg1, arg2)
	local any_new_result1_2 = module_6_upvr.new(Model_upvr)
	any_new_result1_2:relocate()
	return any_new_result1_2
end
function module_6_upvr._calculateRegion(arg1, arg2, arg3) -- Line 180
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local tbl_2 = {
		Min = {};
		Max = {};
	}
	for i_4_upvr, v_4 in pairs(tbl_2) do
		v_4.Values = {}
		function v_4.parseCheck(arg1_5, arg2_3) -- Line 184
			--[[ Upvalues[1]:
				[1]: i_4_upvr (readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local var111 = i_4_upvr
			if var111 == "Min" then
				if arg1_5 > arg2_3 then
					var111 = false
				else
					var111 = true
				end
				return var111
			end
			var111 = i_4_upvr
			if var111 == "Max" then
				if arg2_3 > arg1_5 then
				else
				end
				return true
			end
		end
		function v_4.parse(arg1_6, arg2_4) -- Line 191
			for i_5, v_5 in pairs(arg2_4) do
				if arg1_6.parseCheck(v_5, arg1_6.Values[i_5] or v_5) then
					arg1_6.Values[i_5] = v_5
				end
			end
		end
	end
	for _, v_6 in pairs(arg2) do
		local var120 = v_6.Size * 0.5
		for _, v_7 in pairs({v_6.CFrame * CFrame.new(-var120.X, -var120.Y, -var120.Z), v_6.CFrame * CFrame.new(-var120.X, -var120.Y, var120.Z), v_6.CFrame * CFrame.new(-var120.X, var120.Y, -var120.Z), v_6.CFrame * CFrame.new(-var120.X, var120.Y, var120.Z), v_6.CFrame * CFrame.new(var120.X, -var120.Y, -var120.Z), v_6.CFrame * CFrame.new(var120.X, -var120.Y, var120.Z), v_6.CFrame * CFrame.new(var120.X, var120.Y, -var120.Z), v_6.CFrame * CFrame.new(var120.X, var120.Y, var120.Z)}) do
			local any_GetComponents_result1, any_GetComponents_result2, any_GetComponents_result3 = v_7:GetComponents()
			local tbl_6 = {any_GetComponents_result1, any_GetComponents_result2, any_GetComponents_result3}
			tbl_2.Min:parse(tbl_6)
			tbl_2.Max:parse(tbl_6)
		end
	end
	local function _(arg1_7) -- Line 223, Named "roundToFour"
		return math.floor((arg1_7 + 2) / 4) * 4
	end
	for i_8, v_8 in pairs(tbl_2) do
		local var135
		for _, v_9 in pairs(v_8.Values) do
			if i_8 ~= "Min" or not {} then
			end
			if not arg3 then
				if i_8 == "Min" then
					var135 = -2
				else
					var135 = 2
				end
			end
			table.insert({}, math.floor((v_9 + var135 + 2) / 4) * 4)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local vector3_2 = Vector3.new(unpack({}))
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local vector3 = Vector3.new(unpack({}))
	return Region3.new(vector3_2, vector3), vector3_2, vector3
end
function module_6_upvr._displayBounds(arg1) -- Line 246
	if not arg1.displayBoundParts then
		arg1.displayBoundParts = true
		for i_10, v_10 in pairs({
			BoundMin = arg1.boundMin;
			BoundMax = arg1.boundMax;
		}) do
			local Part = Instance.new("Part")
			Part.Anchored = true
			Part.CanCollide = false
			Part.Transparency = 0.5
			Part.Size = Vector3.new(1, 1, 1)
			Part.Color = Color3.fromRGB(255, 0, 0)
			Part.CFrame = CFrame.new(v_10)
			Part.Name = i_10
			Part.Parent = workspace
			arg1.janitor:add(Part, "Destroy")
		end
	end
end
function module_6_upvr._update(arg1) -- Line 265
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local container_2 = arg1.container
	local tbl = {}
	local var203_upvw = 0
	arg1._updateConnections:clean()
	local typeof_result1 = typeof(container_2)
	local tbl_7 = {}
	local var206
	if typeof_result1 == "table" then
		var206 = pairs(container_2)
		local pairs_result1_11, pairs_result2_20, pairs_result3 = pairs(container_2)
		for _, v_11 in pairs_result1_11, pairs_result2_20, pairs_result3 do
			if v_11:IsA("BasePart") then
				table.insert(tbl, v_11)
			end
		end
	elseif typeof_result1 == "Instance" then
		pairs_result1_11 = container_2:IsA("BasePart")
		if pairs_result1_11 then
			pairs_result1_11 = table.insert
			pairs_result1_11(tbl, container_2)
		else
			pairs_result1_11 = table.insert
			pairs_result1_11(tbl_7, container_2)
			pairs_result1_11 = pairs(container_2:GetDescendants())
			local pairs_result1_13, pairs_result2, pairs_result3_16 = pairs(container_2:GetDescendants())
			for _, v_24 in pairs_result1_13, pairs_result2, pairs_result3_16 do
				if v_24:IsA("BasePart") then
					table.insert(tbl, v_24)
				else
					table.insert(tbl_7, v_24)
				end
			end
		end
	end
	arg1.zoneParts = tbl
	pairs_result1_13 = {}
	arg1.overlapParams = pairs_result1_13
	pairs_result1_13 = true
	for _, v_12_upvr in pairs(tbl) do
		local _, pcall_result2_3 = pcall(function() -- Line 299
			--[[ Upvalues[1]:
				[1]: v_12_upvr (readonly)
			]]
			return v_12_upvr.Shape.Name
		end)
		if pcall_result2_3 ~= "Block" then
			pairs_result1_13 = false
		end
	end
	arg1.allZonePartsAreBlocks = pairs_result1_13
	local OverlapParams_new_result1_2 = OverlapParams.new()
	OverlapParams_new_result1_2.FilterType = Enum.RaycastFilterType.Whitelist
	OverlapParams_new_result1_2.MaxParts = #tbl
	OverlapParams_new_result1_2.FilterDescendantsInstances = tbl
	arg1.overlapParams.zonePartsWhitelist = OverlapParams_new_result1_2
	local OverlapParams_new_result1 = OverlapParams.new()
	OverlapParams_new_result1.FilterType = Enum.RaycastFilterType.Blacklist
	OverlapParams_new_result1.FilterDescendantsInstances = tbl
	arg1.overlapParams.zonePartsIgnorelist = OverlapParams_new_result1
	local function _(arg1_8) -- Line 341, Named "verifyDefaultCollision"
		if arg1_8.CollisionGroupId ~= 0 then
			error(longstring1)
		end
	end
	for _, v_13_upvr in pairs(tbl) do
		for _, v_14 in pairs({"Size", "Position"}) do
			arg1._updateConnections:add(v_13_upvr:GetPropertyChangedSignal(v_14):Connect(function() -- Line 319, Named "update"
				--[[ Upvalues[3]:
					[1]: arg1 (readonly)
					[2]: var203_upvw (read and write)
					[3]: RunService_upvr (copied, readonly)
				]]
				if arg1.autoUpdate then
					local os_clock_result1_2_upvw = os.clock()
					if arg1.respectUpdateQueue then
						var203_upvw += 1
						os_clock_result1_2_upvw += 0.1
					end
					local var223_upvw
					var223_upvw = RunService_upvr.Heartbeat:Connect(function() -- Line 327
						--[[ Upvalues[4]:
							[1]: os_clock_result1_2_upvw (read and write)
							[2]: var223_upvw (read and write)
							[3]: arg1 (copied, readonly)
							[4]: var203_upvw (copied, read and write)
						]]
						if os_clock_result1_2_upvw <= os.clock() then
							var223_upvw:Disconnect()
							if arg1.respectUpdateQueue then
								var203_upvw -= 1
							end
							if var203_upvw == 0 and arg1.zoneId then
								arg1:_update()
							end
						end
					end)
				end
			end), "Disconnect")
			local _
		end
		if v_13_upvr.CollisionGroupId ~= 0 then
			error(longstring1)
		end
		arg1._updateConnections:add(v_13_upvr:GetPropertyChangedSignal("CollisionGroupId"):Connect(function() -- Line 351
			--[[ Upvalues[1]:
				[1]: v_13_upvr (readonly)
			]]
			if v_13_upvr.CollisionGroupId ~= 0 then
				error(longstring1)
			end
		end), "Disconnect")
	end
	for _, _ in pairs(tbl_7) do
		for _, v_16 in pairs({"ChildAdded", "ChildRemoved"}) do
			arg1._updateConnections:add(arg1.container[v_16]:Connect(function(arg1_9) -- Line 358
				--[[ Upvalues[3]:
					[1]: arg1 (readonly)
					[2]: var203_upvw (read and write)
					[3]: RunService_upvr (copied, readonly)
				]]
				if arg1_9:IsA("BasePart") and arg1.autoUpdate then
					local os_clock_result1_upvw = os.clock()
					if arg1.respectUpdateQueue then
						var203_upvw += 1
						os_clock_result1_upvw += 0.1
					end
					local var243_upvw
					var243_upvw = RunService_upvr.Heartbeat:Connect(function() -- Line 327
						--[[ Upvalues[4]:
							[1]: os_clock_result1_upvw (read and write)
							[2]: var243_upvw (read and write)
							[3]: arg1 (copied, readonly)
							[4]: var203_upvw (copied, read and write)
						]]
						if os_clock_result1_upvw <= os.clock() then
							var243_upvw:Disconnect()
							if arg1.respectUpdateQueue then
								var203_upvw -= 1
							end
							if var203_upvw == 0 and arg1.zoneId then
								arg1:_update()
							end
						end
					end)
				end
			end), "Disconnect")
		end
	end
	local any__calculateRegion_result1, any__calculateRegion_result2, any__calculateRegion_result3 = arg1:_calculateRegion(tbl)
	local any__calculateRegion_result1_2, _, _ = arg1:_calculateRegion(tbl, true)
	arg1.region = any__calculateRegion_result1
	arg1.exactRegion = any__calculateRegion_result1_2
	arg1.boundMin = any__calculateRegion_result2
	arg1.boundMax = any__calculateRegion_result3
	local Size = any__calculateRegion_result1.Size
	arg1.volume = Size.X * Size.Y * Size.Z
	arg1:_updateTouchedConnections()
	arg1.updated:Fire()
end
function module_6_upvr._updateOccupants(arg1, arg2, arg3) -- Line 394
	local var259 = arg1.occupants[arg2]
	if not var259 then
		var259 = {}
		arg1.occupants[arg2] = var259
	end
	local module_5 = {}
	for i_17, v_17 in pairs(var259) do
		local var264 = arg3[i_17]
		if var264 == nil or var264 ~= v_17 then
			var259[i_17] = nil
			if not module_5.exited then
				module_5.exited = {}
			end
			table.insert(module_5.exited, i_17)
		end
	end
	for i_18, _ in pairs(arg3) do
		local var268
		if var259[i_18] == nil then
			local function INLINED() -- Internal function, doesn't exist in bytecode
				var268 = i_18.Character
				return var268
			end
			if not i_18:IsA("Player") or not INLINED() then
				var268 = true
			end
			var259[i_18] = var268
			var268 = module_5.entered
			if not var268 then
				var268 = {}
				module_5.entered = var268
			end
			var268 = table.insert
			var268(module_5.entered, i_18)
		end
	end
	return module_5
end
function module_6_upvr._formTouchedConnection(arg1, arg2) -- Line 424
	--[[ Upvalues[1]:
		[1]: Janitor_upvr (readonly)
	]]
	local var269 = "_touchedJanitor"..arg2
	if arg1[var269] then
		arg1[var269]:clean()
	else
		arg1[var269] = arg1.janitor:add(Janitor_upvr.new(), "destroy")
	end
	arg1:_updateTouchedConnection(arg2)
end
function module_6_upvr._updateTouchedConnection(arg1, arg2) -- Line 436
	local var274 = arg1["_touchedJanitor"..arg2]
	if not var274 then
	else
		for _, v_25 in pairs(arg1.zoneParts) do
			var274:add(v_25.Touched:Connect(arg1.touchedConnectionActions[arg2], arg1), "Disconnect")
		end
	end
end
function module_6_upvr._updateTouchedConnections(arg1) -- Line 445
	for i_19, _ in pairs(arg1.touchedConnectionActions) do
		local var283 = arg1["_touchedJanitor"..i_19]
		if var283 then
			var283:cleanup()
			arg1:_updateTouchedConnection(i_19)
		end
	end
end
function module_6_upvr._disconnectTouchedConnection(arg1, arg2) -- Line 456
	local var284 = "_touchedJanitor"..arg2
	local var285 = arg1[var284]
	if var285 then
		var285:cleanup()
		arg1[var284] = nil
	end
end
local function _(arg1, arg2) -- Line 465, Named "round"
	return math.round(arg1 * 10 ^ arg2) * 10 ^ (-arg2)
end
local Heartbeat_upvr = RunService_upvr.Heartbeat
function module_6_upvr._partTouchedZone(arg1, arg2) -- Line 468
	--[[ Upvalues[3]:
		[1]: Janitor_upvr (readonly)
		[2]: Heartbeat_upvr (readonly)
		[3]: enums_upvr (readonly)
	]]
	local part_upvr = arg1.trackingTouchedTriggers.part
	if part_upvr[arg2] then
	else
		local any_add_result1_upvr = arg1.janitor:add(Janitor_upvr.new(), "destroy")
		part_upvr[arg2] = any_add_result1_upvr
		if not ({
			Seat = true;
			VehicleSeat = true;
		})[arg2.ClassName] and ({
			HumanoidRootPart = true;
		})[arg2.Name] then
			arg2.CanTouch = false
		end
		local var291_upvr = math.round(arg2.Size.X * arg2.Size.Y * arg2.Size.Z * 100000) * 0.00001
		arg1.totalPartVolume += var291_upvr
		local const_number_upvw = 0
		local var294_upvw = false
		local Position_upvw = arg2.Position
		local os_clock_result1_upvw_2 = os.clock()
		any_add_result1_upvr:add(Heartbeat_upvr:Connect(function() -- Line 486
			--[[ Upvalues[8]:
				[1]: const_number_upvw (read and write)
				[2]: enums_upvr (copied, readonly)
				[3]: arg1 (readonly)
				[4]: arg2 (readonly)
				[5]: var294_upvw (read and write)
				[6]: Position_upvw (read and write)
				[7]: os_clock_result1_upvw_2 (read and write)
				[8]: any_add_result1_upvr (readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
			local os_clock_result1 = os.clock()
			local var298 = const_number_upvw
			-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [44] 35. Error Block 7 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [44] 35. Error Block 7 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [54] 42. Error Block 8 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [54] 42. Error Block 8 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [63] 49. Error Block 13 start (CF ANALYSIS FAILED)
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [63.2]
			if not nil then
				var294_upvw = false
				Position_upvw = arg2.Position
				os_clock_result1_upvw_2 = os.clock()
				arg1.partExited:Fire(arg2)
			end
			-- KONSTANTERROR: [63] 49. Error Block 13 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [81] 63. Error Block 12 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [81] 63. Error Block 12 end (CF ANALYSIS FAILED)
		end), "Disconnect")
		any_add_result1_upvr:add(function() -- Line 517
			--[[ Upvalues[4]:
				[1]: part_upvr (readonly)
				[2]: arg2 (readonly)
				[3]: arg1 (readonly)
				[4]: var291_upvr (readonly)
			]]
			part_upvr[arg2] = nil
			arg2.CanTouch = true
			arg1.totalPartVolume = math.round((arg1.totalPartVolume - var291_upvr) * 100000) * 0.00001
		end, true)
	end
end
local tbl_upvr = {
	Ball = function(arg1) -- Line 525
		return "GetPartBoundsInRadius", {arg1.Position, arg1.Size.X}
	end;
	Block = function(arg1) -- Line 528
		return "GetPartBoundsInBox", {arg1.CFrame, arg1.Size}
	end;
	Other = function(arg1) -- Line 531
		local module_4 = {}
		module_4[1] = arg1
		return "GetPartsInPart", module_4
	end;
}
function module_6_upvr._getRegionConstructor(arg1, arg2, arg3) -- Line 535
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local pcall_result1, pcall_result2 = pcall(function() -- Line 536
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		return arg2.Shape.Name
	end)
	local var320
	if pcall_result1 then
		if arg1.allZonePartsAreBlocks then
			local var321 = tbl_upvr[pcall_result2]
			if var321 then
				local var321_result1, var321_result2 = var321(arg2)
				var320 = var321_result2
			end
		end
	end
	if not var321_result1 then
		local any_Other_result1, any_Other_result2 = tbl_upvr.Other(arg2)
		var320 = any_Other_result2
	end
	if arg3 then
		table.insert(var320, arg3)
	end
	return any_Other_result1, var320
end
function module_6_upvr.findLocalPlayer(arg1) -- Line 556
	--[[ Upvalues[1]:
		[1]: LocalPlayer_upvr (readonly)
	]]
	if not LocalPlayer_upvr then
		error("Can only call 'findLocalPlayer' on the client!")
	end
	return arg1:findPlayer(LocalPlayer_upvr)
end
function module_6_upvr._find(arg1, arg2, arg3) -- Line 563
	--[[ Upvalues[1]:
		[1]: var2_2_upvr (readonly)
	]]
	var2_2_upvr.updateDetection(arg1)
	for _, v_20 in pairs(var2_2_upvr.getTouchingZones(arg3, false, arg1._currentEnterDetection, var2_2_upvr.trackers[arg2])) do
		if v_20 == arg1 then
			return true
		end
	end
	return false
end
function module_6_upvr.findPlayer(arg1, arg2) -- Line 575
	local var332 = arg2.Character
	if var332 then
		var332 = arg2.Character:FindFirstChildOfClass("Humanoid")
	end
	if not var332 then
		return false
	end
	return arg1:_find("player", arg2.Character)
end
function module_6_upvr.findItem(arg1, arg2) -- Line 584
	return arg1:_find("item", arg2)
end
function module_6_upvr.findPart(arg1, arg2) -- Line 588
	local any__getRegionConstructor_result1_2, any__getRegionConstructor_result2_2 = arg1:_getRegionConstructor(arg2, arg1.overlapParams.zonePartsWhitelist)
	local any_any_result1_2 = arg1.worldModel[any__getRegionConstructor_result1_2](arg1.worldModel, unpack(any__getRegionConstructor_result2_2))
	if 0 < #any_any_result1_2 then
		return true, any_any_result1_2
	end
	return false
end
function module_6_upvr.getCheckerPart(arg1) -- Line 598
	--[[ Upvalues[1]:
		[1]: var2_2_upvr (readonly)
	]]
	local var336
	if not arg1.checkerPart then
		var336 = arg1.janitor:add(Instance.new("Part"), "Destroy")
		local var337 = var336
		var336 = Vector3.new(0.10000, 0.10000, 0.10000)
		var337.Size = var336
		var336 = "ZonePlusCheckerPart"
		var337.Name = var336
		var336 = true
		var337.Anchored = var336
		var336 = 1
		var337.Transparency = var336
		var336 = false
		var337.CanCollide = var336
		arg1.checkerPart = var337
	end
	var336 = arg1.worldModel
	if var336 == workspace then
		var336 = var2_2_upvr.getWorkspaceContainer()
	end
	if var337.Parent ~= var336 then
		var337.Parent = var336
	end
	return var337
end
function module_6_upvr.findPoint(arg1, arg2) -- Line 619
	local var338 = arg2
	if typeof(arg2) == "Vector3" then
		var338 = CFrame.new(arg2)
	end
	local any_getCheckerPart_result1 = arg1:getCheckerPart()
	any_getCheckerPart_result1.CFrame = var338
	local any__getRegionConstructor_result1, any__getRegionConstructor_result2 = arg1:_getRegionConstructor(any_getCheckerPart_result1, arg1.overlapParams.zonePartsWhitelist)
	local any_any_result1 = arg1.worldModel[any__getRegionConstructor_result1](arg1.worldModel, unpack(any__getRegionConstructor_result2))
	if 0 < #any_any_result1 then
		return true, any_any_result1
	end
	return false
end
function module_6_upvr._getAll(arg1, arg2) -- Line 636
	--[[ Upvalues[1]:
		[1]: var2_2_upvr (readonly)
	]]
	var2_2_upvr.updateDetection(arg1)
	local module_3 = {}
	local var349 = var2_2_upvr._getZonesAndItems(arg2, {
		self = true;
	}, arg1.volume, false, arg1._currentEnterDetection)[arg1]
	if var349 then
		for i_21, _ in pairs(var349) do
			table.insert(module_3, i_21)
		end
	end
	return module_3
end
function module_6_upvr.getPlayers(arg1) -- Line 649
	return arg1:_getAll("player")
end
function module_6_upvr.getItems(arg1) -- Line 653
	return arg1:_getAll("item")
end
function module_6_upvr.getParts(arg1) -- Line 657
	local module = {}
	if arg1.activeTriggers.part then
		for i_22, _ in pairs(arg1.trackingTouchedTriggers.part) do
			table.insert(module, i_22)
		end
		return module
	end
	for _, v_23 in pairs(arg1.worldModel:GetPartBoundsInBox(arg1.region.CFrame, arg1.region.Size, arg1.overlapParams.zonePartsIgnorelist)) do
		if arg1:findPart(v_23) then
			table.insert(module, v_23)
		end
	end
	return module
end
function module_6_upvr.getRandomPoint(arg1) -- Line 678
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local Size_2 = arg1.exactRegion.Size
	local random_state = Random.new()
	local var371
	repeat
		var371 = arg1.exactRegion.CFrame * CFrame.new(random_state:NextNumber(-Size_2.X / 2, Size_2.X / 2), random_state:NextNumber(-Size_2.Y / 2, Size_2.Y / 2), random_state:NextNumber(-Size_2.Z / 2, Size_2.Z / 2))
		local any_findPoint_result1, any_findPoint_result2 = arg1:findPoint(var371)
		local var374
		if any_findPoint_result1 then
			var374 = true
		end
	until var374
	return var371.Position, any_findPoint_result2
end
function module_6_upvr.setAccuracy(arg1, arg2) -- Line 697
	--[[ Upvalues[1]:
		[1]: enums_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 11 start (CF ANALYSIS FAILED)
	local tonumber_result1_2 = tonumber(arg2)
	if not tonumber_result1_2 then
		tonumber_result1_2 = enums_upvr.Accuracy[arg2]
		if not tonumber_result1_2 then
			error("'%s' is an invalid enumName!":format(arg2))
			-- KONSTANTWARNING: GOTO [36] #29
		end
	elseif not enums_upvr.Accuracy.getName(tonumber_result1_2) then
		error("%s is an invalid enumId!":format(tonumber_result1_2))
	end
	-- KONSTANTERROR: [0] 1. Error Block 11 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 29. Error Block 7 start (CF ANALYSIS FAILED)
	arg1.accuracy = tonumber_result1_2
	-- KONSTANTERROR: [36] 29. Error Block 7 end (CF ANALYSIS FAILED)
end
function module_6_upvr.setDetection(arg1, arg2) -- Line 713
	--[[ Upvalues[1]:
		[1]: enums_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 11 start (CF ANALYSIS FAILED)
	local tonumber_result1 = tonumber(arg2)
	if not tonumber_result1 then
		tonumber_result1 = enums_upvr.Detection[arg2]
		if not tonumber_result1 then
			error("'%s' is an invalid enumName!":format(arg2))
			-- KONSTANTWARNING: GOTO [36] #29
		end
	elseif not enums_upvr.Detection.getName(tonumber_result1) then
		error("%s is an invalid enumId!":format(tonumber_result1))
	end
	-- KONSTANTERROR: [0] 1. Error Block 11 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [36] 29. Error Block 7 start (CF ANALYSIS FAILED)
	arg1.enterDetection = tonumber_result1
	arg1.exitDetection = tonumber_result1
	-- KONSTANTERROR: [36] 29. Error Block 7 end (CF ANALYSIS FAILED)
end
function module_6_upvr.trackItem(arg1, arg2) -- Line 730
	--[[ Upvalues[2]:
		[1]: Janitor_upvr (readonly)
		[2]: Tracker_upvr (readonly)
	]]
	local children = arg2:IsA("BasePart")
	local var378 = false
	if not children then
		local class_Humanoid = arg2:FindFirstChildOfClass("Humanoid")
		if class_Humanoid then
			class_Humanoid = arg2:FindFirstChild("HumanoidRootPart")
		end
		var378 = class_Humanoid
	end
	assert(children or var378, "Only BaseParts or Characters/NPCs can be tracked!")
	if arg1.trackedItems[arg2] then
	else
		if arg1.itemsToUntrack[arg2] then
			arg1.itemsToUntrack[arg2] = nil
		end
		local any_add_result1_2 = arg1.janitor:add(Janitor_upvr.new(), "destroy")
		local tbl_3 = {
			janitor = any_add_result1_2;
		}
		tbl_3.item = arg2
		tbl_3.isBasePart = children
		tbl_3.isCharacter = var378
		arg1.trackedItems[arg2] = tbl_3
		any_add_result1_2:add(arg2.AncestryChanged:Connect(function() -- Line 755
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: arg1 (readonly)
			]]
			if not arg2:IsDescendantOf(game) then
				arg1:untrackItem(arg2)
			end
		end), "Disconnect")
		require(Tracker_upvr).itemAdded:Fire(tbl_3)
	end
end
function module_6_upvr.untrackItem(arg1, arg2) -- Line 765
	--[[ Upvalues[1]:
		[1]: Tracker_upvr (readonly)
	]]
	local var383 = arg1.trackedItems[arg2]
	if var383 then
		var383.janitor:destroy()
	end
	arg1.trackedItems[arg2] = nil
	require(Tracker_upvr).itemRemoved:Fire(var383)
end
function module_6_upvr.bindToGroup(arg1, arg2) -- Line 776
	--[[ Upvalues[1]:
		[1]: var2_2_upvr (readonly)
	]]
	arg1:unbindFromGroup()
	local any_getGroup_result1 = var2_2_upvr.getGroup(arg2)
	if not any_getGroup_result1 then
		any_getGroup_result1 = var2_2_upvr.setGroup(arg2)
	end
	any_getGroup_result1._memberZones[arg1.zoneId] = arg1
	arg1.settingsGroupName = arg2
end
function module_6_upvr.unbindFromGroup(arg1) -- Line 783
	--[[ Upvalues[1]:
		[1]: var2_2_upvr (readonly)
	]]
	if arg1.settingsGroupName then
		local any_getGroup_result1_2 = var2_2_upvr.getGroup(arg1.settingsGroupName)
		if any_getGroup_result1_2 then
			any_getGroup_result1_2._memberZones[arg1.zoneId] = nil
		end
		arg1.settingsGroupName = nil
	end
end
local CollectiveWorldModel_upvr = ZoneController.CollectiveWorldModel
function module_6_upvr.relocate(arg1) -- Line 793
	--[[ Upvalues[1]:
		[1]: CollectiveWorldModel_upvr (readonly)
	]]
	if arg1.hasRelocated then
	else
		local any_setupWorldModel_result1 = require(CollectiveWorldModel_upvr).setupWorldModel(arg1)
		arg1.worldModel = any_setupWorldModel_result1
		arg1.hasRelocated = true
		local container = arg1.container
		if typeof(container) == "table" then
			container = Instance.new("Folder")
			for _, v_26 in pairs(arg1.zoneParts) do
				v_26.Parent = container
			end
		end
		arg1.relocationContainer = arg1.janitor:add(container, "Destroy", "RelocationContainer")
		container.Parent = any_setupWorldModel_result1
	end
end
function module_6_upvr._onItemCallback(arg1, arg2, arg3, arg4, arg5) -- Line 814
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [4] 4. Error Block 2 start (CF ANALYSIS FAILED)
	local tbl_5 = {}
	arg1.onItemDetails[arg4] = tbl_5
	-- KONSTANTERROR: [4] 4. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 7. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 7. Error Block 3 end (CF ANALYSIS FAILED)
end
function module_6_upvr.onItemEnter(arg1, ...) -- Line 861
	arg1:_onItemCallback("itemEntered", true, ...)
end
function module_6_upvr.onItemExit(arg1, ...) -- Line 865
	arg1:_onItemCallback("itemExited", false, ...)
end
function module_6_upvr.destroy(arg1) -- Line 869
	arg1:unbindFromGroup()
	arg1.janitor:destroy()
end
module_6_upvr.Destroy = module_6_upvr.destroy
return module_6_upvr

Script name: Enum
  - Script: 


local module = {}
local module_upvr = {}
module.enums = module_upvr
function module.createEnum(arg1, arg2) -- Line 20
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var13_upvr
	if typeof(arg1) ~= "string" then
		var13_upvr = false
	else
		var13_upvr = true
	end
	assert(var13_upvr, "bad argument #1 - enums must be created using a string name!")
	if typeof(arg2) ~= "table" then
		var13_upvr = false
	else
		var13_upvr = true
	end
	assert(var13_upvr, "bad argument #2 - enums must be created using a table!")
	var13_upvr = not module_upvr[arg1]
	assert(var13_upvr, "enum '%s' already exists!":format(arg1))
	local module_2 = {}
	var13_upvr = {}
	local tbl_upvr_2 = {}
	local tbl_upvr = {}
	local module_3_upvr = {
		getName = function(arg1_2) -- Line 30, Named "getName"
			--[[ Upvalues[3]:
				[1]: tbl_upvr_2 (readonly)
				[2]: tbl_upvr (readonly)
				[3]: arg2 (readonly)
			]]
			local tostring_result1_3 = tostring(arg1_2)
			local var19 = tbl_upvr_2[tostring_result1_3]
			if not var19 then
				var19 = tbl_upvr[tostring_result1_3]
			end
			if var19 then
				return arg2[var19][1]
			end
		end;
		getValue = function(arg1_3) -- Line 40, Named "getValue"
			--[[ Upvalues[3]:
				[1]: var13_upvr (readonly)
				[2]: tbl_upvr (readonly)
				[3]: arg2 (readonly)
			]]
			local tostring_result1_4 = tostring(arg1_3)
			local var21 = var13_upvr[tostring_result1_4]
			if not var21 then
				var21 = tbl_upvr[tostring_result1_4]
			end
			if var21 then
				return arg2[var21][2]
			end
		end;
		getProperty = function(arg1_4) -- Line 50, Named "getProperty"
			--[[ Upvalues[3]:
				[1]: var13_upvr (readonly)
				[2]: tbl_upvr_2 (readonly)
				[3]: arg2 (readonly)
			]]
			local tostring_result1_2 = tostring(arg1_4)
			local var23 = var13_upvr[tostring_result1_2]
			if not var23 then
				var23 = tbl_upvr_2[tostring_result1_2]
			end
			if var23 then
				return arg2[var23][3]
			end
		end;
	}
	for i, v in pairs(arg2) do
		local var27
		if typeof(v) ~= "table" then
			var27 = false
		else
			var27 = true
		end
		assert(var27, "bad argument #2.%s - details must only be comprised of tables!":format(i))
		local _1 = v[1]
		if typeof(_1) ~= "string" then
		else
		end
		var27 = assert
		var27(true, "bad argument #2.%s.1 - detail name must be a string!":format(i))
		var27 = assert
		var27(typeof(not var13_upvr[_1]), "bad argument #2.%s.1 - the detail name '%s' already exists!":format(i, _1))
		var27 = assert
		var27(typeof(not module_3_upvr[_1]), "bad argument #2.%s.1 - that name is reserved.":format(i, _1))
		var27 = tostring(_1)
		var13_upvr[var27] = i
		var27 = v[2]
		local tostring_result1 = tostring(var27)
		assert(typeof(not tbl_upvr_2[tostring_result1]), "bad argument #2.%s.2 - the detail value '%s' already exists!":format(i, tostring_result1))
		tbl_upvr_2[tostring_result1] = i
		local _3 = v[3]
		if _3 then
			assert(typeof(not tbl_upvr[_3]), "bad argument #2.%s.3 - the detail property '%s' already exists!":format(i, tostring(_3)))
			tbl_upvr[tostring(_3)] = i
		end
		module_2[_1] = var27
		setmetatable(module_2, {
			__index = function(arg1_5, arg2_2) -- Line 80, Named "__index"
				--[[ Upvalues[1]:
					[1]: module_3_upvr (readonly)
				]]
				return module_3_upvr[arg2_2]
			end;
		})
	end
	module_upvr[arg1] = module_2
	return module_2
end
function module.getEnums() -- Line 90
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	return module_upvr
end
for _, v_2 in pairs(script:GetChildren()) do
	if v_2:IsA("ModuleScript") then
		module.createEnum(v_2.Name, require(v_2))
	end
end
return module

Script name: Accuracy
  - Script: 


return {{"Low", 1, 1}, {"Medium", 2, 0.5}, {"High", 3, 0.1}, {"Precise", 4, 0}}

Script name: Detection
  - Script: 


return {{"WholeBody", 1}, {"Centre", 2}}

Script name: Janitor
  - Script: 


local newproxy_result1_3_upvr = newproxy(true)
getmetatable(newproxy_result1_3_upvr).__tostring = function() -- Line 11
	return "IndicesReference"
end
local newproxy_result1_5_upvr = newproxy(true)
getmetatable(newproxy_result1_5_upvr).__tostring = function() -- Line 16
	return "LinkToInstanceIndex"
end
local module_upvr = {
	ClassName = "Janitor";
	__index = {
		CurrentlyCleaning = true;
		[newproxy_result1_3_upvr] = nil;
	};
}
local tbl_upvr = {
	["function"] = true;
	RBXScriptConnection = "Disconnect";
}
function module_upvr.new() -- Line 40
	--[[ Upvalues[2]:
		[1]: newproxy_result1_3_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	return setmetatable({
		CurrentlyCleaning = false;
		[newproxy_result1_3_upvr] = nil;
	}, module_upvr)
end
function module_upvr.Is(arg1) -- Line 52
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var13 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= module_upvr then
			var13 = false
		else
			var13 = true
		end
	end
	return var13
end
module_upvr.is = module_upvr.Is
module_upvr.__index.Add = function(arg1, arg2, arg3, arg4) -- Line 65, Named "Add"
	--[[ Upvalues[2]:
		[1]: newproxy_result1_3_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
	if arg4 == nil then
		local newproxy_result1 = newproxy(false)
	end
	if newproxy_result1 then
		arg1:Remove(newproxy_result1)
		local var19 = arg1[newproxy_result1_3_upvr]
		if not var19 then
			var19 = {}
			arg1[newproxy_result1_3_upvr] = var19
		end
		var19[newproxy_result1] = arg2
	end
	var19 = arg3
	local var20 = var19
	if not var20 then
		var20 = tbl_upvr[typeof(arg2)]
		if not var20 then
			var20 = "Destroy"
		end
	end
	local var21 = var20
	if type(arg2) ~= "function" then
		if not arg2[var21] then
			warn(string.format("Object %s doesn't have method %s, are you sure you want to add it? Traceback: %s", tostring(arg2), tostring(var21), debug.traceback(nil, 2)))
		end
	end
	arg1[arg2] = var21
	return arg2, newproxy_result1
end
module_upvr.__index.Give = module_upvr.__index.Add
module_upvr.__index.AddObject = function(arg1, arg2) -- Line 131, Named "AddObject"
	local newproxy_result1_2 = newproxy(false)
	return arg1:Add(arg2, false, newproxy_result1_2), newproxy_result1_2
end
module_upvr.__index.GiveObject = module_upvr.__index.AddObject
module_upvr.__index.Remove = function(arg1, arg2) -- Line 155, Named "Remove"
	--[[ Upvalues[1]:
		[1]: newproxy_result1_3_upvr (readonly)
	]]
	local var27 = arg1[newproxy_result1_3_upvr]
	if var27 then
		local var28 = var27[arg2]
		if var28 then
			local var29 = arg1[var28]
			if var29 then
				if var29 == true then
					var28()
				else
					local var30 = var28[var29]
					if var30 then
						var30(var28)
					end
				end
				arg1[var28] = nil
			end
			var27[arg2] = nil
		end
	end
	return arg1
end
module_upvr.__index.Get = function(arg1, arg2) -- Line 189, Named "Get"
	--[[ Upvalues[1]:
		[1]: newproxy_result1_3_upvr (readonly)
	]]
	local var31 = arg1[newproxy_result1_3_upvr]
	if var31 then
		return var31[arg2]
	end
end
module_upvr.__index.Cleanup = function(arg1) -- Line 200, Named "Cleanup"
	--[[ Upvalues[1]:
		[1]: newproxy_result1_3_upvr (readonly)
	]]
	if not arg1.CurrentlyCleaning then
		arg1.CurrentlyCleaning = nil
		for i, v in next, arg1 do
			if i ~= newproxy_result1_3_upvr then
				local type_result1 = type(i)
				if type_result1 == "string" or type_result1 == "number" then
					arg1[i] = nil
				else
					if v == true then
						i()
					else
						local var39 = i[v]
						if var39 then
							var39(i)
						end
					end
					arg1[i] = nil
				end
			end
		end
		local var40 = arg1[newproxy_result1_3_upvr]
		if var40 then
			i = nil
			for i_2 in next, var40, i do
				var40[i_2] = nil
				local _
			end
			arg1[newproxy_result1_3_upvr] = {}
		end
		arg1.CurrentlyCleaning = false
	end
end
module_upvr.__index.Clean = module_upvr.__index.Cleanup
module_upvr.__index.Destroy = function(arg1) -- Line 246, Named "Destroy"
	arg1:Cleanup()
end
module_upvr.__call = module_upvr.__index.Cleanup
local tbl_upvr_2 = {
	Connected = true;
}
tbl_upvr_2.__index = tbl_upvr_2
function tbl_upvr_2.Disconnect(arg1) -- Line 260
	if arg1.Connected then
		arg1.Connected = false
		arg1.Connection:Disconnect()
	end
end
function tbl_upvr_2.__tostring(arg1) -- Line 267
	return "Disconnect<"..tostring(arg1.Connected)..'>'
end
local Heartbeat_upvr = game:GetService("RunService").Heartbeat
module_upvr.__index.LinkToInstance = function(arg1, arg2, arg3) -- Line 277, Named "LinkToInstance"
	--[[ Upvalues[3]:
		[1]: newproxy_result1_5_upvr (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: Heartbeat_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var44_upvw
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var44_upvw = false
		return newproxy(var44_upvw)
	end
	if not arg3 or not INLINED() then
	end
	if arg2.Parent ~= nil then
		var44_upvw = false
	else
		var44_upvw = true
	end
	local setmetatable_result1_upvr = setmetatable({}, tbl_upvr_2)
	local var46_upvw
	var46_upvw = arg2.AncestryChanged:Connect(function(arg1_2, arg2_2) -- Line 283, Named "ChangedFunction"
		--[[ Upvalues[5]:
			[1]: setmetatable_result1_upvr (readonly)
			[2]: var44_upvw (read and write)
			[3]: Heartbeat_upvr (copied, readonly)
			[4]: var46_upvw (read and write)
			[5]: arg1 (readonly)
		]]
		local Connected = setmetatable_result1_upvr.Connected
		if Connected then
			if arg2_2 ~= nil then
				Connected = false
			else
				Connected = true
			end
			var44_upvw = Connected
			Connected = var44_upvw
			if Connected then
				Connected = coroutine.wrap
				Connected = Connected(function() -- Line 289
					--[[ Upvalues[5]:
						[1]: Heartbeat_upvr (copied, readonly)
						[2]: setmetatable_result1_upvr (copied, readonly)
						[3]: var46_upvw (copied, read and write)
						[4]: arg1 (copied, readonly)
						[5]: var44_upvw (copied, read and write)
					]]
					Heartbeat_upvr:Wait()
					if not setmetatable_result1_upvr.Connected then
					else
						if not var46_upvw.Connected then
							arg1:Cleanup()
							return
						end
						while var44_upvw and var46_upvw.Connected and setmetatable_result1_upvr.Connected do
							Heartbeat_upvr:Wait()
						end
						if setmetatable_result1_upvr.Connected and var44_upvw then
							arg1:Cleanup()
						end
					end
				end)
				Connected()
			end
		end
	end)
	local var49_upvw = var46_upvw
	setmetatable_result1_upvr.Connection = var49_upvw
	if var44_upvw and setmetatable_result1_upvr.Connected then
		if arg2.Parent ~= nil then
			var44_upvw = false
		else
			var44_upvw = true
		end
		if var44_upvw then
			coroutine.wrap(function() -- Line 289
				--[[ Upvalues[5]:
					[1]: Heartbeat_upvr (copied, readonly)
					[2]: setmetatable_result1_upvr (readonly)
					[3]: var49_upvw (read and write)
					[4]: arg1 (readonly)
					[5]: var44_upvw (read and write)
				]]
				Heartbeat_upvr:Wait()
				if not setmetatable_result1_upvr.Connected then
				else
					if not var49_upvw.Connected then
						arg1:Cleanup()
						return
					end
					while var44_upvw and var49_upvw.Connected and setmetatable_result1_upvr.Connected do
						Heartbeat_upvr:Wait()
					end
					if setmetatable_result1_upvr.Connected and var44_upvw then
						arg1:Cleanup()
					end
				end
			end)()
		end
	end
	return arg1:Add(setmetatable_result1_upvr, "Disconnect", newproxy_result1_5_upvr)
end
module_upvr.__index.LinkToInstances = function(arg1, ...) -- Line 325, Named "LinkToInstances"
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local any_new_result1 = module_upvr.new()
	for _, v_2 in ipairs({...}) do
		any_new_result1:Add(arg1:LinkToInstance(v_2, true), "Disconnect")
	end
	return any_new_result1
end
for i_4, v_3 in next, module_upvr.__index do
	module_upvr.__index[string.sub(string.lower(i_4), 1, 1)..string.sub(i_4, 2)] = v_3
end
return module_upvr

Script name: OldSignal
  - Script: 


local HttpService_upvr = game:GetService("HttpService")
local module_upvr = {}
module_upvr.__index = module_upvr
module_upvr.ClassName = "Signal"
module_upvr.totalConnections = 0
function module_upvr.new(arg1) -- Line 12
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	if arg1 then
		setmetatable_result1.connectionsChanged = module_upvr.new()
	end
	setmetatable_result1.connections = {}
	setmetatable_result1.totalConnections = 0
	setmetatable_result1.waiting = {}
	setmetatable_result1.totalWaiting = 0
	return setmetatable_result1
end
function module_upvr.Fire(arg1, ...) -- Line 30
	for _, v in pairs(arg1.connections) do
		task.spawn(v.Handler, ...)
	end
	if 0 < arg1.totalWaiting then
		for i_2, _ in pairs(arg1.waiting) do
			arg1.waiting[i_2] = table.pack(...)
			local _
		end
	end
end
module_upvr.fire = module_upvr.Fire
function module_upvr.Connect(arg1, arg2) -- Line 44
	--[[ Upvalues[1]:
		[1]: HttpService_upvr (readonly)
	]]
	if type(arg2) ~= "function" then
		error("connect(%s)":format(typeof(arg2)), 2)
	end
	local any_GenerateGUID_result1_2_upvr = HttpService_upvr:GenerateGUID(false)
	local module_upvr_2 = {
		Connected = true;
		ConnectionId = any_GenerateGUID_result1_2_upvr;
	}
	module_upvr_2.Handler = arg2
	arg1.connections[any_GenerateGUID_result1_2_upvr] = module_upvr_2
	function module_upvr_2.Disconnect(arg1_2) -- Line 57
		--[[ Upvalues[3]:
			[1]: arg1 (readonly)
			[2]: any_GenerateGUID_result1_2_upvr (readonly)
			[3]: module_upvr_2 (readonly)
		]]
		arg1.connections[any_GenerateGUID_result1_2_upvr] = nil
		module_upvr_2.Connected = false
		local var21 = arg1
		var21.totalConnections -= 1
		if arg1.connectionsChanged then
			arg1.connectionsChanged:Fire(-1)
		end
	end
	module_upvr_2.Destroy = module_upvr_2.Disconnect
	module_upvr_2.destroy = module_upvr_2.Disconnect
	module_upvr_2.disconnect = module_upvr_2.Disconnect
	arg1.totalConnections += 1
	if arg1.connectionsChanged then
		arg1.connectionsChanged:Fire(1)
	end
	return module_upvr_2
end
module_upvr.connect = module_upvr.Connect
local Heartbeat_upvr = game:GetService("RunService").Heartbeat
function module_upvr.Wait(arg1) -- Line 77
	--[[ Upvalues[2]:
		[1]: HttpService_upvr (readonly)
		[2]: Heartbeat_upvr (readonly)
	]]
	local any_GenerateGUID_result1 = HttpService_upvr:GenerateGUID(false)
	arg1.waiting[any_GenerateGUID_result1] = true
	arg1.totalWaiting += 1
	repeat
		Heartbeat_upvr:Wait()
	until arg1.waiting[any_GenerateGUID_result1] ~= true
	arg1.totalWaiting -= 1
	arg1.waiting[any_GenerateGUID_result1] = nil
	return unpack(arg1.waiting[any_GenerateGUID_result1])
end
module_upvr.wait = module_upvr.Wait
function module_upvr.Destroy(arg1) -- Line 89
	if arg1.bindableEvent then
		arg1.bindableEvent:Destroy()
		arg1.bindableEvent = nil
	end
	if arg1.connectionsChanged then
		arg1.connectionsChanged:Fire(-arg1.totalConnections)
		arg1.connectionsChanged:Destroy()
		arg1.connectionsChanged = nil
	end
	arg1.totalConnections = 0
	for i_3, _ in pairs(arg1.connections) do
		arg1.connections[i_3] = nil
	end
end
module_upvr.destroy = module_upvr.Destroy
module_upvr.Disconnect = module_upvr.Destroy
module_upvr.disconnect = module_upvr.Destroy
return module_upvr

Script name: Signal
  - Script: 


local var1_upvw
local function acquireRunnerThreadAndCallEventHandler_upvr(arg1, ...) -- Line 34, Named "acquireRunnerThreadAndCallEventHandler"
	--[[ Upvalues[1]:
		[1]: var1_upvw (read and write)
	]]
	var1_upvw = nil
	arg1(...)
	var1_upvw = var1_upvw
end
local function runEventHandlerInFreeThread_upvr(...) -- Line 45, Named "runEventHandlerInFreeThread"
	--[[ Upvalues[1]:
		[1]: acquireRunnerThreadAndCallEventHandler_upvr (readonly)
	]]
	acquireRunnerThreadAndCallEventHandler_upvr(...)
	while true do
		acquireRunnerThreadAndCallEventHandler_upvr(coroutine.yield())
	end
end
local tbl_upvr = {}
tbl_upvr.__index = tbl_upvr
local function new(arg1, arg2) -- Line 56
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local module = {
		_connected = true;
	}
	module._signal = arg1
	module._fn = arg2
	module._next = false
	return setmetatable(module, tbl_upvr)
end
tbl_upvr.new = new
function tbl_upvr.Disconnect(arg1) -- Line 65
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	assert(arg1._connected, "Can't disconnect a connection twice.", 2)
	arg1._connected = false
	local _signal = arg1._signal
	local var5
	if var5 == arg1 then
		var5 = arg1._next
		_signal._handlerListHead = var5
		-- KONSTANTWARNING: GOTO [37] #24
	end
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [22] 15. Error Block 25 start (CF ANALYSIS FAILED)
	var5 = _signal._handlerListHead
	while var5 and var5._next ~= arg1 do
		var5 = var5._next
	end
	if var5 then
		var5._next = arg1._next
	end
	var5 = _signal.connectionsChanged
	if var5 then
		var5 = _signal.totalConnections
		var5 -= 1
		_signal.totalConnections = var5
		var5 = _signal.connectionsChanged:Fire
		var5(-1)
	end
	-- KONSTANTERROR: [22] 15. Error Block 25 end (CF ANALYSIS FAILED)
end
setmetatable(tbl_upvr, {
	__index = function(arg1, arg2) -- Line 94, Named "__index"
		error("Attempt to get Connection::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
	__newindex = function(arg1, arg2, arg3) -- Line 97, Named "__newindex"
		error("Attempt to set Connection::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
})
local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1) -- Line 106
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({
		_handlerListHead = false;
	}, module_2_upvr)
	if arg1 then
		setmetatable_result1.totalConnections = 0
		setmetatable_result1.connectionsChanged = module_2_upvr.new()
	end
	return setmetatable_result1
end
function module_2_upvr.Connect(arg1, arg2) -- Line 117
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local any_new_result1 = tbl_upvr.new(arg1, arg2)
	if arg1._handlerListHead then
		any_new_result1._next = arg1._handlerListHead
		arg1._handlerListHead = any_new_result1
	else
		arg1._handlerListHead = any_new_result1
	end
	if arg1.connectionsChanged then
		arg1.totalConnections += 1
		arg1.connectionsChanged:Fire(1)
	end
	return any_new_result1
end
function module_2_upvr.DisconnectAll(arg1) -- Line 135
	arg1._handlerListHead = false
	if arg1.connectionsChanged then
		arg1.connectionsChanged:Fire(-arg1.totalConnections)
		arg1.connectionsChanged:Destroy()
		arg1.connectionsChanged = nil
		arg1.totalConnections = 0
	end
end
module_2_upvr.Destroy = module_2_upvr.DisconnectAll
module_2_upvr.destroy = module_2_upvr.DisconnectAll
function module_2_upvr.Fire(arg1, ...) -- Line 152
	--[[ Upvalues[2]:
		[1]: var1_upvw (read and write)
		[2]: runEventHandlerInFreeThread_upvr (readonly)
	]]
	local _handlerListHead = arg1._handlerListHead
	while _handlerListHead do
		if _handlerListHead._connected then
			if not var1_upvw then
				var1_upvw = coroutine.create(runEventHandlerInFreeThread_upvr)
			end
			task.spawn(var1_upvw, _handlerListHead._fn, ...)
		end
	end
end
function module_2_upvr.Wait(arg1) -- Line 167
	local var13_upvw
	local current_thread_upvr = coroutine.running()
	var13_upvw = arg1:Connect(function(...) -- Line 170
		--[[ Upvalues[2]:
			[1]: var13_upvw (read and write)
			[2]: current_thread_upvr (readonly)
		]]
		var13_upvw:Disconnect()
		task.spawn(current_thread_upvr, ...)
	end)
	return coroutine.yield()
end
return module_2_upvr

Script name: VERSION
  - Script: 


Script name: ZoneController
  - Script: 


-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local Tracker_upvr = require(script.Tracker)
local CollectiveWorldModel_upvr = require(script.CollectiveWorldModel)
local enums_upvr = require(script.Parent.Enum).enums
local Players_upvr = game:GetService("Players")
local tbl_7_upvr = {}
local var6_upvw = 0
local tbl_6_upvr = {}
local tbl_4_upvr = {}
local tbl_3_upvw = {}
local tbl_upvw = {}
local tbl_8_upvw = {}
local tbl_10_upvw = {}
local var13_upvw = 0
local RunService = game:GetService("RunService")
local tbl_9_upvr = {}
local any_IsClient_result1_upvr = RunService:IsClient()
if any_IsClient_result1_upvr then
	any_IsClient_result1_upvr = Players_upvr.LocalPlayer
end
local module_upvr = {}
local tbl_2_upvr = {
	player = Tracker_upvr.new("player");
	item = Tracker_upvr.new("item");
}
module_upvr.trackers = tbl_2_upvr
local function _(arg1) -- Line 40, Named "dictLength"
	local var23 = 0
	for _, _ in pairs(arg1) do
		var23 += 1
	end
	return var23
end
local function _(arg1, arg2, arg3) -- Line 48, Named "fillOccupants"
	local var27 = arg1[arg2]
	if not var27 then
		var27 = {}
		arg1[arg2] = var27
	end
	local children_2 = arg3:IsA("Player")
	if children_2 then
		children_2 = arg3.Character
	end
	var27[arg3] = children_2 or true
end
local tbl_5_upvr = {
	player = function(arg1) -- Line 59
		--[[ Upvalues[3]:
			[1]: module_upvr (readonly)
			[2]: tbl_7_upvr (readonly)
			[3]: var6_upvw (read and write)
		]]
		return module_upvr._getZonesAndItems("player", tbl_7_upvr, var6_upvw, true, arg1)
	end;
	localPlayer = function(arg1) -- Line 62
		--[[ Upvalues[3]:
			[1]: any_IsClient_result1_upvr (readonly)
			[2]: module_upvr (readonly)
			[3]: tbl_2_upvr (readonly)
		]]
		local module = {}
		local Character = any_IsClient_result1_upvr.Character
		if not Character then
			return module
		end
		for _, v_2 in pairs(module_upvr.getTouchingZones(Character, true, arg1, tbl_2_upvr.player)) do
			if v_2.activeTriggers.localPlayer then
				local var41 = any_IsClient_result1_upvr
				local var42 = module[v_2]
				if not var42 then
					var42 = {}
					module[v_2] = var42
				end
				local children_3 = var41:IsA("Player")
				if children_3 then
					children_3 = var41.Character
				end
				var42[var41] = children_3 or true
			end
		end
		return module
	end;
	item = function(arg1) -- Line 76
		--[[ Upvalues[3]:
			[1]: module_upvr (readonly)
			[2]: tbl_7_upvr (readonly)
			[3]: var6_upvw (read and write)
		]]
		return module_upvr._getZonesAndItems("item", tbl_7_upvr, var6_upvw, true, arg1)
	end;
}
local Janitor_upvr = require(script.Parent.Janitor)
function module_upvr._registerZone(arg1) -- Line 84
	--[[ Upvalues[3]:
		[1]: tbl_4_upvr (readonly)
		[2]: Janitor_upvr (readonly)
		[3]: module_upvr (readonly)
	]]
	tbl_4_upvr[arg1] = true
	local any_add_result1 = arg1.janitor:add(Janitor_upvr.new(), "destroy")
	arg1._registeredJanitor = any_add_result1
	any_add_result1:add(arg1.updated:Connect(function() -- Line 88
		--[[ Upvalues[1]:
			[1]: module_upvr (copied, readonly)
		]]
		module_upvr._updateZoneDetails()
	end), "Disconnect")
	module_upvr._updateZoneDetails()
end
function module_upvr._deregisterZone(arg1) -- Line 94
	--[[ Upvalues[2]:
		[1]: tbl_4_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	tbl_4_upvr[arg1] = nil
	arg1._registeredJanitor:destroy()
	arg1._registeredJanitor = nil
	module_upvr._updateZoneDetails()
end
function module_upvr._registerConnection(arg1, arg2) -- Line 101
	--[[ Upvalues[5]:
		[1]: var13_upvw (read and write)
		[2]: tbl_7_upvr (readonly)
		[3]: module_upvr (readonly)
		[4]: tbl_6_upvr (readonly)
		[5]: tbl_5_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var56 = 0
	for _, _ in pairs(arg1.activeTriggers) do
		var56 += 1
	end
	var13_upvw += 1
	if var56 == 0 then
		var56 = true
		tbl_7_upvr[arg1] = var56
		var56 = module_upvr
		var56._updateZoneDetails()
	end
	var56 = tbl_6_upvr
	local var60 = var56[arg2]
	var56 = tbl_6_upvr
	if not var60 or not (var60 + 1) then
	end
	var56[arg2] = 1
	var56 = arg1.activeTriggers
	var56[arg2] = true
	var56 = arg1.touchedConnectionActions[arg2]
	if var56 then
		var56 = arg1:_formTouchedConnection
		var56(arg2)
	end
	var56 = tbl_5_upvr[arg2]
	if var56 then
		var56 = module_upvr._formHeartbeat
		var56(arg2)
	end
end
function module_upvr.updateDetection(arg1) -- Line 121
	--[[ Upvalues[2]:
		[1]: Tracker_upvr (readonly)
		[2]: enums_upvr (readonly)
	]]
	for i_4, v_4 in pairs({
		enterDetection = "_currentEnterDetection";
		exitDetection = "_currentExitDetection";
	}) do
		local var69 = arg1[i_4]
		if var69 == enums_upvr.Detection.Automatic then
			if 729000 < Tracker_upvr.getCombinedTotalVolumes() then
				var69 = enums_upvr.Detection.Centre
			else
				var69 = enums_upvr.Detection.WholeBody
			end
		end
		arg1[v_4] = var69
	end
end
local Heartbeat_upvr = RunService.Heartbeat
function module_upvr._formHeartbeat(arg1) -- Line 140
	--[[ Upvalues[6]:
		[1]: tbl_9_upvr (readonly)
		[2]: Heartbeat_upvr (readonly)
		[3]: tbl_7_upvr (readonly)
		[4]: module_upvr (readonly)
		[5]: tbl_5_upvr (readonly)
		[6]: enums_upvr (readonly)
	]]
	if tbl_9_upvr[arg1] then
	else
		local const_number_upvw = 0
		tbl_9_upvr[arg1] = Heartbeat_upvr:Connect(function() -- Line 150
			--[[ Upvalues[6]:
				[1]: const_number_upvw (read and write)
				[2]: tbl_7_upvr (copied, readonly)
				[3]: arg1 (readonly)
				[4]: module_upvr (copied, readonly)
				[5]: tbl_5_upvr (copied, readonly)
				[6]: enums_upvr (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
			local var113
			-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [6] 5. Error Block 85 start (CF ANALYSIS FAILED)
			var113 = nil
			local var114
			for i_14, _ in pairs(tbl_7_upvr) do
				if i_14.activeTriggers[arg1] then
					local accuracy = i_14.accuracy
					if var113 == nil or accuracy < var113 then
						var113 = accuracy
					end
					module_upvr.updateDetection(i_14)
					local _currentEnterDetection = i_14._currentEnterDetection
					if var114 == nil or _currentEnterDetection < var114 then
					end
				end
			end
			local tbl = {}
			for i_15, v_15 in pairs(tbl_5_upvr[arg1](_currentEnterDetection)) do
				local var124
				if var124 then
					var124 = module_upvr.getGroup(i_15.settingsGroupName)
				end
				if var124 and var124.onlyEnterOnceExitedAll == true then
					for i_16, _ in pairs(v_15) do
						local var128 = tbl[i_15.settingsGroupName]
						if not var128 then
							var128 = {}
							tbl[i_15.settingsGroupName] = var128
						end
						var128[i_16] = i_15
					end
					;({})[i_15] = v_15
				end
			end
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			for i_17, v_17 in pairs({}) do
				var124 = tbl[i_17.settingsGroupName]
				if var124 then
					for i_18, _ in pairs(v_17) do
						local var135 = var124[i_18]
						if var135 and var135 ~= i_17 then
							v_17[i_18] = nil
						end
					end
				end
			end
			local _ = {{}, {}}
			local _, _, _ = pairs(tbl_7_upvr)
			-- KONSTANTERROR: [6] 5. Error Block 85 end (CF ANALYSIS FAILED)
		end)
	end
end
function module_upvr._deregisterConnection(arg1, arg2) -- Line 249
	--[[ Upvalues[5]:
		[1]: var13_upvw (read and write)
		[2]: tbl_6_upvr (readonly)
		[3]: tbl_9_upvr (readonly)
		[4]: tbl_7_upvr (readonly)
		[5]: module_upvr (readonly)
	]]
	var13_upvw -= 1
	local var144
	if tbl_6_upvr[arg2] == 1 then
		tbl_6_upvr[arg2] = nil
		local var145 = tbl_9_upvr[arg2]
		if var145 then
			var144 = nil
			tbl_9_upvr[arg2] = var144
			var145:Disconnect()
			-- KONSTANTWARNING: GOTO [24] #23
		end
	else
		local var146 = tbl_6_upvr
		var146[arg2] -= 1
	end
	arg1.activeTriggers[arg2] = nil
	var144 = 0
	for _, _ in pairs(arg1.activeTriggers) do
		var144 += 1
	end
	if var144 == 0 then
		tbl_7_upvr[arg1] = nil
		module_upvr._updateZoneDetails()
	end
	if arg1.touchedConnectionActions[arg2] then
		arg1:_disconnectTouchedConnection(arg2)
	end
end
function module_upvr._updateZoneDetails() -- Line 271
	--[[ Upvalues[7]:
		[1]: tbl_3_upvw (read and write)
		[2]: tbl_upvw (read and write)
		[3]: tbl_8_upvw (read and write)
		[4]: tbl_10_upvw (read and write)
		[5]: var6_upvw (read and write)
		[6]: tbl_4_upvr (readonly)
		[7]: tbl_7_upvr (readonly)
	]]
	tbl_3_upvw = {}
	tbl_upvw = {}
	tbl_8_upvw = {}
	tbl_10_upvw = {}
	var6_upvw = 0
	for i_6, _ in pairs(tbl_4_upvr) do
		local var157 = tbl_7_upvr[i_6]
		if var157 then
			var6_upvw += i_6.volume
		end
		for _, v_7 in pairs(i_6.zoneParts) do
			if var157 then
				table.insert(tbl_3_upvw, v_7)
				tbl_upvw[v_7] = i_6
			end
			table.insert(tbl_8_upvw, v_7)
			tbl_10_upvw[v_7] = i_6
		end
	end
end
function module_upvr._getZonesAndItems(arg1, arg2, arg3, arg4, arg5) -- Line 293
	--[[ Upvalues[4]:
		[1]: tbl_2_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: Players_upvr (readonly)
		[4]: CollectiveWorldModel_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 81 start (CF ANALYSIS FAILED)
	local var173 = arg3
	if not var173 then
		for i_8, _ in pairs(arg2) do
			var173 += i_8.volume
		end
	end
	local module_4 = {}
	local var178 = tbl_2_upvr[arg1]
	if var178.totalVolume < var173 then
		for _, v_9 in pairs(var178.items) do
			local _
			for _, v_10 in pairs(module_upvr.getTouchingZones(v_9, arg4, arg5, var178)) do
				if not arg4 or v_10.activeTriggers[arg1] then
					local var186 = v_9
					if arg1 == "player" then
						var186 = Players_upvr:GetPlayerFromCharacter(v_9)
					end
					if var186 then
						local var187 = var186
						local var188 = module_4[v_10]
						if not var188 then
							var188 = {}
							module_4[v_10] = var188
						end
						local children = var187:IsA("Player")
						if children then
							children = var187.Character
						end
						var188[var187] = children or true
					end
				end
			end
		end
		return module_4
	end
	local pairs_result1_12, pairs_result2_6, pairs_result3_4 = pairs(arg2)
	-- KONSTANTERROR: [0] 1. Error Block 81 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [167] 126. Error Block 46 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [167] 126. Error Block 46 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [79] 61. Error Block 23 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [79] 61. Error Block 23 end (CF ANALYSIS FAILED)
end
function module_upvr.getZones() -- Line 354
	--[[ Upvalues[1]:
		[1]: tbl_4_upvr (readonly)
	]]
	local module_2 = {}
	for i_11, _ in pairs(tbl_4_upvr) do
		table.insert(module_2, i_11)
	end
	return module_2
end
function module_upvr.getTouchingZones(arg1, arg2, arg3, arg4) -- Line 374
	--[[ Upvalues[7]:
		[1]: enums_upvr (readonly)
		[2]: Tracker_upvr (readonly)
		[3]: tbl_3_upvw (read and write)
		[4]: tbl_8_upvw (read and write)
		[5]: tbl_upvw (read and write)
		[6]: tbl_10_upvw (read and write)
		[7]: CollectiveWorldModel_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 83 start (CF ANALYSIS FAILED)
	local var209
	local var210
	if arg4 then
		var210 = arg4.exitDetections
		var209 = var210[arg1]
		var210 = arg4.exitDetections
		var210[arg1] = nil
	end
	var210 = nil
	if arg1:IsA("BasePart") then
		var210 = arg1.Size
		table.insert({}, arg1)
		-- KONSTANTWARNING: GOTO [68] #51
	end
	-- KONSTANTERROR: [0] 1. Error Block 83 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [33] 26. Error Block 86 start (CF ANALYSIS FAILED)
	if (var209 or arg3) == enums_upvr.Detection.WholeBody then
		local any_getCharacterSize_result1, any_getCharacterSize_result2 = Tracker_upvr.getCharacterSize(arg1)
		var210 = any_getCharacterSize_result1
		local _ = any_getCharacterSize_result2
	else
		local HumanoidRootPart = arg1:FindFirstChild("HumanoidRootPart")
		if HumanoidRootPart then
			var210 = HumanoidRootPart.Size
			table.insert(arg1:GetChildren(), HumanoidRootPart)
		end
	end
	if not var210 or not HumanoidRootPart.CFrame then
		return {}
	end
	if not arg2 or not tbl_3_upvw then
		local var217 = tbl_8_upvw
	end
	if not arg2 or not tbl_upvw then
	end
	local OverlapParams_new_result1 = OverlapParams.new()
	OverlapParams_new_result1.FilterType = Enum.RaycastFilterType.Whitelist
	OverlapParams_new_result1.MaxParts = #var217
	OverlapParams_new_result1.FilterDescendantsInstances = var217
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	for _, v_12 in pairs(CollectiveWorldModel_upvr:GetPartBoundsInBox(HumanoidRootPart.CFrame, var210, OverlapParams_new_result1)) do
		local var222 = tbl_10_upvw[v_12]
		if var222 and var222.allZonePartsAreBlocks then
			({})[var222] = true
			;({})[v_12] = var222
		else
			table.insert({}, v_12)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	-- KONSTANTERROR: [33] 26. Error Block 86 end (CF ANALYSIS FAILED)
end
local module_3_upvr = {}
function module_upvr.setGroup(arg1, arg2) -- Line 491
	--[[ Upvalues[1]:
		[1]: module_3_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var232 = module_3_upvr[arg1]
	if not var232 then
		var232 = {}
		module_3_upvr[arg1] = var232
	end
	var232.onlyEnterOnceExitedAll = true
	var232._name = arg1
	var232._memberZones = {}
	if typeof(arg2) == "table" then
		for i_13, v_13 in pairs(arg2) do
			var232[i_13] = v_13
		end
	end
	return var232
end
function module_upvr.getGroup(arg1) -- Line 515
	--[[ Upvalues[1]:
		[1]: module_3_upvr (readonly)
	]]
	return module_3_upvr[arg1]
end
if RunService:IsClient() then
else
end
local var236_upvw
local formatted_upvr = string.format("ZonePlus%sContainer", "Server")
function module_upvr.getWorkspaceContainer() -- Line 521
	--[[ Upvalues[2]:
		[1]: var236_upvw (read and write)
		[2]: formatted_upvr (readonly)
	]]
	local var238 = var236_upvw
	if not var238 then
		var238 = workspace:FindFirstChild(formatted_upvr)
	end
	if not var238 then
		local Folder = Instance.new("Folder")
		Folder.Name = formatted_upvr
		Folder.Parent = workspace
		var236_upvw = Folder
	end
	return Folder
end
return module_upvr

Script name: CollectiveWorldModel
  - Script: 


local module = {}
local var2_upvw
local RunService_upvr = game:GetService("RunService")
function module.setupWorldModel(arg1) -- Line 8
	--[[ Upvalues[2]:
		[1]: var2_upvw (read and write)
		[2]: RunService_upvr (readonly)
	]]
	local var4
	if var4 then
		var4 = var2_upvw
		return var4
	end
	if RunService_upvr:IsClient() then
		var4 = "ReplicatedStorage"
	else
		var4 = "ServerStorage"
	end
	var2_upvw = Instance.new("WorldModel")
	var2_upvw.Name = "ZonePlusWorldModel"
	var2_upvw.Parent = game:GetService(var4)
	return var2_upvw
end
function module._getCombinedResults(arg1, arg2, ...) -- Line 22
	--[[ Upvalues[1]:
		[1]: var2_upvw (read and write)
	]]
	local workspace_any_result1 = workspace[arg2](workspace, ...)
	if var2_upvw then
		for _, v in pairs(var2_upvw[arg2](var2_upvw, ...)) do
			table.insert(workspace_any_result1, v)
		end
	end
	return workspace_any_result1
end
function module.GetPartBoundsInBox(arg1, arg2, arg3, arg4) -- Line 33
	return arg1:_getCombinedResults("GetPartBoundsInBox", arg2, arg3, arg4)
end
function module.GetPartBoundsInRadius(arg1, arg2, arg3, arg4) -- Line 37
	return arg1:_getCombinedResults("GetPartBoundsInRadius", arg2, arg3, arg4)
end
function module.GetPartsInPart(arg1, arg2, arg3) -- Line 41
	return arg1:_getCombinedResults("GetPartsInPart", arg2, arg3)
end
return module

Script name: Tracker
  - Script: 


local Signal = require(script.Parent.Parent.Signal)
local Janitor_upvr = require(script.Parent.Parent.Janitor)
local module_upvr = {}
module_upvr.__index = module_upvr
local tbl_upvr = {}
module_upvr.trackers = tbl_upvr
module_upvr.itemAdded = Signal.new()
module_upvr.itemRemoved = Signal.new()
module_upvr.bodyPartsToIgnore = {
	UpperTorso = true;
	LowerTorso = true;
	Torso = true;
	LeftHand = true;
	RightHand = true;
	LeftFoot = true;
	RightFoot = true;
}
function module_upvr.getCombinedTotalVolumes() -- Line 35
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var10 = 0
	for i, _ in pairs(tbl_upvr) do
		var10 += i.totalVolume
	end
	return var10
end
function module_upvr.getCharacterSize(arg1) -- Line 43
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var14
	if arg1 then
		local Head = arg1:FindFirstChild("Head")
	end
	var14 = arg1
	if var14 then
		var14 = arg1:FindFirstChild("HumanoidRootPart")
	end
	if not var14 or not Head then
		return nil
	end
	if not Head:IsA("BasePart") then
	end
	local Y = var14.Size.Y
	local Size_2 = var14.Size
	return Size_2 * Vector3.new(2, 2, 1) + Vector3.new(0, Y, 0), var14.CFrame * CFrame.new(0, Y / 2 - Size_2.Y / 2, 0)
end
local Players_upvr = game:GetService("Players")
function module_upvr.new(arg1) -- Line 60
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: Janitor_upvr (readonly)
		[3]: Players_upvr (readonly)
		[4]: tbl_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local module_upvr_2 = {}
	setmetatable(module_upvr_2, module_upvr)
	module_upvr_2.name = arg1
	module_upvr_2.totalVolume = 0
	module_upvr_2.parts = {}
	module_upvr_2.partToItem = {}
	module_upvr_2.items = {}
	module_upvr_2.whitelistParams = nil
	module_upvr_2.characters = {}
	module_upvr_2.baseParts = {}
	module_upvr_2.exitDetections = {}
	module_upvr_2.janitor = Janitor_upvr.new()
	if arg1 == "player" then
		local function updateItem_upvr() -- Line 76, Named "updatePlayerCharacters"
			--[[ Upvalues[2]:
				[1]: Players_upvr (copied, readonly)
				[2]: module_upvr_2 (readonly)
			]]
			for _, v_2 in pairs(Players_upvr:GetPlayers()) do
				local Character = v_2.Character
				if Character then
					({})[Character] = true
				end
			end
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			module_upvr_2.characters = {}
		end
		local function playerAdded(arg1_2) -- Line 87
			--[[ Upvalues[2]:
				[1]: updateItem_upvr (readonly)
				[2]: module_upvr_2 (readonly)
			]]
			local function charAdded(arg1_3) -- Line 88
				--[[ Upvalues[2]:
					[1]: updateItem_upvr (copied, readonly)
					[2]: module_upvr_2 (copied, readonly)
				]]
				local Humanoid = arg1_3:WaitForChild("Humanoid", 3)
				if Humanoid then
					updateItem_upvr()
					module_upvr_2:update()
					for _, v_3 in pairs(Humanoid:GetChildren()) do
						if v_3:IsA("NumberValue") then
							v_3.Changed:Connect(function() -- Line 95
								--[[ Upvalues[1]:
									[1]: module_upvr_2 (copied, readonly)
								]]
								module_upvr_2:update()
							end)
						end
					end
				end
			end
			if arg1_2.Character then
				charAdded(arg1_2.Character)
			end
			arg1_2.CharacterAdded:Connect(charAdded)
			arg1_2.CharacterRemoving:Connect(function(arg1_4) -- Line 106
				--[[ Upvalues[1]:
					[1]: module_upvr_2 (copied, readonly)
				]]
				module_upvr_2.exitDetections[arg1_4] = nil
			end)
		end
		Players_upvr.PlayerAdded:Connect(playerAdded)
		for _, v_4 in pairs(Players_upvr:GetPlayers()) do
			playerAdded(v_4)
			local var45
		end
		Players_upvr.PlayerRemoving:Connect(function(arg1_5) -- Line 116
			--[[ Upvalues[2]:
				[1]: updateItem_upvr (readonly)
				[2]: module_upvr_2 (readonly)
			]]
			updateItem_upvr()
			module_upvr_2:update()
		end)
	elseif arg1 == "item" then
		function updateItem_upvr(arg1_6, arg2) -- Line 123, Named "updateItem"
			--[[ Upvalues[1]:
				[1]: module_upvr_2 (readonly)
			]]
			if arg1_6.isCharacter then
				module_upvr_2.characters[arg1_6.item] = arg2
			elseif arg1_6.isBasePart then
				module_upvr_2.baseParts[arg1_6.item] = arg2
			end
			module_upvr_2:update()
		end
		var45 = module_upvr.itemAdded
		var45 = var45:Connect
		var45(function(arg1_7) -- Line 131
			--[[ Upvalues[1]:
				[1]: module_upvr_2 (readonly)
			]]
			if arg1_7.isCharacter then
				module_upvr_2.characters[arg1_7.item] = true
			elseif arg1_7.isBasePart then
				module_upvr_2.baseParts[arg1_7.item] = true
			end
			module_upvr_2:update()
		end)
		var45 = module_upvr.itemRemoved
		var45 = var45:Connect
		var45(function(arg1_8) -- Line 134
			--[[ Upvalues[1]:
				[1]: module_upvr_2 (readonly)
			]]
			module_upvr_2.exitDetections[arg1_8.item] = nil
			if arg1_8.isCharacter then
				module_upvr_2.characters[arg1_8.item] = nil
			elseif arg1_8.isBasePart then
				module_upvr_2.baseParts[arg1_8.item] = nil
			end
			module_upvr_2:update()
		end)
	end
	updateItem_upvr = tbl_upvr
	updateItem_upvr[module_upvr_2] = true
	updateItem_upvr = task.defer
	updateItem_upvr(module_upvr_2.update, module_upvr_2)
	return module_upvr_2
end
function module_upvr._preventMultiFrameUpdates(arg1, arg2, ...) -- Line 148
	local _preventMultiDetails = arg1._preventMultiDetails
	if not _preventMultiDetails then
		_preventMultiDetails = {}
	end
	arg1._preventMultiDetails = _preventMultiDetails
	_preventMultiDetails = arg1._preventMultiDetails[arg2]
	local var50_upvw = _preventMultiDetails
	if not var50_upvw then
		var50_upvw = {
			calling = false;
			callsThisFrame = 0;
			updatedThisFrame = false;
		}
		arg1._preventMultiDetails[arg2] = var50_upvw
	end
	var50_upvw.callsThisFrame += 1
	if var50_upvw.callsThisFrame == 1 then
		local packed_upvr = table.pack(...)
		task.defer(function() -- Line 165
			--[[ Upvalues[4]:
				[1]: var50_upvw (read and write)
				[2]: arg1 (readonly)
				[3]: arg2 (readonly)
				[4]: packed_upvr (readonly)
			]]
			var50_upvw.callsThisFrame = 0
			if 1 < var50_upvw.callsThisFrame then
				arg1[arg2](arg1, unpack(packed_upvr))
			end
		end)
		return false
	end
	return true
end
function module_upvr.update(arg1) -- Line 177
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Janitor_upvr (readonly)
	]]
	if arg1:_preventMultiFrameUpdates("update") then
	else
		arg1.totalVolume = 0
		arg1.parts = {}
		arg1.partToItem = {}
		arg1.items = {}
		for i_5_upvr, _ in pairs(arg1.characters) do
			local any_getCharacterSize_result1 = module_upvr.getCharacterSize(i_5_upvr)
			if any_getCharacterSize_result1 then
				arg1.totalVolume += any_getCharacterSize_result1.X * any_getCharacterSize_result1.Y * any_getCharacterSize_result1.Z
				local any_add_result1_upvw = arg1.janitor:add(Janitor_upvr.new(), "destroy", "trackCharacterParts-"..arg1.name)
				local function _(arg1_9) -- Line 198, Named "updateTrackerOnParentChanged"
					--[[ Upvalues[2]:
						[1]: any_add_result1_upvw (read and write)
						[2]: arg1 (readonly)
					]]
					any_add_result1_upvw:add(arg1_9.AncestryChanged:Connect(function() -- Line 199
						--[[ Upvalues[3]:
							[1]: arg1_9 (readonly)
							[2]: any_add_result1_upvw (copied, read and write)
							[3]: arg1 (copied, readonly)
						]]
						if not arg1_9:IsDescendantOf(game) and arg1_9.Parent == nil and any_add_result1_upvw ~= nil then
							any_add_result1_upvw:destroy()
							any_add_result1_upvw = nil
							arg1:update()
						end
					end), "Disconnect")
				end
				for _, v_6_upvr in pairs(i_5_upvr:GetChildren()) do
					if v_6_upvr:IsA("BasePart") and not module_upvr.bodyPartsToIgnore[v_6_upvr.Name] then
						arg1.partToItem[v_6_upvr] = i_5_upvr
						table.insert(arg1.parts, v_6_upvr)
						any_add_result1_upvw:add(v_6_upvr.AncestryChanged:Connect(function() -- Line 199
							--[[ Upvalues[3]:
								[1]: v_6_upvr (readonly)
								[2]: any_add_result1_upvw (read and write)
								[3]: arg1 (readonly)
							]]
							if not v_6_upvr:IsDescendantOf(game) and v_6_upvr.Parent == nil and any_add_result1_upvw ~= nil then
								any_add_result1_upvw:destroy()
								any_add_result1_upvw = nil
								arg1:update()
							end
						end), "Disconnect")
					end
				end
				any_add_result1_upvw:add(i_5_upvr.AncestryChanged:Connect(function() -- Line 199
					--[[ Upvalues[3]:
						[1]: i_5_upvr (readonly)
						[2]: any_add_result1_upvw (read and write)
						[3]: arg1 (readonly)
					]]
					if not i_5_upvr:IsDescendantOf(game) and i_5_upvr.Parent == nil and any_add_result1_upvw ~= nil then
						any_add_result1_upvw:destroy()
						any_add_result1_upvw = nil
						arg1:update()
					end
				end), "Disconnect")
				table.insert(arg1.items, i_5_upvr)
			end
		end
		for i_7, _ in pairs(arg1.baseParts) do
			local Size = i_7.Size
			arg1.totalVolume += Size.X * Size.Y * Size.Z
			arg1.partToItem[i_7] = i_7
			table.insert(arg1.parts, i_7)
			table.insert(arg1.items, i_7)
		end
		arg1.whitelistParams = OverlapParams.new()
		arg1.whitelistParams.FilterType = Enum.RaycastFilterType.Whitelist
		arg1.whitelistParams.MaxParts = #arg1.parts
		arg1.whitelistParams.FilterDescendantsInstances = arg1.parts
	end
end
return module_upvr

Script name: ZonePlusReference
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
return {
	addToReplicatedStorage = function() -- Line 9, Named "addToReplicatedStorage"
		--[[ Upvalues[1]:
			[1]: ReplicatedStorage_upvr (readonly)
		]]
		if ReplicatedStorage_upvr:FindFirstChild(script.Name) then
			return false
		end
		local ObjectValue = Instance.new("ObjectValue")
		ObjectValue.Name = script.Name
		ObjectValue.Value = script.Parent
		ObjectValue.Parent = ReplicatedStorage_upvr
		local var4 = "BoolValue"
		local any = Instance.new(var4)
		if game:GetService("RunService"):IsClient() then
			var4 = "Client"
		else
			var4 = "Server"
		end
		any.Name = var4
		any.Value = true
		any.Parent = ObjectValue
		return ObjectValue
	end;
	getObject = function() -- Line 25, Named "getObject"
		--[[ Upvalues[1]:
			[1]: ReplicatedStorage_upvr (readonly)
		]]
		local SOME = ReplicatedStorage_upvr:FindFirstChild(script.Name)
		if SOME then
			return SOME
		end
		return false
	end;
}

Script name: SwimModule
  - Script: 


local RunService_upvr = game:GetService("RunService")
local module = {}
module.__index = module
local var3
if RunService_upvr:IsServer() then return end
var3 = game:GetService("Players")
var3 = var3.LocalPlayer.Character
if not var3 then
	var3 = var3.LocalPlayer.CharacterAdded:Wait()
end
repeat
	task.wait()
until var3:FindFirstChildOfClass("Humanoid")
local class_Humanoid_upvr = var3:FindFirstChildOfClass("Humanoid")
local HumanoidRootPart_upvr = var3:WaitForChild("HumanoidRootPart")
local function humStates_upvr(arg1, arg2) -- Line 17, Named "humStates"
	--[[ Upvalues[1]:
		[1]: class_Humanoid_upvr (readonly)
	]]
	class_Humanoid_upvr:SetStateEnabled(Enum.HumanoidStateType.Running, arg1)
	class_Humanoid_upvr:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, arg1)
	class_Humanoid_upvr:SetStateEnabled(Enum.HumanoidStateType.GettingUp, arg1)
	class_Humanoid_upvr:SetStateEnabled(Enum.HumanoidStateType.Jumping, arg1)
	class_Humanoid_upvr:SetStateEnabled(Enum.HumanoidStateType.Freefall, arg1)
	class_Humanoid_upvr:SetStateEnabled(Enum.HumanoidStateType.FallingDown, arg1)
	class_Humanoid_upvr:ChangeState(arg2)
end
local tbl_upvr_2 = {}
local tbl_upvr = {}
local function antiGrav_upvr(arg1) -- Line 30, Named "antiGrav"
	--[[ Upvalues[3]:
		[1]: tbl_upvr_2 (readonly)
		[2]: tbl_upvr (readonly)
		[3]: HumanoidRootPart_upvr (readonly)
	]]
	if arg1 then
		if 0 < #tbl_upvr_2 or 0 < #tbl_upvr then return end
		local Attachment = Instance.new("Attachment")
		Attachment.WorldPosition = HumanoidRootPart_upvr.Position
		Attachment.Parent = HumanoidRootPart_upvr
		table.insert(tbl_upvr_2, Attachment)
		local VectorForce = Instance.new("VectorForce")
		VectorForce.RelativeTo = Enum.ActuatorRelativeTo.World
		VectorForce.Force = Vector3.new(0, workspace.Gravity * HumanoidRootPart_upvr.AssemblyMass, 0)
		VectorForce.Attachment0 = Attachment
		VectorForce.ApplyAtCenterOfMass = true
		VectorForce.Parent = HumanoidRootPart_upvr
		table.insert(tbl_upvr, VectorForce)
		return Attachment, VectorForce
	end
	for _, v in tbl_upvr_2 do
		v:Destroy()
	end
	for _, v_2 in tbl_upvr do
		v_2:Destroy()
	end
	table.clear(tbl_upvr_2)
	table.clear(tbl_upvr)
end
function module.Start(arg1) -- Line 62
	--[[ Upvalues[5]:
		[1]: RunService_upvr (readonly)
		[2]: humStates_upvr (readonly)
		[3]: antiGrav_upvr (readonly)
		[4]: class_Humanoid_upvr (readonly)
		[5]: HumanoidRootPart_upvr (readonly)
	]]
	if RunService_upvr:IsServer() then
	else
		if arg1.Enabled then return end
		humStates_upvr(false, Enum.HumanoidStateType.Swimming)
		local antiGrav_result1, _ = antiGrav_upvr(true)
		arg1.Enabled = true
		arg1.RSConnection = RunService_upvr.Heartbeat:Connect(function() -- Line 72
			--[[ Upvalues[2]:
				[1]: class_Humanoid_upvr (copied, readonly)
				[2]: HumanoidRootPart_upvr (copied, readonly)
			]]
			if 0 < class_Humanoid_upvr.MoveDirection.Magnitude then
				HumanoidRootPart_upvr.AssemblyLinearVelocity = Vector3.new(class_Humanoid_upvr.MoveDirection.X * class_Humanoid_upvr.WalkSpeed, class_Humanoid_upvr.MoveDirection.Y * class_Humanoid_upvr.WalkSpeed, class_Humanoid_upvr.MoveDirection.Z * class_Humanoid_upvr.WalkSpeed)
			else
				HumanoidRootPart_upvr.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
			end
		end)
	end
end
function module.Stop(arg1) -- Line 81
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: humStates_upvr (readonly)
		[3]: antiGrav_upvr (readonly)
	]]
	if RunService_upvr:IsServer() then
	else
		if not arg1.Enabled then return end
		arg1.Enabled = false
		humStates_upvr(true, Enum.HumanoidStateType.Freefall)
		antiGrav_upvr(false)
		if arg1.RSConnection then
			arg1.RSConnection:Disconnect()
		end
	end
end
function module.ClearAntiGrav(arg1) -- Line 94
	--[[ Upvalues[1]:
		[1]: antiGrav_upvr (readonly)
	]]
	antiGrav_upvr(false)
end
function module.CreateAntiGrav(arg1) -- Line 98
	--[[ Upvalues[2]:
		[1]: HumanoidRootPart_upvr (readonly)
		[2]: antiGrav_upvr (readonly)
	]]
	task.delay(0.05, function() -- Line 99
		--[[ Upvalues[1]:
			[1]: HumanoidRootPart_upvr (copied, readonly)
		]]
		HumanoidRootPart_upvr.AssemblyLinearVelocity = Vector3.new()
	end)
	antiGrav_upvr(true)
end
function module.GetOut(arg1) -- Line 105
	--[[ Upvalues[1]:
		[1]: humStates_upvr (readonly)
	]]
	humStates_upvr(true, Enum.HumanoidStateType.Jumping)
end
function module.ActivateStates(arg1) -- Line 109
	--[[ Upvalues[1]:
		[1]: humStates_upvr (readonly)
	]]
	humStates_upvr(false, Enum.HumanoidStateType.Swimming)
end
return setmetatable({
	Enabled = false;
}, module)

Script name: PlatformOptimize
  - Script: 


-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local GuiService_upvr = game:GetService("GuiService")
local Players_upvr_2 = game:GetService("Players")
local UserInputService_upvr_2 = game:GetService("UserInputService")
local LocalPlayer_upvr = Players_upvr_2.LocalPlayer
local MainGui = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
local Chest_2 = MainGui:WaitForChild("Chest")
local Collections_2 = MainGui:WaitForChild("Collections")
local Crafting = MainGui:WaitForChild("Crafting")
local Settings_2 = MainGui:WaitForChild("Settings")
local HUD = MainGui:WaitForChild("HUD")
local Inventory = MainGui:WaitForChild("Inventory")
local Stats = MainGui:WaitForChild("Stats")
local Store = MainGui:WaitForChild("Store")
local QuestsDisplay_2 = HUD:WaitForChild("QuestsDisplay")
local function _() -- Line 26, Named "isMobileDevice"
	--[[ Upvalues[4]:
		[1]: Players_upvr_2 (readonly)
		[2]: LocalPlayer_upvr (readonly)
		[3]: UserInputService_upvr_2 (readonly)
		[4]: GuiService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var54
	if GuiService_upvr:IsTenFootInterface() == false then
		var54 = false
		if UserInputService_upvr_2.MouseEnabled == false then
			if UserInputService_upvr_2.KeyboardEnabled ~= false then
				var54 = false
			else
				var54 = true
			end
		end
	end
	if LocalPlayer_upvr:WaitForChild("PlayerGui"):FindFirstChild("TouchGui") == nil then
	else
	end
	if UserInputService_upvr_2.TouchEnabled then
	end
	return var54 or true
end
local function _() -- Line 44, Named "isConsole"
	--[[ Upvalues[1]:
		[1]: GuiService_upvr (readonly)
	]]
	return GuiService_upvr:IsTenFootInterface()
end
local var55
if GuiService_upvr:IsTenFootInterface() == false then
	var55 = false
	if UserInputService_upvr_2.MouseEnabled == false then
		if UserInputService_upvr_2.KeyboardEnabled ~= false then
			var55 = false
		else
			var55 = true
		end
	end
end
if LocalPlayer_upvr:WaitForChild("PlayerGui"):FindFirstChild("TouchGui") == nil then
else
end
local TouchEnabled = UserInputService_upvr_2.TouchEnabled
if TouchEnabled then
end
if var55 or true then
	var55 = 0.14
	HUD:WaitForChild("ToolBar").Size = UDim2.new(0.54, 0, var55, 0)
	HUD:WaitForChild("RightPanel").Size = UDim2.fromScale(0.115, 0.355)
	HUD:WaitForChild("RightPanel").Position = UDim2.fromScale(1, 0.3)
	var55 = 0.05
	HUD:WaitForChild("XPBar").Size = UDim2.new(0.4, 0, var55, 0)
	var55 = 0.05
	HUD:WaitForChild("HPBar").Size = UDim2.new(0.4, 0, var55, 0)
	var55 = 0.8
	HUD:WaitForChild("HPBar").Position = UDim2.new(0.5, 0, var55, 0)
	var55 = 0.06
	HUD:WaitForChild("CoinCounter").Size = UDim2.new(0.25, 0, var55, 0)
	var55 = 1
	HUD:WaitForChild("CoinCounter").Main.Size = UDim2.new(1, 0, var55, 0)
	var55 = 0
	HUD:WaitForChild("CoinCounter").Position = UDim2.new(1, 0, var55, 0)
	var55 = 0.5
	HUD:WaitForChild("CoinCounter").Main.Position = UDim2.new(0.05, 0, var55, 0)
	var55 = "CoinCounter"
	var55 = 1
	HUD:WaitForChild(var55).Main.Display.Size = UDim2.new(0.8, 0, var55, 0)
	var55 = 0.2
	HUD:WaitForChild("QuestDisplay").Position = UDim2.new(0, 0, var55, 0)
	for _, v in pairs(HUD:WaitForChild("RightPanel"):GetChildren()) do
		if v:IsA("Frame") then
			v.Size = UDim2.fromScale(0.325, 0.325)
			v.Title.Visible = false
			v.ImageLabel.Size = UDim2.fromScale(0.8, 0.8)
			v.ImageLabel.Position = UDim2.fromScale(0.5, 0.5)
		end
	end
	QuestsDisplay_2.Position = UDim2.fromScale(0, 0.3)
	QuestsDisplay_2.Title.UIStroke.Thickness = 1
	QuestsDisplay_2.Quests.QuestFrame.QuestName.UIStroke.Thickness = 1
	QuestsDisplay_2.Quests.QuestFrame.QuestName.UITextSizeConstraint.MaxTextSize = 30
	QuestsDisplay_2.Quests.QuestFrame.QuestStep.UIStroke.Thickness = 1
	QuestsDisplay_2.Quests.QuestFrame.QuestStep.UITextSizeConstraint.MaxTextSize = 20
	QuestsDisplay_2.Quests.TutorialFrame.QuestName.UIStroke.Thickness = 1
	QuestsDisplay_2.Quests.TutorialFrame.QuestName.UITextSizeConstraint.MaxTextSize = 30
	QuestsDisplay_2.Quests.TutorialFrame.QuestStep.UIStroke.Thickness = 1
	QuestsDisplay_2.Quests.TutorialFrame.QuestStep.UITextSizeConstraint.MaxTextSize = 20
	QuestsDisplay_2.Quests.SocialFrame.QuestName.UIStroke.Thickness = 1
	QuestsDisplay_2.Quests.SocialFrame.QuestName.UITextSizeConstraint.MaxTextSize = 30
	QuestsDisplay_2.Quests.SocialFrame.QuestStep.UIStroke.Thickness = 1
	QuestsDisplay_2.Quests.SocialFrame.QuestStep.UITextSizeConstraint.MaxTextSize = 20
	Crafting.Size = UDim2.new(0.7, 0, 0.7, 0)
	Crafting.CraftingGrid.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(0, 45, 0, 60)
	MainGui:WaitForChild("IslandSettings").Main.Size = UDim2.new(0.7, 0, 0.7, 0)
	Store.Main.Size = UDim2.new(0.55, 0, 0.935, 0)
	Stats.Size = UDim2.new(0.8, 0, 0.8, 0)
	Settings_2.Size = UDim2.new(0.45, 0, 1, 0)
	Chest_2.Storage.AnchorPoint = Vector2.new(1, 0.5)
	Chest_2.Storage.Position = UDim2.new(0.87, 0, 0.5, 0)
	Chest_2.Storage.Size = UDim2.new(0.25, 0, 0.6, 0)
	Chest_2.Storage.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(0.18, 0, 0.21, 0)
	Inventory.Main.Size = UDim2.new(0.5, 0, 0.675, 0)
	Inventory.Main.Backpack.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(0.14, 0, 0.19, 0)
	Collections_2.Size = UDim2.fromScale(0.75, 0.65)
	Collections_2.Grid.ScrollingFrame.UIGridLayout.CellSize = UDim2.fromScale(0.95, 0.8)
	MainGui:WaitForChild("ItemTooltip").Size = UDim2.fromScale(0.125, 0.1)
end
if GuiService_upvr:IsTenFootInterface() then
	HUD:WaitForChild("ToolBar").Size = UDim2.new(0.5, 0, 0.12, 0)
	HUD:WaitForChild("RightPanel").Size = UDim2.fromScale(0.115, 0.5)
	HUD:WaitForChild("RightPanel").Position = UDim2.fromScale(0.99, 0.4)
	HUD:WaitForChild("XPBar").Size = UDim2.new(0.375, 0, 0.05, 0)
	HUD:WaitForChild("HPBar").Size = UDim2.new(0.4, 0, 0.05, 0)
	HUD:WaitForChild("HPBar").Position = UDim2.new(0.5, 0, 0.85, 0)
	HUD:WaitForChild("CoinCounter").Size = UDim2.new(0.25, 0, 0.06, 0)
	HUD:WaitForChild("CoinCounter").Main.Size = UDim2.new(1, 0, 1, 0)
	HUD:WaitForChild("CoinCounter").Position = UDim2.new(0.925, 0, 0, 0)
	HUD:WaitForChild("CoinCounter").Main.Position = UDim2.new(0.05, 0, 0.5, 0)
	HUD:WaitForChild("CoinCounter").Main.Display.Size = UDim2.new(0.65, 0, 0.8, 0)
	HUD:WaitForChild("QuestDisplay").Position = UDim2.new(0, 0, 0.2, 0)
	HUD:WaitForChild("QuestDisplay").Size = UDim2.new(0.4, 0, 1, 0)
	HUD:WaitForChild("WarningsBox").Position = UDim2.new(0.5, 0, 0.75, 0)
	HUD:WaitForChild("LootNotifications").Position = UDim2.new(1, 0, 0.875, 0)
	Crafting.Size = UDim2.new(0.7, 0, 0.7, 0)
	Crafting.CraftingGrid.ScrollingFrame.UIGridLayout.CellSize = UDim2.new(0.3, 0, 0.4, 0)
	Store.Main.Size = UDim2.new(0.55, 0, 0.935, 0)
	Stats.Size = UDim2.new(0.8, 0, 0.8, 0)
	Settings_2.Size = UDim2.new(0.45, 0, 1, 0)
end
print("Island Block Count: "..tostring(#workspace.Island:GetChildren()))

Script name: ParticipantAdded
  - Script: 


Script name: ParticipantRemoved
  - Script: 


Script name: ParticipantsChanged
  - Script: 


Script name: PlayerRemoved
  - Script: 


Script name: VoiceEnabledChanged
  - Script: 


Script name: VoiceStateChanged
  - Script: 


Script name: Analytics
  - Script: 


Script name: AudioDeviceInputDebugger
  - Script: 


Script name: getIconVoiceIndicator
  - Script: 


Script name: getPermissions
  - Script: 


Script name: isVoiceServiceInitialized
  - Script: 


Script name: onClickedCameraIndicator
  - Script: 


Script name: onClickedLikelySpeakingBubble
  - Script: 


Script name: onClickedVoiceIndicator
  - Script: 


Script name: selfViewListenerChanged
  - Script: 


Script name: VoiceIndicator
  - Script: 


Script name: VoiceIndicatorFunc
  - Script: 


Script name: Constants
  - Script: 


Script name: createVoiceAbuseReportRequest
  - Script: 


Script name: GetFFlagDisableConsentModalForExistingUsers
  - Script: 


Script name: GetFFlagEnableConnectDisconnectPersistenceForReconnects
  - Script: 


Script name: GetFFlagOnlyEnableJoinVoiceInVoiceEnabledUniverses
  - Script: 


Script name: GlobalConfig
  - Script: 


Script name: displayCameraDeniedToast
  - Script: 


Script name: maybeAssert
  - Script: 


Script name: useVoiceState
  - Script: 


Script name: initVoiceChatStore
  - Script: 


Script name: Logger
  - Script: 


Script name: MockAppStorageService
  - Script: 


Script name: MockAvatarChatService
  - Script: 


Script name: voiceState
  - Script: 


Script name: ReportAbuseLogic
  - Script: 


Script name: VoiceChatServiceManager
  - Script: 


Script name: VoiceStateContext
  - Script: 


Script name: VoiceUsersByProximity
  - Script: 


Script name: isNewInGameMenuEnabled
  - Script: 


Script name: Feedback
  - Script: 


Script name: IncrementFeedbackSubmissionAttempts
  - Script: 


Script name: SetFeedbackFlowState
  - Script: 


Script name: SetFeedbackReason
  - Script: 


Script name: SetScreenSize
  - Script: 


Script name: ShowHelpModal
  - Script: 


Script name: ShowOnboardingModal
  - Script: 


Script name: FeedbackApp
  - Script: 


Script name: FeedbackBarHint
  - Script: 


Script name: FeedbackReportDialog
  - Script: 


Script name: FeedbackSubmissionToast
  - Script: 


Script name: HelpModal
  - Script: 


Script name: ModalDialog
  - Script: 


Script name: OnboardingModal
  - Script: 


Script name: Divider
  - Script: 


Script name: ThemedTextLabel
  - Script: 


Script name: RefinedFeedbackBar
  - Script: 


Script name: TextEntryField
  - Script: 


Script name: GlobalConfig
  - Script: 


Script name: PostFeedback
  - Script: 


Script name: Reducers
  - Script: 


Script name: common
  - Script: 


Script name: displayOptions
  - Script: 


Script name: feedbackFlowState
  - Script: 


Script name: Assets
  - Script: 


Script name: Constants
  - Script: 


Script name: SendFeedbackThunk
  - Script: 


Script name: ShowHelpModalThunk
  - Script: 


Script name: ShowOnboardingModalThunk
  - Script: 


Script name: SelfieView
  - Script: 


Script name: CameraStatusDot
  - Script: 


Script name: CameraStatusIcon
  - Script: 


Script name: FaceClone
  - Script: 


Script name: Window
  - Script: 


Script name: GetFFlagSelfieViewEnabled
  - Script: 


Script name: GetFFlagSelfieViewFixMigration
  - Script: 


Script name: GetFFlagSelfieViewGyroMigration
  - Script: 


Script name: useCameraOn
  - Script: 


Script name: useLocalPlayer
  - Script: 


Script name: useTooltipDismissal
  - Script: 


Script name: useTrackerMessage
  - Script: 


Script name: useTrackerMode
  - Script: 


Script name: FaceChatUtils
  - Script: 


Script name: ModelUtils
  - Script: 


Script name: SizingUtils
  - Script: 


Script name: ExperienceMenuABTestManager
  - Script: 


Script name: NewChat
  - Script: 


Script name: InGameMenu
  - Script: 


Script name: CancelLeavingGame
  - Script: 


Script name: CloseNativeClosePrompt
  - Script: 


Script name: CloseReportDialog
  - Script: 


Script name: CloseReportSentDialog
  - Script: 


Script name: DecrementControllerBar
  - Script: 


Script name: IncrementControllerBar
  - Script: 


Script name: NavigateBack
  - Script: 


Script name: OpenNativeClosePrompt
  - Script: 


Script name: OpenReportDialog
  - Script: 


Script name: OpenReportSentDialog
  - Script: 


Script name: ReceivedUserInviteStatus
  - Script: 


Script name: SetControlLayout
  - Script: 


Script name: SetControllerBarHeight
  - Script: 


Script name: SetCurrentPage
  - Script: 


Script name: SetCurrentZone
  - Script: 


Script name: SetFriendStatus
  - Script: 


Script name: SetGameNameAndDescription
  - Script: 


Script name: SetInputType
  - Script: 


Script name: SetInspectMenuEnabled
  - Script: 


Script name: SetLocaleId
  - Script: 


Script name: SetMainPageMoreMenuOpen
  - Script: 


Script name: SetMenuIconTooltipOpen
  - Script: 


Script name: SetMenuOpen
  - Script: 


Script name: SetRespawnBehavior
  - Script: 


Script name: SetRespawning
  - Script: 


Script name: SetScreenSize
  - Script: 


Script name: SetVideoRecording
  - Script: 


Script name: StartLeavingGame
  - Script: 


Script name: App
  - Script: 


Script name: AssetImage
  - Script: 


Script name: BarOnTopScrollingFrame
  - Script: 


Script name: BlurredModalPortal
  - Script: 


Script name: ConfirmationDialog
  - Script: 


Script name: Connection
  - Script: 


Script name: FocusHandler
  - Script: 


Script name: FocusHandlerContext
  - Script: 


Script name: FocusHandlerContextProvider
  - Script: 


Script name: FocusHighlightManager
  - Script: 


Script name: FriendStatusConnector
  - Script: 


Script name: LastInputTypeConnector
  - Script: 


Script name: MouseOverrideManager
  - Script: 


Script name: NativeCloseEventConnector
  - Script: 


Script name: RootedConnection
  - Script: 


Script name: VideoRecordConnector
  - Script: 


Script name: ControlsPage
  - Script: 


Script name: ControlEntry
  - Script: 


Script name: ControlEntryHeader
  - Script: 


Script name: ControlLayoutContainer
  - Script: 


Script name: GamepadControls
  - Script: 


Script name: KeyboardControls
  - Script: 


Script name: TouchControls
  - Script: 


Script name: VRGamepadControls
  - Script: 


Script name: ControlLayoutSetter
  - Script: 


Script name: Divider
  - Script: 


Script name: DropDownSelection
  - Script: 


Script name: EducationalPopup
  - Script: 


Script name: EducationalPopupDialog
  - Script: 


Script name: FullscreenTitleBar
  - Script: 


Script name: GameIcon
  - Script: 


Script name: GameIconHeader
  - Script: 


Script name: AdvancedPage
  - Script: 


Script name: AutoPropertyToggleEntry
  - Script: 


Script name: BasicPage
  - Script: 


Script name: CameraModeEntry
  - Script: 


Script name: CameraSensitivityEntry
  - Script: 


Script name: CategoryHeader
  - Script: 


Script name: ComfortSettingsEntry
  - Script: 


Script name: DeveloperLockLabel
  - Script: 


Script name: DeviceSelectionEntry
  - Script: 


Script name: GraphicsQualityEntry
  - Script: 


Script name: InputLabel
  - Script: 


Script name: MovementModeEntry
  - Script: 


Script name: SafetyBubbleModeEntry
  - Script: 


Script name: SliderEntry
  - Script: 


Script name: ToggleEntry
  - Script: 


Script name: VersionReporter
  - Script: 


Script name: VolumeEntry
  - Script: 


Script name: VRComfortAutoToggleEntry
  - Script: 


Script name: VRComfortSettingsPage
  - Script: 


Script name: getGameIconRequestSize
  - Script: 


Script name: IGMControllerBar
  - Script: 


Script name: IGMControllerBar2
  - Script: 


Script name: IGMMainPageControllerBar
  - Script: 


Script name: IGMRespawnControllerBar
  - Script: 


Script name: InfoDialog
  - Script: 


Script name: InformationalDialog
  - Script: 


Script name: InviteFriendsPage
  - Script: 


Script name: AddFriendsNow
  - Script: 


Script name: InviteFriendsList
  - Script: 


Script name: LoadingFriendsError
  - Script: 


Script name: SearchBox
  - Script: 


Script name: SendInviteButton
  - Script: 


Script name: KeyLabel
  - Script: 


Script name: LeaveGameDialog
  - Script: 


Script name: MainPage
  - Script: 


Script name: MenuIconTooltip
  - Script: 


Script name: OpenMenuButton
  - Script: 


Script name: PaddedScrollFrame
  - Script: 


Script name: Page
  - Script: 


Script name: PageContainer
  - Script: 


Script name: PageNavigation
  - Script: 


Script name: PageNavigationWatcher
  - Script: 


Script name: Pages
  - Script: 


Script name: LeaveGamePrompt
  - Script: 


Script name: LeavePrompt
  - Script: 


Script name: LeaveToAppPrompt
  - Script: 


Script name: InitalPage
  - Script: 


Script name: PlayersPage
  - Script: 


Script name: PlayerCell
  - Script: 


Script name: PlayerContextualMenu
  - Script: 


Script name: PlayerLabel
  - Script: 


Script name: PlayerLabelV2
  - Script: 


Script name: PlayerMoreButton
  - Script: 


Script name: PointerLabel
  - Script: 


Script name: ReportPage
  - Script: 


Script name: FillCircle
  - Script: 


Script name: GameLabel
  - Script: 


Script name: ReportButton
  - Script: 


Script name: ReportDialog
  - Script: 


Script name: ReportList
  - Script: 


Script name: ReportSentDialog
  - Script: 


Script name: TextEntryField
  - Script: 


Script name: RespawnDialog
  - Script: 


Script name: SearchBar
  - Script: 


Script name: SideNavigation
  - Script: 


Script name: CloseMenuButton
  - Script: 


Script name: GameIconButton
  - Script: 


Script name: HomeButton
  - Script: 


Script name: SystemMenuButton
  - Script: 


Script name: Slider
  - Script: 


Script name: SliderWithInput
  - Script: 


Script name: ThemedButton
  - Script: 


Script name: ThemedTextLabel
  - Script: 


Script name: ToggleSwitch
  - Script: 


Script name: ViewportOverlay
  - Script: 


Script name: ZonePortal
  - Script: 


Script name: createStore
  - Script: 


Script name: Direction
  - Script: 


Script name: FFlagAlwaysShowDisplayNameInExpMenu
  - Script: 


Script name: FFlagFixExitDialogBlockVRView
  - Script: 


Script name: FFlagFixSafetyBubbleWidth
  - Script: 


Script name: FFlagLuaMenuPerfImprovements
  - Script: 


Script name: FFlagRecordRecording
  - Script: 


Script name: GetFFlagCleanUpFullscreenTitleBarPromiseOnUnmount
  - Script: 


Script name: GetFFlagFixFullscreenTitleBarPromiseCancel
  - Script: 


Script name: GetFFlagFullscreenTitleBarInjectGameServices
  - Script: 


Script name: GetFFlagIGMGamepadSelectionHistory
  - Script: 


Script name: GetFFlagIGMRefactorPlayerContextualMenuGamepadSupport
  - Script: 


Script name: GetFFlagSideNavControllerBar
  - Script: 


Script name: GetFFlagTruncateDeviceSelection
  - Script: 


Script name: GetFIntFullscreenTitleBarTriggerDelayMillis
  - Script: 


Script name: GlobalConfig
  - Script: 


Script name: InGameMenuPolicy
  - Script: 


Script name: jest.config
  - Script: 


Script name: Localization
  - Script: 


Script name: LocalizationConsumer
  - Script: 


Script name: LocalizationContext
  - Script: 


Script name: LocalizationProvider
  - Script: 


Script name: withLocalization
  - Script: 


Script name: MockUserGameSettings
  - Script: 


Script name: httpRequest
  - Script: 


Script name: DEPRECATED_ChatSendGameLinkMessage
  - Script: 


Script name: DEPRECATED_ChatSendMessage
  - Script: 


Script name: DEPRECATED_ChatStartOneToOneConversation
  - Script: 


Script name: GetIcons
  - Script: 


Script name: GetPlaceInfos
  - Script: 


Script name: Url
  - Script: 


Script name: reducer
  - Script: 


Script name: displayOptions
  - Script: 


Script name: friends
  - Script: 


Script name: gameInfo
  - Script: 


Script name: invites
  - Script: 


Script name: nativeClosePrompt
  - Script: 


Script name: navigationReducer
  - Script: 


Script name: report
  - Script: 


Script name: respawn
  - Script: 


Script name: Assets
  - Script: 


Script name: Constants
  - Script: 


Script name: Controls
  - Script: 


Script name: GetImageSetData
  - Script: 


Script name: Images
  - Script: 


Script name: bindMenuActions
  - Script: 


Script name: registerSetCores
  - Script: 


Script name: requestGameNameAndDescription
  - Script: 


Script name: withInt
  - Script: 


Script name: CloseMenu
  - Script: 


Script name: InviteUserToPlaceId
  - Script: 


Script name: NavigateUp
  - Script: 


Script name: OpenEducationalPopup
  - Script: 


Script name: OpenMenu
  - Script: 


Script name: OpenSystemMenu
  - Script: 


Script name: RespawnPlayer
  - Script: 


Script name: SendReport
  - Script: 


Script name: constructGameLinkUrl
  - Script: 


Script name: divideTransparency
  - Script: 


Script name: ExternalEventConnection
  - Script: 


Script name: LeaveGame
  - Script: 


Script name: PlayerSearchPredicate
  - Script: 


Script name: Promise
  - Script: 


Script name: SendAnalytics
  - Script: 


Script name: UserLocalStore
  - Script: 


Script name: AdTeleportPromptHandler
  - Script: 


Script name: AdTeleportPromptUI
  - Script: 


Script name: PlayerPermissionsModule
  - Script: 


Script name: IsExperienceMenuABTestEnabled
  - Script: 


Script name: LuobuWarningToast
  - Script: 


Script name: LuobuWarningToastComponent
  - Script: 


Script name: KeyboardUINavigation
  - Script: 


Script name: EmotesChanged
  - Script: 


Script name: EquippedEmotesChanged
  - Script: 


Script name: FocusSegment
  - Script: 


Script name: HideError
  - Script: 


Script name: HideMenu
  - Script: 


Script name: NumberEmotesLoadedChanged
  - Script: 


Script name: SetGuiInset
  - Script: 


Script name: SetLayout
  - Script: 


Script name: SetLocale
  - Script: 


Script name: ShowError
  - Script: 


Script name: ShowMenu
  - Script: 


Script name: Analytics
  - Script: 


Script name: EmotesButtons
  - Script: 


Script name: EmotesMenu
  - Script: 


Script name: EmotesWheel
  - Script: 


Script name: ErrorMessage
  - Script: 


Script name: SelectionEffect
  - Script: 


Script name: SelectionGradient
  - Script: 


Script name: SlotNumbers
  - Script: 


Script name: WheelBackground
  - Script: 


Script name: WheelText
  - Script: 


Script name: Constants
  - Script: 


Script name: EmotesMenuMaster
  - Script: 


Script name: Large
  - Script: 


Script name: Small
  - Script: 


Script name: TenFoot
  - Script: 


Script name: DisplayOptions
  - Script: 


Script name: EmotesMenuReducer
  - Script: 


Script name: EmotesPage
  - Script: 


Script name: EmotesWheel
  - Script: 


Script name: Layout
  - Script: 


Script name: Locale
  - Script: 


Script name: OpenMenu
  - Script: 


Script name: PlayEmote
  - Script: 


Script name: CanPlayEmotes
  - Script: 


Script name: GetSegmentFromPosition
  - Script: 


Script name: MaybeSendEmoteFailureAnalyticsFromPlayer
  - Script: 


Script name: AbuseReportMenu
  - Script: 


Script name: collectAnalyticsParameters
  - Script: 


Script name: ReportAbuseAnalytics
  - Script: 


Script name: AbuseReportMenuNew
  - Script: 


Script name: Constants
  - Script: 


Script name: ReportExperienceMenuItemsContainer
  - Script: 


Script name: ReportPersonMenuItemsContainer
  - Script: 


Script name: createCleanup
  - Script: 


Script name: getMenuItemDimensions
  - Script: 


Script name: ButtonReportMenuItem
  - Script: 


Script name: DropdownReportMenuItem
  - Script: 


Script name: FreeCommentsMenuItem
  - Script: 


Script name: ModalBasedSelectorMenuItem
  - Script: 


Script name: ReportMenuItem
  - Script: 


Script name: ModalBasedSelector
  - Script: 


Script name: ModalBasedSelectorDialogController
  - Script: 


Script name: ModalBaseSelectorDialog
  - Script: 


Script name: ReportTextEntry
  - Script: 


Script name: ReportTypeSelector
  - Script: 


Script name: SelectInSceneReportMenu
  - Script: 


Script name: Types
  - Script: 


Script name: GetFFlagAbuseReportShouldUseCanDisplayPeoplesUsernamesAppPolicy
  - Script: 


Script name: GetFFlagAbuseReportTabHideShowRetimingEnabled
  - Script: 


Script name: GetFFlagAddAbuseReportMenuCoreScriptsProvider
  - Script: 


Script name: GetFFlagGetHumanoidDescriptionUpdates
  - Script: 


Script name: GetFFlagModalSelectorCloseButton
  - Script: 


Script name: GetFFlagTranslatorUseInAbuseMethods
  - Script: 


Script name: isAbuseReportMenuOpenCloseSignalEnabled
  - Script: 


Script name: useCaptureScreenshot
  - Script: 


Script name: useHideForScreenshot
  - Script: 


Script name: useReportAnythingWithScreenshot
  - Script: 


Script name: TnSIXPWrapper
  - Script: 


Script name: jest.config
  - Script: 


Script name: AbuseReasonMenuConfig
  - Script: 


Script name: FreeFormCommentMenuConfig
  - Script: 


Script name: OptionalAttachScreenshotMenuConfig
  - Script: 


Script name: ReportExperienceMenuItemConfigList
  - Script: 


Script name: SubmitReportButtonMenuConfig
  - Script: 


Script name: getMenuItemsFromConfigs
  - Script: 


Script name: getToastMessageFromAbuseReason
  - Script: 


Script name: AbuseReasonMenuConfig
  - Script: 


Script name: AbuseReasonModalSelectorMenuConfig
  - Script: 


Script name: FreeFormCommentMenuConfig
  - Script: 


Script name: MethodOfAbuseModalMenuConfig
  - Script: 


Script name: OptionalAttachScreenshotMenuConfig
  - Script: 


Script name: PlayerModalSelectorMenuConfig
  - Script: 


Script name: ReportPlayerMenuItemConfigList
  - Script: 


Script name: SubmitReportButtonMenuConfig
  - Script: 


Script name: analyticsReducer
  - Script: 


Script name: reportAnythingReducer
  - Script: 


Script name: reportExperienceUIStateReducer
  - Script: 


Script name: reportPersonUIStateReducer
  - Script: 


Script name: AnnotationModal
  - Script: 


Script name: Divider
  - Script: 


Script name: RestartScreenshotDialog
  - Script: 


Script name: ScreenshotDialog
  - Script: 


Script name: ScreenshotDialogLandscapeModeHeader
  - Script: 


Script name: ScreenshotDialogPortraitModeHeader
  - Script: 


Script name: ScreenshotFlowStepHandler
  - Script: 


Script name: ScreenshotFlowStepHandlerContainer
  - Script: 


Script name: ScreenshotHighlighter
  - Script: 


Script name: ScreenshotReviewDialog
  - Script: 


Script name: Assets
  - Script: 


Script name: Constants
  - Script: 


Script name: AbuseReportBuilder
  - Script: 


Script name: GetHumanoidDescription
  - Script: 


Script name: ReportAnythingAnalytics
  - Script: 


Script name: VirtualKeyboardMonitor
  - Script: 


Script name: getAvailableMethodsOfAbuse
  - Script: 


Script name: getMenuItemSizings
  - Script: 


Script name: handlePreselectedPlayer
  - Script: 


Script name: isInSelectInSceneReportMenuOverrideList
  - Script: 


Script name: isShowSelectInSceneReportMenu
  - Script: 


Script name: ActionBindingsTab
  - Script: 


Script name: AggregatedData
  - Script: 


Script name: ApolloClient
  - Script: 


Script name: ApolloClient
  - Script: 


Script name: ContextMenuGui
  - Script: 


Script name: ContextMenuItems
  - Script: 


Script name: ContextMenuUtil
  - Script: 


Script name: PlayerCarousel
  - Script: 


Script name: SelectedCharacterIndicator
  - Script: 


Script name: ThemeHandler
  - Script: 


Script name: ErrorPrompt
  - Script: 


Script name: AvatarEditorPrompts
  - Script: 


Script name: AddAnalyticsInfo
  - Script: 


Script name: CloseOpenPrompt
  - Script: 


Script name: CreateOutfitConfirmed
  - Script: 


Script name: GameNameFetched
  - Script: 


Script name: OpenPrompt
  - Script: 


Script name: ScreenSizeUpdated
  - Script: 


Script name: AvatarEditorPromptsPolicy
  - Script: 


Script name: AvatarEditorPromptsApp
  - Script: 


Script name: Connection
  - Script: 


Script name: ContextActionsBinder
  - Script: 


Script name: HumanoidViewport
  - Script: 


Script name: ItemsList
  - Script: 


Script name: ListEntry
  - Script: 


Script name: ListSection
  - Script: 


Script name: AllowInventoryReadAccessPrompt
  - Script: 


Script name: CreateOutfitPrompt
  - Script: 


Script name: DeleteOutfitPrompt
  - Script: 


Script name: EnterOutfitNamePrompt
  - Script: 


Script name: PromptWithAvatarViewport
  - Script: 


Script name: PromptWithTextField
  - Script: 


Script name: RenameOutfitPrompt
  - Script: 


Script name: SaveAvatarPrompt
  - Script: 


Script name: SetFavoritePrompt
  - Script: 


Script name: UpdateOutfitPrompt
  - Script: 


Script name: ConnectAvatarEditorServiceEvents
  - Script: 


Script name: GetAssetIdsFromDescription
  - Script: 


Script name: GetAssetNamesForIds
  - Script: 


Script name: GetAssetsDifference
  - Script: 


Script name: GetConformedHumanoidDescription
  - Script: 


Script name: GetCurrentHumanoidDescription
  - Script: 


Script name: GetOutfitName
  - Script: 


Script name: PromptType
  - Script: 


Script name: Reducer
  - Script: 


Script name: AnalyticsInfo
  - Script: 


Script name: GameName
  - Script: 


Script name: PromptInfo
  - Script: 


Script name: ScreenSize
  - Script: 


Script name: RoactGlobalConfig
  - Script: 


Script name: CloseOpenPrompt
  - Script: 


Script name: GetGameName
  - Script: 


Script name: OpenDeleteOutfitPrompt
  - Script: 


Script name: OpenRenameOutfitPrompt
  - Script: 


Script name: OpenSaveAvatarPrompt
  - Script: 


Script name: OpenSetFavoritePrompt
  - Script: 


Script name: OpenUpdateOutfitPrompt
  - Script: 


Script name: PerformCreateOutfit
  - Script: 


Script name: PerformDeleteOutfit
  - Script: 


Script name: PerformRenameOutfit
  - Script: 


Script name: PerformSaveAvatar
  - Script: 


Script name: PerformSetFavorite
  - Script: 


Script name: PerformUpdateOutfit
  - Script: 


Script name: SetAllowInventoryReadAccess
  - Script: 


Script name: SignalCreateOutfitPermissionDenied
  - Script: 


Script name: SignalDeleteOutfitPermissionDenied
  - Script: 


Script name: SignalRenameOutfitPermissionDenied
  - Script: 


Script name: SignalSaveAvatarPermissionDenied
  - Script: 


Script name: SignalSetFavoritePermissionDenied
  - Script: 


Script name: SignalUpdateOutfitPermissionDenied
  - Script: 


Script name: ContactList
  - Script: 


Script name: CloseCFM
  - Script: 


Script name: CloseDialog
  - Script: 


Script name: OpenOrUpdateCFM
  - Script: 


Script name: OpenOrUpdateDialog
  - Script: 


Script name: SetCurrentPage
  - Script: 


Script name: SetCurrentTag
  - Script: 


Script name: UpdateLastFriend
  - Script: 


Script name: Analytics
  - Script: 


Script name: EventNamesEnum
  - Script: 


Script name: EventStreamActionList
  - Script: 


Script name: useAnalytics
  - Script: 


Script name: CallBar
  - Script: 


Script name: CallBarContainer
  - Script: 


Script name: CallDialogContainer
  - Script: 


Script name: CallHistoryContainer
  - Script: 


Script name: CallHistoryItem
  - Script: 


Script name: ContactListApp
  - Script: 


Script name: ConfigureFriendMenu
  - Script: 


Script name: Constants
  - Script: 


Script name: NoItemView
  - Script: 


Script name: ContactListContainer
  - Script: 


Script name: ContactListHeader
  - Script: 


Script name: ContactListSearchBar
  - Script: 


Script name: FriendListContainer
  - Script: 


Script name: FriendListItem
  - Script: 


Script name: SectionHeader
  - Script: 


Script name: PlayerMenuContainer
  - Script: 


Script name: ContactList.storybook
  - Script: 


Script name: Context
  - Script: 


Script name: ContactListContext
  - Script: 


Script name: dependencies
  - Script: 


Script name: CallState
  - Script: 


Script name: ErrorType
  - Script: 


Script name: FriendAction
  - Script: 


Script name: Pages
  - Script: 


Script name: useStartCallCallback
  - Script: 


Script name: initCall
  - Script: 


Script name: Reducer
  - Script: 


Script name: Dialog
  - Script: 


Script name: LastRemovedFriend
  - Script: 


Script name: Navigation
  - Script: 


Script name: PlayerMenu
  - Script: 


Script name: teleportToRootPlace
  - Script: 


Script name: EmoteHelper
  - Script: 


Script name: BackpackScript
  - Script: 


Script name: CaptureMaster
  - Script: 


Script name: CaptureNotification
  - Script: 


Script name: CapturesApp
  - Script: 


Script name: ActionCreator
  - Script: 


Script name: AddGameStat
  - Script: 


Script name: AddPlayer
  - Script: 


Script name: AddPlayerToTeam
  - Script: 


Script name: AddTeam
  - Script: 


Script name: ClosePlayerDropDown
  - Script: 


Script name: OpenPlayerDropDown
  - Script: 


Script name: RemoveGameStat
  - Script: 


Script name: RemovePlayer
  - Script: 


Script name: RemovePlayerFromTeam
  - Script: 


Script name: RemoveTeam
  - Script: 


Script name: SetGameStatAddId
  - Script: 


Script name: SetGameStatText
  - Script: 


Script name: SetHasPermissionToVoiceChat
  - Script: 


Script name: SetInspectMenuEnabled
  - Script: 


Script name: SetIsUsingGamepad
  - Script: 


Script name: SetMinimized
  - Script: 


Script name: SetPerformanceStatsVisible
  - Script: 


Script name: SetPlayerAvatarIcon
  - Script: 


Script name: SetPlayerFollowRelationship
  - Script: 


Script name: SetPlayerFriendStatus
  - Script: 


Script name: SetPlayerIsBlocked
  - Script: 


Script name: SetPlayerIsCreator
  - Script: 


Script name: SetPlayerIsFollowing
  - Script: 


Script name: SetPlayerIsLocalPlayer
  - Script: 


Script name: SetPlayerLeaderstat
  - Script: 


Script name: SetPlayerListEnabled
  - Script: 


Script name: SetPlayerListVisibility
  - Script: 


Script name: SetPlayerSpecialGroupIcon
  - Script: 


Script name: SetScreenSize
  - Script: 


Script name: SetSettings
  - Script: 


Script name: SetSmallTouchDevice
  - Script: 


Script name: SetSubjectToChinaPolicies
  - Script: 


Script name: SetTeamColor
  - Script: 


Script name: SetTeamName
  - Script: 


Script name: SetTempHideKey
  - Script: 


Script name: SetTenFootInterface
  - Script: 


Script name: ContextActionsBinder
  - Script: 


Script name: CoreGuiConnector
  - Script: 


Script name: EventConnection
  - Script: 


Script name: EventConnections
  - Script: 


Script name: GuiServiceConnector
  - Script: 


Script name: LayoutValues
  - Script: 


Script name: LayoutValuesContext
  - Script: 


Script name: LeaderstatsConnector
  - Script: 


Script name: PlayerServiceConnector
  - Script: 


Script name: ScreenSizeConnector
  - Script: 


Script name: SocialConnector
  - Script: 


Script name: TeamServiceConnector
  - Script: 


Script name: TopStatConnector
  - Script: 


Script name: UserInputServiceConnector
  - Script: 


Script name: CellExtender
  - Script: 


Script name: DropDownButton
  - Script: 


Script name: DropDownButtonAnimator
  - Script: 


Script name: DropDownPlayerHeader
  - Script: 


Script name: EntryFrame
  - Script: 


Script name: FriendDropDownButton
  - Script: 


Script name: PlayerDropDown
  - Script: 


Script name: PlayerEntry
  - Script: 


Script name: PlayerListApp
  - Script: 


Script name: PlayerListDisplay
  - Script: 


Script name: PlayerListSorter
  - Script: 


Script name: PlayerNameTag
  - Script: 


Script name: StatEntry
  - Script: 


Script name: TeamEntry
  - Script: 


Script name: TitleBar
  - Script: 


Script name: IconButton
  - Script: 


Script name: PlayerIcon
  - Script: 


Script name: TenFootSideBar
  - Script: 


Script name: DropDownButton
  - Script: 


Script name: DropDownButtonAnimator
  - Script: 


Script name: DropDownPlayerHeader
  - Script: 


Script name: FriendDropDownButton
  - Script: 


Script name: PlayerDropDown
  - Script: 


Script name: PlayerEntry
  - Script: 


Script name: PlayerListApp
  - Script: 


Script name: PlayerListDisplay
  - Script: 


Script name: PlayerListSorter
  - Script: 


Script name: PlayerNameTag
  - Script: 


Script name: StatEntry
  - Script: 


Script name: TeamEntry
  - Script: 


Script name: TitleBar
  - Script: 


Script name: CreateLayoutValues
  - Script: 


Script name: FFlagLeaderstatsWithASideOfClient
  - Script: 


Script name: FFlagPlayerListFixBackgroundFlicker
  - Script: 


Script name: FFlagPlayerListFixMobileScrolling
  - Script: 


Script name: GetFFlagFixDropDownVisibility
  - Script: 


Script name: FormatStatString
  - Script: 


Script name: GetFakeNeutralTeam
  - Script: 


Script name: GlobalConfig
  - Script: 


Script name: usePlayerCombinedName
  - Script: 


Script name: PlayerListInitialVisibleState
  - Script: 


Script name: PlayerListManager
  - Script: 


Script name: PlayerListMaster
  - Script: 


Script name: PlayerListSwitcher
  - Script: 


Script name: PlayerSorting
  - Script: 


Script name: DisplayOptions
  - Script: 


Script name: GameStats
  - Script: 


Script name: PlayerDropDown
  - Script: 


Script name: PlayerIconInfo
  - Script: 


Script name: PlayerKeys
  - Script: 


Script name: PlayerRelationship
  - Script: 


Script name: Players
  - Script: 


Script name: PlayerStats
  - Script: 


Script name: PlayerTeam
  - Script: 


Script name: Reducer
  - Script: 


Script name: ScreenSize
  - Script: 


Script name: Settings
  - Script: 


Script name: TeamColors
  - Script: 


Script name: TeamNames
  - Script: 


Script name: Teams
  - Script: 


Script name: TestProviders
  - Script: 


Script name: BlockPlayer
  - Script: 


Script name: MakePlayerInfoRequests
  - Script: 


Script name: RequestFriendship
  - Script: 


Script name: UnblockPlayer
  - Script: 


Script name: StyleWidgets
  - Script: 


Script name: ChatSelector
  - Script: 


Script name: PromptCreator
  - Script: 


Script name: ChatUtil
  - Script: 


Script name: Chrome
  - Script: 


Script name: Analytics
  - Script: 


Script name: ChromeAnalytics
  - Script: 


Script name: OcclusionMetricsManager
  - Script: 


Script name: Tracker
  - Script: 


Script name: useChromeMenuItems
  - Script: 


Script name: useChromePeekId
  - Script: 


Script name: useChromePeekItems
  - Script: 


Script name: useChromeWindowItems
  - Script: 


Script name: useCoreGuiEnabled
  - Script: 


Script name: useHealthBinding
  - Script: 


Script name: useMappedObservableValue
  - Script: 


Script name: useMappedObservableValueBinding
  - Script: 


Script name: useMappedSignal
  - Script: 


Script name: useNotificationCount
  - Script: 


Script name: useObservableValue
  - Script: 


Script name: useTimeHysteresis
  - Script: 


Script name: useTopbarInsetHeight
  - Script: 


Script name: useWindowSize
  - Script: 


Script name: useWindowSizeIsLarge
  - Script: 


Script name: Peek
  - Script: 


Script name: IntegrationRow
  - Script: 


Script name: Peek
  - Script: 


Script name: Service
  - Script: 


Script name: ChromeService
  - Script: 


Script name: ChromeUtils
  - Script: 


Script name: ContainerSlotSignal
  - Script: 


Script name: KeepOutAreasHandler
  - Script: 


Script name: LocalStore
  - Script: 


Script name: PeekService
  - Script: 


Script name: Types
  - Script: 


Script name: ViewportUtil
  - Script: 


Script name: WindowSizeSignal
  - Script: 


Script name: Unibar
  - Script: 


Script name: ContainerHost
  - Script: 


Script name: IconHost
  - Script: 


Script name: WindowHost
  - Script: 


Script name: Constants
  - Script: 


Script name: SubMenu
  - Script: 


Script name: SubMenuContext
  - Script: 


Script name: UnibarMenu
  - Script: 


Script name: UnibarMenuWrapper
  - Script: 


Script name: WindowManager
  - Script: 


Script name: debounce
  - Script: 


Script name: GetStyleTokens
  - Script: 


Script name: shouldRejectMultiTouch
  - Script: 


Script name: ConfigureChrome
  - Script: 


Script name: Enabled
  - Script: 


Script name: GetFFlagAddChromeActivatedEvents
  - Script: 


Script name: GetFFlagAppChatInExpConnectIconEnableSquadIndicator
  - Script: 


Script name: GetFFlagAppChatInExpConnectIconRedesign
  - Script: 


Script name: GetFFlagChromeSelfViewIgnoreCoreGui
  - Script: 


Script name: GetFFlagChromeSupportSocialService
  - Script: 


Script name: GetFFlagChromeTrackWindowPosition
  - Script: 


Script name: GetFFlagChromeTrackWindowStatus
  - Script: 


Script name: GetFFlagDisableSelfViewDefaultOpen
  - Script: 


Script name: GetFFlagEnableSongbirdInChrome
  - Script: 


Script name: GetFFlagEnableSongbirdPeek
  - Script: 


Script name: GetFFlagFixCapturesAvailability
  - Script: 


Script name: GetFFlagFixMicSelection
  - Script: 


Script name: GetFFlagShouldShowMusicFtuxTooltip
  - Script: 


Script name: GetFFlagShouldShowMusicFtuxTooltipXTimes
  - Script: 


Script name: GetFFlagShouldShowSimpleMusicFtuxTooltip
  - Script: 


Script name: GetFFlagSongbirdDisableExperienceAccess
  - Script: 


Script name: GetFFlagTweakedMicPinning
  - Script: 


Script name: GetFFlagUnpinUnavailable
  - Script: 


Script name: GetFFlagUseNewUnibarIcon
  - Script: 


Script name: GetFIntMusicFtuxDismissDelayMs
  - Script: 


Script name: GetFIntMusicFtuxShowDelayMs
  - Script: 


Script name: GetFIntRobloxConnectFtuxDismissDelayMs
  - Script: 


Script name: GetFIntRobloxConnectFtuxShowDelayMs
  - Script: 


Script name: GetFStringConnectTooltipLocalStorageKey
  - Script: 


Script name: GetFStringMusicTooltipLocalStorageKey
  - Script: 


Script name: GetFStringMusicTooltipLocalStorageKey_v2
  - Script: 


Script name: GetShouldShowPlatformChatBasedOnPolicy
  - Script: 


Script name: Integrations
  - Script: 


Script name: CapturesEntrypoint
  - Script: 


Script name: Chat
  - Script: 


Script name: ChromeIntegrationUtils
  - Script: 


Script name: CommonFtuxTooltip
  - Script: 


Script name: CommonIcon
  - Script: 


Script name: ConnectIcon
  - Script: 


Script name: ConnectIconDropdown
  - Script: 


Script name: ConnectIconUnibar
  - Script: 


Script name: isConnectDropdownEnabled
  - Script: 


Script name: isConnectUnibarEnabled
  - Script: 


Script name: registerConnectIntegration
  - Script: 


Script name: DummyContainer
  - Script: 


Script name: DummyWindow
  - Script: 


Script name: DummyWindow2
  - Script: 


Script name: FtuxTooltipAnchor
  - Script: 


Script name: JoinVoice
  - Script: 


Script name: JoinVoiceBinder
  - Script: 


Script name: Constants
  - Script: 


Script name: LikeButton
  - Script: 


Script name: MusicEntrypoint
  - Script: 


Script name: MusicIcon
  - Script: 


Script name: MusicPlayingIcon
  - Script: 


Script name: OverflowButton
  - Script: 


Script name: PeekTrackDetails
  - Script: 


Script name: shouldUseSmallPeek
  - Script: 


Script name: Songbird
  - Script: 


Script name: OverflowMenu
  - Script: 


Script name: Constants
  - Script: 


Script name: PartyMic
  - Script: 


Script name: PartyMicBinder
  - Script: 


Script name: PartyMicIcon
  - Script: 


Script name: usePartyIcon
  - Script: 


Script name: PeekCloseButton
  - Script: 


Script name: RedVoiceDot
  - Script: 


Script name: SelfieView
  - Script: 


Script name: ToggleMic
  - Script: 


Script name: TrustAndSafety
  - Script: 


Script name: UnibarMenuToggleButton
  - Script: 


Script name: UnibarMenuToggleButtonV2
  - Script: 


Script name: Service
  - Script: 


Script name: PurchasePrompt
  - Script: 


Script name: AccountInfoReceived
  - Script: 


Script name: BalanceInfoRecieved
  - Script: 


Script name: BundleProductInfoReceived
  - Script: 


Script name: CompleteRequest
  - Script: 


Script name: ErrorOccurred
  - Script: 


Script name: makeActionCreator
  - Script: 


Script name: PremiumInfoRecieved
  - Script: 


Script name: ProductInfoReceived
  - Script: 


Script name: PromptNativeUpsell
  - Script: 


Script name: PurchaseCompleteRecieved
  - Script: 


Script name: RequestAssetPurchase
  - Script: 


Script name: RequestAvatarCreationFeePurchase
  - Script: 


Script name: RequestBundlePurchase
  - Script: 


Script name: RequestGamepassPurchase
  - Script: 


Script name: RequestPremiumPurchase
  - Script: 


Script name: RequestProductPurchase
  - Script: 


Script name: RequestSubscriptionPurchase
  - Script: 


Script name: SetABVariation
  - Script: 


Script name: SetButtonState
  - Script: 


Script name: SetGamepadEnabled
  - Script: 


Script name: SetProduct
  - Script: 


Script name: SetPromptState
  - Script: 


Script name: SetPurchaseFlow
  - Script: 


Script name: SetWindowState
  - Script: 


Script name: StartHidingPrompt
  - Script: 


Script name: StartPurchase
  - Script: 


Script name: SubscriptionPurchaseInfoReceived
  - Script: 


Script name: BrowserPurchaseFinishedConnector
  - Script: 


Script name: EventConnections
  - Script: 


Script name: ExternalEventConnection
  - Script: 


Script name: InputTypeManager
  - Script: 


Script name: LayoutValuesConsumer
  - Script: 


Script name: LayoutValuesContext
  - Script: 


Script name: LayoutValuesProvider
  - Script: 


Script name: LocalizationContext
  - Script: 


Script name: LocalizationContextConsumer
  - Script: 


Script name: LocalizationContextProvider
  - Script: 


Script name: MarketplaceServiceEventConnector
  - Script: 


Script name: MultiTextLocalizer
  - Script: 


Script name: NativePurchaseFinishedConnector
  - Script: 


Script name: NumberLocalizer
  - Script: 


Script name: provideRobloxLocale
  - Script: 


Script name: PurchasePromptPolicy
  - Script: 


Script name: TextLocalizer
  - Script: 


Script name: withLayoutValues
  - Script: 


Script name: PremiumUpsellContainer
  - Script: 


Script name: PremiumUpsellOverlay
  - Script: 


Script name: Animator
  - Script: 


Script name: ProductPurchaseContainer
  - Script: 


Script name: PurchasePromptApp
  - Script: 


Script name: RobuxUpsellContainer
  - Script: 


Script name: RobuxUpsellOverlay
  - Script: 


Script name: SubscriptionPurchaseContainer
  - Script: 


Script name: SubscriptionPurchaseOverlay
  - Script: 


Script name: connectToStore
  - Script: 


Script name: ButtonState
  - Script: 


Script name: Counter
  - Script: 


Script name: createEnum
  - Script: 


Script name: ItemType
  - Script: 


Script name: PaymentPlatform
  - Script: 


Script name: PromptState
  - Script: 


Script name: PurchaseError
  - Script: 


Script name: PurchaseFlow
  - Script: 


Script name: PurchaseWarning
  - Script: 


Script name: RequestType
  - Script: 


Script name: UpsellFlow
  - Script: 


Script name: VPCModalType
  - Script: 


Script name: WindowState
  - Script: 


Script name: FFlagAddCursorProviderToPurchasePromptApp
  - Script: 


Script name: FFlagEnableAnalyticEventV1UpsellFlow
  - Script: 


Script name: GetFFlagDisablePurchasePromptFunctionForMaquettes
  - Script: 


Script name: GetFFlagDisableRobuxUpsell
  - Script: 


Script name: GetFFlagEnableCreatorStorePurchasingCutover
  - Script: 


Script name: GetFFlagEnableInsufficientRobuxForBundleUpsellFix
  - Script: 


Script name: GetFFlagEnableLuobuInGameUpsell
  - Script: 


Script name: GetFFlagEnablePalisadesPaymentsPlatform
  - Script: 


Script name: GetFFlagEnablePerformPurchaseGCSHandling
  - Script: 


Script name: GetFFlagEnablePromptPurchaseRequestedV2
  - Script: 


Script name: GetFFlagEnablePromptPurchaseRequestedV2Take2
  - Script: 


Script name: GetFFlagEnableQuestIAPAnalytics
  - Script: 


Script name: GetFFlagEnableRestrictedAssetSaleLocationPurchasePrompt
  - Script: 


Script name: GetFFlagEnableSubscriptionPurchaseToast
  - Script: 


Script name: GetFFlagEnableTexasU18VPCForInExperienceBundleRobuxUpsellFlow
  - Script: 


Script name: GetFFlagEnableTexasU18VPCForInExperienceRobuxUpsellFlow
  - Script: 


Script name: GetFFlagEnableToastLiteRender
  - Script: 


Script name: GetFFlagEnableVpcForInExperiencePremiumUpsell
  - Script: 


Script name: GetFFlagEnableVpcForInExperienceSubscriptionPurchase
  - Script: 


Script name: GetFFlagFixBundlePromptThumbnail
  - Script: 


Script name: GetFFlagFixPlayerGuiSelectionBugOnPromptExit
  - Script: 


Script name: GetFFlagFixPlayerGuiSelectionBugOnPromptExitPremium
  - Script: 


Script name: GetFFlagRespectBalanceInfoForBundleUpsellInStudio
  - Script: 


Script name: GetFFlagReturnNotForSaleOnInvalidBundleId
  - Script: 


Script name: GetFFlagTranslateDevProducts
  - Script: 


Script name: GetFFlagUseCatalogItemDetailsToResolveBundlePurchase
  - Script: 


Script name: GetFFLagUseCoreScriptsRootProviderForUpsellModal
  - Script: 


Script name: GetFFlagUsePlatformNameForUnknown
  - Script: 


Script name: LargerRobuxUpsellTest
  - Script: 


Script name: getPreviewImageUrl
  - Script: 


Script name: getLocalizationContext
  - Script: 


Script name: KeyMappings
  - Script: 


Script name: ar-001
  - Script: 


Script name: bg-bg
  - Script: 


Script name: bn-bd
  - Script: 


Script name: bs-ba
  - Script: 


Script name: cs-cz
  - Script: 


Script name: da-dk
  - Script: 


Script name: de-de
  - Script: 


Script name: el-gr
  - Script: 


Script name: en-us
  - Script: 


Script name: es-es
  - Script: 


Script name: et-ee
  - Script: 


Script name: fi-fi
  - Script: 


Script name: fil-ph
  - Script: 


Script name: fr-fr
  - Script: 


Script name: hi-in
  - Script: 


Script name: hr-hr
  - Script: 


Script name: hu-hu
  - Script: 


Script name: id-id
  - Script: 


Script name: it-it
  - Script: 


Script name: ja-jp
  - Script: 


Script name: ka-ge
  - Script: 


Script name: kk-kz
  - Script: 


Script name: km-kh
  - Script: 


Script name: ko-kr
  - Script: 


Script name: lt-lt
  - Script: 


Script name: lv-lv
  - Script: 


Script name: ms-my
  - Script: 


Script name: my-mm
  - Script: 


Script name: nb-no
  - Script: 


Script name: nl-nl
  - Script: 


Script name: pl-pl
  - Script: 


Script name: pt-br
  - Script: 


Script name: ro-ro
  - Script: 


Script name: ru-ru
  - Script: 


Script name: si-lk
  - Script: 


Script name: sk-sk
  - Script: 


Script name: sl-sl
  - Script: 


Script name: sq-al
  - Script: 


Script name: sr-rs
  - Script: 


Script name: sv-se
  - Script: 


Script name: th-th
  - Script: 


Script name: tr-tr
  - Script: 


Script name: uk-ua
  - Script: 


Script name: vi-vn
  - Script: 


Script name: zh-cjv
  - Script: 


Script name: zh-cn
  - Script: 


Script name: zh-tw
  - Script: 


Script name: LocalizationService
  - Script: 


Script name: Constants
  - Script: 


Script name: createSignal
  - Script: 


Script name: PremiumProduct
  - Script: 


Script name: RobuxUpsell
  - Script: 


Script name: getUpsellFlow
  - Script: 


Script name: checkUserPurchaseSettings
  - Script: 


Script name: deprecated_GetProductInfo
  - Script: 


Script name: getAccountInfo
  - Script: 


Script name: getAssetInfo
  - Script: 


Script name: getBalanceInfo
  - Script: 


Script name: getBundleDetails
  - Script: 


Script name: getCatalogItemDetails
  - Script: 


Script name: getCreatorStoreProductInfo
  - Script: 


Script name: getIsAlreadyOwned
  - Script: 


Script name: getPremiumProductInfo
  - Script: 


Script name: getPremiumUpsellPrecheck
  - Script: 


Script name: getProductInfo
  - Script: 


Script name: getProductPurchasableDetails
  - Script: 


Script name: getPurchaseWarning
  - Script: 


Script name: getRobuxUpsellProduct
  - Script: 


Script name: getSubscriptionPurchaseInfo
  - Script: 


Script name: getToolAsset
  - Script: 


Script name: getVngShopUrl
  - Script: 


Script name: performCreatorStorePurchase
  - Script: 


Script name: performPurchase
  - Script: 


Script name: performPurchaseV2
  - Script: 


Script name: performSubscriptionPurchase
  - Script: 


Script name: postPremiumImpression
  - Script: 


Script name: postPurchaseWarningAcknowledge
  - Script: 


Script name: Promise
  - Script: 


Script name: ABVariationReducer
  - Script: 


Script name: AccountInfoReducer
  - Script: 


Script name: ButtonStateReducer
  - Script: 


Script name: GamepadEnabledReducer
  - Script: 


Script name: HasCompletedPurchaseReducer
  - Script: 


Script name: NativeUpsellReducer
  - Script: 


Script name: PremiumProductsReducer
  - Script: 


Script name: ProductInfoReducer
  - Script: 


Script name: ProductReducer
  - Script: 


Script name: PromptRequestReducer
  - Script: 


Script name: PromptStateReducer
  - Script: 


Script name: PurchaseErrorReducer
  - Script: 


Script name: PurchaseFlowReducer
  - Script: 


Script name: PurchasingStartTimeReducer
  - Script: 


Script name: Reducer
  - Script: 


Script name: SubscriptionPurchaseInfoReducer
  - Script: 


Script name: WindowStateReducer
  - Script: 


Script name: ABTest
  - Script: 


Script name: Analytics
  - Script: 


Script name: ExternalSettings
  - Script: 


Script name: LayoutValues
  - Script: 


Script name: Network
  - Script: 


Script name: PlatformInterface
  - Script: 


Script name: PublicBindables
  - Script: 


Script name: strict
  - Script: 


Script name: Symbol
  - Script: 


Script name: MockABTest
  - Script: 


Script name: MockExternalSettings
  - Script: 


Script name: MockNetwork
  - Script: 


Script name: MockStore
  - Script: 


Script name: UnitTestContainer
  - Script: 


Script name: Thunk
  - Script: 


Script name: completePurchase
  - Script: 


Script name: completeRequest
  - Script: 


Script name: hideWindow
  - Script: 


Script name: initiateAvatarCreationFeePurchase
  - Script: 


Script name: initiateBundlePurchase
  - Script: 


Script name: initiatePremiumPrecheck
  - Script: 


Script name: initiatePremiumPurchase
  - Script: 


Script name: initiatePurchase
  - Script: 


Script name: initiatePurchasePrecheck
  - Script: 


Script name: initiateSubscriptionPurchase
  - Script: 


Script name: initiateUserPurchaseSettingsPrecheck
  - Script: 


Script name: launchPremiumUpsell
  - Script: 


Script name: launchRobuxUpsell
  - Script: 


Script name: launchSubscriptionPurchase
  - Script: 


Script name: openRobuxStore
  - Script: 


Script name: openSecuritySettings
  - Script: 


Script name: openTermsOfUse
  - Script: 


Script name: purchaseItem
  - Script: 


Script name: resolveBundlePromptState
  - Script: 


Script name: resolvePremiumPromptState
  - Script: 


Script name: resolvePromptState
  - Script: 


Script name: resolvePurchasePrecheck
  - Script: 


Script name: resolveSubscriptionPromptState
  - Script: 


Script name: retryAfterUpsell
  - Script: 


Script name: sendCounter
  - Script: 


Script name: sendEvent
  - Script: 


Script name: addRawValueMethodToEnum
  - Script: 


Script name: Base64
  - Script: 


Script name: ClickScamDetector
  - Script: 


Script name: debugLog
  - Script: 


Script name: getAssetInfoUtil
  - Script: 


Script name: getCounterCombinations
  - Script: 


Script name: getCreatorStoreProductInfoUtil
  - Script: 


Script name: getHasAmazonUserAgent
  - Script: 


Script name: getHasLuobuFlag
  - Script: 


Script name: getHasQuestUserAgent
  - Script: 


Script name: getPaymentFromPlatform
  - Script: 


Script name: getPaymentFromPlatformLegacy
  - Script: 


Script name: getPaymentPlatform
  - Script: 


Script name: getPlayerPrice
  - Script: 


Script name: getPlayerProductInfoPrice
  - Script: 


Script name: hasPendingRequest
  - Script: 


Script name: isCreatorStoreAssetType
  - Script: 


Script name: isGenericChallengeResponse
  - Script: 


Script name: isLinksAllowed
  - Script: 


Script name: isMockingPurchases
  - Script: 


Script name: meetsPrerequisites
  - Script: 


Script name: parseSubscriptionError
  - Script: 


Script name: PublishAssetAnalytics
  - Script: 


Script name: serializeTable
  - Script: 


Script name: FTUX
  - Script: 


Script name: FTUXPanel
  - Script: 


Script name: FTUXSlideshow
  - Script: 


Script name: Button
  - Script: 


Script name: Description
  - Script: 


Script name: EndItem
  - Script: 


Script name: Header
  - Script: 


Script name: Stepper
  - Script: 


Script name: Title
  - Script: 


Script name: ToolTip
  - Script: 


Script name: VRFTUXToolTips
  - Script: 


Script name: ButtonEnum
  - Script: 


Script name: PlatformEnum
  - Script: 


Script name: EventHandler
  - Script: 


Script name: Events
  - Script: 


Script name: EventType
  - Script: 


Script name: FirstPersonToggleEvent
  - Script: 


Script name: HapticFeedbackEvent
  - Script: 


Script name: HapticFeedbackTwiceEvent
  - Script: 


Script name: JumpEvent
  - Script: 


Script name: LeaveGameIconHighlightEvent
  - Script: 


Script name: MovementTooltipEvent
  - Script: 


Script name: MoveToGoalEvent
  - Script: 


Script name: PerspectiveTooltipEvent
  - Script: 


Script name: SoundFeedbackEvent
  - Script: 


Script name: VRFTUXEventHandler
  - Script: 


Script name: EnableSafetyBubbleDummy
  - Script: 


Script name: GetFeatures
  - Script: 


Script name: GetFFlagDebugEnableVRFTUXExperienceInStudio
  - Script: 


Script name: GetFFlagEnableVRFTUXExperience
  - Script: 


Script name: FTUXConstants
  - Script: 


Script name: FTUXEventTypes
  - Script: 


Script name: FTUXSlideshowData
  - Script: 


Script name: GenerateDummy
  - Script: 


Script name: IsFTUXExperience
  - Script: 


Script name: MockFTUXStyleAndLocalizationComponent
  - Script: 


Script name: Action
  - Script: 


Script name: Analytics
  - Script: 


Script name: Diag
  - Script: 


Script name: EventStream
  - Script: 


Script name: GoogleAnalytics
  - Script: 


Script name: Influx
  - Script: 


Script name: AvatarChatConstants
  - Script: 


Script name: CommonUtil
  - Script: 


Script name: EventConnection
  - Script: 


Script name: Roact-asteroids
  - Script: 


Script name: Roact-context
  - Script: 


Script name: Roact-counter
  - Script: 


Script name: Roact-events
  - Script: 


Script name: Roact-ref
  - Script: 


Script name: Roact-rodux
  - Script: 


Script name: Roact-router
  - Script: 


Script name: Roact-stress
  - Script: 


Script name: FFlagEnableForkedChatAnalytics
  - Script: 


Script name: FFlagInExperienceUserProfileSettingsEnabled
  - Script: 


Script name: FFlagWaveEmoteOnAvatarContextMenuWithExpChat
  - Script: 


Script name: FFlagWhisperEmoteOnAvatarContextMenuWithExpChat
  - Script: 


Script name: FStringRccInExperienceNameEnabledAllowList
  - Script: 


Script name: GetFFlagContactListClientEnabled
  - Script: 


Script name: GetFFlagContactListEnabled
  - Script: 


Script name: GetFFlagEnableInGameMenuDurationLogger
  - Script: 


Script name: GetFFlagEnableIXPInGame
  - Script: 


Script name: GetFFlagEnableVoiceDefaultServerScript
  - Script: 


Script name: GetFFlagPlayerViewRemoteEnabled
  - Script: 


Script name: GetFFlagPlayerViewValidateRequesteeEnabled
  - Script: 


Script name: GetIXPServiceWrapperWaitRefactor
  - Script: 


Script name: Functional
  - Script: 


Script name: GetHasGuiHidingPermission
  - Script: 


Script name: useLocalPlayer
  - Script: 


Script name: usePlayerCurrentScreenOrientation
  - Script: 


Script name: usePlayerGui
  - Script: 


Script name: useScreenSize
  - Script: 


Script name: httpRequest
  - Script: 


Script name: HumanoidReadyUtil
  - Script: 


Script name: Immutable
  - Script: 


Script name: LegacyThumbnailUrls
  - Script: 


Script name: LuaErrorReporter
  - Script: 


Script name: memoize
  - Script: 


Script name: NoYield
  - Script: 


Script name: ObjectPool
  - Script: 


Script name: PerfUtils
  - Script: 


Script name: RagdollRigging
  - Script: 


Script name: ReactPerfTracker
  - Script: 


Script name: ReactSchedulingTracker
  - Script: 


Script name: removePII
  - Script: 


Script name: renderWithCoreScriptsStyleProvider
  - Script: 


Script name: Roact
  - Script: 


Script name: RoactRodux
  - Script: 


Script name: ExternalEventConnection
  - Script: 


Script name: LuaErrorV2CounterConfig
  - Script: 


Script name: LuaShellErrors
  - Script: 


Script name: Rodux
  - Script: 


Script name: Signal
  - Script: 


Script name: Spring
  - Script: 


Script name: ParseQuery
  - Script: 


Script name: StringReplaceAll
  - Script: 


Script name: StringSplit
  - Script: 


Script name: StringTrim
  - Script: 


Script name: Symbol
  - Script: 


Script name: Text
  - Script: 


Script name: DevConsoleMaster
  - Script: 


Script name: withFlag
  - Script: 


Script name: withServices
  - Script: 


Script name: TestConstants
  - Script: 


Script name: Action
  - Script: 


Script name: ActionBindingsUpdateSearchFilter
  - Script: 


Script name: ChangeDevConsoleSize
  - Script: 


Script name: ClientLogUpdateSearchFilter
  - Script: 


Script name: ClientMemoryUpdateSearchFilter
  - Script: 


Script name: ClientNetworkUpdateSearchFilter
  - Script: 


Script name: ClientScriptsUpdateSearchFilter
  - Script: 


Script name: DataStoresUpdateSearchFilter
  - Script: 


Script name: DebugVisualizationsUpdateSearchFilter
  - Script: 


Script name: ServerJobsUpdateSearchFilter
  - Script: 


Script name: ServerLogUpdateSearchFilter
  - Script: 


Script name: ServerMemoryUpdateSearchFilter
  - Script: 


Script name: ServerNetworkUpdateSearchFilter
  - Script: 


Script name: ServerScriptsUpdateSearchFilter
  - Script: 


Script name: ServerStatsUpdateSearchFilter
  - Script: 


Script name: SetActiveTab
  - Script: 


Script name: SetDevConsoleMinimized
  - Script: 


Script name: SetDevConsolePosition
  - Script: 


Script name: SetDevConsoleVisibility
  - Script: 


Script name: SetLuauHeapActiveSnapshot
  - Script: 


Script name: SetLuauHeapCompareSnapshot
  - Script: 


Script name: SetLuauHeapProfileTarget
  - Script: 


Script name: SetLuauHeapState
  - Script: 


Script name: SetRCCProfilerState
  - Script: 


Script name: SetScriptProfilerRoot
  - Script: 


Script name: SetScriptProfilerState
  - Script: 


Script name: SetTabList
  - Script: 


Script name: UpdateAveragePing
  - Script: 


Script name: CircularBuffer
  - Script: 


Script name: ActionBindingsChart
  - Script: 


Script name: ActionBindingsData
  - Script: 


Script name: MainViewActionBindings
  - Script: 


Script name: BannerButton
  - Script: 


Script name: BoxButton
  - Script: 


Script name: CellCheckbox
  - Script: 


Script name: CellLabel
  - Script: 


Script name: CheckBox
  - Script: 


Script name: CheckBoxContainer
  - Script: 


Script name: CheckBoxDropDown
  - Script: 


Script name: ClientServerButton
  - Script: 


Script name: DataConsumer
  - Script: 


Script name: DataContext
  - Script: 


Script name: DataProvider
  - Script: 


Script name: DataStoresChart
  - Script: 


Script name: DataStoresData
  - Script: 


Script name: MainViewDataStores
  - Script: 


Script name: DebugVisualizationsChart
  - Script: 


Script name: DebugVisualizationsData
  - Script: 


Script name: DebugVisualizationsStaticContent
  - Script: 


Script name: MainViewDebugVisualizations
  - Script: 


Script name: DevConsoleTopBar
  - Script: 


Script name: DevConsoleWindow
  - Script: 


Script name: DropDown
  - Script: 


Script name: FullScreenDropDownButton
  - Script: 


Script name: HeaderButton
  - Script: 


Script name: LineGraph
  - Script: 


Script name: LineGraphHoverDisplay
  - Script: 


Script name: LiveUpdateElement
  - Script: 


Script name: ClientLog
  - Script: 


Script name: DevConsoleCommandLine
  - Script: 


Script name: LogData
  - Script: 


Script name: LogOutput
  - Script: 


Script name: MainViewLog
  - Script: 


Script name: ServerLog
  - Script: 


Script name: LuauHeapData
  - Script: 


Script name: LuauHeapTypes
  - Script: 


Script name: LuauHeapView
  - Script: 


Script name: LuauHeapViewEntry
  - Script: 


Script name: LuauHeapViewPathEntry
  - Script: 


Script name: LuauHeapViewRefEntry
  - Script: 


Script name: LuauHeapViewStatEntry
  - Script: 


Script name: MainViewLuauHeap
  - Script: 


Script name: ClientMemory
  - Script: 


Script name: ClientMemoryData
  - Script: 


Script name: MainViewMemory
  - Script: 


Script name: MemoryView
  - Script: 


Script name: MemoryViewEntry
  - Script: 


Script name: ServerMemory
  - Script: 


Script name: ServerMemoryData
  - Script: 


Script name: MainViewMicroProfiler
  - Script: 


Script name: RCCProfilerDataCompleteListener
  - Script: 


Script name: ServerProfilerInterface
  - Script: 


Script name: ClientNetwork
  - Script: 


Script name: MainViewNetwork
  - Script: 


Script name: NetworkChart
  - Script: 


Script name: NetworkChartEntry
  - Script: 


Script name: NetworkData
  - Script: 


Script name: NetworkSummary
  - Script: 


Script name: NetworkView
  - Script: 


Script name: ServerNetwork
  - Script: 


Script name: ClearStateForNewProfilingSession
  - Script: 


Script name: SetAverage
  - Script: 


Script name: SetData
  - Script: 


Script name: SetDataView
  - Script: 


Script name: SetFrequency
  - Script: 


Script name: SetIsProfiling
  - Script: 


Script name: SetLiveUpdate
  - Script: 


Script name: SetSearchData
  - Script: 


Script name: SetShowGC
  - Script: 


Script name: SetShowPlugins
  - Script: 


Script name: SetThreads
  - Script: 


Script name: SetTimerState
  - Script: 


Script name: MainViewScriptProfiler
  - Script: 


Script name: MobileSettingsView
  - Script: 


Script name: ProfilerDataFormatV2
  - Script: 


Script name: ProfilerExportView
  - Script: 


Script name: ProfilerFunctionsView
  - Script: 


Script name: ProfilerFunctionViewEntry
  - Script: 


Script name: ProfilerUtil
  - Script: 


Script name: ProfilerView
  - Script: 


Script name: ProfilerViewEntry
  - Script: 


Script name: TestData
  - Script: 


Script name: MainViewScripts
  - Script: 


Script name: ServerScripts
  - Script: 


Script name: ServerScriptsData
  - Script: 


Script name: ServerScriptsEntry
  - Script: 


Script name: ScrollingTextBox
  - Script: 


Script name: SearchBar
  - Script: 


Script name: MainViewServerJobs
  - Script: 


Script name: ServerJobsChart
  - Script: 


Script name: ServerJobsData
  - Script: 


Script name: MainViewServerStats
  - Script: 


Script name: ServerStatsChart
  - Script: 


Script name: ServerStatsData
  - Script: 


Script name: TabRowButton
  - Script: 


Script name: TabRowContainer
  - Script: 


Script name: Tooltip
  - Script: 


Script name: UtilAndTab
  - Script: 


Script name: Constants
  - Script: 


Script name: Immutable
  - Script: 


Script name: DevConsoleAnalytics
  - Script: 


Script name: ActionBindingsData
  - Script: 


Script name: DataStoresData
  - Script: 


Script name: DebugVisualizationsData
  - Script: 


Script name: DevConsoleDisplayOptions
  - Script: 


Script name: DevConsoleReducer
  - Script: 


Script name: LogData
  - Script: 


Script name: LuauHeap
  - Script: 


Script name: MainView
  - Script: 


Script name: MemoryData
  - Script: 


Script name: MicroProfiler
  - Script: 


Script name: NetworkData
  - Script: 


Script name: ScriptProfiler
  - Script: 


Script name: ScriptsData
  - Script: 


Script name: ServerJobsData
  - Script: 


Script name: ServerStatsData
  - Script: 


Script name: Signal
  - Script: 


Script name: convertTimeStamp
  - Script: 


Script name: getClientReplicator
  - Script: 


Script name: maxOfTable
  - Script: 


Script name: minOfTable
  - Script: 


Script name: setMouseVisibility
  - Script: 


Script name: CoreUtility
  - Script: 


Script name: LuaCoreScriptsErrorV2CounterConfig
  - Script: 


Script name: PiiFilter
  - Script: 


Script name: RateLimiter
  - Script: 


Script name: ErrorTestSets
  - Script: 


Script name: HttpAnalyticsTab
  - Script: 


Script name: GetCoreScriptsLayers
  - Script: 


Script name: PlayerHelper
  - Script: 


Script name: PlayingSounds
  - Script: 


Script name: FacialAnimationStreamingHeartbeatStats
  - Script: 


Script name: AvatarChatHeartbeatStats
  - Script: 


Script name: AvatarChatSubsessionInput
  - Script: 


Script name: AvatarChatSubsessionStats
  - Script: 


Script name: FFlagAllowDisconnectGuiForOkUnknown
  - Script: 


Script name: FFlagAvatarContextMenuItemsChatButtonRefactor
  - Script: 


Script name: FFlagCoreScriptShowTeleportPrompt
  - Script: 


Script name: FFlagCreatorBanLocalization
  - Script: 


Script name: FFlagEnableAutomaticSizeVerticalOffsetWidthFix
  - Script: 


Script name: FFlagEnableAvatarChatToggleUIUpgradeForLegacyChatService
  - Script: 


Script name: FFlagEnableBundlePurchaseChecks
  - Script: 


Script name: FFlagEnableCollectibleCheckToPurchaseItem
  - Script: 


Script name: FFlagEnableExperienceMenuSessionTracking
  - Script: 


Script name: FFlagEnableRestrictedAssetSaleLocationInspectAndBuy
  - Script: 


Script name: FFlagEnableRichTextForBubbleChat
  - Script: 


Script name: FFlagEnableSpatialRobloxGui
  - Script: 


Script name: FFlagEnableTempFixCollectibleBundlePurchase
  - Script: 


Script name: FFlagEnableVoiceChatStorybookFix
  - Script: 


Script name: FFlagErrorPromptResizesHeight
  - Script: 


Script name: FFlagExtendedExpMenuPortraitLayout
  - Script: 


Script name: FFlagFixProximityPromptAncestry
  - Script: 


Script name: FFlagFixStatsViewerMissingMethod
  - Script: 


Script name: FFlagHeapProfilerSearch
  - Script: 


Script name: FFlagMountCoreGuiBackpack
  - Script: 


Script name: FFlagMuteNonFriendsEvent
  - Script: 


Script name: FFlagPlayerIconAvatarFix
  - Script: 


Script name: FFlagRemoveHardCodedFriendLimitPrompt
  - Script: 


Script name: FFlagUseRoactGlobalConfigInCoreScripts
  - Script: 


Script name: FFlagVRBottomBarDebugPositionConfig
  - Script: 


Script name: FFlagVRBottomBarHighlightedLeaveGameIcon
  - Script: 


Script name: FFlagVRMoveVoiceIndicatorToBottomBar
  - Script: 


Script name: FIntSafetyBubbleRadius
  - Script: 


Script name: FIntSafetyBubbleTransparencyPercent
  - Script: 


Script name: FIntVoiceChatTooltipDelay
  - Script: 


Script name: FIntVRBottomBarPositionOffsetDepthNumber
  - Script: 


Script name: FIntVRBottomBarPositionOffsetVerticalNumber
  - Script: 


Script name: FStringSpatialRobloxUIIXPLayerName
  - Script: 


Script name: FStringSpatialRobloxUIIXPSpatialUIVariantValue
  - Script: 


Script name: FStringSpatialRobloxUIIXPUITypeVariableName
  - Script: 


Script name: GetFFlagAbuseReportEnableReportSentPage
  - Script: 


Script name: getFFlagAddApolloClientToExperienceChat
  - Script: 


Script name: GetFFlagAddVoiceExposureLayer
  - Script: 


Script name: GetFFlagAllowUsernameOverlayInScreenshotHud
  - Script: 


Script name: GetFFlagAlwaysMountVoicePrompt
  - Script: 


Script name: GetFFlagAlwaysShowVRToggle
  - Script: 


Script name: GetFFlagBetaBadge
  - Script: 


Script name: GetFFlagBetaBadgeLearnMoreLinkFormview
  - Script: 


Script name: GetFFlagBubbleChatInexistantAdorneeFix
  - Script: 


Script name: GetFFlagBubbleVoiceIndicatorSetting
  - Script: 


Script name: GetFFlagChatTranslationForceSetting
  - Script: 


Script name: GetFFlagChatTranslationHoldoutEnabled
  - Script: 


Script name: GetFFlagChatTranslationNewDefaults
  - Script: 


Script name: GetFFlagChatTranslationSettingEnabled
  - Script: 


Script name: GetFFlagChatTranslationWaitForIXP
  - Script: 


Script name: GetFFlagClientToastNotificationsRedirect
  - Script: 


Script name: GetFFlagDebounceConnectDisconnectButton
  - Script: 


Script name: GetFFlagDisableChromeV3Baseline
  - Script: 


Script name: GetFFlagDisableChromeV3Captures
  - Script: 


Script name: GetFFlagDisableChromeV3DockedMic
  - Script: 


Script name: GetFFlagDisableChromeV3Icon
  - Script: 


Script name: GetFFlagDisableChromeV3StaticSelfView
  - Script: 


Script name: GetFFlagDisableChromeV4Baseline
  - Script: 


Script name: GetFFlagDisableChromeV4ClosedSelfView
  - Script: 


Script name: getFFlagDoNotPromptCameraPermissionsOnMount
  - Script: 


Script name: getFFlagEnableAlwaysAvailableCamera
  - Script: 


Script name: getFFlagEnableAnalyticsForCameraDevicePermissions
  - Script: 


Script name: GetFFlagEnableConfigurableReportAbuseIXP
  - Script: 


Script name: GetFFlagEnableConnectDisconnectAnalytics
  - Script: 


Script name: GetFFlagEnableConnectDisconnectButtonAnalytics
  - Script: 


Script name: GetFFlagEnableConnectDisconnectInSettingsAndChrome
  - Script: 


Script name: GetFFlagEnableFeedbackReportDialogAdjustments
  - Script: 


Script name: GetFFlagEnableInExpJoinVoiceAnalytics
  - Script: 


Script name: GetFFlagEnableInExpMicPermissionsAnalytics
  - Script: 


Script name: GetFFlagEnableInExpVoiceConsentAnalytics
  - Script: 


Script name: GetFFlagEnableInExpVoiceUpsell
  - Script: 


Script name: GetFFlagEnableInvitePromptLoadingState
  - Script: 


Script name: GetFFlagEnableNewInviteMenu
  - Script: 


Script name: GetFFlagEnableNewInviteMenuCustomization
  - Script: 


Script name: GetFFlagEnableNewInviteMenuIXP
  - Script: 


Script name: GetFFlagEnableNewInviteSendEndpoint
  - Script: 


Script name: GetFFlagEnableSeamlessVoiceConnectDisconnectButton
  - Script: 


Script name: GetFFlagEnableSeamlessVoiceDataConsentToast
  - Script: 


Script name: GetFFlagEnableSeamlessVoiceUX
  - Script: 


Script name: GetFFlagEnableSharedInviteStore
  - Script: 


Script name: getFFlagEnableShimmeringIconLegacyChatService
  - Script: 


Script name: GetFFlagEnableSoundSessionTelemetry
  - Script: 


Script name: GetFFlagEnableUniveralVoiceToasts
  - Script: 


Script name: GetFFlagEnableVoiceChatManualReconnect
  - Script: 


Script name: GetFFlagEnableVoiceChatMuteOnBlock
  - Script: 


Script name: GetFFlagEnableVoiceChatSpeakerIcons
  - Script: 


Script name: GetFFlagEnableVoiceChatVoiceUISync
  - Script: 


Script name: GetFFlagEnableVoiceDefaultChannel
  - Script: 


Script name: GetFFlagEnableVoiceMuteAnalytics
  - Script: 


Script name: GetFFlagEnableVoicePromptReasonText
  - Script: 


Script name: GetFFlagEnableVRHubStateListener
  - Script: 


Script name: GetFFlagExtraInviteModalStringValidation
  - Script: 


Script name: GetFFlagFixSettingshubImportOrder
  - Script: 


Script name: GetFFlagFixSoundSessionTelemetryNotRemovingSounds
  - Script: 


Script name: GetFFlagFlashingDotUseAsyncInit
  - Script: 


Script name: GetFFlagForceChatBubbleColorCS
  - Script: 


Script name: GetFFlagFriendshipNotifsUseSendr
  - Script: 


Script name: GetFFlagGetClientReplicatorCheck
  - Script: 


Script name: GetFFlagHideVoiceDisconnectButton
  - Script: 


Script name: GetFFlagInvertMuteAllPermissionButton
  - Script: 


Script name: GetFFlagInviteListStyleFixes
  - Script: 


Script name: GetFFlagLuaInExperienceCoreScriptsGameInviteUnification
  - Script: 


Script name: GetFFlagMicConnectingToast
  - Script: 


Script name: getFFlagMicrophoneDevicePermissionsPromptLogging
  - Script: 


Script name: GetFFlagMuteButtonRaceConditionFix
  - Script: 


Script name: GetFFlagNewEventIngestPlayerScriptsDimensions
  - Script: 


Script name: GetFFlagOldMenuUseSpeakerIcons
  - Script: 


Script name: GetFFlagOptimizeHelpMenuInputEvent
  - Script: 


Script name: GetFFlagPassShouldRequestPermsArg
  - Script: 


Script name: GetFFlagPauseMuteFix
  - Script: 


Script name: GetFFlagPlayerViewRemoteEventTimeoutEnabled
  - Script: 


Script name: GetFFlagRecordRecording
  - Script: 


Script name: GetFFlagRemoveAssetVersionEndpoint
  - Script: 


Script name: GetFFlagRemoveInGameChatBubbleChatReferences
  - Script: 


Script name: getFFlagRenderVoiceBubbleAfterAsyncInit
  - Script: 


Script name: GetFFlagReportAbuseThankYouPageSizeFix
  - Script: 


Script name: GetFFlagReportMenuCellToUseAutomaticSize
  - Script: 


Script name: GetFFlagReportSentPageV2Enabled
  - Script: 


Script name: GetFFlagRequestServerStatsFix
  - Script: 


Script name: GetFFlagRtMessaging
  - Script: 


Script name: GetFFlagScreenshotHudApi
  - Script: 


Script name: GetFFlagSendDevicePermissionsModalAnalytics
  - Script: 


Script name: GetFFlagShowMicConnectingIconAndToast
  - Script: 


Script name: GetFFlagShowSpeakerIconWithChatBubbles
  - Script: 


Script name: GetFFlagSoundTelemetryOsClock
  - Script: 


Script name: GetFFlagSubscriptionFailureUX
  - Script: 


Script name: GetFFlagThrottleInviteSendEndpoint
  - Script: 


Script name: GetFFlagUpdateSelfieViewOnBan
  - Script: 


Script name: getFFlagUseCameraDevicesListener
  - Script: 


Script name: GetFFlagUserIsChatTranslationEnabled
  - Script: 


Script name: GetFFlagUXForCameraPerformanceIXPEnabled
  - Script: 


Script name: GetFFlagVoiceAbuseReportsEnabled
  - Script: 


Script name: GetFFlagVoiceARRemoveOffsiteLinksForVoice
  - Script: 


Script name: GetFFlagVoiceARUnblockingUnmutingEnabled
  - Script: 


Script name: GetFFlagVoiceChatUILogging
  - Script: 


Script name: GetFFlagVoiceRecordingIndicatorsEnabled
  - Script: 


Script name: GetFFlagVoiceUserAgency3
  - Script: 


Script name: GetFFlagVoiceUserAgencyEnableIXP
  - Script: 


Script name: GetFFlagWrapBlockModalScreenInProvider
  - Script: 


Script name: GetFIntCanHideGuiGroupId
  - Script: 


Script name: GetFIntDebounceDisconnectButtonDelay
  - Script: 


Script name: GetFIntEducationalPopupDisplayMaxCount
  - Script: 


Script name: GetFIntFacialAnimationStreamingHeartbeatStatsIntervalSec
  - Script: 


Script name: GetFIntPlayerViewRemoteEventTimeout
  - Script: 


Script name: GetFIntSoundSessionTelemetryThrottle
  - Script: 


Script name: GetFIntThrottleInviteSendEndpointDelay
  - Script: 


Script name: GetFIntVoiceChatDeviceChangeDebounceDelay
  - Script: 


Script name: GetFIntVoiceJoinM3ToastDurationSeconds
  - Script: 


Script name: GetFIntVoiceReverseNudgeUXDisplayTimeSeconds
  - Script: 


Script name: GetFIntVoiceToxicityToastDurationSeconds
  - Script: 


Script name: GetFIntVRScaleGuiDistance
  - Script: 


Script name: GetFStringChatTranslationEnabledLocales
  - Script: 


Script name: GetFStringChatTranslationLayerName
  - Script: 


Script name: GetFStringInExperienceNotificationsLayer
  - Script: 


Script name: GetFStringLuaAppConsoleExperienceMenuLayer
  - Script: 


Script name: GetFStringReportAbuseIXPLayer
  - Script: 


Script name: GetFStringUXForCameraPerformanceIXPLayerName
  - Script: 


Script name: GetFStringVoiceBetaBadgeLearnMore
  - Script: 


Script name: GetFStringVoiceExposureIXPLayerName
  - Script: 


Script name: GetFStringVoiceUserAgencyIXPLayerName
  - Script: 


Script name: isEngineTruncationEnabledForIngameSettings
  - Script: 


Script name: FriendingUtility
  - Script: 


Script name: CoreScriptsGamepadDisconnectListener
  - Script: 


Script name: GameTranslator
  - Script: 


Script name: AddMessage
  - Script: 


Script name: AddMessageFromEvent
  - Script: 


Script name: AddMessageWithTimeout
  - Script: 


Script name: BubbleChatEnabledChanged
  - Script: 


Script name: RemoveMessage
  - Script: 


Script name: SetMessageText
  - Script: 


Script name: UpdateChatSettings
  - Script: 


Script name: BubbleChat.storybook
  - Script: 


Script name: ChatSettings
  - Script: 


Script name: App
  - Script: 


Script name: BubbleChatBillboard
  - Script: 


Script name: BubbleChatBillboards
  - Script: 


Script name: BubbleChatList
  - Script: 


Script name: ChatBubble
  - Script: 


Script name: ChatBubbleDistant
  - Script: 


Script name: ControlBubble
  - Script: 


Script name: ControlBubbleV2
  - Script: 


Script name: ControlsBubble
  - Script: 


Script name: ControlsBubbleV2
  - Script: 


Script name: VoiceBubble
  - Script: 


Script name: Constants
  - Script: 


Script name: GlobalConfig
  - Script: 


Script name: createMockMessage
  - Script: 


Script name: displayCameraDeniedToast
  - Script: 


Script name: getPlayerFromPart
  - Script: 


Script name: getSettingsForMessage
  - Script: 


Script name: getSizeSpringFromSettings
  - Script: 


Script name: getTransparencySpringFromSettings
  - Script: 


Script name: getVoiceIndicatorAssetName
  - Script: 


Script name: maybeAssert
  - Script: 


Script name: StoryStore
  - Script: 


Script name: validateMessage
  - Script: 


Script name: Logger
  - Script: 


Script name: chatReducer
  - Script: 


Script name: chatSettings
  - Script: 


Script name: components
  - Script: 


Script name: messages
  - Script: 


Script name: userMessages
  - Script: 


Script name: Themes
  - Script: 


Script name: Types
  - Script: 


Script name: InGameMenuConstants
  - Script: 


Script name: playerInterface
  - Script: 


Script name: InGameMenuInit
  - Script: 


Script name: CloseOverlay
  - Script: 


Script name: HideMenu
  - Script: 


Script name: OpenOverlay
  - Script: 


Script name: SetAssetFromBundleInfo
  - Script: 


Script name: SetAssets
  - Script: 


Script name: SetAssetToBundlesMapping
  - Script: 


Script name: SetBundles
  - Script: 


Script name: SetBundlesAssetIsPartOf
  - Script: 


Script name: SetCollectibleResellableInstances
  - Script: 


Script name: SetDetailsInformation
  - Script: 


Script name: SetEquippedAssets
  - Script: 


Script name: SetExperienceInfo
  - Script: 


Script name: SetFavoriteAsset
  - Script: 


Script name: SetFavoriteBundle
  - Script: 


Script name: SetGamepadEnabled
  - Script: 


Script name: SetIsSubjectToChinaPolicies
  - Script: 


Script name: SetItemBeingPurchased
  - Script: 


Script name: SetLocale
  - Script: 


Script name: SetPlayerId
  - Script: 


Script name: SetPlayerName
  - Script: 


Script name: SetTryingOnInfo
  - Script: 


Script name: SetView
  - Script: 


Script name: ShowMenu
  - Script: 


Script name: UpdateStoreId
  - Script: 


Script name: AttributionConstants
  - Script: 


Script name: CharacterModelPool
  - Script: 


Script name: Colors
  - Script: 


Script name: CompactView
  - Script: 


Script name: AssetCard
  - Script: 


Script name: AssetDetails
  - Script: 


Script name: AssetList
  - Script: 


Script name: AttributionTraversal
  - Script: 


Script name: AvatarHeadShot
  - Script: 


Script name: AvatarViewport
  - Script: 


Script name: BuyButton
  - Script: 


Script name: CloseButton
  - Script: 


Script name: ControllerShortcutKeycodes
  - Script: 


Script name: Container
  - Script: 


Script name: DetailsButtons
  - Script: 


Script name: DetailsDescription
  - Script: 


Script name: DetailsText
  - Script: 


Script name: DetailsThumbnail
  - Script: 


Script name: Favorites
  - Script: 


Script name: FavoritesButton
  - Script: 


Script name: InitialView
  - Script: 


Script name: InspectAndBuy
  - Script: 


Script name: InspectAndBuyContext
  - Script: 


Script name: InspectAndBuyControllerBar
  - Script: 


Script name: LimitedLabel
  - Script: 


Script name: NoInventoryNotice
  - Script: 


Script name: Notification
  - Script: 


Script name: Overlay
  - Script: 


Script name: OverlayComponents
  - Script: 


Script name: PlayerNameLabel
  - Script: 


Script name: TryOnButton
  - Script: 


Script name: TryOnViewport
  - Script: 


Script name: Constants
  - Script: 


Script name: createInspectAndBuyKeyMapper
  - Script: 


Script name: Overlay
  - Script: 


Script name: FFlagEnableFavoriteButtonForUgc
  - Script: 


Script name: GetCollectibleItemInInspectAndBuyEnabled
  - Script: 


Script name: GetFFlagDisplayCollectiblesIcon
  - Script: 


Script name: GetFFlagIBEnableCollectiblesSystemSupport
  - Script: 


Script name: GetFFlagIBEnableLimitedBundle
  - Script: 


Script name: GetFFlagIBGateUGC4ACollectibleAssetsBundles
  - Script: 


Script name: getSelectionImageObjectRegular
  - Script: 


Script name: getSelectionImageObjectRounded
  - Script: 


Script name: MockId
  - Script: 


Script name: AssetInfo
  - Script: 


Script name: BundleInfo
  - Script: 


Script name: CollectibleInstance
  - Script: 


Script name: ExperienceInfo
  - Script: 


Script name: AssetBundles
  - Script: 


Script name: Assets
  - Script: 


Script name: Bundles
  - Script: 


Script name: CollectibleResellableInstances
  - Script: 


Script name: CreatingExperiences
  - Script: 


Script name: DetailsInformation
  - Script: 


Script name: EquippedAssets
  - Script: 


Script name: FavoriteAssets
  - Script: 


Script name: FavoriteBundles
  - Script: 


Script name: Favorites
  - Script: 


Script name: GamepadEnabled
  - Script: 


Script name: InspectAndBuyReducer
  - Script: 


Script name: IsLoaded
  - Script: 


Script name: IsSubjectToChinaPolicies
  - Script: 


Script name: ItemBeingPurchased
  - Script: 


Script name: Locale
  - Script: 


Script name: Overlay
  - Script: 


Script name: PlayerId
  - Script: 


Script name: PlayerName
  - Script: 


Script name: StoreId
  - Script: 


Script name: TryingOnInfo
  - Script: 


Script name: View
  - Script: 


Script name: Visible
  - Script: 


Script name: GetIsFavorite
  - Script: 


Script name: GotCurrentFavoriteCount
  - Script: 


Script name: GotFavoriteForDetailsItem
  - Script: 


Script name: IsDetailsItemPartOfBundleAndOffsale
  - Script: 


Script name: Analytics
  - Script: 


Script name: Network
  - Script: 


Script name: Symbol
  - Script: 


Script name: getMockModel
  - Script: 


Script name: MockNetwork
  - Script: 


Script name: TestContainer
  - Script: 


Script name: Thunk
  - Script: 


Script name: CreateFavoriteForAsset
  - Script: 


Script name: CreateFavoriteForBundle
  - Script: 


Script name: DeleteFavoriteForAsset
  - Script: 


Script name: DeleteFavoriteForBundle
  - Script: 


Script name: GetAssetBundles
  - Script: 


Script name: GetAssetFavoriteCount
  - Script: 


Script name: GetAssetsFromHumanoidDescription
  - Script: 


Script name: GetBundleFavoriteCount
  - Script: 


Script name: GetCharacterModelFromUserId
  - Script: 


Script name: GetCollectibleResellableInstances
  - Script: 


Script name: GetEconomyProductInfo
  - Script: 


Script name: GetExperienceInfo
  - Script: 


Script name: GetExperiencePlayability
  - Script: 


Script name: GetFavoriteForAsset
  - Script: 


Script name: GetFavoriteForBundle
  - Script: 


Script name: GetHumanoidDescriptionFromCostumeId
  - Script: 


Script name: GetItemDetails
  - Script: 


Script name: GetPlayerName
  - Script: 


Script name: GetProductInfo
  - Script: 


Script name: GetVersionInfo
  - Script: 


Script name: PromptPurchase
  - Script: 


Script name: ReportOpenDetailsPage
  - Script: 


Script name: SendCounter
  - Script: 


Script name: TryOnItem
  - Script: 


Script name: UpdateOwnedStatus
  - Script: 


Script name: UtilityFunctions
  - Script: 


Script name: WideLandscapeView
  - Script: 


Script name: WideView
  - Script: 


Script name: isNewTiltIconEnabled
  - Script: 


Script name: NetworkPauseNotification
  - Script: 


Script name: PublishAssetPrompt
  - Script: 


Script name: CloseOpenPrompt
  - Script: 


Script name: CloseResultModal
  - Script: 


Script name: OpenPublishAssetPrompt
  - Script: 


Script name: OpenPublishAvatarPrompt
  - Script: 


Script name: OpenResultModal
  - Script: 


Script name: OpenValidationErrorModal
  - Script: 


Script name: SetHumanoidModel
  - Script: 


Script name: SetPriceInRobux
  - Script: 


Script name: SetPromptVisibility
  - Script: 


Script name: AssetDescriptionTextBox
  - Script: 


Script name: BasePublishPrompt
  - Script: 


Script name: InteractionFrame
  - Script: 


Script name: LabeledTextBox
  - Script: 


Script name: NameTextBox
  - Script: 


Script name: ObjectViewport
  - Script: 


Script name: PreviewViewport
  - Script: 


Script name: PublishInfoList
  - Script: 


Script name: EmoteThumbnailEditor
  - Script: 


Script name: EmoteThumbnailParameters
  - Script: 


Script name: EmoteThumbnailView
  - Script: 


Script name: LeaveCreationAlert
  - Script: 


Script name: ObjectViewport
  - Script: 


Script name: PublishAssetPromptApp
  - Script: 


Script name: PublishAssetPromptSingleStep
  - Script: 


Script name: AvatarItemCard
  - Script: 


Script name: AvatarPartGrid
  - Script: 


Script name: AvatarPartViewport
  - Script: 


Script name: PublishAvatarPrompt
  - Script: 


Script name: ResultModal
  - Script: 


Script name: ValidationErrorModal
  - Script: 


Script name: ConnectAssetServiceEvents
  - Script: 


Script name: Constants
  - Script: 


Script name: FFlagAppendBodyPartToTitle
  - Script: 


Script name: FFlagFixPublishAvatarVRViewports
  - Script: 


Script name: FFlagHideAvatarIECPromptOnUpsellSuccess
  - Script: 


Script name: GetFFlagValidateDescription
  - Script: 


Script name: PromptType
  - Script: 


Script name: Reducer
  - Script: 


Script name: PromptRequestReducer
  - Script: 


Script name: CloseResultModal
  - Script: 


Script name: OpenPublishAssetPrompt
  - Script: 


Script name: OpenPublishAvatarPrompt
  - Script: 


Script name: OpenResultModal
  - Script: 


Script name: OpenValidationErrorModal
  - Script: 


Script name: Analytics
  - Script: 


Script name: mountSelfViewOnCloseTooltip
  - Script: 


Script name: mountSelfViewOnOpenTooltip
  - Script: 


Script name: publicApi
  - Script: 


Script name: SelfViewTooltipFTUX
  - Script: 


Script name: selfViewVisibilityUpdatedSignal
  - Script: 


Script name: toggleSelfViewSignal
  - Script: 


Script name: BubbleChat
  - Script: 


Script name: ChannelsBar
  - Script: 


Script name: ChannelsTab
  - Script: 


Script name: ChatBar
  - Script: 


Script name: ChatChannel
  - Script: 


Script name: ChatInstallVerifier
  - Script: 


Script name: ChatMain
  - Script: 


Script name: ChatScript
  - Script: 


Script name: ChatWindow
  - Script: 


Script name: ChatWindowInstaller
  - Script: 


Script name: CommandProcessor
  - Script: 


Script name: CurveUtil
  - Script: 


Script name: ChatConstants
  - Script: 


Script name: ChatLocalization
  - Script: 


Script name: ChatSettings
  - Script: 


Script name: ClearMessages
  - Script: 


Script name: DeveloperConsole
  - Script: 


Script name: GetVersion
  - Script: 


Script name: PlayEmote
  - Script: 


Script name: SwallowGuestChat
  - Script: 


Script name: SwitchChannel
  - Script: 


Script name: Team
  - Script: 


Script name: Util
  - Script: 


Script name: Whisper
  - Script: 


Script name: DefaultChatMessage
  - Script: 


Script name: MeCommandMessage
  - Script: 


Script name: SetCoreMessage
  - Script: 


Script name: SystemMessage
  - Script: 


Script name: UnknownMessage
  - Script: 


Script name: Util
  - Script: 


Script name: WelcomeMessage
  - Script: 


Script name: WhisperMessage
  - Script: 


Script name: MessageLabelCreator
  - Script: 


Script name: MessageLogDisplay
  - Script: 


Script name: MessageSender
  - Script: 


Script name: TransparencyTweener
  - Script: 


Script name: FreeCamera
  - Script: 


Script name: FreeCameraInstaller
  - Script: 


Script name: SendChatAnalytics
  - Script: 


Script name: ChatChannel
  - Script: 


Script name: ChatService
  - Script: 


Script name: ChatServiceInstaller
  - Script: 


Script name: ChatServiceRunner
  - Script: 


Script name: DefaultChatLocalization
  - Script: 


Script name: ChatCommandsTeller
  - Script: 


Script name: ChatFloodDetector
  - Script: 


Script name: ChatMessageValidator
  - Script: 


Script name: ExtraDataInitializer
  - Script: 


Script name: FriendJoinNotifier
  - Script: 


Script name: MeCommand
  - Script: 


Script name: MuteSpeaker
  - Script: 


Script name: PrivateMessaging
  - Script: 


Script name: TeamChat
  - Script: 


Script name: DisplayNameHelpers
  - Script: 


Script name: Speaker
  - Script: 


Script name: Util
  - Script: 


Script name: PlayerSettings
  - Script: 


Script name: ServerPlayerInstaller
  - Script: 


Script name: SoundDispatcher
  - Script: 


Script name: SoundDispatcherInstaller
  - Script: 


Script name: ServerUtil
  - Script: 


Script name: UGCValidationFunctionInstaller
  - Script: 


Script name: VRAvatarGesturesServer
  - Script: 


Script name: BlockingAnalytics
  - Script: 


Script name: CoreGuiFinalStateAnalytics
  - Script: 


Script name: VoiceAnalytics
  - Script: 


Script name: BackButtonController
  - Script: 


Script name: cameraDevicePermissionGrantedSignal
  - Script: 


Script name: cameraDevicesHelper
  - Script: 


Script name: ActionModal
  - Script: 


Script name: BlockingModalContainer
  - Script: 


Script name: BlockingModalScreen
  - Script: 


Script name: DropdownMenu
  - Script: 


Script name: MenuBackButton
  - Script: 


Script name: MenuFrontButton
  - Script: 


Script name: MuteToggles
  - Script: 


Script name: OverscanWrapper
  - Script: 


Script name: PermissionButton
  - Script: 


Script name: PermissionsButtons
  - Script: 


Script name: RecordingIndicator
  - Script: 


Script name: CheckboxRow
  - Script: 


Script name: ReportActionAreYouSure
  - Script: 


Script name: ReportActionSelection
  - Script: 


Script name: ReportConfirmationContainer
  - Script: 


Script name: ReportConfirmationScreen
  - Script: 


Script name: SettingsFullScreenTitleBar
  - Script: 


Script name: SeamlessVoiceStatus
  - Script: 


Script name: UserSorts
  - Script: 


Script name: FFlagInExperienceMenuCanvasGroupsInvisible
  - Script: 


Script name: FFlagInExperienceMenuReorderFirstVariant
  - Script: 


Script name: FFlagOverrideInExperienceMenuReorderFirstVariant
  - Script: 


Script name: FFlagRefactorInExpGameSettings
  - Script: 


Script name: GetFFlagAbuseReportAnalyticsHasLaunchData
  - Script: 


Script name: GetFFlagDefaultFriendingLabelTextNonEmpty
  - Script: 


Script name: GetFFlagDisableMuteAllCheckForIsMuted
  - Script: 


Script name: GetFFlagEnableExplicitSettingsChangeAnalytics
  - Script: 


Script name: GetFFlagEnableLeaveGameUpsellEntrypoint
  - Script: 


Script name: GetFFlagFixCyclicFullscreenIndexEvent
  - Script: 


Script name: GetFFlagFixIGMBottomBarVisibility
  - Script: 


Script name: GetFFlagFixIGMTabTransitions
  - Script: 


Script name: GetFFlagFixPermissionsButtonsEvents
  - Script: 


Script name: GetFFlagIGMv1ARFlowExpandedAnalyticsEnabled
  - Script: 


Script name: GetFFlagMuteTogglesEnableIXP
  - Script: 


Script name: GetFFlagReportAbuseMenuEntrypointAnalytics
  - Script: 


Script name: GetFFlagRetryMutingNonFriends
  - Script: 


Script name: GetFFlagSettingsHubButtonCanBeDisabled
  - Script: 


Script name: GetFFlagShareGameSearchBoxFocusAnalytics
  - Script: 


Script name: GetFFlagShowMuteToggles
  - Script: 


Script name: GetFFlagSingleUserInvitePageKeybind
  - Script: 


Script name: GetFFlagUseFriendsPropsInMuteToggles
  - Script: 


Script name: GetFIntIGMv1ARFlowCSWaitFrames
  - Script: 


Script name: GetFStringInExperienceMenuIXPLayer
  - Script: 


Script name: GetFStringInExperienceMenuIXPVar
  - Script: 


Script name: GetFStringMuteTogglesIXPLayerName
  - Script: 


Script name: FrontButtonController
  - Script: 


Script name: getCamMicPermissions
  - Script: 


Script name: GfxReset
  - Script: 


Script name: Integrations
  - Script: 


Script name: Constants
  - Script: 


Script name: CameraInverted
  - Script: 


Script name: Fullscreen
  - Script: 


Script name: Haptics
  - Script: 


Script name: PerformanceStats
  - Script: 


Script name: ReducedMotion
  - Script: 


Script name: ShiftLock
  - Script: 


Script name: UINavToggle
  - Script: 


Script name: Settings
  - Script: 


Script name: Utils
  - Script: 


Script name: isCamEnabledForUserAndPlace
  - Script: 


Script name: isCameraOnlyUser
  - Script: 


Script name: leaveGame
  - Script: 


Script name: Game
  - Script: 


Script name: onBlockButtonActivated
  - Script: 


Script name: AppChat
  - Script: 


Script name: CapturesPageWrapper
  - Script: 


Script name: ExitModal
  - Script: 


Script name: GameSettings
  - Script: 


Script name: ChatTranslationOptionsWithChatLanguageSwitcherInitializer
  - Script: 


Script name: GameSettingsWrapper
  - Script: 


Script name: Help
  - Script: 


Script name: LeaveGame
  - Script: 


Script name: LeaveGameToHome
  - Script: 


Script name: LeaveGameUpsell
  - Script: 


Script name: Players
  - Script: 


Script name: Record
  - Script: 


Script name: ReportAbuseMenuNewContainerPage
  - Script: 


Script name: ReportSentPage
  - Script: 


Script name: ReportSentPageV2
  - Script: 


Script name: ResetCharacter
  - Script: 


Script name: ClosePage
  - Script: 


Script name: OpenPage
  - Script: 


Script name: ReceivedUserInviteStatus
  - Script: 


Script name: SetDeviceLayout
  - Script: 


Script name: SetGameInfoCreated
  - Script: 


Script name: SetIsSmallTouchScreen
  - Script: 


Script name: SetSearchAreaActive
  - Script: 


Script name: SetSearchText
  - Script: 


Script name: StoppedToastTimer
  - Script: 


Script name: AppReducer
  - Script: 


Script name: App
  - Script: 


Script name: BackButton
  - Script: 


Script name: ConversationDetails
  - Script: 


Script name: ConversationEntry
  - Script: 


Script name: ConversationList
  - Script: 


Script name: ConversationThumbnail
  - Script: 


Script name: ErrorToaster
  - Script: 


Script name: FriendsErrorPage
  - Script: 


Script name: FullModalShareGameComponent
  - Script: 


Script name: Header
  - Script: 


Script name: IconButton
  - Script: 


Script name: InviteButton
  - Script: 


Script name: InviteListEntry
  - Script: 


Script name: InviteSingleUserContainer
  - Script: 


Script name: LayoutProvider
  - Script: 


Script name: LoadingFriendsPage
  - Script: 


Script name: LoadingModal
  - Script: 


Script name: ModalShareGamePageFrame
  - Script: 


Script name: NoFriendsPage
  - Script: 


Script name: RectangleButton
  - Script: 


Script name: SearchArea
  - Script: 


Script name: SearchBox
  - Script: 


Script name: ShareButton
  - Script: 


Script name: ShareGameContainer
  - Script: 


Script name: ShareGamePageFrame
  - Script: 


Script name: ShareInviteLink
  - Script: 


Script name: ShareInviteLinkMapDispatchToProps
  - Script: 


Script name: ShareInviteLinkMapStateToProps
  - Script: 


Script name: SingleUserThumbnail
  - Script: 


Script name: Constants
  - Script: 


Script name: getCustomizedInvitePromptParams
  - Script: 


Script name: getTranslator
  - Script: 


Script name: InviteStore
  - Script: 


Script name: InviteToGamePrompt
  - Script: 


Script name: mockTranslator
  - Script: 


Script name: NewInviteMenuExperimentManager
  - Script: 


Script name: PresenceUtil
  - Script: 


Script name: ConversationsSearch
  - Script: 


Script name: DeviceInfo
  - Script: 


Script name: GameInfo
  - Script: 


Script name: Invites
  - Script: 


Script name: Page
  - Script: 


Script name: Toasts
  - Script: 


Script name: ShareGameIcons
  - Script: 


Script name: ThrottleFunctionCall
  - Script: 


Script name: ApiFetchUsersFriends
  - Script: 


Script name: ApiGetCanSendAndCanCustomizeInvites
  - Script: 


Script name: ApiSendGameInvite
  - Script: 


Script name: FetchUserFriends
  - Script: 


Script name: InviteUserIdToPlaceId
  - Script: 


Script name: InviteUserIdToPlaceIdCustomized
  - Script: 


Script name: ShareGamePlaceholderPage
  - Script: 


Script name: SettingsReducer
  - Script: 


Script name: Constants
  - Script: 


Script name: GameSettingsConstants
  - Script: 


Script name: MicrophoneDevicePermissionsLogging
  - Script: 


Script name: SharedSettingsService
  - Script: 


Script name: Settings.storybook
  - Script: 


Script name: SettingsHub
  - Script: 


Script name: SettingsPageFactory
  - Script: 


Script name: SettingsState
  - Script: 


Script name: ShareGameMaster
  - Script: 


Script name: Theme
  - Script: 


Script name: Utility
  - Script: 


Script name: Shimmer
  - Script: 


Script name: shouldSaveScreenshotToAlbum
  - Script: 


Script name: SocialUtil
  - Script: 


Script name: BarGraph
  - Script: 


Script name: BaseMemoryAnalyzer
  - Script: 


Script name: ClientMemoryAnalyzer
  - Script: 


Script name: DecoratedValueLabel
  - Script: 


Script name: ServerMemoryAnalyzer
  - Script: 


Script name: StatsAggregator
  - Script: 


Script name: StatsAggregatorManager
  - Script: 


Script name: StatsAnnotatedGraph
  - Script: 


Script name: StatsButton
  - Script: 


Script name: StatsMiniTextPanel
  - Script: 


Script name: StatsTextPanel
  - Script: 


Script name: StatsUtils
  - Script: 


Script name: StatsViewer
  - Script: 


Script name: TreeViewItem
  - Script: 


Script name: TenFootInterface
  - Script: 


Script name: MockAppStorageService
  - Script: 


Script name: MockGuiService
  - Script: 


Script name: MockVRService
  - Script: 


Script name: TopBar
  - Script: 


Script name: RemoveKeepOutArea
  - Script: 


Script name: SetBackpackOpen
  - Script: 


Script name: SetCanChat
  - Script: 


Script name: SetEmotesEnabled
  - Script: 


Script name: SetEmotesOpen
  - Script: 


Script name: SetGameName
  - Script: 


Script name: SetGamepadMenuOpen
  - Script: 


Script name: SetGamepadNavigationDialogOpen
  - Script: 


Script name: SetInputType
  - Script: 


Script name: SetInspectMenuOpen
  - Script: 


Script name: SetIsDead
  - Script: 


Script name: SetKeepOutArea
  - Script: 


Script name: SetLeaderboardOpen
  - Script: 


Script name: SetMenuOpen
  - Script: 


Script name: SetMoreMenuOpen
  - Script: 


Script name: SetRespawnBehaviour
  - Script: 


Script name: SetScreenSize
  - Script: 


Script name: SetSmallTouchDevice
  - Script: 


Script name: SetTopBarEnabled
  - Script: 


Script name: UpdateChatMessages
  - Script: 


Script name: UpdateChatVisible
  - Script: 


Script name: UpdateCoreGuiEnabled
  - Script: 


Script name: UpdateHealth
  - Script: 


Script name: UpdateUnreadMessagesBadge
  - Script: 


Script name: Analytics
  - Script: 


Script name: Connection
  - Script: 


Script name: ChatConnector
  - Script: 


Script name: CoreGuiConnector
  - Script: 


Script name: EnabledNotifier
  - Script: 


Script name: HealthConnector
  - Script: 


Script name: LastInputTypeConnector
  - Script: 


Script name: MenuConnector
  - Script: 


Script name: OpenUIConnector
  - Script: 


Script name: GamepadConnector
  - Script: 


Script name: MenuIconContext
  - Script: 


Script name: BadgeOver12
  - Script: 


Script name: BadgeOver13
  - Script: 


Script name: AnalyticsContext
  - Script: 


Script name: Badge
  - Script: 


Script name: BadgeOver13
  - Script: 


Script name: openWebview
  - Script: 


Script name: Popup
  - Script: 


Script name: useAnalytics
  - Script: 


Script name: ChatIcon
  - Script: 


Script name: ChatIconFtuxTooltip
  - Script: 


Script name: ConnectIcon
  - Script: 


Script name: FlashingDot
  - Script: 


Script name: FlashingDotV2
  - Script: 


Script name: GamepadMenu
  - Script: 


Script name: ChatIcon
  - Script: 


Script name: MenuCell
  - Script: 


Script name: MenuHeader
  - Script: 


Script name: MenuNavigationToggleDialog
  - Script: 


Script name: QuickMenuControllerBar
  - Script: 


Script name: GamepadNavigationDialog
  - Script: 


Script name: GamepadNavigationDialog
  - Script: 


Script name: GamepadNavigationDialogShowCounter
  - Script: 


Script name: HeadsetMenu
  - Script: 


Script name: DisconnectedDialog
  - Script: 


Script name: HealthBar
  - Script: 


Script name: HurtOverlay
  - Script: 


Script name: IconButton
  - Script: 


Script name: MenuIcon
  - Script: 


Script name: menuIconHoveredSignal
  - Script: 


Script name: MoreMenu
  - Script: 


Script name: RecordingPill
  - Script: 


Script name: VoiceBetaBadge
  - Script: 


Script name: TopBarApp
  - Script: 


Script name: Constants
  - Script: 


Script name: FFlagAlwaysSelectButtonDismissesGamepadNavigationDialog
  - Script: 


Script name: FFlagAlwaysShowGamepadNavigationDialog
  - Script: 


Script name: FFlagGamepadNavigationDialogABTest
  - Script: 


Script name: FFlagLocalizeMenuNavigationToggleDialog
  - Script: 


Script name: FFlagMountCoreGuiHealthBar
  - Script: 


Script name: FFlagUnibarMenuIconLayoutFix
  - Script: 


Script name: GetFFlagChangeTopbarHeightCalculation
  - Script: 


Script name: GetFFlagEnableChromeBackwardsSignalAPI
  - Script: 


Script name: GetFFlagEnableTopBarAnalytics
  - Script: 


Script name: GetFFlagFixHealthDesync
  - Script: 


Script name: GetFFlagRemoveTopBarInputTypeRodux
  - Script: 


Script name: GetFIntGamepadNavigationDialogShowCount
  - Script: 


Script name: GetFStringGamepadNavigationDialogABTestLayerName
  - Script: 


Script name: GlobalConfig
  - Script: 


Script name: Reducer
  - Script: 


Script name: Chat
  - Script: 


Script name: CoreGuiEnabled
  - Script: 


Script name: DisplayOptions
  - Script: 


Script name: GameInfo
  - Script: 


Script name: Health
  - Script: 


Script name: MoreMenu
  - Script: 


Script name: Respawn
  - Script: 


Script name: registerSetCores
  - Script: 


Script name: GetCanChat
  - Script: 


Script name: GetGameName
  - Script: 


Script name: RespawnCharacter
  - Script: 


Script name: MenuNavigationPromptTokenMapper
  - Script: 


Script name: TopBar.storybook
  - Script: 


Script name: TopBarAppPolicy
  - Script: 


Script name: TrackerMenu
  - Script: 


Script name: TrackerPrompt
  - Script: 


Script name: TrackerPromptType
  - Script: 


Script name: TrustAndSafety
  - Script: 


Script name: BeginReportFlow
  - Script: 


Script name: CloseBlockPlayerDialog
  - Script: 


Script name: CloseCategoryMenu
  - Script: 


Script name: CloseReportDialog
  - Script: 


Script name: CloseReportMenu
  - Script: 


Script name: CloseReportSentDialog
  - Script: 


Script name: EndReportFlow
  - Script: 


Script name: Hide
  - Script: 


Script name: NavigateBack
  - Script: 


Script name: OpenBlockPlayerDialog
  - Script: 


Script name: OpenCategoryMenu
  - Script: 


Script name: OpenReportDialog
  - Script: 


Script name: OpenReportMenu
  - Script: 


Script name: OpenReportSentDialog
  - Script: 


Script name: ScreenshotAnnotated
  - Script: 


Script name: SelectReportCategory
  - Script: 


Script name: SelectReportListing
  - Script: 


Script name: SetIdentifiedAvatars
  - Script: 


Script name: SetPlaceInfo
  - Script: 


Script name: SetScreenSize
  - Script: 


Script name: SetSelectedAvatars
  - Script: 


Script name: SetVoiceReportingFlow
  - Script: 


Script name: Show
  - Script: 


Script name: ShowToast
  - Script: 


Script name: BlockPlayerItem
  - Script: 


Script name: DebugCanvas
  - Script: 


Script name: FillCircle
  - Script: 


Script name: GameCell
  - Script: 


Script name: ModalDialog
  - Script: 


Script name: RestartScreenshotDialog
  - Script: 


Script name: ScreenshotDialog
  - Script: 


Script name: ScreenshotDialogLandscapeModeHeader
  - Script: 


Script name: ScreenshotDialogPortraitModeHeader
  - Script: 


Script name: ScreenshotFlowStepHandler
  - Script: 


Script name: ScreenshotFlowStepHandlerContainer
  - Script: 


Script name: ScreenshotHighlighter
  - Script: 


Script name: ScreenshotLoadingDialog
  - Script: 


Script name: ScreenshotReviewDialog
  - Script: 


Script name: ReportCategoryDialog
  - Script: 


Script name: ReportDialog
  - Script: 


Script name: ReportMenu
  - Script: 


Script name: ReportSentDialog
  - Script: 


Script name: TextEntryField
  - Script: 


Script name: Toast
  - Script: 


Script name: TrustAndSafetyApp
  - Script: 


Script name: VirtualKeyboardMonitor
  - Script: 


Script name: Dependencies
  - Script: 


Script name: GetFFlagEnableARFlowSession
  - Script: 


Script name: GetFFlagEnableMOAForNonVoiceUsers
  - Script: 


Script name: GetFFlagEnableNewVoiceReportFlows
  - Script: 


Script name: GetFFlagEnableOptionalScreenshotButton2
  - Script: 


Script name: GetFFlagRAScreenshotOncePerMenuOpenEnabled
  - Script: 


Script name: GetFFlagReportAbuseMenuAutosizeYEnabled
  - Script: 


Script name: GetFFlagReportAnythingDebugCanvas
  - Script: 


Script name: GetFFlagReportAnythingLocalizationEnabled
  - Script: 


Script name: GetFFlagReportAnythingMultistepScreenshot
  - Script: 


Script name: GetFFlagReportAnythingScreenshot
  - Script: 


Script name: GetFFlagShrinkReportMenuForVisibility
  - Script: 


Script name: GetFIntIGMv1ARFlowScreenshotDelayFrames
  - Script: 


Script name: GetFIntRAMaxAnnotationCount
  - Script: 


Script name: IXPVoiceAbuseReportReportAbuseMenu
  - Script: 


Script name: GlobalConfig
  - Script: 


Script name: Reducers
  - Script: 


Script name: common
  - Script: 


Script name: displayOptions
  - Script: 


Script name: placeInfo
  - Script: 


Script name: report
  - Script: 


Script name: Assets
  - Script: 


Script name: Constants
  - Script: 


Script name: BlockPlayer
  - Script: 


Script name: FetchPlaceInfo
  - Script: 


Script name: FilterIdentifiedAvatars
  - Script: 


Script name: IdentifyAvatars
  - Script: 


Script name: SendReport
  - Script: 


Script name: TrustAndSafetyAppPolicy
  - Script: 


Script name: AbuseReportBuilder
  - Script: 


Script name: GetHumanoidDescription
  - Script: 


Script name: ReportAnythingAnalytics
  - Script: 


Script name: ReportManager
  - Script: 


Script name: ScreenshotHelper
  - Script: 


Script name: ScreenshotHookManager
  - Script: 


Script name: SendAnalytics
  - Script: 


Script name: SessionUtility
  - Script: 


Script name: Constants
  - Script: 


Script name: createCompatPanel
  - Script: 


Script name: createUIGroupDragBar
  - Script: 


Script name: DragBar
  - Script: 


Script name: registerRoactPanel
  - Script: 


Script name: UIManager
  - Script: 


Script name: Utils
  - Script: 


Script name: getFFlagDirectionalAnalogStick
  - Script: 


Script name: getFFlagDirectionalAnalogStickBillboardGuiSupport
  - Script: 


Script name: Input
  - Script: 


Script name: Interface
  - Script: 


Script name: OnRenderStep
  - Script: 


Script name: Properties
  - Script: 


Script name: VirtualCursorMain
  - Script: 


Script name: DevicePermissionsModal
  - Script: 


Script name: VoiceChatConsentModal
  - Script: 


Script name: VoiceChatPrompt
  - Script: 


Script name: VoiceChatPromptFrame
  - Script: 


Script name: VoiceChatTooltip
  - Script: 


Script name: getMicDeeplinkDirections
  - Script: 


Script name: getPrimingText
  - Script: 


Script name: PromptType
  - Script: 


Script name: VoiceChatPrompt.storybook
  - Script: 


Script name: Dialog
  - Script: 


Script name: Healthbar3D
  - Script: 


Script name: IsSpatialRobloxGuiEnabled
  - Script: 


Script name: NotificationHub
  - Script: 


Script name: NotifierHint3D
  - Script: 


Script name: Recenter
  - Script: 


Script name: SafetyBubble
  - Script: 


Script name: UserGui
  - Script: 


Script name: VirtualKeyboard
  - Script: 


Script name: VRAvatarGesturesClient
  - Script: 


Script name: VRAvatarHeightScaling
  - Script: 


Script name: VRBarSeparator
  - Script: 


Script name: VRBarVoiceIcon
  - Script: 


Script name: VRBottomBar
  - Script: 


Script name: VRHub
  - Script: 


Script name: Watermark
  - Script: 


Script name: WatermarkComponent
  - Script: 


Script name: MobService
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_CreateService_result1_upvr = Knit_upvr.CreateService({
	Name = "MobService";
	Client = {
		UpdateClientCamps = Knit_upvr.CreateSignal();
	};
})
local tbl_upvr_2 = {}
local tbl_upvr = {}
any_CreateService_result1_upvr.Camps = {}
any_CreateService_result1_upvr.Underlings = {}
any_CreateService_result1_upvr.Anchors = {}
any_CreateService_result1_upvr.AnchorSlotsPlaced = 0
function any_CreateService_result1_upvr.RemovePlacedResourceBlock(arg1, arg2) -- Line 26
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	for _, v in pairs(any_CreateService_result1_upvr.Anchors) do
		for i_2, v_2 in pairs(v.SpawnedResources) do
			if v_2.Index == arg2.Index then
				v.SpawnedResources[i_2] = nil
			end
		end
	end
end
function any_CreateService_result1_upvr.StartAnchor(arg1, arg2) -- Line 36
	--[[ Upvalues[3]:
		[1]: any_CreateService_result1_upvr (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: tbl_upvr (readonly)
	]]
	local var19 = any_CreateService_result1_upvr
	var19.AnchorSlotsPlaced += 1
	repeat
		wait()
	until tbl_upvr_2.BlockService.IslandInitialised == true
	local any_new_result1_2 = tbl_upvr.AnchorObject.new(arg2)
	any_CreateService_result1_upvr.Anchors[arg2.Index] = any_new_result1_2
	any_new_result1_2:SpawnUnderling()
	any_new_result1_2:Initialise()
end
function any_CreateService_result1_upvr.DestroyAnchor(arg1, arg2) -- Line 49
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	local var21 = any_CreateService_result1_upvr
	var21.AnchorSlotsPlaced -= 1
	if not any_CreateService_result1_upvr.Anchors[arg2.Index] then
	else
		any_CreateService_result1_upvr.Anchors[arg2.Index]:Destroy()
		any_CreateService_result1_upvr.Anchors[arg2.Index] = nil
	end
end
function any_CreateService_result1_upvr.DestroyMob(arg1, arg2, arg3) -- Line 59
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	for i_3, v_3 in pairs(any_CreateService_result1_upvr.Camps[arg2].Mobs) do
		if v_3.Index == arg3 then
			v_3:Destroy()
			table.remove(any_CreateService_result1_upvr.Camps[arg2].Mobs, i_3)
		end
	end
	any_CreateService_result1_upvr.Client.UpdateClientCamps:FireAll(any_CreateService_result1_upvr.Camps)
end
local function AttackMobs(arg1, arg2, arg3, arg4) -- Line 69
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	for _, v_4 in pairs(arg4) do
		for _, v_5 in pairs(any_CreateService_result1_upvr.Camps) do
			for _, v_6 in pairs(v_5.Mobs) do
				if v_6.Index == v_4 then
					v_6:Damage(arg2, arg3)
				end
			end
		end
	end
	any_CreateService_result1_upvr.Client.UpdateClientCamps:FireAll(any_CreateService_result1_upvr.Camps)
end
any_CreateService_result1_upvr.AttackMobs = AttackMobs
any_CreateService_result1_upvr.Client.AttackMobs = function(arg1, arg2, arg3, arg4) -- Line 82, Named "AttackMobs"
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: any_CreateService_result1_upvr (readonly)
	]]
	if not CoreUtil_upvr:ValidateEquippedTool(arg2, arg3) then
	else
		if not CoreUtil_upvr:ValidateMobIds(arg2, arg4) or #arg4 == 0 then return end
		any_CreateService_result1_upvr:AttackMobs(arg2, arg3, arg4)
	end
end
any_CreateService_result1_upvr.Client.GetCamps = function(arg1) -- Line 88, Named "GetCamps"
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	return any_CreateService_result1_upvr.Camps
end
local TableUtil_upvr = require(ReplicatedStorage.Packages.TableUtil)
any_CreateService_result1_upvr.Client.GetUnderlingFromIndex = function(arg1, arg2, arg3) -- Line 92, Named "GetUnderlingFromIndex"
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: TableUtil_upvr (readonly)
	]]
	if not CoreUtil_upvr:ValidateString(arg3) then return end
	local any_GetUnderlingFromIndex_result1 = CoreUtil_upvr:GetUnderlingFromIndex(arg3)
	if not any_GetUnderlingFromIndex_result1 then return end
	local any_Copy_result1 = TableUtil_upvr.Copy(any_GetUnderlingFromIndex_result1, true)
	any_Copy_result1.Alive = nil
	any_Copy_result1.Animations = nil
	any_Copy_result1.Animator = nil
	any_Copy_result1.InAction = nil
	any_Copy_result1.MobModel = nil
	any_Copy_result1.Path = nil
	any_Copy_result1.PathGoal = nil
	any_Copy_result1.State = nil
	return any_Copy_result1
end
function SpawnMob(arg1) -- Line 114
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: any_CreateService_result1_upvr (readonly)
	]]
	local any_new_result1 = tbl_upvr.MobObject.new(arg1.MobTypes[math.random(1, #arg1.MobTypes)], arg1.Id)
	any_new_result1:Spawn(arg1)
	table.insert(arg1.Mobs, any_new_result1)
	any_CreateService_result1_upvr.Client.UpdateClientCamps:FireAll(any_CreateService_result1_upvr.Camps)
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
function InitialiseCamps() -- Line 127
	--[[ Upvalues[3]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: any_CreateService_result1_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	for i_7, v_7 in pairs(any_RequireDefinitions_result1_upvr.Camp) do
		if workspace.MobCamps:FindFirstChild(i_7) then
			any_CreateService_result1_upvr.Camps[i_7] = tbl_upvr.CampObject.new(v_7)
		end
	end
end
function StartCampsAndAnchors() -- Line 134
	--[[ Upvalues[1]:
		[1]: any_CreateService_result1_upvr (readonly)
	]]
	-- KONSTANTERROR: [233] 151. Error Block 66 start (CF ANALYSIS FAILED)
	local pairs_result1_3, pairs_result2_7, pairs_result3 = pairs(any_CreateService_result1_upvr.Underlings)
	for _, _ in pairs_result1_3, pairs_result2_7, pairs_result3 do
	end
	-- KONSTANTERROR: [233] 151. Error Block 66 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 73 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 73 end (CF ANALYSIS FAILED)
end
function any_CreateService_result1_upvr.KnitStart(arg1) -- Line 228
	--[[ Upvalues[4]:
		[1]: tbl_upvr_2 (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: any_CreateService_result1_upvr (readonly)
	]]
	tbl_upvr_2.DataHandlerService = Knit_upvr.GetService("DataHandlerService")
	tbl_upvr_2.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr_2.BlockService = Knit_upvr.GetService("BlockService")
	tbl_upvr.MobObject = require(script.MobObject)
	tbl_upvr.CampObject = require(script.CampObject)
	tbl_upvr.AnchorObject = require(script.AnchorObject)
	InitialiseCamps()
	StartCampsAndAnchors()
	any_CreateService_result1_upvr.Client.UpdateClientCamps:FireAll(any_CreateService_result1_upvr.Camps)
end
return any_CreateService_result1_upvr

Script name: AnchorObject
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local BlockService_upvr = Knit.GetService("BlockService")
local DataHandlerService_upvr = Knit.GetService("DataHandlerService")
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1) -- Line 22
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.BlockObject = arg1
	module.Underling = nil
	module.Destroyed = false
	module.UnderlingIndex = nil
	module.SpawnedResources = {}
	return module
end
function module_upvr.Initialise(arg1) -- Line 38
	if not arg1.Underling or not arg1.BlockObject then
	else
		local ResourceType = arg1.Underling.Def.ResourceType
		if not ResourceType or ResourceType.ResourceType == "Crop" then return end
		while task.wait(15) and arg1.Destroyed == false do
			arg1:SpawnResource()
		end
	end
end
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function module_upvr.SpawnResource(arg1) -- Line 52
	--[[ Upvalues[4]:
		[1]: TableUtil_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: BlockService_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 57 start (CF ANALYSIS FAILED)
	local var22
	if not arg1.Underling or not arg1.BlockObject then return end
	var22 = arg1.Underling
	if not var22.Def.ResourceType then return end
	var22 = var22.Def.ResourceType.BlockIds
	var22 = 0
	for _, _ in pairs(arg1.SpawnedResources) do
		var22 += 1
	end
	if 12 <= var22 then return end
	for i_2 = 1, arg1.Underling.Def.WorkRadius, 3 do
		table.insert({}, i_2)
		table.insert({}, i_2)
		local var30
	end
	table.insert({}, 1)
	local pairs_result1_3, pairs_result2_3, pairs_result3 = pairs(TableUtil_upvr.Shuffle(var30))
	-- KONSTANTERROR: [0] 1. Error Block 57 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [326] 223. Error Block 46 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [326] 223. Error Block 46 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [99] 72. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [99] 72. Error Block 14 end (CF ANALYSIS FAILED)
end
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local MobService_upvr = Knit.GetService("MobService")
local HttpService_upvr = game:GetService("HttpService")
local UnderlingObject_upvr = require(script.UnderlingObject)
local PlayerService_upvr = Knit.GetService("PlayerService")
function module_upvr.SpawnUnderling(arg1) -- Line 144
	--[[ Upvalues[8]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: BlockService_upvr (readonly)
		[4]: DataHandlerService_upvr (readonly)
		[5]: MobService_upvr (readonly)
		[6]: HttpService_upvr (readonly)
		[7]: UnderlingObject_upvr (readonly)
		[8]: PlayerService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 36 start (CF ANALYSIS FAILED)
	local var47 = any_RequireDefinitions_result1_upvr.Block[arg1.BlockObject.Id]
	local any_GetData_result1_2 = CoreUtil_upvr:GetData(BlockService_upvr.IslandOwner, DataHandlerService_upvr)
	local var49
	if not any_GetData_result1_2 then return end
	if arg1.Underling then
		arg1:DespawnUnderling()
	end
	var49 = nil
	local pairs_result1, pairs_result2, pairs_result3_2 = pairs(any_GetData_result1_2.Underlings)
	-- KONSTANTERROR: [0] 1. Error Block 36 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [63] 45. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [63] 45. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [32] 24. Error Block 49 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [63.10]
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [63.11]
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [63.12]
	for _, _ in nil do
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [63.15]
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [63.8]
		local function INLINED() -- Internal function, doesn't exist in bytecode
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [63.16]
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			return nil ~= nil
		end
		if nil == nil or INLINED() then
		end
	end
	if var49 then
		if not var49 then
			var49 = {
				Index = HttpService_upvr:GenerateGUID(false);
				StorageCap = any_RequireDefinitions_result1_upvr.Underling[var47.BehaviourData.UnderlingType].MaxInventory;
				Id = var47.BehaviourData.UnderlingType;
				Storage = {};
			}
			table.insert(any_GetData_result1_2.Underlings, var49)
		end
		arg1.Underling = UnderlingObject_upvr.new(arg1.BlockObject, var49)
		-- KONSTANTWARNING: GOTO [115] #78
	end
	-- KONSTANTERROR: [32] 24. Error Block 49 end (CF ANALYSIS FAILED)
end
function module_upvr.DespawnUnderling(arg1) -- Line 213
	--[[ Upvalues[3]:
		[1]: CoreUtil_upvr (readonly)
		[2]: BlockService_upvr (readonly)
		[3]: DataHandlerService_upvr (readonly)
	]]
	local any_GetData_result1 = CoreUtil_upvr:GetData(BlockService_upvr.IslandOwner, DataHandlerService_upvr)
	if not any_GetData_result1 then
	elseif arg1.Underling then
		for i_4 = #any_GetData_result1.Underlings, 1, -1 do
			if any_GetData_result1.Underlings[i_4].Index == arg1.Underling.Data.Index then
				table.remove(any_GetData_result1.Underlings, i_4)
			end
		end
		arg1.Underling:Destroy()
		arg1.Underling = nil
	end
end
function module_upvr.ToggleAnchorIndestructibility(arg1) -- Line 233
	if arg1.Underling and 0 < #arg1.Underling.Data.Storage then
		arg1.BlockObject.Health = nil
	else
		arg1.BlockObject.Health = 100
	end
end
function module_upvr.Destroy(arg1) -- Line 248
	arg1.Destroyed = true
	arg1:DespawnUnderling()
end
return module_upvr

Script name: UnderlingObject
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
local Promise_upvr = require(ReplicatedStorage_upvr.Packages.Promise)
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
local SimplePath_upvr = require(ReplicatedStorage_upvr.Packages.SimplePath)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_RequireDefinitions_result1_upvr = CoreUtil_upvr:RequireDefinitions()
local MobService_upvr = Knit.GetService("MobService")
local InventoryService_upvr = Knit.GetService("InventoryService")
local BlockService_upvr = Knit.GetService("BlockService")
local PlayerService_upvr = Knit.GetService("PlayerService")
local TaskService_upvr = Knit.GetService("TaskService")
local module_upvr = {}
module_upvr.__index = module_upvr
local _ = {
	AgentRadius = 2;
	AgentHeight = 3;
	AgentWalkableClimb = 3.1;
	AgentCanJump = true;
	WaypointSpacing = 2;
}
local HttpService_upvr = game:GetService("HttpService")
function module_upvr.new(arg1, arg2) -- Line 37
	--[[ Upvalues[3]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: HttpService_upvr (readonly)
		[3]: module_upvr (readonly)
	]]
	local module = {}
	local var18 = any_RequireDefinitions_result1_upvr.Underling[any_RequireDefinitions_result1_upvr.Block[arg1.Id].BehaviourData.UnderlingType]
	module.Id = var18.Id
	module.Index = HttpService_upvr:GenerateGUID(false)
	module.Def = var18
	module.State = "Resting"
	module.Data = arg2
	module.BlockObject = arg1
	module.MobModel = nil
	module.Animations = nil
	module.Alive = false
	module.TargetBlockObject = nil
	module.UnobtainableTargets = {}
	module.InAction = false
	module.ActionUpdate = Instance.new("BindableEvent")
	module.StateChange = Instance.new("BindableEvent")
	return setmetatable(module, module_upvr)
end
function module_upvr.ValidateTarget(arg1) -- Line 71
	local TargetBlockObject = arg1.TargetBlockObject
	if TargetBlockObject then
		TargetBlockObject = arg1.TargetBlockObject.Part
	end
	return TargetBlockObject
end
function module_upvr.ValidateMobModel(arg1) -- Line 75
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if CoreUtil_upvr:ValidateHumanoid(arg1.MobModel) then
		return true
	end
	arg1:RespawnMob()
end
function module_upvr.DistanceFromTarget(arg1) -- Line 83
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if arg1:ValidateTarget() and arg1:ValidateMobModel() then
		return (arg1.MobModel.PrimaryPart.Position - CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(arg1.TargetBlockObject.Position))).magnitude
	end
end
function module_upvr.Pathfinding(arg1, arg2) -- Line 91
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: SimplePath_upvr (readonly)
	]]
	if not arg1:ValidateTarget() or not arg1:ValidateMobModel() then
	else
		arg1.PathGoal = arg2
		arg1.Path:Run(arg2)
		CoreUtil_upvr:CustomYeild(nil, arg1.Path.Reached, arg1.StateChange.Event, arg1.ActionUpdate.Event)
		if arg1.Path.Status == SimplePath_upvr.StatusType.Active then
			arg1.Path:Stop()
		end
		arg1.PathGoal = nil
	end
end
function module_upvr.GetNearbyResource(arg1, arg2) -- Line 110
	--[[ Upvalues[3]:
		[1]: CoreUtil_upvr (readonly)
		[2]: BlockService_upvr (readonly)
		[3]: any_RequireDefinitions_result1_upvr (readonly)
	]]
	for _, v in pairs(arg1.UnobtainableTargets) do
		if arg2.Part then
			table.insert({}, v)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	arg1.UnobtainableTargets = {}
	for i_2 = 0, arg1.Def.WorkRadius do
		for i_3 = 1, 6 do
			for i_4 = 0, arg1.Def.WorkRadius do
				local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(BlockService_upvr.Blocks, {
					X = arg2.Position.X + i_2 - arg1.Def.WorkRadius / 2;
					Y = arg2.Position.Y + i_3 - 3;
					Z = arg2.Position.Z + i_4 - arg1.Def.WorkRadius / 2;
				})
				if any_GetValueAtPosition_result1 then
					local var63
					if not var63 then
						var63 = nil
						local ResourceType = arg1.Def.ResourceType
						for _, v_2 in pairs(ResourceType.BlockIds) do
							if v_2 == any_GetValueAtPosition_result1.Id and (ResourceType.ResourceType ~= "Crop" or any_GetValueAtPosition_result1.TickProgress and any_GetValueAtPosition_result1.TickProgress.Stage >= any_RequireDefinitions_result1_upvr.Block[any_GetValueAtPosition_result1.Id].BehaviourData.StageCount) then
								var63 = true
							end
						end
						if var63 and not CoreUtil_upvr:IsMobMiningResource(any_GetValueAtPosition_result1) then
							return any_GetValueAtPosition_result1
						end
					end
				end
			end
		end
	end
end
function module_upvr.Action(arg1) -- Line 167
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if not arg1:ValidateTarget() or not arg1:ValidateMobModel() then
		arg1.TargetBlockObject = nil
	else
		arg1.InAction = true
		arg1.ActionUpdate:Fire()
		task.delay(0.75, function() -- Line 180
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: CoreUtil_upvr (copied, readonly)
			]]
			if not arg1:ValidateTarget() or not arg1:ValidateMobModel() then
			else
				arg1.MobModel.PrimaryPart.Velocity = Vector3.new(0, 0, 0)
				local any_TableToVector3_result1 = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(arg1.TargetBlockObject.Position))
				arg1.MobModel:SetPrimaryPartCFrame(CFrame.lookAt(arg1.MobModel.PrimaryPart.Position, Vector3.new(any_TableToVector3_result1.X, arg1.MobModel.PrimaryPart.Position.Y, any_TableToVector3_result1.Z)))
			end
		end)
		local UseTool = arg1.Animations.UseTool
		for _, v_4 in pairs(arg1.Animator:GetPlayingAnimationTracks()) do
			v_4:Stop()
		end
		UseTool:Play()
		CoreUtil_upvr:CustomYeild(arg1.Def.ToolUseTime)
		UseTool.DidLoop:Connect(function() -- Line 193
		end):Disconnect()
		arg1:TakeBlock()
		arg1.TargetBlockObject = nil
		arg1.InAction = false
		wait(1)
		arg1.ActionUpdate:Fire()
	end
end
function module_upvr.CollectItem(arg1, arg2) -- Line 217
	--[[ Upvalues[7]:
		[1]: any_RequireDefinitions_result1_upvr (readonly)
		[2]: InventoryService_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: PlayerService_upvr (readonly)
		[5]: BlockService_upvr (readonly)
		[6]: MobService_upvr (readonly)
		[7]: TaskService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1_2, pairs_result2_6, pairs_result3_3 = pairs(arg2.Items)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [39] 29. Error Block 19 start (CF ANALYSIS FAILED)
	local any_GetFirstFreeInventorySpace_result1 = CoreUtil_upvr:GetFirstFreeInventorySpace(arg1.Def.MaxInventory, arg1.Data.Storage)
	if any_GetFirstFreeInventorySpace_result1 then
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [52.9]
		nil.Index = any_GetFirstFreeInventorySpace_result1
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		table.insert(arg1.Data.Storage, nil)
	elseif not false then
		PlayerService_upvr.Client.Warn:Fire(BlockService_upvr.IslandOwner, "Your "..arg1.Id.."'s inventory is full!")
	end
	local var81 = MobService_upvr.Anchors[arg1.BlockObject.Index]
	if var81 then
		var81:ToggleAnchorIndestructibility()
	end
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [102.8]
	TaskService_upvr.TaskProgress:Fire("InventoryCollect", BlockService_upvr.IslandOwner, nil.Id, 1)
	-- KONSTANTERROR: [39] 29. Error Block 19 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 6. Error Block 18 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [108.10]
	if nil then
		-- KONSTANTWARNING: GOTO [83] #58
	end
	-- KONSTANTERROR: [7] 6. Error Block 18 end (CF ANALYSIS FAILED)
end
function module_upvr.TakeBlock(arg1) -- Line 252
	--[[ Upvalues[6]:
		[1]: TableUtil_upvr (readonly)
		[2]: BlockService_upvr (readonly)
		[3]: TaskService_upvr (readonly)
		[4]: any_RequireDefinitions_result1_upvr (readonly)
		[5]: InventoryService_upvr (readonly)
		[6]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 28 start (CF ANALYSIS FAILED)
	if not arg1:ValidateTarget() then
		arg1.TargetBlockObject = nil
		return
	end
	local any_Copy_result1 = TableUtil_upvr.Copy(arg1.TargetBlockObject, true)
	BlockService_upvr:DestroyBlock(any_Copy_result1.Position)
	TaskService_upvr.TaskProgress:Fire("DestroyBlock", BlockService_upvr.IslandOwner, any_Copy_result1.Id)
	local var83
	local var84 = any_RequireDefinitions_result1_upvr.Block[any_Copy_result1.Id]
	if var84.BehaviourData then
		local any_GetLootData_result1 = any_RequireDefinitions_result1_upvr.Behaviours[var84.BehaviourData.Id].GetLootData(var84, any_Copy_result1)
		if not any_GetLootData_result1 then
			any_GetLootData_result1 = var84.LootData
		end
		var83 = InventoryService_upvr:GenerateLootTable(any_GetLootData_result1, var84)
	else
		var83 = InventoryService_upvr:GenerateLootTable(var84.LootData, var84)
	end
	-- KONSTANTERROR: [0] 1. Error Block 28 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [79] 58. Error Block 10 start (CF ANALYSIS FAILED)
	arg1:CollectItem(var83:GenerateLoot())
	-- KONSTANTERROR: [79] 58. Error Block 10 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [86] 63. Error Block 11 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [86] 63. Error Block 11 end (CF ANALYSIS FAILED)
end
function module_upvr.RespawnMob(arg1) -- Line 320
	--[[ Upvalues[3]:
		[1]: MobService_upvr (readonly)
		[2]: PlayerService_upvr (readonly)
		[3]: BlockService_upvr (readonly)
	]]
	if arg1.Alive == false then
	else
		arg1.Alive = false
		local var86_upvr = MobService_upvr.Anchors[arg1.BlockObject.Index]
		if not var86_upvr then
			print("No anchor")
			return
		end
		if arg1.MobModel then
			arg1.MobModel:Destroy()
		end
		coroutine.wrap(function() -- Line 330
			--[[ Upvalues[4]:
				[1]: arg1 (readonly)
				[2]: var86_upvr (readonly)
				[3]: PlayerService_upvr (copied, readonly)
				[4]: BlockService_upvr (copied, readonly)
			]]
			repeat
				wait()
			until arg1.Destroyed
			if var86_upvr.Destroyed then
			else
				local var88_upvw = 0
				repeat
					local pcall_result1, pcall_result2 = pcall(function() -- Line 341
						--[[ Upvalues[2]:
							[1]: var88_upvw (read and write)
							[2]: arg1 (copied, readonly)
						]]
						var88_upvw += 1
						return arg1:Spawn()
					end)
					if not pcall_result1 or not pcall_result2 or var88_upvw == 1 then
						PlayerService_upvr.Client.Warn:Fire(BlockService_upvr.IslandOwner, "No place for underling to spawn. Please Reposition")
					end
					task.wait(1)
				until (not pcall_result1 or pcall_result2) and var86_upvr.Destroyed
			end
		end)()
	end
end
function module_upvr.Destroy(arg1) -- Line 357
	arg1.Alive = false
	arg1.StateChange:Fire()
	if arg1.StateChange then
		arg1.StateChange:Destroy()
	end
	if arg1.ActionUpdate then
		arg1.ActionUpdate:Destroy()
	end
	if arg1.MobModel then
		arg1.MobModel:Destroy()
	end
end
function module_upvr.Spawn(arg1) -- Line 368
	--[[ Upvalues[6]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: SimplePath_upvr (readonly)
		[4]: RunService_upvr (readonly)
		[5]: TableUtil_upvr (readonly)
		[6]: Promise_upvr (readonly)
	]]
	local any_TableToVector3_result1_upvr = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(arg1.BlockObject.Position))
	local any_GetRandomSpawnPosition_result1 = CoreUtil_upvr:GetRandomSpawnPosition(any_TableToVector3_result1_upvr + Vector3.new(0, 3, 0), 3, 2)
	if not any_GetRandomSpawnPosition_result1 then
		return warn("No spawn location detected")
	end
	arg1.MobModel = ReplicatedStorage_upvr.Prefabs.Underling:FindFirstChild(arg1.Id):Clone()
	arg1.MobModel:SetPrimaryPartCFrame(CFrame.new(any_GetRandomSpawnPosition_result1) * CFrame.Angles(0, math.rad(math.random(1, 360)), 0))
	arg1.MobModel.Name = arg1.Index
	arg1.MobModel.Parent = workspace.Underlings
	arg1.Alive = true
	local var96_upvw = 0
	arg1.Path = SimplePath_upvr.new(arg1.MobModel)
	arg1.Path.Visualize = false
	arg1.Path.Blocked:Connect(function() -- Line 387
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg1.PathGoal then
			arg1.Path:Run(arg1.PathGoal)
		end
	end)
	arg1.Path.WaypointReached:Connect(function() -- Line 391
		--[[ Upvalues[2]:
			[1]: var96_upvw (read and write)
			[2]: arg1 (readonly)
		]]
		var96_upvw = 0
		if arg1.PathGoal then
			arg1.Path:Run(arg1.PathGoal)
		end
	end)
	arg1.Path.Error:Connect(function(arg1_2) -- Line 396
		--[[ Upvalues[6]:
			[1]: arg1 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
			[3]: var96_upvw (read and write)
			[4]: CoreUtil_upvr (copied, readonly)
			[5]: any_TableToVector3_result1_upvr (readonly)
			[6]: RunService_upvr (copied, readonly)
		]]
		if not arg1.Alive then
		else
			if not arg1.Alive or not arg1:ValidateMobModel() then
				arg1.StateChange:Fire()
				return
			end
			if arg1.State == "Working" and (arg1_2 == SimplePath_upvr.ErrorType.TargetUnreachable or arg1_2 == SimplePath_upvr.ErrorType.ComputationError) then
				if var96_upvw < 10 then
					var96_upvw += 1
					arg1.Path:Run(arg1.PathGoal)
				else
					warn("Error in pathfinding", arg1_2)
					for i_8, v_5 in pairs(arg1.Animator:GetPlayingAnimationTracks()) do
						v_5:Stop()
					end
					arg1.Animations.Idle:Play()
					arg1.StateChange:Fire()
				end
			end
			if arg1.State == "Working" and arg1.BlockObject then
				if arg1.PathGoal then
					i_8 = arg1
					arg1.Path:Run(i_8.PathGoal)
				else
					arg1:Action()
				end
			end
			repeat
				i_8 = any_TableToVector3_result1_upvr
				v_5 = arg1.Def.WorkRadius * 2
				arg1.PathGoal = CoreUtil_upvr:GetRandomSpawnPosition(i_8, v_5, arg1.Def.HipHeight)
				if arg1.PathGoal then
					i_8 = arg1
					arg1.Path:Run(i_8.PathGoal)
					return
				end
			until RunService_upvr.Heartbeat:Wait()
		end
	end)
	for _, v_3 in pairs(arg1.MobModel:GetDescendants()) do
		if v_3:IsA("BasePart") and v_3:CanSetNetworkOwnership() then
			v_3:SetNetworkOwner(nil)
		end
	end
	arg1.Animator = arg1.MobModel.Humanoid.Animator
	arg1.Animations = TableUtil_upvr.Copy(arg1.Def.Animations, true)
	CoreUtil_upvr:RecurseTable(arg1.Animations, function(arg1_3, arg2, arg3) -- Line 454
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		local Animation = Instance.new("Animation", arg1.MobModel.Humanoid)
		Animation.AnimationId = arg3
		arg1_3[arg2] = arg1.Animator:LoadAnimation(Animation)
	end)
	local ProximityPrompt = Instance.new("ProximityPrompt", arg1.MobModel:WaitForChild("HumanoidRootPart"))
	ProximityPrompt.RequiresLineOfSight = false
	ProximityPrompt.MaxActivationDistance = 4
	ProximityPrompt.KeyboardKeyCode = Enum.KeyCode.F
	ProximityPrompt.ObjectText = arg1.Id
	ProximityPrompt.ActionText = "Open storage"
	arg1.Alive = true
	arg1.Destroyed = false
	Promise_upvr.new(function() -- Line 471
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:Start()
	end)
	return true
end
function module_upvr.Start(arg1) -- Line 479
	--[[ Upvalues[3]:
		[1]: Promise_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local function var112() -- Line 482
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: RunService_upvr (copied, readonly)
		]]
		while arg1.Alive and RunService_upvr.Heartbeat:Wait() do
			if arg1.TargetBlockObject and arg1:ValidateTarget() then
				local any_DistanceFromTarget_result1_2 = arg1:DistanceFromTarget()
				if any_DistanceFromTarget_result1_2 and any_DistanceFromTarget_result1_2 <= 6 then
					arg1:Action()
				end
			end
		end
	end
	Promise_upvr.new(var112)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [221] 145. Error Block 44 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [221] 145. Error Block 44 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 7. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 7. Error Block 2 end (CF ANALYSIS FAILED)
end
return module_upvr

Script name: Underling
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local LocalPlayer_upvr = game.Players.LocalPlayer
local MainGui_upvr = LocalPlayer_upvr.PlayerGui:WaitForChild("MainGui")
local any_GetController_result1_upvr = require(ReplicatedStorage_upvr.Packages.Knit).GetController("UIController")
local module_upvr = {}
local tbl_7_upvr = {}
module_upvr.InventoryObjects = {}
module_upvr.QuickSwapUpdate = Instance.new("BindableEvent")
module_upvr.SwapUpdate = Instance.new("BindableEvent")
tbl_7_upvr.__index = tbl_7_upvr
function tbl_7_upvr.new(arg1, arg2, arg3) -- Line 26
	--[[ Upvalues[1]:
		[1]: tbl_7_upvr (readonly)
	]]
	local tbl_5 = {}
	tbl_5.Index = arg1
	tbl_5.Item = arg2
	tbl_5.UI = arg3
	local setmetatable_result1 = setmetatable(tbl_5, tbl_7_upvr)
	setmetatable_result1:Initialise()
	return setmetatable_result1
end
function tbl_7_upvr.UpdateItem(arg1, arg2) -- Line 42
	--[[ Upvalues[1]:
		[1]: any_GetController_result1_upvr (readonly)
	]]
	arg1.Item = arg2
	any_GetController_result1_upvr:UpdateItemDisplay(arg1.UI, arg2)
end
local UserInputService_upvr = game:GetService("UserInputService")
local mouse_upvr = LocalPlayer_upvr:GetMouse()
local RunService_upvr = game:GetService("RunService")
function tbl_7_upvr.Initialise(arg1) -- Line 47
	--[[ Upvalues[7]:
		[1]: MainGui_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
		[3]: LocalPlayer_upvr (readonly)
		[4]: mouse_upvr (readonly)
		[5]: any_GetController_result1_upvr (readonly)
		[6]: module_upvr (readonly)
		[7]: RunService_upvr (readonly)
	]]
	local ItemTooltip_upvr = MainGui_upvr.ItemTooltip
	UserInputService_upvr.InputBegan:Connect(function(arg1_2) -- Line 52
		--[[ Upvalues[9]:
			[1]: arg1 (readonly)
			[2]: LocalPlayer_upvr (copied, readonly)
			[3]: mouse_upvr (copied, readonly)
			[4]: any_GetController_result1_upvr (copied, readonly)
			[5]: module_upvr (copied, readonly)
			[6]: ItemTooltip_upvr (readonly)
			[7]: UserInputService_upvr (copied, readonly)
			[8]: MainGui_upvr (copied, readonly)
			[9]: RunService_upvr (copied, readonly)
		]]
		local UserInputType_upvr = arg1_2.UserInputType
		local var53
		if not arg1.Item or UserInputType_upvr ~= Enum.UserInputType.MouseButton1 and UserInputType_upvr ~= Enum.UserInputType.Touch and UserInputType_upvr ~= Enum.UserInputType.Gamepad1 then
		else
			var53 = mouse_upvr
			if not table.find(LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, var53.Y), arg1.UI) then return end
			if any_GetController_result1_upvr.ShiftDown then
				module_upvr.QuickSwapUpdate:Fire({
					Index = arg1.Index;
					Inventory = "Storage";
				})
				ItemTooltip_upvr.Visible = false
				return
			end
			local var55_upvw = false
			task.wait(0.1)
			UserInputService_upvr.InputEnded:Connect(function(arg1_5) -- Line 69
				--[[ Upvalues[4]:
					[1]: var55_upvw (read and write)
					[2]: UserInputType_upvr (readonly)
					[3]: arg1 (copied, readonly)
					[4]: module_upvr (copied, readonly)
				]]
				if not var55_upvw and arg1_5.UserInputType == UserInputType_upvr then
					var55_upvw = true
					module_upvr.QuickSwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Storage";
					})
				end
			end):Disconnect()
			if var55_upvw then return end
			var53 = arg1
			local clone_upvr = arg1.UI:Clone()
			clone_upvr.Parent = MainGui_upvr.Inventory.Parent
			clone_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
			clone_upvr.Size = UDim2.fromOffset(arg1.UI.AbsoluteSize.X, var53.UI.AbsoluteSize.Y)
			clone_upvr.ZIndex = 11
			arg1.UI.ViewportFrame.Visible = false
			arg1.UI.ImageLabel.Visible = false
			arg1.UI.Stack.Visible = false
			arg1.UI.Empty.Visible = true
			if clone_upvr:FindFirstChild("DisplayNum") then
				clone_upvr.DisplayNum.Visible = false
			end
			local tbl = {}
			local BindableEvent_upvr = Instance.new("BindableEvent")
			var53 = tbl
			table.insert(var53, RunService_upvr.RenderStepped:Connect(function() -- Line 102
				--[[ Upvalues[2]:
					[1]: clone_upvr (readonly)
					[2]: mouse_upvr (copied, readonly)
				]]
				clone_upvr.Position = UDim2.fromOffset(mouse_upvr.X, mouse_upvr.Y + 32)
			end))
			var53 = tbl
			table.insert(var53, UserInputService_upvr.InputEnded:Connect(function(arg1_6) -- Line 106
				--[[ Upvalues[2]:
					[1]: UserInputType_upvr (readonly)
					[2]: BindableEvent_upvr (readonly)
				]]
				if arg1_6.UserInputType == UserInputType_upvr then
					BindableEvent_upvr:Fire()
				end
			end))
			var53 = MainGui_upvr.Inventory.Main.Backpack
			var53 = false
			var53.ScrollingFrame.ScrollingEnabled = var53
			BindableEvent_upvr.Event:Wait()
			var53 = MainGui_upvr.Inventory.Main.Backpack
			var53 = true
			var53.ScrollingFrame.ScrollingEnabled = var53
			var53 = tbl
			local pairs_result1, pairs_result2_3, pairs_result3 = pairs(var53)
			for _, v in pairs_result1, pairs_result2_3, pairs_result3 do
				v:Disconnect()
			end
			clone_upvr:Destroy()
			pairs_result2_3 = LocalPlayer_upvr.PlayerGui:GetGuiObjectsAtPosition(mouse_upvr.X, mouse_upvr.Y)
			local pairs_result1_2, pairs_result2, pairs_result3_4 = pairs(pairs_result2_3)
			for _, v_2 in pairs_result1_2, pairs_result2, pairs_result3_4 do
				local tonumber_result1_2 = tonumber(v_2.Name)
				if tonumber_result1_2 then
					if v_2.Parent.Parent.Name == "Backpack" or v_2.Parent.Name == "Toolbar" then
						tonumber_result1_2 = "Inventory"
					else
						tonumber_result1_2 = "Storage"
					end
					module_upvr.SwapUpdate:Fire({
						Index = arg1.Index;
						Inventory = "Storage";
					}, {
						Index = tonumber(v_2.Name);
						Inventory = tonumber_result1_2;
					})
					ItemTooltip_upvr.Visible = false
				end
			end
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ViewportFrame.Visible = pairs_result2
			pairs_result2 = arg1.UI
			pairs_result2 = true
			pairs_result2.ImageLabel.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if arg1.Item then
				if 0 < arg1.Item.Stack then
					pairs_result2 = true
					-- KONSTANTWARNING: GOTO [357] #241
				end
			end
			pairs_result2 = false
			pairs_result2.Stack.Visible = pairs_result2
			pairs_result2 = arg1.UI
			if not arg1.Item then
				pairs_result2 = true
			else
				pairs_result2 = false
			end
			pairs_result2.Empty.Visible = pairs_result2
		end
	end)
end
function tbl_7_upvr.Destroy(arg1) -- Line 143
	arg1.UI:Destroy()
end
function module_upvr.InitialiseUnderlingUI(arg1, arg2) -- Line 147
	--[[ Upvalues[6]:
		[1]: MainGui_upvr (readonly)
		[2]: any_GetController_result1_upvr (readonly)
		[3]: module_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: tbl_7_upvr (readonly)
	]]
	if not arg2 then
	else
		MainGui_upvr.Inventory.Underling.Title.Text = ""
		MainGui_upvr.Inventory.Underling.MinionInfo.ScrollingFrame.Info.Title.Text = ""
		any_GetController_result1_upvr:UpdateItemDisplay(MainGui_upvr.Inventory.Underling.MinionInfo.ScrollingFrame.Info, nil)
		for _, v_3 in pairs(module_upvr.InventoryObjects) do
			v_3:Destroy()
		end
		module_upvr.InventoryObjects = {}
		any_GetController_result1_upvr:UpdateItemDisplay(MainGui_upvr.Inventory.Underling.MinionInfo.ScrollingFrame.Info, arg2.Def)
		for i_4 = 1, arg2.Def.MaxInventory do
			local any_GetSlotFromIndex_result1 = CoreUtil_upvr:GetSlotFromIndex(arg2.Data.Storage, i_4)
			local clone = ReplicatedStorage_upvr.Prefabs.UI.BackpackTemplate:Clone()
			clone.Name = i_4
			clone.Parent = MainGui_upvr.Inventory.Underling.UnderlingInventory.ScrollingFrame
			clone.Empty.BackgroundColor3 = Color3.fromRGB(201, 217, 255)
			local any_new_result1 = tbl_7_upvr.new(i_4, any_GetSlotFromIndex_result1, clone)
			any_new_result1:UpdateItem(any_GetSlotFromIndex_result1)
			table.insert(module_upvr.InventoryObjects, any_new_result1)
		end
		MainGui_upvr.Inventory.Underling.Visible = true
	end
end
return module_upvr

Script name: Comm
  - Script: 


return require(script.Parent._Index["sleitnick_comm@0.3.1"].comm)

Script name: Component
  - Script: 


return require(script.Parent._Index["sleitnick_component@2.4.6"].component)

Script name: EnumList
  - Script: 


return require(script.Parent._Index["sleitnick_enum-list@2.0.1"]["enum-list"])

Script name: Input
  - Script: 


return require(script.Parent._Index["sleitnick_input@2.1.1"].input)

Script name: Option
  - Script: 


return require(script.Parent._Index["sleitnick_option@1.0.4"].option)

Script name: Promise
  - Script: 


return require(script.Parent._Index["evaera_promise@4.0.0"].promise)

Script name: Signal
  - Script: 


return require(script.Parent._Index["sleitnick_signal@1.5.0"].signal)

Script name: Streamable
  - Script: 


return require(script.Parent._Index["sleitnick_streamable@1.2.4"].streamable)

Script name: TableUtil
  - Script: 


return require(script.Parent._Index["sleitnick_table-util@1.2.0"]["table-util"])

Script name: Timer
  - Script: 


return require(script.Parent._Index["sleitnick_timer@1.1.2"].timer)

Script name: Trove
  - Script: 


return require(script.Parent._Index["sleitnick_trove@0.5.0"].trove)

Script name: SimplePath
  - Script: 


local tbl_2_upvr = {
	TIME_VARIANCE = 0.07;
	COMPARISON_CHECKS = 2;
	JUMP_WHEN_STUCK = true;
}
local function _(arg1, arg2) -- Line 26, Named "output"
	local var2
	if arg1 == error then
		var2 = "SimplePath Error: "
	else
		var2 = "SimplePath: "
	end
	arg1(var2..arg2)
end
local module_2_upvr = {
	StatusType = {
		Idle = "Idle";
		Active = "Active";
	};
	ErrorType = {
		LimitReached = "LimitReached";
		TargetUnreachable = "TargetUnreachable";
		ComputationError = "ComputationError";
		AgentStuck = "AgentStuck";
	};
}
function module_2_upvr.__index(arg1, arg2) -- Line 41
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg2 == "Stopped" then
		local var9
		if not arg1._humanoid then
			local error = error
			if error == error then
				var9 = "SimplePath Error: "
			else
				var9 = "SimplePath: "
			end
			error(var9.."Attempt to use Path.Stopped on a non-humanoid.")
		end
	end
	if not arg1._events[arg2] or not arg1._events[arg2].Event or arg2 ~= "LastError" or not arg1._lastError or arg2 ~= "Status" or not arg1._status then
	end
	return module_2_upvr[arg2]
end
local Part_upvr = Instance.new("Part")
Part_upvr.Size = Vector3.new(0.30000, 0.30000, 0.30000)
Part_upvr.Anchored = true
Part_upvr.CanCollide = false
Part_upvr.Material = Enum.Material.Neon
Part_upvr.Shape = Enum.PartType.Ball
local function _(arg1, arg2) -- Line 63, Named "declareError"
	arg1._lastError = arg2
	arg1._events.Error:Fire(arg2)
end
local function createVisualWaypoints_upvr(arg1) -- Line 70, Named "createVisualWaypoints"
	--[[ Upvalues[1]:
		[1]: Part_upvr (readonly)
	]]
	local module = {}
	for _, v in ipairs(arg1) do
		local clone = Part_upvr:Clone()
		clone.Position = v.Position
		clone.Parent = workspace
		local var21
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var21 = Color3.fromRGB(0, 255, 0)
			return var21
		end
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var21 = Color3.fromRGB(255, 0, 0)
			return var21
		end
		if v ~= arg1[#arg1] or not INLINED() or v.Action ~= Enum.PathWaypointAction.Jump or not INLINED_2() then
			var21 = Color3.fromRGB(255, 139, 0)
		end
		clone.Color = var21
		var21 = table.insert
		var21(module, clone)
	end
	return module
end
local function _(arg1) -- Line 86, Named "destroyVisualWaypoints"
	if arg1 then
		for _, v_2 in ipairs(arg1) do
			v_2:Destroy()
		end
	end
end
local function getNonHumanoidWaypoint_upvr(arg1) -- Line 96, Named "getNonHumanoidWaypoint"
	for i_3 = 2, #arg1._waypoints do
		if 0.1 < (arg1._waypoints[i_3].Position - arg1._waypoints[i_3 - 1].Position).Magnitude then
			return i_3
		end
	end
	return 2
end
local function _(arg1) -- Line 107, Named "setJumpState"
	pcall(function() -- Line 108
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
			arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
		end
	end)
end
local function _(arg1) -- Line 116, Named "move"
	if arg1._waypoints[arg1._currentWaypoint].Action == Enum.PathWaypointAction.Jump then
		pcall(function() -- Line 108
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
				arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
			end
		end)
	end
	arg1._humanoid:MoveTo(arg1._waypoints[arg1._currentWaypoint].Position)
end
local function _(arg1) -- Line 124, Named "disconnectMoveConnection"
	arg1._moveConnection:Disconnect()
	arg1._moveConnection = nil
end
local function _(arg1) -- Line 130, Named "invokeWaypointReached"
	arg1._events.WaypointReached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint - 1], arg1._waypoints[arg1._currentWaypoint])
end
local function moveToFinished_upvr(arg1, arg2) -- Line 136, Named "moveToFinished"
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if not getmetatable(arg1) then
	else
		if not arg1._humanoid then
			if arg2 and arg1._currentWaypoint + 1 <= #arg1._waypoints then
				arg1._events.WaypointReached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint - 1], arg1._waypoints[arg1._currentWaypoint])
				arg1._currentWaypoint += 1
			else
				if arg2 then
					local _visualWaypoints_10 = arg1._visualWaypoints
					if _visualWaypoints_10 then
						for _, v_14 in ipairs(_visualWaypoints_10) do
							v_14:Destroy()
						end
					end
					arg1._visualWaypoints = nil
					arg1._target = nil
					arg1._events.Reached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint])
					return
				end
				local _visualWaypoints_9 = arg1._visualWaypoints
				if _visualWaypoints_9 then
					for _, v_15 in ipairs(_visualWaypoints_9) do
						v_15:Destroy()
					end
				end
				arg1._visualWaypoints = nil
				arg1._target = nil
				local TargetUnreachable_2 = arg1.ErrorType.TargetUnreachable
				arg1._lastError = TargetUnreachable_2
				arg1._events.Error:Fire(TargetUnreachable_2)
			end
		end
		if arg2 and arg1._currentWaypoint + 1 <= #arg1._waypoints then
			if arg1._currentWaypoint + 1 < #arg1._waypoints then
				arg1._events.WaypointReached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint - 1], arg1._waypoints[arg1._currentWaypoint])
			end
			arg1._currentWaypoint += 1
			if arg1._waypoints[arg1._currentWaypoint].Action == Enum.PathWaypointAction.Jump then
				pcall(function() -- Line 108
					--[[ Upvalues[1]:
						[1]: arg1 (readonly)
					]]
					if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
						arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
					end
				end)
			end
			arg1._humanoid:MoveTo(arg1._waypoints[arg1._currentWaypoint].Position)
			return
		end
		if arg2 then
			arg1._moveConnection:Disconnect()
			arg1._moveConnection = nil
			arg1._status = module_2_upvr.StatusType.Idle
			local _visualWaypoints_2 = arg1._visualWaypoints
			if _visualWaypoints_2 then
				for _, v_11 in ipairs(_visualWaypoints_2) do
					v_11:Destroy()
				end
			end
			arg1._visualWaypoints = nil
			arg1._events.Reached:Fire(arg1._agent, arg1._waypoints[arg1._currentWaypoint])
			return
		end
		arg1._moveConnection:Disconnect()
		arg1._moveConnection = nil
		arg1._status = module_2_upvr.StatusType.Idle
		local _visualWaypoints_11 = arg1._visualWaypoints
		if _visualWaypoints_11 then
			for _, v_12 in ipairs(_visualWaypoints_11) do
				v_12:Destroy()
			end
		end
		arg1._visualWaypoints = nil
		local TargetUnreachable = arg1.ErrorType.TargetUnreachable
		arg1._lastError = TargetUnreachable
		arg1._events.Error:Fire(TargetUnreachable)
	end
end
local function comparePosition_upvr(arg1) -- Line 178, Named "comparePosition"
	local var58
	if arg1._currentWaypoint == var58 then
	else
		local function INLINED_3() -- Internal function, doesn't exist in bytecode
			var58 = arg1._position._count + 1
			return var58
		end
		if (arg1._agent.PrimaryPart.Position - arg1._position._last).Magnitude > 0.07 or not INLINED_3() then
			var58 = 0
		end
		arg1._position._count = var58
		var58 = arg1._agent.PrimaryPart.Position
		arg1._position._last = var58
		var58 = arg1._position
		var58 = arg1._settings.COMPARISON_CHECKS
		if var58 <= var58._count then
			var58 = arg1._settings
			if var58.JUMP_WHEN_STUCK then
				function var58() -- Line 108
					--[[ Upvalues[1]:
						[1]: arg1 (readonly)
					]]
					if arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and arg1._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
						arg1._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
					end
				end
				pcall(var58)
			end
			var58 = arg1.ErrorType
			local AgentStuck = var58.AgentStuck
			arg1._lastError = AgentStuck
			var58 = arg1._events.Error:Fire
			var58(AgentStuck)
		end
	end
end
local Players_upvr = game:GetService("Players")
function module_2_upvr.GetNearestCharacter(arg1) -- Line 191
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	local var68
	for _, v_3 in ipairs(Players_upvr:GetPlayers()) do
		if v_3.Character and (v_3.Character.PrimaryPart.Position - arg1).Magnitude < math.huge then
		end
	end
	return nil
end
local PathfindingService_upvr = game:GetService("PathfindingService")
function module_2_upvr.new(arg1, arg2, arg3) -- Line 202
	--[[ Upvalues[3]:
		[1]: tbl_2_upvr (readonly)
		[2]: PathfindingService_upvr (readonly)
		[3]: module_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [1] 2. Error Block 31 start (CF ANALYSIS FAILED)
	local var74
	if not arg1:IsA("Model") or not arg1.PrimaryPart then
		-- KONSTANTERROR: [9] 8. Error Block 29 start (CF ANALYSIS FAILED)
		local error_6 = error
		if error_6 == error then
			var74 = "SimplePath Error: "
		else
			var74 = "SimplePath: "
		end
		error_6(var74.."Pathfinding agent must be a valid Model Instance with a set PrimaryPart.")
		-- KONSTANTERROR: [9] 8. Error Block 29 end (CF ANALYSIS FAILED)
	end
	local tbl = {}
	local var77 = arg3
	if not var77 then
		var77 = tbl_2_upvr
	end
	tbl._settings = var77
	tbl._events = {
		Reached = Instance.new("BindableEvent");
		WaypointReached = Instance.new("BindableEvent");
		Blocked = Instance.new("BindableEvent");
		Error = Instance.new("BindableEvent");
		Stopped = Instance.new("BindableEvent");
	}
	tbl._agent = arg1
	tbl._humanoid = arg1:FindFirstChildOfClass("Humanoid")
	tbl._path = PathfindingService_upvr:CreatePath(arg2)
	tbl._status = "Idle"
	tbl._t = 0
	tbl._position = {
		_last = Vector3.new();
		_count = 0;
	}
	local setmetatable_result1_upvr = setmetatable(tbl, module_2_upvr)
	for i_5, v_4 in pairs(tbl_2_upvr) do
		local var84
		local function INLINED_4() -- Internal function, doesn't exist in bytecode
			var84 = v_4
			return var84
		end
		if setmetatable_result1_upvr._settings[i_5] ~= nil or not INLINED_4() then
			var84 = setmetatable_result1_upvr._settings[i_5]
		end
		setmetatable_result1_upvr._settings[i_5] = var84
	end
	setmetatable_result1_upvr._path.Blocked:Connect(function(...) -- Line 233
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if setmetatable_result1_upvr._currentWaypoint <= ... and ... <= setmetatable_result1_upvr._currentWaypoint + 1 and setmetatable_result1_upvr._humanoid then
			pcall(function() -- Line 108
				--[[ Upvalues[1]:
					[1]: setmetatable_result1_upvr (readonly)
				]]
				if setmetatable_result1_upvr._humanoid:GetState() ~= Enum.HumanoidStateType.Jumping and setmetatable_result1_upvr._humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
					setmetatable_result1_upvr._humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				end
			end)
			setmetatable_result1_upvr._events.Blocked:Fire(setmetatable_result1_upvr._agent, setmetatable_result1_upvr._waypoints[...])
		end
	end)
	do
		return setmetatable_result1_upvr
	end
	-- KONSTANTERROR: [1] 2. Error Block 31 end (CF ANALYSIS FAILED)
end
function module_2_upvr.Destroy(arg1) -- Line 245
	for i_6, v_5 in ipairs(arg1._events) do
		v_5:Destroy()
	end
	arg1._events = nil
	if rawget(arg1, "_visualWaypoints") then
		local _visualWaypoints_12 = arg1._visualWaypoints
		if _visualWaypoints_12 then
			i_6 = _visualWaypoints_12
			for _, v_6 in ipairs(i_6) do
				v_6:Destroy()
			end
		end
		arg1._visualWaypoints = nil
	end
	arg1._path:Destroy()
	setmetatable(arg1, nil)
	for i_8, _ in pairs(arg1) do
		arg1[i_8] = nil
	end
end
function module_2_upvr.Stop(arg1) -- Line 260
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local var107
	if not arg1._humanoid then
		local error_4 = error
		if error_4 == error then
			var107 = "SimplePath Error: "
		else
			var107 = "SimplePath: "
		end
		error_4(var107.."Attempt to call Path:Stop() on a non-humanoid.")
	else
		var107 = module_2_upvr
		if arg1._status == var107.StatusType.Idle then
			local function var109(arg1_2) -- Line 266
				warn(debug.traceback(arg1_2))
			end
			if var109 == error then
				var107 = "SimplePath Error: "
			else
				var107 = "SimplePath: "
			end
			var109(var107.."Attempt to run Path:Stop() in idle state")
			return
		end
		arg1._moveConnection:Disconnect()
		arg1._moveConnection = nil
		arg1._status = module_2_upvr.StatusType.Idle
		local _visualWaypoints_3 = arg1._visualWaypoints
		if _visualWaypoints_3 then
			var107 = _visualWaypoints_3
			for _, v_13 in ipairs(var107) do
				v_13:Destroy()
			end
		end
		arg1._visualWaypoints = nil
		arg1._events.Stopped:Fire(arg1._model)
	end
end
function module_2_upvr.Run(arg1, arg2) -- Line 277
	--[[ Upvalues[5]:
		[1]: moveToFinished_upvr (readonly)
		[2]: module_2_upvr (readonly)
		[3]: comparePosition_upvr (readonly)
		[4]: createVisualWaypoints_upvr (readonly)
		[5]: getNonHumanoidWaypoint_upvr (readonly)
	]]
	local pcall_result1, pcall_result2 = pcall(function() -- Line 279
		--[[ Upvalues[7]:
			[1]: arg2 (readonly)
			[2]: arg1 (readonly)
			[3]: moveToFinished_upvr (copied, readonly)
			[4]: module_2_upvr (copied, readonly)
			[5]: comparePosition_upvr (copied, readonly)
			[6]: createVisualWaypoints_upvr (copied, readonly)
			[7]: getNonHumanoidWaypoint_upvr (copied, readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 92 start (CF ANALYSIS FAILED)
		if not arg2 and not arg1._humanoid and arg1._target then
			moveToFinished_upvr(arg1, true)
			return
		end
		local var175
		if not arg2 or typeof(arg2) ~= "Vector3" and not arg2:IsA("BasePart") then
			local error_3 = error
			if error_3 == error then
				var175 = "SimplePath Error: "
			else
				var175 = "SimplePath: "
			end
			error_3(var175.."Pathfinding target must be a valid Vector3 or BasePart.")
		end
		var175 = arg1
		var175 = arg1
		if os.clock() - var175._t <= var175._settings.TIME_VARIANCE and arg1._humanoid then
			var175 = arg1._t
			task.wait(os.clock() - var175)
			local var164 = arg1
			var175 = arg1
			local LimitReached = var175.ErrorType.LimitReached
			var164._lastError = LimitReached
			var175 = var164._events
			var175.Error:Fire(LimitReached)
			return false
		end
		if arg1._humanoid then
			arg1._t = os.clock()
		end
		local pcall_result1_2, _ = pcall(function() -- Line 302
			--[[ Upvalues[2]:
				[1]: arg1 (copied, readonly)
				[2]: arg2 (copied, readonly)
			]]
			local var167
			local function INLINED_11() -- Internal function, doesn't exist in bytecode
				var167 = arg2
				return var167
			end
			if typeof(arg2) ~= "Vector3" or not INLINED_11() then
				var167 = arg2.Position
			end
			arg1._path:ComputeAsync(arg1._agent.PrimaryPart.Position, var167)
		end)
		local function INLINED_12() -- Internal function, doesn't exist in bytecode
			var175 = Enum.PathStatus.NoPath
			var175 = arg1._path
			return var175.Status == var175
		end
		local function INLINED_13() -- Internal function, doesn't exist in bytecode
			var175 = 2
			var175 = arg1._path:GetWaypoints()
			return #var175 < var175
		end
		local function INLINED_14() -- Internal function, doesn't exist in bytecode
			var175 = arg1
			return var175._humanoid
		end
		local function INLINED_15() -- Internal function, doesn't exist in bytecode
			var175 = Enum.HumanoidStateType.Freefall
			var175 = arg1
			return var175._humanoid:GetState() == var175
		end
		if not pcall_result1_2 or INLINED_12() or INLINED_13() or INLINED_14() and INLINED_15() then
			local _visualWaypoints = arg1._visualWaypoints
			if _visualWaypoints then
				for _, v_8 in ipairs(_visualWaypoints) do
					v_8:Destroy()
				end
			end
			var175 = nil
			arg1._visualWaypoints = var175
			task.wait()
			local var174 = arg1
			var175 = arg1.ErrorType.ComputationError
			var174._lastError = var175
			var174._events.Error:Fire(var175)
			return false
		end
		local function INLINED_16() -- Internal function, doesn't exist in bytecode
			var175 = module_2_upvr.StatusType.Active
			return var175
		end
		if not arg1._humanoid or not INLINED_16() then
			var175 = module_2_upvr.StatusType.Idle
		end
		arg1._status = var175
		var175 = arg2
		arg1._target = var175
		function var175() -- Line 322
			--[[ Upvalues[1]:
				[1]: arg1 (copied, readonly)
			]]
			arg1._agent.PrimaryPart:SetNetworkOwner(nil)
		end
		pcall(var175)
		var175 = arg1._path:GetWaypoints()
		arg1._waypoints = var175
		var175 = 2
		arg1._currentWaypoint = var175
		var175 = arg1
		if var175._humanoid then
			var175 = arg1
			comparePosition_upvr(var175)
		end
		var175 = arg1
		local _visualWaypoints_5 = var175._visualWaypoints
		if _visualWaypoints_5 then
			var175 = ipairs(_visualWaypoints_5)
			local ipairs_result1_10, ipairs_result2_2, ipairs_result3_8 = ipairs(_visualWaypoints_5)
			for _, v_9 in ipairs_result1_10, ipairs_result2_2, ipairs_result3_8 do
				v_9:Destroy()
			end
		end
		ipairs_result1_10 = arg1.Visualize
		if ipairs_result1_10 then
			ipairs_result1_10 = createVisualWaypoints_upvr(arg1._waypoints)
		end
		arg1._visualWaypoints = ipairs_result1_10
		ipairs_result1_10 = arg1._humanoid
		if ipairs_result1_10 then
			ipairs_result1_10 = arg1._moveConnection
			if not ipairs_result1_10 then
				ipairs_result1_10 = arg1._humanoid.MoveToFinished
				ipairs_result1_10 = ipairs_result1_10:Connect(function(...) -- Line 340
					--[[ Upvalues[2]:
						[1]: moveToFinished_upvr (copied, readonly)
						[2]: arg1 (copied, readonly)
					]]
					moveToFinished_upvr(arg1, ...)
				end)
			end
		end
		arg1._moveConnection = ipairs_result1_10
		if arg1._humanoid then
			arg1._humanoid:MoveTo(arg1._waypoints[arg1._currentWaypoint].Position)
			-- KONSTANTWARNING: GOTO [347] #251
		end
		if #arg1._waypoints == 2 then
			arg1._target = nil
			local _visualWaypoints_4 = arg1._visualWaypoints
			if _visualWaypoints_4 then
				for _, v_10 in ipairs(_visualWaypoints_4) do
					v_10:Destroy()
				end
			end
			arg1._visualWaypoints = nil
			arg1._events.Reached:Fire(arg1._agent, arg1._waypoints[2])
		else
			arg1._currentWaypoint = getNonHumanoidWaypoint_upvr(arg1)
			moveToFinished_upvr(arg1, true)
		end
		-- KONSTANTERROR: [0] 1. Error Block 92 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [347] 251. Error Block 56 start (CF ANALYSIS FAILED)
		do
			return true
		end
		-- KONSTANTERROR: [347] 251. Error Block 56 end (CF ANALYSIS FAILED)
	end)
	if pcall_result1 then
		return pcall_result2
	end
end
return module_2_upvr

Script name: Knit
  - Script: 


if game:GetService("RunService"):IsServer() then
	return require(script.KnitServer)
end
local KnitServer = script:FindFirstChild("KnitServer")
if KnitServer then
	KnitServer:Destroy()
end
return require(script.KnitClient)

Script name: KnitClient
  - Script: 


local tbl_upvr = {
	ServicePromises = true;
	Middleware = nil;
	PerServiceMiddleware = {};
}
local var2_upvw
local module = {
	Player = game:GetService("Players").LocalPlayer;
	Util = script.Parent.Parent;
}
local Promise_upvr = require(module.Util.Promise)
local ClientComm_upvr = require(module.Util.Comm).ClientComm
local tbl_upvr_2 = {}
local tbl_upvr_3 = {}
local var8_upvw
local var9_upvw = false
local var10_upvw = false
local BindableEvent_upvr = Instance.new("BindableEvent")
local function _(arg1) -- Line 127, Named "DoesControllerExist"
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	local var12 = tbl_upvr_2
	if var12[arg1] == nil then
		var12 = false
	else
		var12 = true
	end
	return var12
end
local function _() -- Line 132, Named "GetServicesFolder"
	--[[ Upvalues[1]:
		[1]: var8_upvw (read and write)
	]]
	if not var8_upvw then
		var8_upvw = script.Parent:WaitForChild("Services")
	end
	return var8_upvw
end
local function _(arg1) -- Line 139, Named "GetMiddlewareForService"
	--[[ Upvalues[1]:
		[1]: var2_upvw (read and write)
	]]
	local var13
	if var2_upvw.Middleware ~= nil then
		var13 = var2_upvw.Middleware
	else
		var13 = {}
	end
	local var14 = var2_upvw.PerServiceMiddleware[arg1]
	if var14 ~= nil then
		return var14
	end
	return var13
end
local function _(arg1) -- Line 145, Named "BuildService"
	--[[ Upvalues[4]:
		[1]: var8_upvw (read and write)
		[2]: var2_upvw (read and write)
		[3]: ClientComm_upvr (readonly)
		[4]: tbl_upvr_3 (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var15
	if not var8_upvw then
		var15 = script
		var8_upvw = var15.Parent:WaitForChild("Services")
	end
	if var2_upvw.Middleware ~= nil then
		var15 = var2_upvw.Middleware
	else
		var15 = {}
	end
	local var16 = var2_upvw.PerServiceMiddleware[arg1]
	if var16 ~= nil then
		local _ = var16
	else
	end
	var15 = ClientComm_upvr.new(var8_upvw, var2_upvw.ServicePromises, arg1)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local any_BuildObject_result1_2 = var15:BuildObject(var15.Inbound, var15.Outbound)
	tbl_upvr_3[arg1] = any_BuildObject_result1_2
	return any_BuildObject_result1_2
end
function module.CreateController(arg1) -- Line 175
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
	local var19
	if type(arg1) ~= "table" then
		var19 = false
	else
		var19 = true
	end
	assert(var19, `Controller must be a table; got {type(arg1)}`)
	if type(arg1.Name) ~= "string" then
		var19 = false
		-- KONSTANTWARNING: GOTO [34] #26
	end
	-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [33] 25. Error Block 29 start (CF ANALYSIS FAILED)
	var19 = true
	assert(var19, `Controller.Name must be a string; got {type(arg1.Name)}`)
	if 0 >= #arg1.Name then
		var19 = false
		-- KONSTANTWARNING: GOTO [58] #43
	end
	-- KONSTANTERROR: [33] 25. Error Block 29 end (CF ANALYSIS FAILED)
end
function module.AddControllers(arg1) -- Line 192
	for _, v in arg1:GetChildren() do
		if v:IsA("ModuleScript") then
			table.insert({}, require(v))
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module.AddControllersDeep(arg1) -- Line 206
	for _, v_2 in arg1:GetDescendants() do
		if v_2:IsA("ModuleScript") then
			table.insert({}, require(v_2))
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module.GetService(arg1) -- Line 269
	--[[ Upvalues[5]:
		[1]: tbl_upvr_3 (readonly)
		[2]: var9_upvw (read and write)
		[3]: var8_upvw (read and write)
		[4]: var2_upvw (read and write)
		[5]: ClientComm_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var30 = tbl_upvr_3[arg1]
	local var31
	if var30 then
		return var30
	end
	local var32 = var9_upvw
	assert(var32, "Cannot call GetService until Knit has been started")
	var31 = arg1
	if type(var31) ~= "string" then
		var32 = false
	else
		var32 = true
	end
	var31 = `ServiceName must be a string; got {type(arg1)}`
	assert(var32, var31)
	if not var8_upvw then
		var31 = script
		var8_upvw = var31.Parent:WaitForChild("Services")
	end
	if var2_upvw.Middleware ~= nil then
		var31 = var2_upvw.Middleware
	else
		var31 = {}
	end
	local var33 = var2_upvw.PerServiceMiddleware[arg1]
	if var33 ~= nil then
		local _ = var33
	else
	end
	var31 = ClientComm_upvr.new(var8_upvw, var2_upvw.ServicePromises, arg1)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local any_BuildObject_result1 = var31:BuildObject(var31.Inbound, var31.Outbound)
	tbl_upvr_3[arg1] = any_BuildObject_result1
	return any_BuildObject_result1
end
function module.GetController(arg1) -- Line 283
	--[[ Upvalues[2]:
		[1]: tbl_upvr_2 (readonly)
		[2]: var9_upvw (read and write)
	]]
	local var36 = tbl_upvr_2[arg1]
	if var36 then
		return var36
	end
	local var37 = var9_upvw
	assert(var37, "Cannot call GetController until Knit has been started")
	if type(arg1) ~= "string" then
		var37 = false
	else
		var37 = true
	end
	assert(var37, `ControllerName must be a string; got {type(arg1)}`)
	error(`Could not find controller "{arg1}". Check to verify a controller with this name exists.`, 2)
end
function module.Start(arg1) -- Line 310
	--[[ Upvalues[7]:
		[1]: var9_upvw (read and write)
		[2]: Promise_upvr (readonly)
		[3]: var2_upvw (read and write)
		[4]: tbl_upvr (readonly)
		[5]: tbl_upvr_2 (readonly)
		[6]: var10_upvw (read and write)
		[7]: BindableEvent_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [2] 3. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return Promise_upvr.reject("Knit already started")
	end
	-- KONSTANTERROR: [2] 3. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 8. Error Block 3 start (CF ANALYSIS FAILED)
	var9_upvw = true
	-- KONSTANTERROR: [8] 8. Error Block 3 end (CF ANALYSIS FAILED)
end
function module.OnStart() -- Line 382
	--[[ Upvalues[3]:
		[1]: var10_upvw (read and write)
		[2]: Promise_upvr (readonly)
		[3]: BindableEvent_upvr (readonly)
	]]
	if var10_upvw then
		return Promise_upvr.resolve()
	end
	return Promise_upvr.fromEvent(BindableEvent_upvr.Event)
end
return module

Script name: promise
  - Script: 


local tbl_4_upvr = {
	__mode = 'k';
}
local function _(arg1) -- Line 10, Named "isCallable"
	if type(arg1) == "function" then
		return true
	end
	if type(arg1) == "table" then
		local getmetatable_result1_8 = getmetatable(arg1)
		if getmetatable_result1_8 and type(rawget(getmetatable_result1_8, "__call")) == "function" then
			return true
		end
	end
	return false
end
local function makeEnum(arg1, arg2) -- Line 28
	local module_6 = {}
	for _, v in ipairs(arg2) do
		module_6[v] = v
	end
	return setmetatable(module_6, {
		__index = function(arg1_2, arg2_2) -- Line 36, Named "__index"
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			error(string.format("%s is not in %s!", arg2_2, arg1), 2)
		end;
		__newindex = function() -- Line 39, Named "__newindex"
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			error(string.format("Creating new members in %s is not allowed!", arg1), 2)
		end;
	})
end
local var15_upvw = {
	Kind = makeEnum("Promise.Error.Kind", {"ExecutionError", "AlreadyCancelled", "NotResolvedInTime", "TimedOut"});
}
var15_upvw.__index = var15_upvw
local function new(arg1, arg2) -- Line 64
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	local var16 = arg1
	if not var16 then
		var16 = {}
	end
	local var17 = var16
	local module_7 = {
		error = tostring(var17.error) or "[This error has no error text.]";
		trace = var17.trace;
		context = var17.context;
		kind = var17.kind;
	}
	module_7.parent = arg2
	module_7.createdTick = os.clock()
	module_7.createdTrace = debug.traceback()
	return setmetatable(module_7, var15_upvw)
end
var15_upvw.new = new
local function is(arg1) -- Line 77
	if type(arg1) == "table" then
		local getmetatable_result1_2 = getmetatable(arg1)
		if type(getmetatable_result1_2) == "table" then
			local var22 = false
			if rawget(arg1, "error") ~= nil then
				if type(rawget(getmetatable_result1_2, "extend")) ~= "function" then
					var22 = false
				else
					var22 = true
				end
			end
			return var22
		end
	end
	return false
end
var15_upvw.is = is
function var15_upvw.isKind(arg1, arg2) -- Line 89
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	if arg2 == nil then
	else
	end
	assert(true, "Argument #2 to Promise.Error.isKind must not be nil")
	if var15_upvw.is(arg1) then
		if arg1.kind ~= arg2 then
		else
		end
	end
	return true
end
function var15_upvw.extend(arg1, arg2) -- Line 95
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	local var23 = arg2
	if not var23 then
		var23 = {}
	end
	local var24 = var23
	var23 = var24.kind
	local var25 = var23
	if not var25 then
		var25 = arg1.kind
	end
	var24.kind = var25
	return var15_upvw.new(var24, arg1)
end
function var15_upvw.getErrorChain(arg1) -- Line 103
	local module_2 = {}
	module_2[1] = arg1
	while module_2[#module_2].parent do
		table.insert(module_2, module_2[#module_2].parent)
	end
	return module_2
end
local function __tostring(arg1) -- Line 113
	local module_9 = {string.format("-- Promise.Error(%s) --", arg1.kind or '?')}
	for _, v_2 in ipairs(arg1:getErrorChain()) do
		local tbl_7 = {}
		local trace = v_2.trace
		if not trace then
			trace = v_2.error
		end
		tbl_7[1] = trace
		tbl_7[2] = v_2.context
		table.insert(module_9, table.concat(tbl_7, '\n'))
	end
	return table.concat(module_9, '\n')
end
var15_upvw.__tostring = __tostring
local function pack_upvr(...) -- Line 137, Named "pack"
	return select('#', ...), {...}
end
local function packResult_upvr(arg1, ...) -- Line 144, Named "packResult"
	return arg1, select('#', ...), {...}
end
local function _(arg1) -- Line 148, Named "makeErrorHandler"
	--[[ Upvalues[1]:
		[1]: var15_upvw (read and write)
	]]
	if arg1 == nil then
	else
	end
	assert(true, "traceback is nil")
	return function(arg1_3) -- Line 151
		--[[ Upvalues[2]:
			[1]: var15_upvw (copied, read and write)
			[2]: arg1 (readonly)
		]]
		if type(arg1_3) == "table" then
			return arg1_3
		end
		local module_11 = {}
		module_11.error = arg1_3
		module_11.kind = var15_upvw.Kind.ExecutionError
		module_11.trace = debug.traceback(tostring(arg1_3), 2)
		module_11.context = "Promise created at:\n\n"..arg1
		return var15_upvw.new(module_11)
	end
end
local function runExecutor_upvr(arg1, arg2, ...) -- Line 171, Named "runExecutor"
	--[[ Upvalues[2]:
		[1]: packResult_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	local var41
	if arg1 == nil then
		var41 = false
	else
		var41 = true
	end
	assert(var41, "traceback is nil")
	return packResult_upvr(xpcall(arg2, function(arg1_4) -- Line 151
		--[[ Upvalues[2]:
			[1]: var15_upvw (copied, read and write)
			[2]: arg1 (readonly)
		]]
		if type(arg1_4) == "table" then
			return arg1_4
		end
		local module_3 = {}
		module_3.error = arg1_4
		module_3.kind = var15_upvw.Kind.ExecutionError
		module_3.trace = debug.traceback(tostring(arg1_4), 2)
		module_3.context = "Promise created at:\n\n"..arg1
		return var15_upvw.new(module_3)
	end, ...))
end
local function _(arg1, arg2, arg3, arg4) -- Line 179, Named "createAdvancer"
	--[[ Upvalues[1]:
		[1]: runExecutor_upvr (readonly)
	]]
	return function(...) -- Line 180
		--[[ Upvalues[5]:
			[1]: runExecutor_upvr (copied, readonly)
			[2]: arg1 (readonly)
			[3]: arg2 (readonly)
			[4]: arg3 (readonly)
			[5]: arg4 (readonly)
		]]
		local runExecutor_result1, runExecutor_result2, runExecutor_result3_2 = runExecutor_upvr(arg1, arg2, ...)
		if runExecutor_result1 then
			arg3(unpack(runExecutor_result3_2, 1, runExecutor_result2))
		else
			arg4(runExecutor_result3_2[1])
		end
	end
end
local function _(arg1) -- Line 191, Named "isEmpty"
	local var48
	if next(arg1) ~= nil then
		var48 = false
	else
		var48 = true
	end
	return var48
end
local module_4_upvr = {
	Error = var15_upvw;
	Status = makeEnum("Promise.Status", {"Started", "Resolved", "Rejected", "Cancelled"});
	_getTime = os.clock;
	_timeEvent = game:GetService("RunService").Heartbeat;
	_unhandledRejectionCallbacks = {};
	prototype = {};
	__index = module_4_upvr.prototype;
}
function module_4_upvr._new(arg1, arg2, arg3) -- Line 230
	--[[ Upvalues[3]:
		[1]: module_4_upvr (readonly)
		[2]: tbl_4_upvr (readonly)
		[3]: runExecutor_upvr (readonly)
	]]
	if arg3 ~= nil and not module_4_upvr.is(arg3) then
		error("Argument #2 to Promise.new must be a promise or nil", 2)
	end
	local module_5_upvr = {
		_thread = nil;
	}
	module_5_upvr._source = arg1
	module_5_upvr._status = module_4_upvr.Status.Started
	module_5_upvr._values = nil
	module_5_upvr._valuesLength = -1
	module_5_upvr._unhandledRejection = true
	module_5_upvr._queuedResolve = {}
	module_5_upvr._queuedReject = {}
	module_5_upvr._queuedFinally = {}
	module_5_upvr._cancellationHook = nil
	module_5_upvr._parent = arg3
	module_5_upvr._consumers = setmetatable({}, tbl_4_upvr)
	if arg3 and arg3._status == module_4_upvr.Status.Started then
		arg3._consumers[module_5_upvr] = true
	end
	setmetatable(module_5_upvr, module_4_upvr)
	local function resolve(...) -- Line 278
		--[[ Upvalues[1]:
			[1]: module_5_upvr (readonly)
		]]
		module_5_upvr:_resolve(...)
	end
	local function reject(...) -- Line 282
		--[[ Upvalues[1]:
			[1]: module_5_upvr (readonly)
		]]
		module_5_upvr:_reject(...)
	end
	local function onCancel_upvr(arg1_5) -- Line 286, Named "onCancel"
		--[[ Upvalues[2]:
			[1]: module_5_upvr (readonly)
			[2]: module_4_upvr (copied, readonly)
		]]
		if arg1_5 then
			if module_5_upvr._status == module_4_upvr.Status.Cancelled then
				arg1_5()
			else
				module_5_upvr._cancellationHook = arg1_5
			end
		end
		if module_5_upvr._status ~= module_4_upvr.Status.Cancelled then
		else
		end
		return true
	end
	module_5_upvr._thread = coroutine.create(function() -- Line 298
		--[[ Upvalues[6]:
			[1]: runExecutor_upvr (copied, readonly)
			[2]: module_5_upvr (readonly)
			[3]: arg2 (readonly)
			[4]: resolve (readonly)
			[5]: reject (readonly)
			[6]: onCancel_upvr (readonly)
		]]
		local runExecutor_result1_3, _, runExecutor_upvr_result3_3 = runExecutor_upvr(module_5_upvr._source, arg2, resolve, reject, onCancel_upvr)
		if not runExecutor_result1_3 then
			reject(runExecutor_upvr_result3_3[1])
		end
	end)
	task.spawn(module_5_upvr._thread)
	return module_5_upvr
end
function module_4_upvr.new(arg1) -- Line 349
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	return module_4_upvr._new(debug.traceback(nil, 2), arg1)
end
function module_4_upvr.__tostring(arg1) -- Line 353
	return string.format("Promise(%s)", arg1._status)
end
function module_4_upvr.defer(arg1) -- Line 375
	--[[ Upvalues[2]:
		[1]: module_4_upvr (readonly)
		[2]: runExecutor_upvr (readonly)
	]]
	local call_stack_upvr_2 = debug.traceback(nil, 2)
	return module_4_upvr._new(call_stack_upvr_2, function(arg1_6, arg2, arg3) -- Line 378
		--[[ Upvalues[4]:
			[1]: module_4_upvr (copied, readonly)
			[2]: runExecutor_upvr (copied, readonly)
			[3]: call_stack_upvr_2 (readonly)
			[4]: arg1 (readonly)
		]]
		local var59_upvw
		var59_upvw = module_4_upvr._timeEvent:Connect(function() -- Line 380
			--[[ Upvalues[7]:
				[1]: var59_upvw (read and write)
				[2]: runExecutor_upvr (copied, readonly)
				[3]: call_stack_upvr_2 (copied, readonly)
				[4]: arg1 (copied, readonly)
				[5]: arg1_6 (readonly)
				[6]: arg2 (readonly)
				[7]: arg3 (readonly)
			]]
			var59_upvw:Disconnect()
			local runExecutor_result1_5, _, runExecutor_result3 = runExecutor_upvr(call_stack_upvr_2, arg1, arg1_6, arg2, arg3)
			if not runExecutor_result1_5 then
				arg2(runExecutor_result3[1])
			end
		end)
	end)
end
module_4_upvr.async = module_4_upvr.defer
function module_4_upvr.resolve(...) -- Line 418
	--[[ Upvalues[2]:
		[1]: pack_upvr (readonly)
		[2]: module_4_upvr (readonly)
	]]
	local pack_result1_upvr_2, pack_result2_upvr = pack_upvr(...)
	return module_4_upvr._new(debug.traceback(nil, 2), function(arg1) -- Line 420
		--[[ Upvalues[2]:
			[1]: pack_result2_upvr (readonly)
			[2]: pack_result1_upvr_2 (readonly)
		]]
		arg1(unpack(pack_result2_upvr, 1, pack_result1_upvr_2))
	end)
end
function module_4_upvr.reject(...) -- Line 435
	--[[ Upvalues[2]:
		[1]: pack_upvr (readonly)
		[2]: module_4_upvr (readonly)
	]]
	local pack_result1_3_upvr, pack_result2_upvr_3 = pack_upvr(...)
	return module_4_upvr._new(debug.traceback(nil, 2), function(arg1, arg2) -- Line 437
		--[[ Upvalues[2]:
			[1]: pack_result2_upvr_3 (readonly)
			[2]: pack_result1_3_upvr (readonly)
		]]
		arg2(unpack(pack_result2_upvr_3, 1, pack_result1_3_upvr))
	end)
end
function module_4_upvr._try(arg1, arg2, ...) -- Line 446
	--[[ Upvalues[2]:
		[1]: pack_upvr (readonly)
		[2]: module_4_upvr (readonly)
	]]
	local pack_result1_upvr, pack_result2_upvr_4 = pack_upvr(...)
	return module_4_upvr._new(arg1, function(arg1_7) -- Line 449
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: pack_result2_upvr_4 (readonly)
			[3]: pack_result1_upvr (readonly)
		]]
		arg1_7(arg2(unpack(pack_result2_upvr_4, 1, pack_result1_upvr)))
	end)
end
function module_4_upvr.try(arg1, ...) -- Line 477
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	return module_4_upvr._try(debug.traceback(nil, 2), arg1, ...)
end
function module_4_upvr._all(arg1, arg2, arg3) -- Line 486
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	if type(arg2) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.all"), 3)
	end
	for i_3, v_3 in pairs(arg2) do
		if not module_4_upvr.is(v_3) then
			error(string.format("Non-promise value passed into %s at index %s", "Promise.all", tostring(i_3)), 3)
		end
	end
	if #arg2 == 0 or arg3 == 0 then
		return module_4_upvr.resolve({})
	end
	return module_4_upvr._new(arg1, function(arg1_8, arg2_3, arg3_2) -- Line 504
		--[[ Upvalues[2]:
			[1]: arg3 (readonly)
			[2]: arg2 (readonly)
		]]
		local tbl_6_upvr = {}
		local var87_upvw = 0
		local var88_upvw = false
		local function cancel() -- Line 515
			--[[ Upvalues[1]:
				[1]: tbl_6_upvr (readonly)
			]]
			for _, v_4 in ipairs(tbl_6_upvr) do
				v_4:cancel()
			end
		end
		local var94_upvw = 0
		local tbl_upvr_3 = {}
		local function resolveOne(arg1_9, ...) -- Line 522
			--[[ Upvalues[7]:
				[1]: var88_upvw (read and write)
				[2]: var94_upvw (read and write)
				[3]: arg3 (copied, readonly)
				[4]: tbl_upvr_3 (readonly)
				[5]: arg2 (copied, readonly)
				[6]: arg1_8 (readonly)
				[7]: tbl_6_upvr (readonly)
			]]
			if var88_upvw then
			else
				var94_upvw += 1
				if arg3 == nil then
					tbl_upvr_3[arg1_9] = ...
				else
					tbl_upvr_3[var94_upvw] = ...
				end
				local var100 = arg3
				if not var100 then
					var100 = #arg2
				end
				if var100 <= var94_upvw then
					var88_upvw = true
					arg1_8(tbl_upvr_3)
					for _, v_16 in ipairs(tbl_6_upvr) do
						v_16:cancel()
					end
				end
			end
		end
		arg3_2(cancel)
		for i_5_upvr, v_5 in ipairs(arg2) do
			tbl_6_upvr[i_5_upvr] = v_5:andThen(function(...) -- Line 547
				--[[ Upvalues[2]:
					[1]: resolveOne (readonly)
					[2]: i_5_upvr (readonly)
				]]
				resolveOne(i_5_upvr, ...)
			end, function(...) -- Line 549
				--[[ Upvalues[6]:
					[1]: var87_upvw (read and write)
					[2]: arg3 (copied, readonly)
					[3]: arg2 (copied, readonly)
					[4]: tbl_6_upvr (readonly)
					[5]: var88_upvw (read and write)
					[6]: arg2_3 (readonly)
				]]
				var87_upvw += 1
				if arg3 == nil or #arg2 - var87_upvw < arg3 then
					for _, v_6 in ipairs(tbl_6_upvr) do
						v_6:cancel()
					end
					var88_upvw = true
					arg2_3(...)
				end
			end)
		end
		if var88_upvw then
			for _, v_7 in ipairs(tbl_6_upvr) do
				v_7:cancel()
			end
		end
	end)
end
function module_4_upvr.all(arg1) -- Line 591
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	return module_4_upvr._all(debug.traceback(nil, 2), arg1)
end
function module_4_upvr.fold(arg1, arg2, arg3) -- Line 620
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 20 start (CF ANALYSIS FAILED)
	local var123
	if type(arg1) ~= "table" then
		var123 = false
	else
		var123 = true
	end
	assert(var123, "Bad argument #1 to Promise.fold: must be a table")
	-- KONSTANTERROR: [0] 1. Error Block 20 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [24] 19. Error Block 16 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [24] 19. Error Block 16 end (CF ANALYSIS FAILED)
end
function module_4_upvr.some(arg1, arg2) -- Line 653
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	local var124
	if type(arg2) ~= "number" then
		var124 = false
	else
		var124 = true
	end
	assert(var124, "Bad argument #2 to Promise.some: must be a number")
	var124 = module_4_upvr
	var124 = debug.traceback(nil, 2)
	return var124._all(var124, arg1, arg2)
end
function module_4_upvr.any(arg1) -- Line 677
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	return module_4_upvr._all(debug.traceback(nil, 2), arg1, 1):andThen(function(arg1_12) -- Line 678
		return arg1_12[1]
	end)
end
function module_4_upvr.allSettled(arg1) -- Line 699
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	if type(arg1) ~= "table" then
		error(string.format("Please pass a list of promises to %s", "Promise.allSettled"), 2)
	end
	for i_8, v_8 in pairs(arg1) do
		if not module_4_upvr.is(v_8) then
			error(string.format("Non-promise value passed into %s at index %s", "Promise.allSettled", tostring(i_8)), 2)
		end
	end
	if #arg1 == 0 then
		return module_4_upvr.resolve({})
	end
	return module_4_upvr._new(debug.traceback(nil, 2), function(arg1_13, arg2, arg3) -- Line 717
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		local tbl_upvr = {}
		local var137_upvw = 0
		local tbl_3_upvr = {}
		local function resolveOne_upvr(arg1_14, ...) -- Line 727, Named "resolveOne"
			--[[ Upvalues[4]:
				[1]: var137_upvw (read and write)
				[2]: tbl_3_upvr (readonly)
				[3]: arg1 (copied, readonly)
				[4]: arg1_13 (readonly)
			]]
			var137_upvw += 1
			tbl_3_upvr[arg1_14] = ...
			if #arg1 <= var137_upvw then
				arg1_13(tbl_3_upvr)
			end
		end
		arg3(function() -- Line 737
			--[[ Upvalues[1]:
				[1]: tbl_upvr (readonly)
			]]
			for _, v_9 in ipairs(tbl_upvr) do
				v_9:cancel()
			end
		end)
		for i_10_upvr, v_10 in ipairs(arg1) do
			tbl_upvr[i_10_upvr] = v_10:finally(function(...) -- Line 746
				--[[ Upvalues[2]:
					[1]: resolveOne_upvr (readonly)
					[2]: i_10_upvr (readonly)
				]]
				resolveOne_upvr(i_10_upvr, ...)
			end)
		end
	end)
end
function module_4_upvr.race(arg1) -- Line 777
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	local var153
	if type(arg1) ~= "table" then
		var153 = false
	else
		var153 = true
	end
	assert(var153, string.format("Please pass a list of promises to %s", "Promise.race"))
	var153 = arg1
	local pairs_result1, pairs_result2_3, pairs_result3 = pairs(var153)
	for i_11, v_11 in pairs_result1, pairs_result2_3, pairs_result3 do
		assert(module_4_upvr.is(v_11), string.format("Non-promise value passed into %s at index %s", "Promise.race", tostring(i_11)))
	end
	pairs_result2_3 = module_4_upvr
	pairs_result2_3 = debug.traceback(nil, 2)
	return pairs_result2_3._new(pairs_result2_3, function(arg1_15, arg2, arg3) -- Line 784
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		local tbl_upvr_4 = {}
		local var167_upvw = false
		local function cancel() -- Line 788
			--[[ Upvalues[1]:
				[1]: tbl_upvr_4 (readonly)
			]]
			for _, v_12 in ipairs(tbl_upvr_4) do
				v_12:cancel()
			end
		end
		local function _(arg1_16) -- Line 794, Named "finalize"
			--[[ Upvalues[2]:
				[1]: tbl_upvr_4 (readonly)
				[2]: var167_upvw (read and write)
			]]
			return function(...) -- Line 795
				--[[ Upvalues[3]:
					[1]: tbl_upvr_4 (copied, readonly)
					[2]: var167_upvw (copied, read and write)
					[3]: arg1_16 (readonly)
				]]
				for _, v_13 in ipairs(tbl_upvr_4) do
					v_13:cancel()
				end
				var167_upvw = true
				return arg1_16(...)
			end
		end
		if arg3(function(...) -- Line 795
			--[[ Upvalues[3]:
				[1]: tbl_upvr_4 (readonly)
				[2]: var167_upvw (read and write)
				[3]: arg2 (readonly)
			]]
			for _, v_14 in ipairs(tbl_upvr_4) do
				v_14:cancel()
			end
			var167_upvw = true
			return arg2(...)
		end) then
		else
			for i_17, v_17 in ipairs(arg1) do
				tbl_upvr_4[i_17] = v_17:andThen(function(...) -- Line 795
					--[[ Upvalues[3]:
						[1]: tbl_upvr_4 (readonly)
						[2]: var167_upvw (read and write)
						[3]: arg1_15 (readonly)
					]]
					for _, v_18 in ipairs(tbl_upvr_4) do
						v_18:cancel()
					end
					var167_upvw = true
					return arg1_15(...)
				end, function(...) -- Line 795
					--[[ Upvalues[3]:
						[1]: tbl_upvr_4 (readonly)
						[2]: var167_upvw (read and write)
						[3]: arg2 (readonly)
					]]
					for _, v_19 in ipairs(tbl_upvr_4) do
						v_19:cancel()
					end
					var167_upvw = true
					return arg2(...)
				end)
			end
			if var167_upvw then
				for _, v_20 in ipairs(tbl_upvr_4) do
					v_20:cancel()
				end
			end
		end
	end)
end
function module_4_upvr.each(arg1, arg2) -- Line 872
	--[[ Upvalues[2]:
		[1]: module_4_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 20 start (CF ANALYSIS FAILED)
	local var310
	if type(arg1) ~= "table" then
		var310 = false
	else
		var310 = true
	end
	assert(var310, string.format("Please pass a list of promises to %s", "Promise.each"))
	-- KONSTANTERROR: [0] 1. Error Block 20 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [27] 22. Error Block 16 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [27] 22. Error Block 16 end (CF ANALYSIS FAILED)
end
function module_4_upvr.is(arg1) -- Line 971
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [7] 6. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return false
	end
	-- KONSTANTERROR: [7] 6. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 3 end (CF ANALYSIS FAILED)
end
function module_4_upvr.promisify(arg1) -- Line 1020
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	return function(...) -- Line 1021
		--[[ Upvalues[2]:
			[1]: module_4_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		return module_4_upvr._try(debug.traceback(nil, 2), arg1, ...)
	end
end
local var318_upvw
local var319_upvw
function module_4_upvr.delay(arg1) -- Line 1051
	--[[ Upvalues[3]:
		[1]: module_4_upvr (readonly)
		[2]: var318_upvw (read and write)
		[3]: var319_upvw (read and write)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var320
	if type(arg1) ~= "number" then
		var320 = false
	else
		var320 = true
	end
	assert(var320, "Bad argument #1 to Promise.delay, must be a number.")
	if (1/60) > arg1 or arg1 == math.huge then
	end
	var320 = module_4_upvr
	var320 = debug.traceback(nil, 2)
	local const_number_upvw = (1/60)
	return var320._new(var320, function(arg1_18, arg2, arg3) -- Line 1059
		--[[ Upvalues[4]:
			[1]: module_4_upvr (copied, readonly)
			[2]: const_number_upvw (read and write)
			[3]: var318_upvw (copied, read and write)
			[4]: var319_upvw (copied, read and write)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		-- KONSTANTERROR: [0] 1. Error Block 29 start (CF ANALYSIS FAILED)
		local any__getTime_result1 = module_4_upvr._getTime()
		local var324 = any__getTime_result1 + const_number_upvw
		local tbl_upvr_2 = {}
		tbl_upvr_2.resolve = arg1_18
		tbl_upvr_2.startTime = any__getTime_result1
		tbl_upvr_2.endTime = var324
		if var318_upvw == nil then
			var319_upvw = tbl_upvr_2
			var318_upvw = module_4_upvr._timeEvent:Connect(function() -- Line 1071
				--[[ Upvalues[3]:
					[1]: module_4_upvr (copied, readonly)
					[2]: var319_upvw (copied, read and write)
					[3]: var318_upvw (copied, read and write)
				]]
				while var319_upvw ~= nil and var319_upvw.endTime < module_4_upvr._getTime() do
					local var327 = var319_upvw
					var319_upvw = var327.next
					if var319_upvw == nil then
						var318_upvw:Disconnect()
						var318_upvw = nil
					else
						var319_upvw.previous = nil
					end
					var327.resolve(module_4_upvr._getTime() - var327.startTime)
				end
			end)
		else
			local var328
			if var319_upvw.endTime < var324 then
				local next = var319_upvw.next
				while next ~= nil and next.endTime < var324 do
					local var330 = next
					local next_2 = var330.next
				end
				var330.next = tbl_upvr_2
				tbl_upvr_2.previous = var330
				if next_2 ~= nil then
					tbl_upvr_2.next = next_2
					next_2.previous = tbl_upvr_2
					-- KONSTANTWARNING: GOTO [65] #45
				end
			else
				tbl_upvr_2.next = var319_upvw
				var319_upvw.previous = tbl_upvr_2
				var319_upvw = tbl_upvr_2
			end
		end
		-- KONSTANTERROR: [0] 1. Error Block 29 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [65] 45. Error Block 14 start (CF ANALYSIS FAILED)
		arg3(function() -- Line 1116
			--[[ Upvalues[3]:
				[1]: tbl_upvr_2 (readonly)
				[2]: var319_upvw (copied, read and write)
				[3]: var318_upvw (copied, read and write)
			]]
			local next_3 = tbl_upvr_2.next
			if var319_upvw == tbl_upvr_2 then
				if next_3 == nil then
					var318_upvw:Disconnect()
					var318_upvw = nil
				else
					next_3.previous = nil
				end
				var319_upvw = next_3
			else
				local previous = tbl_upvr_2.previous
				previous.next = next_3
				if next_3 ~= nil then
					next_3.previous = previous
				end
			end
		end)
		-- KONSTANTERROR: [65] 45. Error Block 14 end (CF ANALYSIS FAILED)
	end)
end
module_4_upvr.prototype.timeout = function(arg1, arg2, arg3) -- Line 1180, Named "timeout"
	--[[ Upvalues[2]:
		[1]: module_4_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	local module_10 = {}
	local call_stack_upvr = debug.traceback(nil, 2)
	module_10[1] = module_4_upvr.delay(arg2):andThen(function() -- Line 1184
		--[[ Upvalues[5]:
			[1]: module_4_upvr (copied, readonly)
			[2]: arg3 (readonly)
			[3]: var15_upvw (copied, read and write)
			[4]: arg2 (readonly)
			[5]: call_stack_upvr (readonly)
		]]
		local var338
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var338 = var338(tbl_8)
			tbl_8.context = string.format("Timeout of %d seconds exceeded.\n:timeout() called at:\n\n%s", arg2, call_stack_upvr)
			tbl_8.error = "Timed out"
			tbl_8.kind = var15_upvw.Kind.TimedOut
			local tbl_8 = {}
			var338 = var15_upvw.new
			return var338
		end
		if arg3 ~= nil or not INLINED() then
			var338 = arg3
		end
		return module_4_upvr.reject(var338)
	end)
	module_10[2] = arg1
	return module_4_upvr.race(module_10)
end
module_4_upvr.prototype.getStatus = function(arg1) -- Line 1204, Named "getStatus"
	return arg1._status
end
module_4_upvr.prototype._andThen = function(arg1, arg2, arg3, arg4) -- Line 1213, Named "_andThen"
	--[[ Upvalues[2]:
		[1]: module_4_upvr (readonly)
		[2]: runExecutor_upvr (readonly)
	]]
	arg1._unhandledRejection = false
	if arg1._status == module_4_upvr.Status.Cancelled then
		local any_new_result1 = module_4_upvr.new(function() -- Line 1218
		end)
		any_new_result1:cancel()
		return any_new_result1
	end
	return module_4_upvr._new(arg2, function(arg1_19, arg2_6, arg3_3) -- Line 1225
		--[[ Upvalues[6]:
			[1]: arg3 (readonly)
			[2]: arg2 (readonly)
			[3]: runExecutor_upvr (copied, readonly)
			[4]: arg4 (readonly)
			[5]: arg1 (readonly)
			[6]: module_4_upvr (copied, readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var348_upvw
		if var348_upvw then
			var348_upvw = arg2
			local function var344_upvw(...) -- Line 180
				--[[ Upvalues[5]:
					[1]: runExecutor_upvr (copied, readonly)
					[2]: var348_upvw (readonly)
					[3]: arg3 (readonly)
					[4]: arg1_19 (readonly)
					[5]: arg2_6 (readonly)
				]]
				local runExecutor_result1_2, runExecutor_result2_2, runExecutor_upvr_result3_2 = runExecutor_upvr(var348_upvw, arg3, ...)
				if runExecutor_result1_2 then
					arg1_19(unpack(runExecutor_upvr_result3_2, 1, runExecutor_result2_2))
				else
					arg2_6(runExecutor_upvr_result3_2[1])
				end
			end
		end
		var348_upvw = arg2_6
		if arg4 then
			function var348_upvw(...) -- Line 180
				--[[ Upvalues[5]:
					[1]: runExecutor_upvr (copied, readonly)
					[2]: arg2 (readonly)
					[3]: arg4 (readonly)
					[4]: arg1_19 (readonly)
					[5]: arg2_6 (readonly)
				]]
				local runExecutor_result1_4, runExecutor_result2_3, runExecutor_upvr_result3 = runExecutor_upvr(arg2, arg4, ...)
				if runExecutor_result1_4 then
					arg1_19(unpack(runExecutor_upvr_result3, 1, runExecutor_result2_3))
				else
					arg2_6(runExecutor_upvr_result3[1])
				end
			end
		end
		if arg1._status == module_4_upvr.Status.Started then
			table.insert(arg1._queuedResolve, var344_upvw)
			table.insert(arg1._queuedReject, var348_upvw)
			local function var352() -- Line 1244
				--[[ Upvalues[4]:
					[1]: arg1 (copied, readonly)
					[2]: module_4_upvr (copied, readonly)
					[3]: var344_upvw (read and write)
					[4]: var348_upvw (read and write)
				]]
				if arg1._status == module_4_upvr.Status.Started then
					table.remove(arg1._queuedResolve, table.find(arg1._queuedResolve, var344_upvw))
					table.remove(arg1._queuedReject, table.find(arg1._queuedReject, var348_upvw))
				end
			end
			arg3_3(var352)
		else
			var352 = arg1
			var352 = module_4_upvr.Status.Resolved
			if var352._status == var352 then
				var352 = unpack(arg1._values, 1, arg1._valuesLength)
				var344_upvw(var352)
			else
				var352 = arg1
				var352 = module_4_upvr.Status.Rejected
				if var352._status == var352 then
					var352 = unpack(arg1._values, 1, arg1._valuesLength)
					var348_upvw(var352)
				end
			end
		end
	end, arg1)
end
module_4_upvr.prototype.andThen = function(arg1, arg2, arg3) -- Line 1283, Named "andThen"
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 27 start (CF ANALYSIS FAILED)
	local getmetatable_result1_13 = getmetatable(arg2)
	local var355
	if getmetatable_result1_13 and type(rawget(getmetatable_result1_13, "__call")) == "function" then
		var355 = true
	else
		-- KONSTANTERROR: [40] 31. Error Block 9 start (CF ANALYSIS FAILED)
		var355 = false
		-- KONSTANTERROR: [40] 31. Error Block 9 end (CF ANALYSIS FAILED)
	end
	-- KONSTANTERROR: [19] 15. Error Block 27 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 32. Error Block 24 start (CF ANALYSIS FAILED)
	assert(var355, string.format("Please pass a handler function to %s!", "Promise:andThen"))
	var355 = true
	-- KONSTANTERROR: [41] 32. Error Block 24 end (CF ANALYSIS FAILED)
end
module_4_upvr.prototype.catch = function(arg1, arg2) -- Line 1310, Named "catch"
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 14 start (CF ANALYSIS FAILED)
	local getmetatable_result1 = getmetatable(arg2)
	local var357
	if getmetatable_result1 and type(rawget(getmetatable_result1, "__call")) == "function" then
		var357 = true
	else
		-- KONSTANTERROR: [40] 31. Error Block 9 start (CF ANALYSIS FAILED)
		var357 = false
		-- KONSTANTERROR: [40] 31. Error Block 9 end (CF ANALYSIS FAILED)
	end
	-- KONSTANTERROR: [19] 15. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 32. Error Block 12 start (CF ANALYSIS FAILED)
	assert(var357, string.format("Please pass a handler function to %s!", "Promise:catch"))
	do
		return arg1:_andThen(debug.traceback(nil, 2), nil, arg2)
	end
	-- KONSTANTERROR: [41] 32. Error Block 12 end (CF ANALYSIS FAILED)
end
module_4_upvr.prototype.tap = function(arg1, arg2) -- Line 1331, Named "tap"
	--[[ Upvalues[2]:
		[1]: module_4_upvr (readonly)
		[2]: pack_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 12 end (CF ANALYSIS FAILED)
end
module_4_upvr.prototype.andThenCall = function(arg1, arg2, ...) -- Line 1366, Named "andThenCall"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 end (CF ANALYSIS FAILED)
end
module_4_upvr.prototype.andThenReturn = function(arg1, ...) -- Line 1396, Named "andThenReturn"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	local pack_result1_5_upvr, pack_result2_2_upvr = pack_upvr(...)
	return arg1:_andThen(debug.traceback(nil, 2), function() -- Line 1398
		--[[ Upvalues[2]:
			[1]: pack_result2_2_upvr (readonly)
			[2]: pack_result1_5_upvr (readonly)
		]]
		return unpack(pack_result2_2_upvr, 1, pack_result1_5_upvr)
	end)
end
module_4_upvr.prototype.cancel = function(arg1) -- Line 1414, Named "cancel"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	if arg1._status ~= module_4_upvr.Status.Started then
	else
		arg1._status = module_4_upvr.Status.Cancelled
		if arg1._cancellationHook then
			arg1._cancellationHook()
		end
		coroutine.close(arg1._thread)
		if arg1._parent then
			arg1._parent:_consumerCancelled(arg1)
		end
		for i_21 in pairs(arg1._consumers) do
			i_21:cancel()
		end
		arg1:_finalize()
	end
end
module_4_upvr.prototype._consumerCancelled = function(arg1, arg2) -- Line 1442, Named "_consumerCancelled"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	if arg1._status ~= module_4_upvr.Status.Started then
	else
		arg1._consumers[arg2] = nil
		if next(arg1._consumers) == nil then
			arg1:cancel()
		end
	end
end
module_4_upvr.prototype._finally = function(arg1, arg2, arg3) -- Line 1458, Named "_finally"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	arg1._unhandledRejection = false
	return module_4_upvr._new(arg2, function(arg1_20, arg2_7, arg3_4) -- Line 1461
		--[[ Upvalues[3]:
			[1]: arg1 (readonly)
			[2]: arg3 (readonly)
			[3]: module_4_upvr (copied, readonly)
		]]
		local var371_upvw
		arg3_4(function() -- Line 1464
			--[[ Upvalues[2]:
				[1]: arg1 (copied, readonly)
				[2]: var371_upvw (read and write)
			]]
			arg1:_consumerCancelled(arg1)
			if var371_upvw then
				var371_upvw:cancel()
			end
		end)
		local var374
		if arg3 then
			function var374(...) -- Line 1477
				--[[ Upvalues[6]:
					[1]: arg3 (copied, readonly)
					[2]: module_4_upvr (copied, readonly)
					[3]: var371_upvw (read and write)
					[4]: arg1_20 (readonly)
					[5]: arg1 (copied, readonly)
					[6]: arg2_7 (readonly)
				]]
				local arg3_result1 = arg3(...)
				if module_4_upvr.is(arg3_result1) then
					var371_upvw = arg3_result1
					arg3_result1:finally(function(arg1_21) -- Line 1484
						--[[ Upvalues[3]:
							[1]: module_4_upvr (copied, readonly)
							[2]: arg1_20 (copied, readonly)
							[3]: arg1 (copied, readonly)
						]]
						if arg1_21 ~= module_4_upvr.Status.Rejected then
							arg1_20(arg1)
						end
					end):catch(function(...) -- Line 1489
						--[[ Upvalues[1]:
							[1]: arg2_7 (copied, readonly)
						]]
						arg2_7(...)
					end)
				else
					arg1_20(arg1)
				end
			end
		end
		if arg1._status == module_4_upvr.Status.Started then
			table.insert(arg1._queuedFinally, var374)
		else
			var374(arg1._status)
		end
	end)
end
module_4_upvr.prototype.finally = function(arg1, arg2) -- Line 1559, Named "finally"
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 8. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [19] 15. Error Block 14 start (CF ANALYSIS FAILED)
	local getmetatable_result1_12 = getmetatable(arg2)
	local var379
	if getmetatable_result1_12 and type(rawget(getmetatable_result1_12, "__call")) == "function" then
		var379 = true
	else
		-- KONSTANTERROR: [40] 31. Error Block 9 start (CF ANALYSIS FAILED)
		var379 = false
		-- KONSTANTERROR: [40] 31. Error Block 9 end (CF ANALYSIS FAILED)
	end
	-- KONSTANTERROR: [19] 15. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [41] 32. Error Block 12 start (CF ANALYSIS FAILED)
	assert(var379, string.format("Please pass a handler function to %s!", "Promise:finally"))
	do
		return arg1:_finally(debug.traceback(nil, 2), arg2)
	end
	-- KONSTANTERROR: [41] 32. Error Block 12 end (CF ANALYSIS FAILED)
end
module_4_upvr.prototype.finallyCall = function(arg1, arg2, ...) -- Line 1573, Named "finallyCall"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 12 end (CF ANALYSIS FAILED)
end
module_4_upvr.prototype.finallyReturn = function(arg1, ...) -- Line 1599, Named "finallyReturn"
	--[[ Upvalues[1]:
		[1]: pack_upvr (readonly)
	]]
	local pack_result1_2_upvr, pack_upvr_result2_upvr = pack_upvr(...)
	return arg1:_finally(debug.traceback(nil, 2), function() -- Line 1601
		--[[ Upvalues[2]:
			[1]: pack_upvr_result2_upvr (readonly)
			[2]: pack_result1_2_upvr (readonly)
		]]
		return unpack(pack_upvr_result2_upvr, 1, pack_result1_2_upvr)
	end)
end
module_4_upvr.prototype.awaitStatus = function(arg1) -- Line 1613, Named "awaitStatus"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	arg1._unhandledRejection = false
	if arg1._status == module_4_upvr.Status.Started then
		local current_thread_upvr = coroutine.running()
		arg1:finally(function() -- Line 1620
			--[[ Upvalues[1]:
				[1]: current_thread_upvr (readonly)
			]]
			task.spawn(current_thread_upvr)
		end):catch(function() -- Line 1626
		end)
		coroutine.yield()
	end
	current_thread_upvr = arg1._status
	if current_thread_upvr == module_4_upvr.Status.Resolved then
		current_thread_upvr = arg1._status
		return current_thread_upvr, unpack(arg1._values, 1, arg1._valuesLength)
	end
	current_thread_upvr = arg1._status
	if current_thread_upvr == module_4_upvr.Status.Rejected then
		current_thread_upvr = arg1._status
		return current_thread_upvr, unpack(arg1._values, 1, arg1._valuesLength)
	end
	current_thread_upvr = arg1._status
	return current_thread_upvr
end
local function awaitHelper_upvr(arg1, ...) -- Line 1641, Named "awaitHelper"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	local var386
	if arg1 ~= module_4_upvr.Status.Resolved then
		var386 = false
	else
		var386 = true
	end
	return var386, ...
end
module_4_upvr.prototype.await = function(arg1) -- Line 1666, Named "await"
	--[[ Upvalues[1]:
		[1]: awaitHelper_upvr (readonly)
	]]
	return awaitHelper_upvr(arg1:awaitStatus())
end
local function expectHelper_upvr(arg1, ...) -- Line 1670, Named "expectHelper"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	local Status = module_4_upvr.Status
	if arg1 ~= Status.Resolved then
		if ... == nil then
			Status = "Expected Promise rejected with no value."
		else
			Status = ...
		end
		error(Status, 3)
	end
	return ...
end
module_4_upvr.prototype.expect = function(arg1) -- Line 1703, Named "expect"
	--[[ Upvalues[1]:
		[1]: expectHelper_upvr (readonly)
	]]
	return expectHelper_upvr(arg1:awaitStatus())
end
module_4_upvr.prototype.awaitValue = module_4_upvr.prototype.expect
module_4_upvr.prototype._unwrap = function(arg1) -- Line 1717, Named "_unwrap"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	local var388
	if var388 == module_4_upvr.Status.Started then
		var388 = error
		var388("Promise has not resolved or rejected.", 2)
	end
	if arg1._status ~= module_4_upvr.Status.Resolved then
		var388 = false
	else
		var388 = true
	end
	return var388, unpack(arg1._values, 1, arg1._valuesLength)
end
module_4_upvr.prototype._resolve = function(arg1, ...) -- Line 1727, Named "_resolve"
	--[[ Upvalues[3]:
		[1]: module_4_upvr (readonly)
		[2]: var15_upvw (read and write)
		[3]: pack_upvr (readonly)
	]]
	if arg1._status ~= module_4_upvr.Status.Started then
		if module_4_upvr.is(...) then
			...:_consumerCancelled(arg1)
		end
	else
		if module_4_upvr.is(...) then
			if 1 < select('#', ...) then
				warn(string.format("When returning a Promise from andThen, extra arguments are ".."discarded! See:\n\n%s", arg1._source))
			end
			local var391_upvr = ...
			local any_andThen_result1 = var391_upvr:andThen(function(...) -- Line 1748
				--[[ Upvalues[1]:
					[1]: arg1 (readonly)
				]]
				arg1:_resolve(...)
			end, function(...) -- Line 1750
				--[[ Upvalues[3]:
					[1]: var391_upvr (readonly)
					[2]: var15_upvw (copied, read and write)
					[3]: arg1 (readonly)
				]]
				local _1 = var391_upvr._values[1]
				if var391_upvr._error then
					_1 = var15_upvw.new({
						error = var391_upvr._error;
						kind = var15_upvw.Kind.ExecutionError;
						context = "[No stack trace available as this Promise originated from an older version of the Promise library (< v2)]";
					})
				end
				if var15_upvw.isKind(_1, var15_upvw.Kind.ExecutionError) then
					return arg1:_reject(_1:extend({
						error = "This Promise was chained to a Promise that errored.";
						trace = "";
						context = string.format("The Promise at:\n\n%s\n...Rejected because it was chained to the following Promise, which encountered an error:\n", arg1._source);
					}))
				end
				arg1:_reject(...)
			end)
			if any_andThen_result1._status == module_4_upvr.Status.Cancelled then
				arg1:cancel()
			elseif any_andThen_result1._status == module_4_upvr.Status.Started then
				arg1._parent = any_andThen_result1
				any_andThen_result1._consumers[arg1] = true
			end
		end
		var391_upvr = module_4_upvr.Status.Resolved
		arg1._status = var391_upvr
		var391_upvr = pack_upvr(...)
		local pack_result1_4, pack_result2 = pack_upvr(...)
		arg1._valuesLength = pack_result1_4
		arg1._values = pack_result2
		pack_result1_4 = ipairs(arg1._queuedResolve)
		local ipairs_result1_2, ipairs_result2_4, ipairs_result3 = ipairs(arg1._queuedResolve)
		for _, v_21 in ipairs_result1_2, ipairs_result2_4, ipairs_result3 do
			coroutine.wrap(v_21)(...)
		end
		ipairs_result1_2 = arg1:_finalize
		ipairs_result1_2()
	end
end
module_4_upvr.prototype._reject = function(arg1, ...) -- Line 1798, Named "_reject"
	--[[ Upvalues[2]:
		[1]: module_4_upvr (readonly)
		[2]: pack_upvr (readonly)
	]]
	if arg1._status ~= module_4_upvr.Status.Started then
	else
		arg1._status = module_4_upvr.Status.Rejected
		local pack_result1, pack_result2_3 = pack_upvr(...)
		arg1._valuesLength = pack_result1
		arg1._values = pack_result2_3
		if next(arg1._queuedReject) ~= nil then
			pack_result1 = false
		else
			pack_result1 = true
		end
		if not pack_result1 then
			for _, v_22 in ipairs(arg1._queuedReject) do
				coroutine.wrap(v_22)(...)
			end
		else
			local tostring_result1_upvr = tostring(...)
			coroutine.wrap(function() -- Line 1820
				--[[ Upvalues[3]:
					[1]: module_4_upvr (copied, readonly)
					[2]: arg1 (readonly)
					[3]: tostring_result1_upvr (readonly)
				]]
				module_4_upvr._timeEvent:Wait()
				if not arg1._unhandledRejection then
				else
					for _, v_23 in ipairs(module_4_upvr._unhandledRejectionCallbacks) do
						task.spawn(v_23, arg1, unpack(arg1._values, 1, arg1._valuesLength))
					end
					if module_4_upvr.TEST then return end
					warn(string.format("Unhandled Promise rejection:\n\n%s\n\n%s", tostring_result1_upvr, arg1._source))
				end
			end)()
		end
		tostring_result1_upvr = arg1:_finalize
		tostring_result1_upvr()
	end
end
module_4_upvr.prototype._finalize = function(arg1) -- Line 1852, Named "_finalize"
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	for _, v_15 in ipairs(arg1._queuedFinally) do
		coroutine.wrap(v_15)(arg1._status)
	end
	arg1._queuedFinally = nil
	arg1._queuedReject = nil
	arg1._queuedResolve = nil
	if not module_4_upvr.TEST then
		arg1._parent = nil
		arg1._consumers = nil
	end
	task.defer(coroutine.close, arg1._thread)
end
module_4_upvr.prototype.now = function(arg1, arg2) -- Line 1889, Named "now"
	--[[ Upvalues[2]:
		[1]: module_4_upvr (readonly)
		[2]: var15_upvw (read and write)
	]]
	local call_stack = debug.traceback(nil, 2)
	local var425
	if arg1._status == var425 then
		return arg1:_andThen(call_stack, function(...) -- Line 1892
			return ...
		end)
	end
	var425 = module_4_upvr
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var425 = var425(tbl)
		tbl.context = ":now() was called at:\n\n"..call_stack
		tbl.error = "This Promise was not resolved in time for :now()"
		tbl.kind = var15_upvw.Kind.NotResolvedInTime
		local tbl = {}
		var425 = var15_upvw.new
		return var425
	end
	if arg2 ~= nil or not INLINED_2() then
		var425 = arg2
	end
	return var425.reject(var425)
end
function module_4_upvr.retry(arg1, arg2, ...) -- Line 1934
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 17 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 17 end (CF ANALYSIS FAILED)
end
function module_4_upvr.retryWithDelay(arg1, arg2, arg3, ...) -- Line 1962
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 22 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [10] 9. Error Block 22 end (CF ANALYSIS FAILED)
end
function module_4_upvr.fromEvent(arg1, arg2) -- Line 2004
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	local var429_upvw = arg2
	if not var429_upvw then
		function var429_upvw() -- Line 2005
			return true
		end
	end
	return module_4_upvr._new(debug.traceback(nil, 2), function(arg1_22, arg2_8, arg3) -- Line 2009
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: var429_upvw (read and write)
		]]
		local var431_upvw
		local var432_upvw = false
		local function disconnect() -- Line 2013
			--[[ Upvalues[1]:
				[1]: var431_upvw (read and write)
			]]
			var431_upvw:Disconnect()
			var431_upvw = nil
		end
		var431_upvw = arg1:Connect(function(...) -- Line 2022
			--[[ Upvalues[4]:
				[1]: var429_upvw (copied, read and write)
				[2]: arg1_22 (readonly)
				[3]: var431_upvw (read and write)
				[4]: var432_upvw (read and write)
			]]
			local var429_upvw_result1 = var429_upvw(...)
			if var429_upvw_result1 == true then
				arg1_22(...)
				if var431_upvw then
					var431_upvw:Disconnect()
					var431_upvw = nil
				else
					var432_upvw = true
				end
			end
			if type(var429_upvw_result1) ~= "boolean" then
				error("Promise.fromEvent predicate should always return a boolean")
			end
		end)
		if var432_upvw then
			if var431_upvw then
				return disconnect()
			end
		end
		arg3(disconnect)
	end)
end
function module_4_upvr.onUnhandledRejection(arg1) -- Line 2056
	--[[ Upvalues[1]:
		[1]: module_4_upvr (readonly)
	]]
	table.insert(module_4_upvr._unhandledRejectionCallbacks, arg1)
	return function() -- Line 2059
		--[[ Upvalues[2]:
			[1]: module_4_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		local table_find_result1 = table.find(module_4_upvr._unhandledRejectionCallbacks, arg1)
		if table_find_result1 then
			table.remove(module_4_upvr._unhandledRejectionCallbacks, table_find_result1)
		end
	end
end
return module_4_upvr

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	Parent_upvr.TEST = true
	local BindableEvent_upvr_5 = Instance.new("BindableEvent")
	Parent_upvr._timeEvent = BindableEvent_upvr_5.Event
	local var4_upvw = 0
	function Parent_upvr._getTime() -- Line 12
		--[[ Upvalues[1]:
			[1]: var4_upvw (read and write)
		]]
		return var4_upvw
	end
	local function advanceTime_upvw(arg1) -- Line 16, Named "advanceTime"
		--[[ Upvalues[2]:
			[1]: var4_upvw (read and write)
			[2]: BindableEvent_upvr_5 (readonly)
		]]
		local var6 = arg1 or (1/60)
		var4_upvw += var6
		BindableEvent_upvr_5:Fire(var6)
	end
	local function pack_upvr(...) -- Line 24, Named "pack"
		return select('#', ...), {...}
	end
	describe("Promise.Status", function() -- Line 30
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should error if indexing nil value", function() -- Line 31
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 32
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
			end).to.throw()
		end)
	end)
	describe("Unhandled rejection signal", function() -- Line 38
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should call unhandled rejection callbacks", function() -- Line 39
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var14_upvw = 0
			local any_new_result1_30_upvr = Parent_upvr.new(function(arg1, arg2) -- Line 40
				arg2(1, 2)
			end)
			advanceTime_upvw()
			expect(var14_upvw).to.equal(1)
			Parent_upvr.onUnhandledRejection(function(arg1, arg2, arg3) -- Line 46, Named "callback"
				--[[ Upvalues[2]:
					[1]: var14_upvw (read and write)
					[2]: any_new_result1_30_upvr (readonly)
				]]
				var14_upvw += 1
				expect(arg1).to.equal(any_new_result1_30_upvr)
				expect(arg2).to.equal(1)
				expect(arg3).to.equal(2)
			end)()
			Parent_upvr.new(function(arg1, arg2) -- Line 62
				arg2(3, 4)
			end)
			advanceTime_upvw()
			expect(var14_upvw).to.equal(1)
		end)
	end)
	describe("Promise.new", function() -- Line 72
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should instantiate with a callback", function() -- Line 73
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.new(function() -- Line 74
			end)).to.be.ok()
		end)
		it("should invoke the given callback with resolve and reject", function() -- Line 79
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var21_upvw = 0
			local var22_upvw
			local var23_upvw
			local any_new_result1_8 = Parent_upvr.new(function(arg1, arg2) -- Line 84
				--[[ Upvalues[3]:
					[1]: var21_upvw (read and write)
					[2]: var22_upvw (read and write)
					[3]: var23_upvw (read and write)
				]]
				var21_upvw += 1
				var22_upvw = arg1
				var23_upvw = arg2
			end)
			expect(any_new_result1_8).to.be.ok()
			expect(var21_upvw).to.equal(1)
			expect(var22_upvw).to.be.a("function")
			expect(var23_upvw).to.be.a("function")
			expect(any_new_result1_8:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
		it("should resolve promises on resolve()", function() -- Line 98
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var27_upvw = 0
			local any_new_result1_27 = Parent_upvr.new(function(arg1) -- Line 101
				--[[ Upvalues[1]:
					[1]: var27_upvw (read and write)
				]]
				var27_upvw += 1
				arg1()
			end)
			expect(any_new_result1_27).to.be.ok()
			expect(var27_upvw).to.equal(1)
			expect(any_new_result1_27:getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should reject promises on reject()", function() -- Line 111
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var31_upvw = 0
			local any_new_result1_6 = Parent_upvr.new(function(arg1, arg2) -- Line 114
				--[[ Upvalues[1]:
					[1]: var31_upvw (read and write)
				]]
				var31_upvw += 1
				arg2()
			end)
			expect(any_new_result1_6).to.be.ok()
			expect(var31_upvw).to.equal(1)
			expect(any_new_result1_6:getStatus()).to.equal(Parent_upvr.Status.Rejected)
		end)
		it("should reject on error in callback", function() -- Line 124
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var35_upvw = 0
			local any_new_result1_12 = Parent_upvr.new(function() -- Line 127
				--[[ Upvalues[1]:
					[1]: var35_upvw (read and write)
				]]
				var35_upvw += 1
				error("hahah")
			end)
			expect(any_new_result1_12).to.be.ok()
			expect(var35_upvw).to.equal(1)
			expect(any_new_result1_12:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(any_new_result1_12._values[1]):find("hahah")).to.be.ok()
			expect(tostring(any_new_result1_12._values[1]):find("init.spec")).to.be.ok()
			expect(tostring(any_new_result1_12._values[1]):find("runExecutor")).to.be.ok()
		end)
		it("should work with C functions", function() -- Line 142
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 143
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new(tick):andThen(tick)
			end).to.never.throw()
		end)
		it("should have a nice tostring", function() -- Line 148
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(tostring(Parent_upvr.resolve()):gmatch("Promise(Resolved)")).to.be.ok()
		end)
		it("should allow yielding", function() -- Line 152
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_upvr = Instance.new("BindableEvent")
			local any_new_result1_5 = Parent_upvr.new(function(arg1) -- Line 154
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr (readonly)
				]]
				BindableEvent_upvr.Event:Wait()
				arg1(5)
			end)
			expect(any_new_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_upvr:Fire()
			expect(any_new_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_new_result1_5._values[1]).to.equal(5)
		end)
		it("should preserve stack traces of resolve-chained promises", function() -- Line 165
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local function _(arg1) -- Line 166, Named "nestedCall"
				error(arg1)
			end
			local any_new_result1_11 = Parent_upvr.new(function(arg1) -- Line 170
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				arg1(Parent_upvr.new(function() -- Line 171
					error("sample text")
				end))
			end)
			expect(any_new_result1_11:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local tostring_result1 = tostring(any_new_result1_11._values[1])
			expect(tostring_result1:find("sample text")).to.be.ok()
			expect(tostring_result1:find("nestedCall")).to.be.ok()
			expect(tostring_result1:find("runExecutor")).to.be.ok()
			expect(tostring_result1:find("runPlanNode")).to.be.ok()
			expect(tostring_result1:find("...Rejected because it was chained to the following Promise, which encountered an error:")).to.be.ok()
		end)
		it("should report errors from Promises with _error (< v2)", function() -- Line 188
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_reject_result1_2 = Parent_upvr.reject()
			any_reject_result1_2._error = "Sample error"
			local any_andThenReturn_result1 = Parent_upvr.resolve():andThenReturn(any_reject_result1_2)
			expect(any_andThenReturn_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local tostring_result1_2 = tostring(any_andThenReturn_result1._values[1])
			expect(tostring_result1_2:find("Sample error")).to.be.ok()
			expect(tostring_result1_2:find("...Rejected because it was chained to the following Promise, which encountered an error:")).to.be.ok()
			expect(tostring_result1_2:find("%[No stack trace available")).to.be.ok()
		end)
		it("should allow callable tables", function() -- Line 204
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_17 = {}
			local function __call(arg1, arg2) -- Line 206
				arg2(1)
			end
			tbl_17.__call = __call
			local var56_upvw = false
			Parent_upvr.new(setmetatable({}, tbl_17)):andThen(setmetatable({}, {
				__call = function(arg1, arg2) -- Line 213, Named "__call"
					--[[ Upvalues[1]:
						[1]: var56_upvw (read and write)
					]]
					expect(arg2).to.equal(1)
					var56_upvw = true
				end;
			}))
			expect(var56_upvw).to.equal(true)
		end)
		itSKIP("should close the thread after resolve", function() -- Line 222
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var59_upvw = 0
			Parent_upvr.new(function(arg1) -- Line 224
				--[[ Upvalues[2]:
					[1]: var59_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				var59_upvw += 1
				arg1()
				Parent_upvr.delay(1):await()
				var59_upvw += 1
			end)
			task.wait(1)
			expect(var59_upvw).to.equal(1)
		end)
	end)
	describe("Promise.defer", function() -- Line 237
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should execute after the time event", function() -- Line 238
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var63_upvw = 0
			local any_defer_result1 = Parent_upvr.defer(function(arg1, arg2, arg3, arg4) -- Line 240
				--[[ Upvalues[1]:
					[1]: var63_upvw (read and write)
				]]
				expect(type(arg1)).to.equal("function")
				expect(type(arg2)).to.equal("function")
				expect(type(arg3)).to.equal("function")
				expect(type(arg4)).to.equal("nil")
				var63_upvw += 1
				arg1("foo")
			end)
			expect(var63_upvw).to.equal(0)
			expect(any_defer_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw()
			expect(var63_upvw).to.equal(1)
			expect(any_defer_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			advanceTime_upvw()
			expect(var63_upvw).to.equal(1)
		end)
	end)
	describe("Promise.delay", function() -- Line 263
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should schedule promise resolution", function() -- Line 264
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local any_delay_result1 = Parent_upvr.delay(1)
			expect(any_delay_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw()
			expect(any_delay_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw(1)
			expect(any_delay_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should allow for delays to be cancelled", function() -- Line 276
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local any_delay_result1_upvr = Parent_upvr.delay(2)
			Parent_upvr.delay(1):andThen(function() -- Line 279
				--[[ Upvalues[1]:
					[1]: any_delay_result1_upvr (readonly)
				]]
				any_delay_result1_upvr:cancel()
			end)
			expect(any_delay_result1_upvr:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw()
			expect(any_delay_result1_upvr:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw(1)
			expect(any_delay_result1_upvr:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			advanceTime_upvw(1)
		end)
	end)
	describe("Promise.resolve", function() -- Line 292
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should immediately resolve with a value", function() -- Line 293
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_resolve_result1_2 = Parent_upvr.resolve(5, 6)
			expect(any_resolve_result1_2).to.be.ok()
			expect(any_resolve_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_resolve_result1_2._values[1]).to.equal(5)
			expect(any_resolve_result1_2._values[2]).to.equal(6)
		end)
		it("should chain onto passed promises", function() -- Line 302
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_resolve_result1 = Parent_upvr.resolve(Parent_upvr.new(function(arg1, arg2) -- Line 303
				arg2(7)
			end))
			expect(any_resolve_result1).to.be.ok()
			expect(any_resolve_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_resolve_result1._values[1]).to.equal(7)
		end)
	end)
	describe("Promise.reject", function() -- Line 313
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should immediately reject with a value", function() -- Line 314
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_reject_result1_5 = Parent_upvr.reject(6, 7)
			expect(any_reject_result1_5).to.be.ok()
			expect(any_reject_result1_5:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_reject_result1_5._values[1]).to.equal(6)
			expect(any_reject_result1_5._values[2]).to.equal(7)
		end)
		it("should pass a promise as-is as an error", function() -- Line 323
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_15 = Parent_upvr.new(function(arg1) -- Line 324
				arg1(6)
			end)
			local any_reject_result1_3 = Parent_upvr.reject(any_new_result1_15)
			expect(any_reject_result1_3).to.be.ok()
			expect(any_reject_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_reject_result1_3._values[1]).to.equal(any_new_result1_15)
		end)
	end)
	describe("Promise:andThen", function() -- Line 336
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: pack_upvr (readonly)
		]]
		it("should allow yielding", function() -- Line 337
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_upvr_4 = Instance.new("BindableEvent")
			local any_andThen_result1_4 = Parent_upvr.resolve():andThen(function() -- Line 339
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_4 (readonly)
				]]
				BindableEvent_upvr_4.Event:Wait()
				return 5
			end)
			expect(any_andThen_result1_4:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_upvr_4:Fire()
			expect(any_andThen_result1_4:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_andThen_result1_4._values[1]).to.equal(5)
		end)
		it("should run andThens on a new thread", function() -- Line 350
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var91_upvw
			local any_new_result1_29 = Parent_upvr.new(function(arg1) -- Line 354
				--[[ Upvalues[1]:
					[1]: var91_upvw (read and write)
				]]
				var91_upvw = arg1
			end)
			local BindableEvent_upvr_3 = Instance.new("BindableEvent")
			local any_andThen_result1 = any_new_result1_29:andThen(function() -- Line 363
				return "foo"
			end)
			expect(any_new_result1_29:getStatus()).to.equal(Parent_upvr.Status.Started)
			var91_upvw()
			expect(any_andThen_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_andThen_result1._values[1]).to.equal("foo")
			expect(any_new_result1_29:andThen(function() -- Line 358
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_3 (readonly)
				]]
				BindableEvent_upvr_3.Event:Wait()
				return 5
			end):getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
		it("should chain onto resolved promises", function() -- Line 374
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var99_upvw
			local var100_upvw
			local var101_upvw = 0
			local var102_upvw = 0
			local any_resolve_result1_3 = Parent_upvr.resolve(5)
			local any_andThen_result1_5 = any_resolve_result1_3:andThen(function(...) -- Line 382
				--[[ Upvalues[4]:
					[1]: var100_upvw (read and write)
					[2]: var99_upvw (read and write)
					[3]: pack_upvr (copied, readonly)
					[4]: var101_upvw (read and write)
				]]
				local pack_result1_4, pack_result2_3 = pack_upvr(...)
				var100_upvw = pack_result1_4
				var99_upvw = pack_result2_3
				var101_upvw += 1
			end, function() -- Line 385
				--[[ Upvalues[1]:
					[1]: var102_upvw (read and write)
				]]
				var102_upvw += 1
			end)
			expect(var102_upvw).to.equal(0)
			expect(var101_upvw).to.equal(1)
			expect(var100_upvw).to.equal(1)
			expect(var99_upvw[1]).to.equal(5)
			expect(any_resolve_result1_3).to.be.ok()
			expect(any_resolve_result1_3:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_resolve_result1_3._values[1]).to.equal(5)
			expect(any_andThen_result1_5).to.be.ok()
			expect(any_andThen_result1_5).never.to.equal(any_resolve_result1_3)
			expect(any_andThen_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_5._values).to.equal(0)
		end)
		it("should chain onto rejected promises", function() -- Line 405
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var110_upvw
			local var111_upvw
			local var112_upvw = 0
			local var113_upvw = 0
			local any_reject_result1 = Parent_upvr.reject(5)
			local any_andThen_result1_12 = any_reject_result1:andThen(function(...) -- Line 413
				--[[ Upvalues[1]:
					[1]: var113_upvw (read and write)
				]]
				var113_upvw += 1
			end, function(...) -- Line 415
				--[[ Upvalues[4]:
					[1]: var111_upvw (read and write)
					[2]: var110_upvw (read and write)
					[3]: pack_upvr (copied, readonly)
					[4]: var112_upvw (read and write)
				]]
				local pack_result1_3, pack_result2_5 = pack_upvr(...)
				var111_upvw = pack_result1_3
				var110_upvw = pack_result2_5
				var112_upvw += 1
			end)
			expect(var113_upvw).to.equal(0)
			expect(var112_upvw).to.equal(1)
			expect(var111_upvw).to.equal(1)
			expect(var110_upvw[1]).to.equal(5)
			expect(any_reject_result1).to.be.ok()
			expect(any_reject_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_reject_result1._values[1]).to.equal(5)
			expect(any_andThen_result1_12).to.be.ok()
			expect(any_andThen_result1_12).never.to.equal(any_reject_result1)
			expect(any_andThen_result1_12:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_12._values).to.equal(0)
		end)
		it("should reject on error in callback", function() -- Line 436
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var121_upvw = 0
			local any_andThen_result1_9 = Parent_upvr.resolve(1):andThen(function() -- Line 439
				--[[ Upvalues[1]:
					[1]: var121_upvw (read and write)
				]]
				var121_upvw += 1
				error("hahah")
			end)
			expect(any_andThen_result1_9).to.be.ok()
			expect(var121_upvw).to.equal(1)
			expect(any_andThen_result1_9:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(any_andThen_result1_9._values[1]):find("hahah")).to.be.ok()
			expect(tostring(any_andThen_result1_9._values[1]):find("init.spec")).to.be.ok()
			expect(tostring(any_andThen_result1_9._values[1]):find("runExecutor")).to.be.ok()
		end)
		it("should chain onto asynchronously resolved promises", function() -- Line 454
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var125_upvw
			local var126_upvw
			local var127_upvw = 0
			local var128_upvw = 0
			local var129_upvw
			local any_new_result1_33 = Parent_upvr.new(function(arg1) -- Line 461
				--[[ Upvalues[1]:
					[1]: var129_upvw (read and write)
				]]
				var129_upvw = arg1
			end)
			local any_andThen_result1_7 = any_new_result1_33:andThen(function(...) -- Line 465
				--[[ Upvalues[3]:
					[1]: var125_upvw (read and write)
					[2]: var126_upvw (read and write)
					[3]: var127_upvw (read and write)
				]]
				var125_upvw = {...}
				var126_upvw = select('#', ...)
				var127_upvw += 1
			end, function() -- Line 469
				--[[ Upvalues[1]:
					[1]: var128_upvw (read and write)
				]]
				var128_upvw += 1
			end)
			expect(var127_upvw).to.equal(0)
			expect(var128_upvw).to.equal(0)
			var129_upvw(6)
			expect(var128_upvw).to.equal(0)
			expect(var127_upvw).to.equal(1)
			expect(var126_upvw).to.equal(1)
			expect(var125_upvw[1]).to.equal(6)
			expect(any_new_result1_33).to.be.ok()
			expect(any_new_result1_33:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_new_result1_33._values[1]).to.equal(6)
			expect(any_andThen_result1_7).to.be.ok()
			expect(any_andThen_result1_7).never.to.equal(any_new_result1_33)
			expect(any_andThen_result1_7:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_7._values).to.equal(0)
		end)
		it("should chain onto asynchronously rejected promises", function() -- Line 494
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var137_upvw
			local var138_upvw
			local var139_upvw = 0
			local var140_upvw = 0
			local var141_upvw
			local any_new_result1_13 = Parent_upvr.new(function(arg1, arg2) -- Line 501
				--[[ Upvalues[1]:
					[1]: var141_upvw (read and write)
				]]
				var141_upvw = arg2
			end)
			local any_andThen_result1_2 = any_new_result1_13:andThen(function() -- Line 505
				--[[ Upvalues[1]:
					[1]: var140_upvw (read and write)
				]]
				var140_upvw += 1
			end, function(...) -- Line 507
				--[[ Upvalues[3]:
					[1]: var137_upvw (read and write)
					[2]: var138_upvw (read and write)
					[3]: var139_upvw (read and write)
				]]
				var137_upvw = {...}
				var138_upvw = select('#', ...)
				var139_upvw += 1
			end)
			expect(var139_upvw).to.equal(0)
			expect(var140_upvw).to.equal(0)
			var141_upvw(6)
			expect(var140_upvw).to.equal(0)
			expect(var139_upvw).to.equal(1)
			expect(var138_upvw).to.equal(1)
			expect(var137_upvw[1]).to.equal(6)
			expect(any_new_result1_13).to.be.ok()
			expect(any_new_result1_13:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_new_result1_13._values[1]).to.equal(6)
			expect(any_andThen_result1_2).to.be.ok()
			expect(any_andThen_result1_2).never.to.equal(any_new_result1_13)
			expect(any_andThen_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_andThen_result1_2._values).to.equal(0)
		end)
		it("should propagate errors through multiple levels", function() -- Line 534
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var149_upvw
			local var150_upvw
			local var151_upvw
			Parent_upvr.new(function(arg1, arg2) -- Line 536
				arg2(1, 2, 3)
			end):andThen(function() -- Line 538
			end):catch(function(arg1, arg2, arg3) -- Line 538
				--[[ Upvalues[3]:
					[1]: var149_upvw (read and write)
					[2]: var150_upvw (read and write)
					[3]: var151_upvw (read and write)
				]]
				var149_upvw = arg1
				var150_upvw = arg2
				var151_upvw = arg3
			end)
			expect(var149_upvw).to.equal(1)
			expect(var150_upvw).to.equal(2)
			expect(var151_upvw).to.equal(3)
		end)
		it("should not call queued callbacks from a cancelled sub-promise", function() -- Line 547
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var156_upvw
			local var157_upvw = 0
			local any_new_result1_26 = Parent_upvr.new(function(arg1) -- Line 551
				--[[ Upvalues[1]:
					[1]: var156_upvw (read and write)
				]]
				var156_upvw = arg1
			end)
			any_new_result1_26:andThen(function() -- Line 555
				--[[ Upvalues[1]:
					[1]: var157_upvw (read and write)
				]]
				var157_upvw += 1
			end)
			any_new_result1_26:andThen(function() -- Line 560
				--[[ Upvalues[1]:
					[1]: var157_upvw (read and write)
				]]
				var157_upvw += 1
			end):cancel()
			var156_upvw("foo")
			expect(var157_upvw).to.equal(1)
		end)
	end)
	describe("Promise:cancel", function() -- Line 571
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should mark promises as cancelled and not resolve or reject them", function() -- Line 572
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var164_upvw = 0
			local var165_upvw = 0
			local any_finally_result1_3 = Parent_upvr.new(function() -- Line 575
			end):andThen(function() -- Line 576
				--[[ Upvalues[1]:
					[1]: var164_upvw (read and write)
				]]
				var164_upvw += 1
			end):finally(function() -- Line 579
				--[[ Upvalues[1]:
					[1]: var165_upvw (read and write)
				]]
				var165_upvw += 1
			end)
			any_finally_result1_3:cancel()
			any_finally_result1_3:cancel()
			expect(var164_upvw).to.equal(0)
			expect(var165_upvw).to.equal(1)
			expect(any_finally_result1_3:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should call the cancellation hook once", function() -- Line 591
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var171_upvw = 0
			local any_new_result1_28 = Parent_upvr.new(function(arg1, arg2, arg3) -- Line 594
				--[[ Upvalues[1]:
					[1]: var171_upvw (read and write)
				]]
				arg3(function() -- Line 595
					--[[ Upvalues[1]:
						[1]: var171_upvw (copied, read and write)
					]]
					var171_upvw += 1
				end)
			end)
			any_new_result1_28:cancel()
			any_new_result1_28:cancel()
			expect(var171_upvw).to.equal(1)
		end)
		it("should propagate cancellations", function() -- Line 606
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_20 = Parent_upvr.new(function() -- Line 607
			end)
			local any_andThen_result1_11 = any_new_result1_20:andThen()
			local any_andThen_result1_6 = any_new_result1_20:andThen()
			expect(any_new_result1_20:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_andThen_result1_11:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_andThen_result1_6:getStatus()).to.equal(Parent_upvr.Status.Started)
			any_andThen_result1_11:cancel()
			expect(any_new_result1_20:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_andThen_result1_11:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_andThen_result1_6:getStatus()).to.equal(Parent_upvr.Status.Started)
			any_andThen_result1_6:cancel()
			expect(any_new_result1_20:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_andThen_result1_11:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_andThen_result1_6:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should affect downstream promises", function() -- Line 629
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_16 = Parent_upvr.new(function() -- Line 630
			end)
			any_new_result1_16:cancel()
			expect(any_new_result1_16:andThen():getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should track consumers", function() -- Line 638
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_resolve_result1_4 = Parent_upvr.resolve()
			local any_new_result1_2_upvr = Parent_upvr.new(function() -- Line 639
			end)
			local any_andThen_result1_8_upvr = any_resolve_result1_4:andThen(function() -- Line 641
				--[[ Upvalues[1]:
					[1]: any_new_result1_2_upvr (readonly)
				]]
				return any_new_result1_2_upvr
			end)
			local any_new_result1_10 = Parent_upvr.new(function(arg1) -- Line 644
				--[[ Upvalues[1]:
					[1]: any_andThen_result1_8_upvr (readonly)
				]]
				arg1(any_andThen_result1_8_upvr)
			end)
			local any_andThen_result1_10 = any_new_result1_10:andThen(function() -- Line 647
			end)
			expect(any_andThen_result1_8_upvr._parent).to.never.equal(any_resolve_result1_4)
			expect(any_new_result1_10._parent).to.never.equal(any_andThen_result1_8_upvr)
			expect(any_new_result1_10._consumers[any_andThen_result1_10]).to.be.ok()
			expect(any_andThen_result1_10._parent).to.equal(any_new_result1_10)
		end)
		it("should cancel resolved pending promises", function() -- Line 655
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_23_upvr = Parent_upvr.new(function() -- Line 656
			end)
			local any_finally_result1_4 = Parent_upvr.new(function(arg1) -- Line 658
				--[[ Upvalues[1]:
					[1]: any_new_result1_23_upvr (readonly)
				]]
				arg1(any_new_result1_23_upvr)
			end):finally(function() -- Line 660
			end)
			any_finally_result1_4:cancel()
			expect(any_new_result1_23_upvr._status).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_finally_result1_4._status).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should close the promise thread", function() -- Line 668
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var200_upvw = 0
			Parent_upvr.new(function() -- Line 670
				--[[ Upvalues[2]:
					[1]: var200_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				var200_upvw += 1
				Parent_upvr.delay(1):await()
				var200_upvw += 1
			end):cancel()
			advanceTime_upvw(2)
			expect(var200_upvw).to.equal(1)
		end)
	end)
	describe("Promise:finally", function() -- Line 683
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be called upon resolve, reject, or cancel", function() -- Line 684
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var204_upvw = 0
			local function finally() -- Line 687
				--[[ Upvalues[1]:
					[1]: var204_upvw (read and write)
				]]
				var204_upvw += 1
			end
			Parent_upvr.new(function(arg1, arg2) -- Line 692
				arg1()
			end):finally(finally)
			Parent_upvr.resolve():andThen(function() -- Line 697
			end):finally(finally):finally(finally)
			Parent_upvr.reject():finally(finally)
			Parent_upvr.new(function() -- Line 702
			end):finally(finally):cancel()
			expect(var204_upvw).to.equal(5)
		end)
		it("should not forward return values", function() -- Line 708
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var209_upvw
			Parent_upvr.resolve(2):finally(function() -- Line 712
				return 1
			end):andThen(function(arg1) -- Line 715
				--[[ Upvalues[1]:
					[1]: var209_upvw (read and write)
				]]
				var209_upvw = arg1
			end)
			expect(var209_upvw).to.equal(2)
		end)
		it("should not consume rejections", function() -- Line 722
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var213_upvw = false
			local var214_upvw = false
			Parent_upvr.reject(5):finally(function() -- Line 726
				return 42
			end):andThen(function() -- Line 729
				--[[ Upvalues[1]:
					[1]: var214_upvw (read and write)
				]]
				var214_upvw = true
			end):catch(function(arg1) -- Line 732
				--[[ Upvalues[1]:
					[1]: var213_upvw (read and write)
				]]
				var213_upvw = true
				expect(arg1).to.equal(5)
			end)
			expect(var213_upvw).to.equal(true)
			expect(var214_upvw).to.equal(false)
		end)
		it("should wait for returned promises", function() -- Line 741
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var219_upvw
			local any_finally_result1_2 = Parent_upvr.reject("foo"):finally(function() -- Line 743
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var219_upvw (read and write)
				]]
				return Parent_upvr.new(function(arg1) -- Line 744
					--[[ Upvalues[1]:
						[1]: var219_upvw (copied, read and write)
					]]
					var219_upvw = arg1
				end)
			end)
			expect(any_finally_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			var219_upvw()
			expect(any_finally_result1_2:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local _, any__unwrap_result2_2 = any_finally_result1_2:_unwrap()
			expect(any__unwrap_result2_2).to.equal("foo")
		end)
		it("should reject with a returned rejected promise's value", function() -- Line 758
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var226_upvw
			local any_finally_result1 = Parent_upvr.reject("foo"):finally(function() -- Line 760
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var226_upvw (read and write)
				]]
				return Parent_upvr.new(function(arg1, arg2) -- Line 761
					--[[ Upvalues[1]:
						[1]: var226_upvw (copied, read and write)
					]]
					var226_upvw = arg2
				end)
			end)
			expect(any_finally_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			var226_upvw("bar")
			expect(any_finally_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local _, any__unwrap_result2_5 = any_finally_result1:_unwrap()
			expect(any__unwrap_result2_5).to.equal("bar")
		end)
		it("should reject when handler errors", function() -- Line 775
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_6_upvr = {}
			local any__unwrap_result1_3, any__unwrap_result2_8 = Parent_upvr.reject("bar"):finally(function() -- Line 777
				--[[ Upvalues[1]:
					[1]: tbl_6_upvr (readonly)
				]]
				error(tbl_6_upvr)
			end):_unwrap()
			expect(any__unwrap_result1_3).to.equal(false)
			expect(any__unwrap_result2_8).to.equal(tbl_6_upvr)
		end)
		it("should not prevent cancellation", function() -- Line 787
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_9 = Parent_upvr.new(function() -- Line 788
			end)
			local var240_upvw = false
			any_new_result1_9:finally(function() -- Line 791
				--[[ Upvalues[1]:
					[1]: var240_upvw (read and write)
				]]
				var240_upvw = true
			end)
			any_new_result1_9:andThen(function() -- Line 795
			end):cancel()
			expect(any_new_result1_9:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(var240_upvw).to.equal(true)
		end)
		it("should propagate cancellation downwards", function() -- Line 803
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var244_upvw = false
			local any_new_result1_31 = Parent_upvr.new(function() -- Line 806
			end)
			any_new_result1_31:cancel()
			expect(any_new_result1_31:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_new_result1_31:finally(function() -- Line 808
				--[[ Upvalues[1]:
					[1]: var244_upvw (read and write)
				]]
				var244_upvw = true
			end):getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(var244_upvw).to.equal(true)
			expect(false).to.equal(false)
		end)
		it("should propagate cancellation upwards", function() -- Line 821
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var249_upvw = false
			local any_new_result1_4 = Parent_upvr.new(function() -- Line 824
			end)
			local any_finally_result1_5 = any_new_result1_4:finally(function() -- Line 826
				--[[ Upvalues[1]:
					[1]: var249_upvw (read and write)
				]]
				var249_upvw = true
			end)
			any_finally_result1_5:cancel()
			expect(any_new_result1_4:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_finally_result1_5:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(var249_upvw).to.equal(true)
			expect(false).to.equal(false)
		end)
		it("should cancel returned promise if cancelled", function() -- Line 839
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_7_upvr = Parent_upvr.new(function() -- Line 840
			end)
			Parent_upvr.resolve():finally(function() -- Line 842
				--[[ Upvalues[1]:
					[1]: any_new_result1_7_upvr (readonly)
				]]
				return any_new_result1_7_upvr
			end):cancel()
			expect(any_new_result1_7_upvr:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
	end)
	describe("Promise.all", function() -- Line 852
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: pack_upvr (readonly)
		]]
		it("should error if given something other than a table", function() -- Line 853
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 854
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.all(1)
			end).to.throw()
		end)
		it("should resolve instantly with an empty table if given no promises", function() -- Line 859
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_all_result1 = Parent_upvr.all({})
			local any__unwrap_result1_4, any__unwrap_result2_6 = any_all_result1:_unwrap()
			expect(any__unwrap_result1_4).to.equal(true)
			expect(any_all_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any__unwrap_result2_6).to.be.a("table")
			expect(next(any__unwrap_result2_6)).to.equal(nil)
		end)
		it("should error if given non-promise values", function() -- Line 869
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 870
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.all({{}, {}, {}})
			end).to.throw()
		end)
		it("should wait for all promises to be resolved and return their values", function() -- Line 875
			--[[ Upvalues[2]:
				[1]: pack_upvr (copied, readonly)
				[2]: Parent_upvr (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local tbl_3_upvr = {}
			local pack_result1_6, pack_result2_2_upvr = pack_upvr(1, "A string", nil, false)
			local tbl_12 = {}
			for i_upvr = 1, pack_result1_6 do
				tbl_12[i_upvr] = Parent_upvr.new(function(arg1) -- Line 883
					--[[ Upvalues[3]:
						[1]: tbl_3_upvr (readonly)
						[2]: i_upvr (readonly)
						[3]: pack_result2_2_upvr (readonly)
					]]
					local tbl = {}
					tbl[1] = arg1
					tbl[2] = pack_result2_2_upvr[i_upvr]
					tbl_3_upvr[i_upvr] = tbl
				end)
			end
			for _, v in ipairs(tbl_3_upvr) do
				expect(Parent_upvr.all(tbl_12):getStatus()).to.equal(Parent_upvr.Status.Started)
				v[1](v[2])
				local var295
			end
			local pack_result1_2, pack_result2_4 = pack_upvr(var295:_unwrap())
			local unpack_result1_3, unpack_result2_2 = unpack(pack_result2_4, 1, pack_result1_2)
			expect(pack_result1_2).to.equal(2)
			expect(unpack_result1_3).to.equal(true)
			expect(unpack_result2_2).to.be.a("table")
			expect(#unpack_result2_2).to.equal(#tbl_12)
			for i_3 = 1, pack_result1_6 do
				expect(unpack_result2_2[i_3]).to.equal(pack_result2_2_upvr[i_3])
				local _
			end
		end)
		it("should reject if any individual promise rejected", function() -- Line 908
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var302_upvw
			local var303_upvw
			local any_new_result1_21 = Parent_upvr.new(function(arg1) -- Line 916
				--[[ Upvalues[1]:
					[1]: var303_upvw (read and write)
				]]
				var303_upvw = arg1
			end)
			local any_all_result1_4 = Parent_upvr.all({Parent_upvr.new(function(arg1, arg2) -- Line 912
				--[[ Upvalues[1]:
					[1]: var302_upvw (read and write)
				]]
				var302_upvw = arg2
			end), any_new_result1_21})
			expect(any_all_result1_4:getStatus()).to.equal(Parent_upvr.Status.Started)
			var302_upvw("baz", "qux")
			var303_upvw("foo", "bar")
			local pack_result1_5, pack_result2_7 = pack_upvr(any_all_result1_4:_unwrap())
			local unpack_result1, unpack_result2_4, unpack_result3_2 = unpack(pack_result2_7, 1, pack_result1_5)
			expect(pack_result1_5).to.equal(3)
			expect(unpack_result1).to.equal(false)
			expect(unpack_result2_4).to.equal("baz")
			expect(unpack_result3_2).to.equal("qux")
			expect(any_new_result1_21:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should not resolve if resolved after rejecting", function() -- Line 937
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var315_upvw
			local var316_upvw
			local any_all_result1_2 = Parent_upvr.all({Parent_upvr.new(function(arg1, arg2) -- Line 941
				--[[ Upvalues[1]:
					[1]: var315_upvw (read and write)
				]]
				var315_upvw = arg2
			end), Parent_upvr.new(function(arg1) -- Line 945
				--[[ Upvalues[1]:
					[1]: var316_upvw (read and write)
				]]
				var316_upvw = arg1
			end)})
			expect(any_all_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			var315_upvw("baz", "qux")
			var316_upvw("foo", "bar")
			local pack_result1_7, pack_result2 = pack_upvr(any_all_result1_2:_unwrap())
			local unpack_result1_2, unpack_result2_3, unpack_result3 = unpack(pack_result2, 1, pack_result1_7)
			expect(pack_result1_7).to.equal(3)
			expect(unpack_result1_2).to.equal(false)
			expect(unpack_result2_3).to.equal("baz")
			expect(unpack_result3).to.equal("qux")
		end)
		it("should only reject once", function() -- Line 965
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: pack_upvr (copied, readonly)
			]]
			local var327_upvw
			local var328_upvw
			local any_all_result1_3 = Parent_upvr.all({Parent_upvr.new(function(arg1, arg2) -- Line 969
				--[[ Upvalues[1]:
					[1]: var327_upvw (read and write)
				]]
				var327_upvw = arg2
			end), Parent_upvr.new(function(arg1, arg2) -- Line 973
				--[[ Upvalues[1]:
					[1]: var328_upvw (read and write)
				]]
				var328_upvw = arg2
			end)})
			expect(any_all_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			var327_upvw("foo", "bar")
			expect(any_all_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			var328_upvw("baz", "qux")
			local pack_result1, pack_result2_6 = pack_upvr(any_all_result1_3:_unwrap())
			local unpack_result1_4, unpack_result2, unpack_result3_3 = unpack(pack_result2_6, 1, pack_result1)
			expect(pack_result1).to.equal(3)
			expect(unpack_result1_4).to.equal(false)
			expect(unpack_result2).to.equal("foo")
			expect(unpack_result3_3).to.equal("bar")
		end)
		it("should error if a non-array table is passed in", function() -- Line 996
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local pcall_result1, pcall_result2_3 = pcall(function() -- Line 997
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.all(Parent_upvr.new(function() -- Line 998
				end))
			end)
			expect(pcall_result1).to.be.ok()
			expect(pcall_result2_3:find("Non%-promise")).to.be.ok()
		end)
		it("should cancel pending promises if one rejects", function() -- Line 1005
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_14 = Parent_upvr.new(function() -- Line 1006
			end)
			expect(Parent_upvr.all({Parent_upvr.resolve(), Parent_upvr.reject(), any_new_result1_14}):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_new_result1_14:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1015
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_18 = Parent_upvr.new(function() -- Line 1016
			end)
			any_new_result1_18:andThen(function() -- Line 1017
			end)
			local tbl_18 = {Parent_upvr.new(function() -- Line 1020
			end), Parent_upvr.new(function() -- Line 1021
			end), any_new_result1_18}
			Parent_upvr.all(tbl_18):cancel()
			expect(tbl_18[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_18[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_18[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
	end)
	describe("Promise.fold", function() -- Line 1033
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should return the initial value in a promise when the list is empty", function() -- Line 1034
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_2 = {}
			local any_fold_result1 = Parent_upvr.fold({}, function() -- Line 1036
				error("should not be called")
			end, tbl_2)
			expect(Parent_upvr.is(any_fold_result1)).to.equal(true)
			expect(any_fold_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fold_result1:expect()).to.equal(tbl_2)
		end)
		it("should accept promises in the list", function() -- Line 1045
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var360_upvw
			local any_fold_result1_5 = Parent_upvr.fold({Parent_upvr.new(function(arg1) -- Line 1048
				--[[ Upvalues[1]:
					[1]: var360_upvw (read and write)
				]]
				var360_upvw = arg1
			end), 2, 3}, function(arg1, arg2) -- Line 1050
				return arg1 + arg2
			end, 0)
			var360_upvw(1)
			expect(Parent_upvr.is(any_fold_result1_5)).to.equal(true)
			expect(any_fold_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fold_result1_5:expect()).to.equal(6)
		end)
		it("should always return a promise even if the list or reducer don't use them", function() -- Line 1061
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local any_fold_result1_3 = Parent_upvr.fold({1, 2, 3}, function(arg1, arg2, arg3) -- Line 1062
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				if arg3 == 2 then
					return Parent_upvr.delay(1):andThenReturn(arg1 + arg2)
				end
				return arg1 + arg2
			end, 0)
			expect(Parent_upvr.is(any_fold_result1_3)).to.equal(true)
			expect(any_fold_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			advanceTime_upvw(2)
			expect(any_fold_result1_3:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fold_result1_3:expect()).to.equal(6)
		end)
		it("should return the first rejected promise", function() -- Line 1076
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_fold_result1_4 = Parent_upvr.fold({1, 2, 3}, function(arg1, arg2, arg3) -- Line 1078
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				if arg3 == 2 then
					return Parent_upvr.reject("foo")
				end
				return arg1 + arg2
			end, 0)
			expect(Parent_upvr.is(any_fold_result1_4)).to.equal(true)
			local any_awaitStatus_result1, any_awaitStatus_result2 = any_fold_result1_4:awaitStatus()
			expect(any_awaitStatus_result1).to.equal(Parent_upvr.Status.Rejected)
			expect(any_awaitStatus_result2).to.equal("foo")
		end)
		it("should return the first canceled promise", function() -- Line 1091
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var376_upvw
			local any_fold_result1_2 = Parent_upvr.fold({1, 2, 3}, function(arg1, arg2, arg3) -- Line 1093
				--[[ Upvalues[2]:
					[1]: var376_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				if arg3 == 1 then
					return arg1 + arg2
				end
				if arg3 == 2 then
					var376_upvw = Parent_upvr.delay(1):andThenReturn(arg1 + arg2)
					return var376_upvw
				end
				error("this should not run if the promise is cancelled")
			end, 0)
			expect(Parent_upvr.is(any_fold_result1_2)).to.equal(true)
			expect(any_fold_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			var376_upvw:cancel()
			expect(any_fold_result1_2:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
	end)
	describe("Promise.race", function() -- Line 1110
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve with the first settled value", function() -- Line 1111
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.race({Parent_upvr.resolve(1), Parent_upvr.resolve(2)}):andThen(function(arg1) -- Line 1115
				expect(arg1).to.equal(1)
			end):getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should cancel other promises", function() -- Line 1122
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_32 = Parent_upvr.new(function() -- Line 1123
			end)
			any_new_result1_32:andThen(function() -- Line 1124
			end)
			local tbl_15 = {any_new_result1_32, Parent_upvr.new(function() -- Line 1127
			end), Parent_upvr.new(function(arg1) -- Line 1128
				arg1(2)
			end)}
			local any_race_result1 = Parent_upvr.race(tbl_15)
			expect(any_race_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_race_result1._values[1]).to.equal(2)
			expect(tbl_15[1]:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(tbl_15[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_15[3]:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			local any_new_result1_19 = Parent_upvr.new(function() -- Line 1141
			end)
			expect(Parent_upvr.race({Parent_upvr.reject(), Parent_upvr.resolve(), any_new_result1_19}):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_new_result1_19:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should error if a non-array table is passed in", function() -- Line 1150
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local pcall_result1_3, pcall_result2 = pcall(function() -- Line 1151
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.race(Parent_upvr.new(function() -- Line 1152
				end))
			end)
			expect(pcall_result1_3).to.be.ok()
			expect(pcall_result2:find("Non%-promise")).to.be.ok()
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1159
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_3 = Parent_upvr.new(function() -- Line 1160
			end)
			any_new_result1_3:andThen(function() -- Line 1161
			end)
			local tbl_16 = {Parent_upvr.new(function() -- Line 1164
			end), Parent_upvr.new(function() -- Line 1165
			end), any_new_result1_3}
			Parent_upvr.race(tbl_16):cancel()
			expect(tbl_16[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_16[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_16[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
	end)
	describe("Promise.promisify", function() -- Line 1177
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should wrap functions", function() -- Line 1178
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var409 = Parent_upvr.promisify(function(arg1) -- Line 1179, Named "test"
				return arg1 + 1
			end)(1)
			local any__unwrap_result1, any__unwrap_result2_3 = var409:_unwrap()
			expect(any__unwrap_result1).to.equal(true)
			expect(var409:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any__unwrap_result2_3).to.equal(2)
		end)
		it("should catch errors after a yield", function() -- Line 1192
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_2_upvr = Instance.new("BindableEvent")
			local var415 = Parent_upvr.promisify(function() -- Line 1194
				--[[ Upvalues[1]:
					[1]: BindableEvent_2_upvr (readonly)
				]]
				BindableEvent_2_upvr.Event:Wait()
				error("errortext")
			end)()
			expect(var415:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_2_upvr:Fire()
			expect(var415:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(var415._values[1]):find("errortext")).to.be.ok()
		end)
	end)
	describe("Promise.tap", function() -- Line 1208
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should thread through values", function() -- Line 1209
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var418_upvw
			local var419_upvw
			Parent_upvr.resolve(1):andThen(function(arg1) -- Line 1213
				return arg1 + 1
			end):tap(function(arg1) -- Line 1216
				--[[ Upvalues[1]:
					[1]: var418_upvw (read and write)
				]]
				var418_upvw = arg1
				return arg1 + 1
			end):andThen(function(arg1) -- Line 1220
				--[[ Upvalues[1]:
					[1]: var419_upvw (read and write)
				]]
				var419_upvw = arg1
			end)
			expect(var418_upvw).to.equal(2)
			expect(var419_upvw).to.equal(2)
		end)
		it("should chain onto promises", function() -- Line 1228
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var424_upvw
			local var425_upvw
			local any_andThen_result1_3 = Parent_upvr.resolve(1):tap(function() -- Line 1232
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var424_upvw (read and write)
				]]
				return Parent_upvr.new(function(arg1) -- Line 1233
					--[[ Upvalues[1]:
						[1]: var424_upvw (copied, read and write)
					]]
					var424_upvw = arg1
				end)
			end):andThen(function(arg1) -- Line 1237
				--[[ Upvalues[1]:
					[1]: var425_upvw (read and write)
				]]
				var425_upvw = arg1
			end)
			expect(any_andThen_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(var425_upvw).to.never.be.ok()
			var424_upvw(1)
			expect(any_andThen_result1_3:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(var425_upvw).to.equal(1)
		end)
	end)
	describe("Promise.try", function() -- Line 1251
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should catch synchronous errors", function() -- Line 1252
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var432_upvw
			Parent_upvr.try(function() -- Line 1254
				error("errortext")
			end):catch(function(arg1) -- Line 1256
				--[[ Upvalues[1]:
					[1]: var432_upvw (read and write)
				]]
				var432_upvw = tostring(arg1)
			end)
			expect(var432_upvw:find("errortext")).to.be.ok()
		end)
		it("should reject with error objects", function() -- Line 1263
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_14_upvr = {}
			local any__unwrap_result1_8, any__unwrap_result2_10 = Parent_upvr.try(function() -- Line 1265
				--[[ Upvalues[1]:
					[1]: tbl_14_upvr (readonly)
				]]
				error(tbl_14_upvr)
			end):_unwrap()
			expect(any__unwrap_result1_8).to.equal(false)
			expect(any__unwrap_result2_10).to.equal(tbl_14_upvr)
		end)
		it("should catch asynchronous errors", function() -- Line 1273
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_upvr_2 = Instance.new("BindableEvent")
			local any_try_result1 = Parent_upvr.try(function() -- Line 1275
				--[[ Upvalues[1]:
					[1]: BindableEvent_upvr_2 (readonly)
				]]
				BindableEvent_upvr_2.Event:Wait()
				error("errortext")
			end)
			expect(any_try_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_upvr_2:Fire()
			expect(any_try_result1:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(tostring(any_try_result1._values[1]):find("errortext")).to.be.ok()
		end)
	end)
	describe("Promise:andThenReturn", function() -- Line 1287
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the given values", function() -- Line 1288
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var446_upvw
			local var447_upvw
			Parent_upvr.resolve():andThenReturn(1, 2):andThen(function(arg1, arg2) -- Line 1291
				--[[ Upvalues[2]:
					[1]: var446_upvw (read and write)
					[2]: var447_upvw (read and write)
				]]
				var446_upvw = arg1
				var447_upvw = arg2
			end)
			expect(var446_upvw).to.equal(1)
			expect(var447_upvw).to.equal(2)
		end)
	end)
	describe("Promise:andThenCall", function() -- Line 1301
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should call the given function with arguments", function() -- Line 1302
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var451_upvw
			local var452_upvw
			Parent_upvr.resolve():andThenCall(function(arg1, arg2) -- Line 1304
				--[[ Upvalues[2]:
					[1]: var451_upvw (read and write)
					[2]: var452_upvw (read and write)
				]]
				var451_upvw = arg1
				var452_upvw = arg2
			end, 3, 4)
			expect(var451_upvw).to.equal(3)
			expect(var452_upvw).to.equal(4)
		end)
	end)
	describe("Promise.some", function() -- Line 1314
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve once the goal is reached", function() -- Line 1315
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_some_result1_2 = Parent_upvr.some({Parent_upvr.resolve(1), Parent_upvr.reject(), Parent_upvr.resolve(2)}, 2)
			expect(any_some_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_some_result1_2._values[1][1]).to.equal(1)
			expect(any_some_result1_2._values[1][2]).to.equal(2)
		end)
		it("should error if the goal can't be reached", function() -- Line 1326
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.some({Parent_upvr.resolve(), Parent_upvr.reject()}, 2):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			local var460_upvw
			local any_some_result1_3 = Parent_upvr.some({Parent_upvr.resolve(), Parent_upvr.new(function(arg1, arg2) -- Line 1335
				--[[ Upvalues[1]:
					[1]: var460_upvw (read and write)
				]]
				var460_upvw = arg2
			end)}, 2)
			expect(any_some_result1_3:getStatus()).to.equal(Parent_upvr.Status.Started)
			var460_upvw("foo")
			expect(any_some_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_some_result1_3._values[1]).to.equal("foo")
		end)
		it("should cancel pending Promises once the goal is reached", function() -- Line 1346
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var465_upvw
			local any_new_result1_24 = Parent_upvr.new(function() -- Line 1348
			end)
			local any_new_result1_34 = Parent_upvr.new(function(arg1) -- Line 1349
				--[[ Upvalues[1]:
					[1]: var465_upvw (read and write)
				]]
				var465_upvw = arg1
			end)
			local any_some_result1_5 = Parent_upvr.some({any_new_result1_24, any_new_result1_34, Parent_upvr.resolve()}, 2)
			expect(any_some_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_new_result1_24:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(any_new_result1_34:getStatus()).to.equal(Parent_upvr.Status.Started)
			var465_upvw()
			expect(any_some_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_new_result1_24:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(any_new_result1_34:getStatus()).to.equal(Parent_upvr.Status.Resolved)
		end)
		it("should error if passed a non-number", function() -- Line 1370
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 1371
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.some({}, "non-number")
			end).to.throw()
		end)
		it("should return an empty array if amount is 0", function() -- Line 1376
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_some_result1 = Parent_upvr.some({Parent_upvr.resolve(2)}, 0)
			expect(any_some_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_some_result1._values[1]).to.equal(0)
		end)
		it("should not return extra values", function() -- Line 1385
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_some_result1_4 = Parent_upvr.some({Parent_upvr.resolve(1), Parent_upvr.resolve(2), Parent_upvr.resolve(3), Parent_upvr.resolve(4)}, 2)
			expect(any_some_result1_4:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(#any_some_result1_4._values[1]).to.equal(2)
			expect(any_some_result1_4._values[1][1]).to.equal(1)
			expect(any_some_result1_4._values[1][2]).to.equal(2)
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1399
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_25 = Parent_upvr.new(function() -- Line 1400
			end)
			any_new_result1_25:andThen(function() -- Line 1401
			end)
			local tbl_4 = {Parent_upvr.new(function() -- Line 1404
			end), Parent_upvr.new(function() -- Line 1405
			end), any_new_result1_25}
			Parent_upvr.some(tbl_4, 3):cancel()
			expect(tbl_4[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_4[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_4[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
		describe("Promise.any", function() -- Line 1416
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			it("should return the value directly", function() -- Line 1417
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				local any_any_result1 = Parent_upvr.any({Parent_upvr.reject(), Parent_upvr.reject(), Parent_upvr.resolve(1)})
				expect(any_any_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
				expect(any_any_result1._values[1]).to.equal(1)
			end)
			it("should error if all are rejected", function() -- Line 1428
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				expect(Parent_upvr.any({Parent_upvr.reject(), Parent_upvr.reject(), Parent_upvr.reject()}):getStatus()).to.equal(Parent_upvr.Status.Rejected)
			end)
		end)
	end)
	describe("Promise.allSettled", function() -- Line 1438
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve with an array of PromiseStatuses", function() -- Line 1439
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var495_upvw
			local any_allSettled_result1 = Parent_upvr.allSettled({Parent_upvr.resolve(), Parent_upvr.reject(), Parent_upvr.resolve(), Parent_upvr.new(function(arg1, arg2) -- Line 1445
				--[[ Upvalues[1]:
					[1]: var495_upvw (read and write)
				]]
				var495_upvw = arg2
			end)})
			expect(any_allSettled_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			var495_upvw()
			expect(any_allSettled_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_allSettled_result1._values[1][1]).to.equal(Parent_upvr.Status.Resolved)
			expect(any_allSettled_result1._values[1][2]).to.equal(Parent_upvr.Status.Rejected)
			expect(any_allSettled_result1._values[1][3]).to.equal(Parent_upvr.Status.Resolved)
			expect(any_allSettled_result1._values[1][4]).to.equal(Parent_upvr.Status.Rejected)
		end)
		it("should cancel promises if it is cancelled", function() -- Line 1459
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_22 = Parent_upvr.new(function() -- Line 1460
			end)
			any_new_result1_22:andThen(function() -- Line 1461
			end)
			local tbl_10 = {Parent_upvr.new(function() -- Line 1464
			end), Parent_upvr.new(function() -- Line 1465
			end), any_new_result1_22}
			Parent_upvr.allSettled(tbl_10):cancel()
			expect(tbl_10[1]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_10[2]:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_10[3]:getStatus()).to.equal(Parent_upvr.Status.Started)
		end)
	end)
	describe("Promise:await", function() -- Line 1477
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should return the correct values", function() -- Line 1478
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_await_result1, any_await_result2_2, any_await_result3, any_await_result4, any_await_result5 = Parent_upvr.resolve(5, 6, nil, 7):await()
			expect(any_await_result1).to.equal(true)
			expect(any_await_result2_2).to.equal(5)
			expect(any_await_result3).to.equal(6)
			expect(any_await_result4).to.equal(nil)
			expect(any_await_result5).to.equal(7)
		end)
		it("should work if yielding is needed", function() -- Line 1490
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var514_upvw = false
			task.spawn(function() -- Line 1492
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: var514_upvw (read and write)
				]]
				local _, any_await_result2 = Parent_upvr.delay(1):await()
				expect(type(any_await_result2)).to.equal("number")
				var514_upvw = true
			end)
			advanceTime_upvw(2)
			expect(var514_upvw).to.equal(true)
		end)
	end)
	describe("Promise:expect", function() -- Line 1503
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should throw the correct values", function() -- Line 1504
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_11 = {}
			local any_reject_result1_4_upvr = Parent_upvr.reject(tbl_11)
			local pcall_result1_2, pcall_result2_2 = pcall(function() -- Line 1508
				--[[ Upvalues[1]:
					[1]: any_reject_result1_4_upvr (readonly)
				]]
				any_reject_result1_4_upvr:expect()
			end)
			expect(pcall_result1_2).to.equal(false)
			expect(pcall_result2_2).to.equal(tbl_11)
		end)
	end)
	describe("Promise:now", function() -- Line 1517
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should resolve if the Promise is resolved", function() -- Line 1518
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_7, any__unwrap_result2_9 = Parent_upvr.resolve("foo"):now():_unwrap()
			expect(any__unwrap_result1_7).to.equal(true)
			expect(any__unwrap_result2_9).to.equal("foo")
		end)
		it("should reject if the Promise is not resolved", function() -- Line 1525
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_6, any__unwrap_result2_7 = Parent_upvr.new(function() -- Line 1526
			end):now():_unwrap()
			expect(any__unwrap_result1_6).to.equal(false)
			expect(Parent_upvr.Error.isKind(any__unwrap_result2_7, "NotResolvedInTime")).to.equal(true)
		end)
		it("should reject with a custom rejection value", function() -- Line 1532
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_5, any__unwrap_result2_4 = Parent_upvr.new(function() -- Line 1533
			end):now("foo"):_unwrap()
			expect(any__unwrap_result1_5).to.equal(false)
			expect(any__unwrap_result2_4).to.equal("foo")
		end)
	end)
	describe("Promise.each", function() -- Line 1540
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should iterate", function() -- Line 1541
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any__unwrap_result1_2, any__unwrap_result2 = Parent_upvr.each({"foo", "bar", "baz", "qux"}, function(...) -- Line 1547
				return {...}
			end):_unwrap()
			expect(any__unwrap_result1_2).to.equal(true)
			expect(any__unwrap_result2[1][1]).to.equal("foo")
			expect(any__unwrap_result2[1][2]).to.equal(1)
			expect(any__unwrap_result2[2][1]).to.equal("bar")
			expect(any__unwrap_result2[2][2]).to.equal(2)
			expect(any__unwrap_result2[3][1]).to.equal("baz")
			expect(any__unwrap_result2[3][2]).to.equal(3)
			expect(any__unwrap_result2[4][1]).to.equal("qux")
			expect(any__unwrap_result2[4][2]).to.equal(4)
		end)
		it("should iterate serially", function() -- Line 1562
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_13_upvr = {}
			local tbl_5_upvr = {}
			local any_each_result1_5 = Parent_upvr.each({"foo", "bar", "baz"}, function(arg1, arg2) -- Line 1570
				--[[ Upvalues[3]:
					[1]: tbl_5_upvr (readonly)
					[2]: Parent_upvr (copied, readonly)
					[3]: tbl_13_upvr (readonly)
				]]
				tbl_5_upvr[arg2] = (tbl_5_upvr[arg2] or 0) + 1
				return Parent_upvr.new(function(arg1_2) -- Line 1573
					--[[ Upvalues[2]:
						[1]: tbl_13_upvr (copied, readonly)
						[2]: arg1 (readonly)
					]]
					table.insert(tbl_13_upvr, function() -- Line 1574
						--[[ Upvalues[2]:
							[1]: arg1_2 (readonly)
							[2]: arg1 (copied, readonly)
						]]
						arg1_2(arg1:upper())
					end)
				end)
			end)
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(#tbl_13_upvr).to.equal(1)
			expect(tbl_5_upvr[1]).to.equal(1)
			expect(tbl_5_upvr[2]).to.never.be.ok()
			table.remove(tbl_13_upvr, 1)()
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(#tbl_13_upvr).to.equal(1)
			expect(tbl_5_upvr[1]).to.equal(1)
			expect(tbl_5_upvr[2]).to.equal(1)
			expect(tbl_5_upvr[3]).to.never.be.ok()
			table.remove(tbl_13_upvr, 1)()
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(tbl_5_upvr[1]).to.equal(1)
			expect(tbl_5_upvr[2]).to.equal(1)
			expect(tbl_5_upvr[3]).to.equal(1)
			table.remove(tbl_13_upvr, 1)()
			expect(any_each_result1_5:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(type(any_each_result1_5._values[1])).to.equal("table")
			expect(type(any_each_result1_5._values[2])).to.equal("nil")
			local _1 = any_each_result1_5._values[1]
			expect(_1[1]).to.equal("FOO")
			expect(_1[2]).to.equal("BAR")
			expect(_1[3]).to.equal("BAZ")
		end)
		it("should reject with the value if the predicate promise rejects", function() -- Line 1613
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_each_result1_2 = Parent_upvr.each({1, 2, 3}, function() -- Line 1614
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.reject("foobar")
			end)
			expect(any_each_result1_2:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_each_result1_2._values[1]).to.equal("foobar")
		end)
		it("should allow Promises to be in the list and wait when it gets to them", function() -- Line 1622
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var558_upvw
			local any_each_result1_4 = Parent_upvr.each({Parent_upvr.new(function(arg1) -- Line 1624
				--[[ Upvalues[1]:
					[1]: var558_upvw (read and write)
				]]
				var558_upvw = arg1
			end)}, function(arg1) -- Line 1630
				return arg1 * 2
			end)
			expect(any_each_result1_4:getStatus()).to.equal(Parent_upvr.Status.Started)
			var558_upvw(2)
			expect(any_each_result1_4:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_each_result1_4._values[1][1]).to.equal(4)
		end)
		it("should reject with the value if a Promise from the list rejects", function() -- Line 1642
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var564_upvw = false
			local any_each_result1_6 = Parent_upvr.each({1, 2, Parent_upvr.reject("foobar")}, function(arg1) -- Line 1644
				--[[ Upvalues[1]:
					[1]: var564_upvw (read and write)
				]]
				var564_upvw = true
				return "never"
			end)
			expect(any_each_result1_6:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_each_result1_6._values[1]).to.equal("foobar")
			expect(var564_upvw).to.equal(false)
		end)
		it("should reject immediately if there's a cancelled Promise in the list initially", function() -- Line 1654
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1 = Parent_upvr.new(function() -- Line 1655
			end)
			any_new_result1:cancel()
			local var571_upvw = false
			local any_each_result1_3 = Parent_upvr.each({1, 2, any_new_result1}, function() -- Line 1659
				--[[ Upvalues[1]:
					[1]: var571_upvw (read and write)
				]]
				var571_upvw = true
			end)
			expect(any_each_result1_3:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(var571_upvw).to.equal(false)
			expect(any_each_result1_3._values[1].kind).to.equal(Parent_upvr.Error.Kind.AlreadyCancelled)
		end)
		it("should stop iteration if Promise.each is cancelled", function() -- Line 1668
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_8_upvr = {}
			local any_each_result1 = Parent_upvr.each({"foo", "bar", "baz"}, function(arg1, arg2) -- Line 1675
				--[[ Upvalues[2]:
					[1]: tbl_8_upvr (readonly)
					[2]: Parent_upvr (copied, readonly)
				]]
				tbl_8_upvr[arg2] = (tbl_8_upvr[arg2] or 0) + 1
				return Parent_upvr.new(function() -- Line 1678
				end)
			end)
			expect(any_each_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			expect(tbl_8_upvr[1]).to.equal(1)
			expect(tbl_8_upvr[2]).to.never.be.ok()
			any_each_result1:cancel()
			expect(any_each_result1:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
			expect(tbl_8_upvr[1]).to.equal(1)
			expect(tbl_8_upvr[2]).to.never.be.ok()
		end)
		it("should cancel the Promise returned from the predicate if Promise.each is cancelled", function() -- Line 1692
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var582_upvw
			Parent_upvr.each({"foo", "bar", "baz"}, function(arg1, arg2) -- Line 1699
				--[[ Upvalues[2]:
					[1]: var582_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				var582_upvw = Parent_upvr.new(function() -- Line 1700
				end)
				return var582_upvw
			end):cancel()
			expect(var582_upvw:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
		it("should cancel Promises in the list if Promise.each is cancelled", function() -- Line 1709
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_17 = Parent_upvr.new(function() -- Line 1710
			end)
			Parent_upvr.each({any_new_result1_17}, function() -- Line 1712
			end):cancel()
			expect(any_new_result1_17:getStatus()).to.equal(Parent_upvr.Status.Cancelled)
		end)
	end)
	describe("Promise.retry", function() -- Line 1720
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should retry N times", function() -- Line 1721
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var594_upvw = 0
			local any_retry_result1 = Parent_upvr.retry(function(arg1) -- Line 1724
				--[[ Upvalues[2]:
					[1]: var594_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				expect(arg1).to.equal("foo")
				var594_upvw += 1
				if var594_upvw == 5 then
					return Parent_upvr.resolve("ok")
				end
				return Parent_upvr.reject("fail")
			end, 5, "foo")
			expect(any_retry_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_retry_result1._values[1]).to.equal("ok")
		end)
		it("should reject if threshold is exceeded", function() -- Line 1740
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_retry_result1_2 = Parent_upvr.retry(function() -- Line 1741
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.reject("fail")
			end, 5)
			expect(any_retry_result1_2:getStatus()).to.equal(Parent_upvr.Status.Rejected)
			expect(any_retry_result1_2._values[1]).to.equal("fail")
		end)
	end)
	describe("Promise.retryWithDelay", function() -- Line 1750
		--[[ Upvalues[2]:
			[1]: Parent_upvr (readonly)
			[2]: advanceTime_upvw (read and write)
		]]
		it("should retry after a delay", function() -- Line 1751
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: advanceTime_upvw (copied, read and write)
			]]
			local var601_upvw = 0
			local any_retryWithDelay_result1 = Parent_upvr.retryWithDelay(function(arg1) -- Line 1754
				--[[ Upvalues[2]:
					[1]: var601_upvw (read and write)
					[2]: Parent_upvr (copied, readonly)
				]]
				expect(arg1).to.equal("foo")
				var601_upvw += 1
				if var601_upvw == 3 then
					return Parent_upvr.resolve("ok")
				end
				return Parent_upvr.reject("fail")
			end, 3, 10, "foo")
			expect(var601_upvw).to.equal(1)
			advanceTime_upvw(11)
			expect(var601_upvw).to.equal(2)
			advanceTime_upvw(11)
			expect(var601_upvw).to.equal(3)
			expect(any_retryWithDelay_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_retryWithDelay_result1._values[1]).to.equal("ok")
		end)
	end)
	describe("Promise.fromEvent", function() -- Line 1781
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should convert a Promise into an event", function() -- Line 1782
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent = Instance.new("BindableEvent")
			local any_fromEvent_result1 = Parent_upvr.fromEvent(BindableEvent.Event)
			expect(any_fromEvent_result1:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent:Fire("foo")
			expect(any_fromEvent_result1:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fromEvent_result1._values[1]).to.equal("foo")
		end)
		it("should convert a Promise into an event with the predicate", function() -- Line 1795
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local BindableEvent_3 = Instance.new("BindableEvent")
			local any_fromEvent_result1_2 = Parent_upvr.fromEvent(BindableEvent_3.Event, function(arg1) -- Line 1798
				if arg1 ~= "foo" then
				else
				end
				return true
			end)
			expect(any_fromEvent_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_3:Fire("bar")
			expect(any_fromEvent_result1_2:getStatus()).to.equal(Parent_upvr.Status.Started)
			BindableEvent_3:Fire("foo")
			expect(any_fromEvent_result1_2:getStatus()).to.equal(Parent_upvr.Status.Resolved)
			expect(any_fromEvent_result1_2._values[1]).to.equal("foo")
		end)
	end)
	describe("Promise.is", function() -- Line 1815
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should work with current version", function() -- Line 1816
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.is(Parent_upvr.resolve(1))).to.equal(true)
		end)
		it("should work with any object with an andThen", function() -- Line 1822
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_7 = {}
			local function andThen() -- Line 1824
				return 1
			end
			tbl_7.andThen = andThen
			expect(Parent_upvr.is(tbl_7)).to.equal(true)
		end)
		it("should work with older promises", function() -- Line 1832
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_9 = {
				prototype = {};
				__index = tbl_9.prototype;
			}
			tbl_9.prototype.andThen = function(arg1) -- Line 1837, Named "andThen"
			end
			expect(Parent_upvr.is(setmetatable({}, tbl_9))).to.equal(true)
		end)
	end)
end

Script name: Option
  - Script: 


return require(script.Parent.Parent["sleitnick_option@1.0.4"].option)


Script name: Promise
  - Script: 


return require(script.Parent.Parent["evaera_promise@4.0.0"].promise)

Script name: Signal
  - Script: 


return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

Script name: comm
  - Script: 


return {
	Server = require(script.Server);
	Client = require(script.Client);
	ServerComm = require(script.Server.ServerComm);
	ClientComm = require(script.Client.ClientComm);
}

Script name: Client
  - Script: 


local Util_upvr = require(script.Parent.Util)
local module = {}
local Promise_upvr = require(script.Parent.Parent.Promise)
function module.GetFunction(arg1, arg2, arg3, arg4, arg5) -- Line 9
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: Promise_upvr (readonly)
	]]
	assert(not Util_upvr.IsServer, "GetFunction must be called from the client")
	local var4 = arg2
	local SOME_upvr = Util_upvr.GetCommSubFolder(arg1, "RF"):Expect("Failed to get Comm RF folder"):WaitForChild(var4, Util_upvr.WaitForChildTimeout)
	local var6
	if SOME_upvr == nil then
		var4 = false
	else
		var4 = true
	end
	var6 = assert
	var6(var4, "Failed to find RemoteFunction: "..arg2)
	var6 = false
	if type(arg4) == "table" then
		if 0 >= #arg4 then
			var6 = false
		else
			var6 = true
		end
	end
	local var7_upvr = false
	if type(arg5) == "table" then
		if 0 >= #arg5 then
			var7_upvr = false
		else
			var7_upvr = true
		end
	end
	local function ProcessOutbound_upvr(arg1_2) -- Line 22, Named "ProcessOutbound"
		--[[ Upvalues[1]:
			[1]: arg5 (readonly)
		]]
		for _, v in ipairs(arg5) do
			local packed = table.pack(v(arg1_2))
			if not packed[1] then
				return table.unpack(packed, 2, packed.n)
			end
			arg1_2.n = #arg1_2
		end
		return table.unpack(arg1_2, 1, arg1_2.n)
	end
	if var6 then
		if arg3 then
			return function(...) -- Line 34
				--[[ Upvalues[5]:
					[1]: Promise_upvr (copied, readonly)
					[2]: var7_upvr (readonly)
					[3]: SOME_upvr (readonly)
					[4]: ProcessOutbound_upvr (readonly)
					[5]: arg4 (readonly)
				]]
				local packed_upvr_2 = table.pack(...)
				return Promise_upvr.new(function(arg1_3, arg2_2) -- Line 36
					--[[ Upvalues[5]:
						[1]: var7_upvr (copied, readonly)
						[2]: SOME_upvr (copied, readonly)
						[3]: ProcessOutbound_upvr (copied, readonly)
						[4]: packed_upvr_2 (readonly)
						[5]: arg4 (copied, readonly)
					]]
					local pcall_result1_2, pcall_result2 = pcall(function() -- Line 37
						--[[ Upvalues[4]:
							[1]: var7_upvr (copied, readonly)
							[2]: SOME_upvr (copied, readonly)
							[3]: ProcessOutbound_upvr (copied, readonly)
							[4]: packed_upvr_2 (copied, readonly)
						]]
						if var7_upvr then
							return table.pack(SOME_upvr:InvokeServer(ProcessOutbound_upvr(packed_upvr_2)))
						end
						return table.pack(SOME_upvr:InvokeServer(table.unpack(packed_upvr_2, 1, packed_upvr_2.n)))
					end)
					if pcall_result1_2 then
						for _, v_2 in ipairs(arg4) do
							local packed_3 = table.pack(v_2(pcall_result2))
							if not packed_3[1] then
								return table.unpack(packed_3, 2, packed_3.n)
							end
							pcall_result2.n = #pcall_result2
						end
						arg1_3(table.unpack(pcall_result2, 1, pcall_result2.n))
					else
						arg2_2(pcall_result2)
					end
				end)
			end
		end
		return function(...) -- Line 59
			--[[ Upvalues[4]:
				[1]: var7_upvr (readonly)
				[2]: SOME_upvr (readonly)
				[3]: ProcessOutbound_upvr (readonly)
				[4]: arg4 (readonly)
			]]
			local var31
			if var7_upvr then
				var31 = table.pack(SOME_upvr:InvokeServer(ProcessOutbound_upvr(table.pack(...))))
			else
				var31 = table.pack(SOME_upvr:InvokeServer(...))
			end
			for _, v_3 in ipairs(arg4) do
				local packed_2 = table.pack(v_3(var31))
				if not packed_2[1] then
					return table.unpack(packed_2, 2, packed_2.n)
				end
				var31.n = #var31
			end
			return table.unpack(var31, 1, var31.n)
		end
	end
	if arg3 then
		return function(...) -- Line 78
			--[[ Upvalues[4]:
				[1]: Promise_upvr (copied, readonly)
				[2]: var7_upvr (readonly)
				[3]: SOME_upvr (readonly)
				[4]: ProcessOutbound_upvr (readonly)
			]]
			local packed_upvr = table.pack(...)
			return Promise_upvr.new(function(arg1_4, arg2_3) -- Line 80
				--[[ Upvalues[4]:
					[1]: var7_upvr (copied, readonly)
					[2]: SOME_upvr (copied, readonly)
					[3]: ProcessOutbound_upvr (copied, readonly)
					[4]: packed_upvr (readonly)
				]]
				local pcall_result1, pcall_result2_2 = pcall(function() -- Line 81
					--[[ Upvalues[4]:
						[1]: var7_upvr (copied, readonly)
						[2]: SOME_upvr (copied, readonly)
						[3]: ProcessOutbound_upvr (copied, readonly)
						[4]: packed_upvr (copied, readonly)
					]]
					if var7_upvr then
						return table.pack(SOME_upvr:InvokeServer(ProcessOutbound_upvr(packed_upvr)))
					end
					return table.pack(SOME_upvr:InvokeServer(table.unpack(packed_upvr, 1, packed_upvr.n)))
				end)
				if pcall_result1 then
					arg1_4(table.unpack(pcall_result2_2, 1, pcall_result2_2.n))
				else
					arg2_3(pcall_result2_2)
				end
			end)
		end
	end
	if var7_upvr then
		return function(...) -- Line 97
			--[[ Upvalues[2]:
				[1]: SOME_upvr (readonly)
				[2]: ProcessOutbound_upvr (readonly)
			]]
			return SOME_upvr:InvokeServer(ProcessOutbound_upvr(table.pack(...)))
		end
	end
	return function(...) -- Line 101
		--[[ Upvalues[1]:
			[1]: SOME_upvr (readonly)
		]]
		return SOME_upvr:InvokeServer(...)
	end
end
local ClientRemoteSignal_upvr = require(script.ClientRemoteSignal)
function module.GetSignal(arg1, arg2, arg3, arg4) -- Line 109
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: ClientRemoteSignal_upvr (readonly)
	]]
	assert(not Util_upvr.IsServer, "GetSignal must be called from the client")
	local var45 = arg2
	local SOME_2 = Util_upvr.GetCommSubFolder(arg1, "RE"):Expect("Failed to get Comm RE folder"):WaitForChild(var45, Util_upvr.WaitForChildTimeout)
	if SOME_2 == nil then
		var45 = false
	else
		var45 = true
	end
	assert(var45, "Failed to find RemoteEvent: "..arg2)
	return ClientRemoteSignal_upvr.new(SOME_2, arg3, arg4)
end
local ClientRemoteProperty_upvr = require(script.ClientRemoteProperty)
function module.GetProperty(arg1, arg2, arg3, arg4) -- Line 122
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: ClientRemoteProperty_upvr (readonly)
	]]
	assert(not Util_upvr.IsServer, "GetProperty must be called from the client")
	local var48 = arg2
	local SOME = Util_upvr.GetCommSubFolder(arg1, "RP"):Expect("Failed to get Comm RP folder"):WaitForChild(var48, Util_upvr.WaitForChildTimeout)
	if SOME == nil then
		var48 = false
	else
		var48 = true
	end
	assert(var48, "Failed to find RemoteEvent for RemoteProperty: "..arg2)
	return ClientRemoteProperty_upvr.new(SOME, arg3, arg4)
end
return module

Script name: ClientComm
  - Script: 


local Parent_upvr = require(script.Parent)
local module_upvr = {}
module_upvr.__index = module_upvr
local Util_upvr = require(script.Parent.Parent.Util)
function module_upvr.new(arg1, arg2, arg3) -- Line 46
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local var4 = not Util_upvr.IsServer
	assert(var4, "ClientComm must be constructed from the client")
	local var5
	if typeof(arg1) ~= "Instance" then
		var4 = false
	else
		var4 = true
	end
	var5 = assert
	var5(var4, "Parent must be of type Instance")
	var5 = Util_upvr.DefaultCommFolderName
	if arg3 then
		var5 = arg3
	end
	local var6 = var5
	local SOME = arg1:WaitForChild(var6, Util_upvr.WaitForChildTimeout)
	if SOME == nil then
		var6 = false
	else
		var6 = true
	end
	assert(var6, "Could not find namespace for ClientComm in parent: "..var5)
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._instancesFolder = SOME
	setmetatable_result1._usePromise = arg2
	return setmetatable_result1
end
function module_upvr.GetFunction(arg1, arg2, arg3, arg4) -- Line 95
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.GetFunction(arg1._instancesFolder, arg2, arg1._usePromise, arg3, arg4)
end
function module_upvr.GetSignal(arg1, arg2, arg3, arg4) -- Line 123
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.GetSignal(arg1._instancesFolder, arg2, arg3, arg4)
end
function module_upvr.GetProperty(arg1, arg2, arg3, arg4) -- Line 165
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.GetProperty(arg1._instancesFolder, arg2, arg3, arg4)
end
function module_upvr.BuildObject(arg1, arg2, arg3) -- Line 192
	local RF = arg1._instancesFolder:FindFirstChild("RF")
	local RE = arg1._instancesFolder:FindFirstChild("RE")
	local RP = arg1._instancesFolder:FindFirstChild("RP")
	if RF then
		for _, v in ipairs(RF:GetChildren()) do
			if v:IsA("RemoteFunction") then
				local any_GetFunction_result1_upvr = arg1:GetFunction(v.Name, arg2, arg3)
				;({})[v.Name] = function(arg1_2, ...) -- Line 203
					--[[ Upvalues[1]:
						[1]: any_GetFunction_result1_upvr (readonly)
					]]
					return any_GetFunction_result1_upvr(...)
				end
			end
		end
	end
	if RE then
		for _, v_2 in ipairs(RE:GetChildren()) do
			any_GetFunction_result1_upvr = v_2:IsA("RemoteEvent")
			if any_GetFunction_result1_upvr then
				any_GetFunction_result1_upvr = v_2.Name
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				;({})[any_GetFunction_result1_upvr] = arg1:GetSignal(v_2.Name, arg2, arg3)
			end
		end
	end
	if RP then
		for _, v_3 in ipairs(RP:GetChildren()) do
			any_GetFunction_result1_upvr = v_3:IsA("RemoteEvent")
			if any_GetFunction_result1_upvr then
				any_GetFunction_result1_upvr = v_3.Name
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				;({})[any_GetFunction_result1_upvr] = arg1:GetProperty(v_3.Name, arg2, arg3)
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module_upvr.Destroy(arg1) -- Line 230
end
return module_upvr

Script name: ClientRemoteProperty
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ClientRemoteSignal_upvr = require(script.Parent.ClientRemoteSignal)
local Signal_upvr = require(script.Parent.Parent.Parent.Signal)
function module_upvr.new(arg1, arg2, arg3) -- Line 32
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: ClientRemoteSignal_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._rs = ClientRemoteSignal_upvr.new(arg1, arg2, arg3)
	setmetatable_result1_upvr._ready = false
	setmetatable_result1_upvr._value = nil
	setmetatable_result1_upvr.Changed = Signal_upvr.new()
	setmetatable_result1_upvr._readyPromise = setmetatable_result1_upvr:OnReady():andThen(function() -- Line 42
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		setmetatable_result1_upvr._readyPromise = nil
		setmetatable_result1_upvr.Changed:Fire(setmetatable_result1_upvr._value)
		setmetatable_result1_upvr._changed = setmetatable_result1_upvr._rs:Connect(function(arg1_2) -- Line 45
			--[[ Upvalues[1]:
				[1]: setmetatable_result1_upvr (copied, readonly)
			]]
			if arg1_2 == setmetatable_result1_upvr._value then
			else
				setmetatable_result1_upvr._value = arg1_2
				setmetatable_result1_upvr.Changed:Fire(arg1_2)
			end
		end)
	end)
	setmetatable_result1_upvr._rs:Fire()
	return setmetatable_result1_upvr
end
function module_upvr.Get(arg1) -- Line 65
	return arg1._value
end
local Promise_upvr = require(script.Parent.Parent.Parent.Promise)
function module_upvr.OnReady(arg1) -- Line 88
	--[[ Upvalues[1]:
		[1]: Promise_upvr (readonly)
	]]
	if arg1._ready then
		return Promise_upvr.resolve(arg1._value)
	end
	return Promise_upvr.fromEvent(arg1._rs, function(arg1_3) -- Line 92
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1._value = arg1_3
		arg1._ready = true
		return true
	end):andThen(function() -- Line 96
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		return arg1._value
	end)
end
function module_upvr.IsReady(arg1) -- Line 113
	return arg1._ready
end
function module_upvr.Observe(arg1, arg2) -- Line 138
	if arg1._ready then
		task.defer(arg2, arg1._value)
	end
	return arg1.Changed:Connect(arg2)
end
function module_upvr.Destroy(arg1) -- Line 148
	arg1._rs:Destroy()
	if arg1._readyPromise then
		arg1._readyPromise:cancel()
	end
	if arg1._changed then
		arg1._changed:Disconnect()
	end
	arg1.Changed:Destroy()
end
return module_upvr

Script name: ClientRemoteSignal
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local Signal_upvr = require(script.Parent.Parent.Parent.Signal)
function module_upvr.new(arg1, arg2, arg3) -- Line 22
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Signal_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._re = arg1
	if arg3 and 0 < #arg3 then
		setmetatable_result1_upvr._hasOutbound = true
		setmetatable_result1_upvr._outbound = arg3
	else
		setmetatable_result1_upvr._hasOutbound = false
	end
	if arg2 and 0 < #arg2 then
		setmetatable_result1_upvr._directConnect = false
		setmetatable_result1_upvr._signal = Signal_upvr.new()
		setmetatable_result1_upvr._reConn = setmetatable_result1_upvr._re.OnClientEvent:Connect(function(...) -- Line 38
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: setmetatable_result1_upvr (readonly)
			]]
			local packed_2 = table.pack(...)
			for _, v in ipairs(arg2) do
				if not table.pack(v(packed_2))[1] then return end
				packed_2.n = #packed_2
			end
			setmetatable_result1_upvr._signal:Fire(table.unpack(packed_2, 1, packed_2.n))
		end)
		return setmetatable_result1_upvr
	end
	setmetatable_result1_upvr._directConnect = true
	return setmetatable_result1_upvr
end
function module_upvr._processOutboundMiddleware(arg1, ...) -- Line 55
	local packed = table.pack(...)
	for _, v_2 in ipairs(arg1._outbound) do
		local packed_3 = table.pack(v_2(packed))
		if not packed_3[1] then
			return table.unpack(packed_3, 2, packed_3.n)
		end
		packed.n = #packed
	end
	return table.unpack(packed, 1, packed.n)
end
function module_upvr.Connect(arg1, arg2) -- Line 74
	if arg1._directConnect then
		return arg1._re.OnClientEvent:Connect(arg2)
	end
	return arg1._signal:Connect(arg2)
end
function module_upvr.Fire(arg1, ...) -- Line 90
	if arg1._hasOutbound then
		arg1._re:FireServer(arg1:_processOutboundMiddleware(...))
	else
		arg1._re:FireServer(...)
	end
end
function module_upvr.Destroy(arg1) -- Line 101
	if arg1._signal then
		arg1._signal:Destroy()
	end
end
return module_upvr

Script name: Server
  - Script: 


local Util_upvr = require(script.Parent.Util)
local module_upvr = {
	BindFunction = function(arg1, arg2, arg3, arg4, arg5) -- Line 37, Named "BindFunction"
		--[[ Upvalues[1]:
			[1]: Util_upvr (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 32 start (CF ANALYSIS FAILED)
		assert(Util_upvr.IsServer, "BindFunction must be called from the server")
		local RemoteFunction = Instance.new("RemoteFunction")
		RemoteFunction.Name = arg2
		local var4 = false
		local var5
		if var5 == "table" then
			var5 = #arg4
			if 0 >= var5 then
				var4 = false
			else
				var4 = true
			end
		end
		var5 = false
		if type(arg5) == "table" then
			if 0 >= #arg5 then
				var5 = false
			else
				var5 = true
			end
		end
		local function ProcessOutbound_upvr(arg1_2, ...) -- Line 50, Named "ProcessOutbound"
			--[[ Upvalues[1]:
				[1]: arg5 (readonly)
			]]
			local packed_3 = table.pack(...)
			for _, v in ipairs(arg5) do
				local packed_5 = table.pack(v(arg1_2, packed_3))
				if not packed_5[1] then
					return table.unpack(packed_5, 2, packed_5.n)
				end
				packed_3.n = #packed_3
			end
			return table.unpack(packed_3, 1, packed_3.n)
		end
		if var4 and var5 then
			local function OnServerInvoke(arg1_3, ...) -- Line 62
				--[[ Upvalues[3]:
					[1]: arg4 (readonly)
					[2]: ProcessOutbound_upvr (readonly)
					[3]: arg3 (readonly)
				]]
				local packed = table.pack(...)
				for _, v_2 in ipairs(arg4) do
					local packed_6 = table.pack(v_2(arg1_3, packed))
					if not packed_6[1] then
						return table.unpack(packed_6, 2, packed_6.n)
					end
					packed.n = #packed
				end
				return ProcessOutbound_upvr(arg1_3, arg3(arg1_3, table.unpack(packed, 1, packed.n)))
			end
			RemoteFunction.OnServerInvoke = OnServerInvoke
			-- KONSTANTWARNING: GOTO [80] #64
		end
		-- KONSTANTERROR: [0] 1. Error Block 32 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [64] 51. Error Block 29 start (CF ANALYSIS FAILED)
		if var4 then
			local function OnServerInvoke(arg1_4, ...) -- Line 75
				--[[ Upvalues[2]:
					[1]: arg4 (readonly)
					[2]: arg3 (readonly)
				]]
				local packed_2 = table.pack(...)
				for _, v_3 in ipairs(arg4) do
					local packed_4 = table.pack(v_3(arg1_4, packed_2))
					if not packed_4[1] then
						return table.unpack(packed_4, 2, packed_4.n)
					end
					packed_2.n = #packed_2
				end
				return arg3(arg1_4, table.unpack(packed_2, 1, packed_2.n))
			end
			RemoteFunction.OnServerInvoke = OnServerInvoke
		elseif var5 then
			function RemoteFunction.OnServerInvoke(arg1_5, ...) -- Line 88
				--[[ Upvalues[2]:
					[1]: ProcessOutbound_upvr (readonly)
					[2]: arg3 (readonly)
				]]
				return ProcessOutbound_upvr(arg1_5, arg3(arg1_5, ...))
			end
		else
			RemoteFunction.OnServerInvoke = arg3
		end
		RemoteFunction.Parent = Util_upvr.GetCommSubFolder(arg1, "RF"):Expect("Failed to get Comm RF folder")
		do
			return RemoteFunction
		end
		-- KONSTANTERROR: [64] 51. Error Block 29 end (CF ANALYSIS FAILED)
	end;
}
function module_upvr.WrapMethod(arg1, arg2, arg3, arg4, arg5) -- Line 99
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local var27 = "WrapMethod must be called from the server"
	assert(Util_upvr.IsServer, var27)
	local var28_upvr = arg2[arg3]
	if type(var28_upvr) ~= "function" then
		var27 = false
	else
		var27 = true
	end
	assert(var27, "Value at index "..arg3.." must be a function; got "..type(var28_upvr))
	return module_upvr.BindFunction(arg1, arg3, function(...) -- Line 109
		--[[ Upvalues[2]:
			[1]: var28_upvr (readonly)
			[2]: arg2 (readonly)
		]]
		return var28_upvr(arg2, ...)
	end, arg4, arg5)
end
local RemoteSignal_upvr = require(script.RemoteSignal)
function module_upvr.CreateSignal(arg1, arg2, arg3, arg4) -- Line 114
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: RemoteSignal_upvr (readonly)
	]]
	assert(Util_upvr.IsServer, "CreateSignal must be called from the server")
	return RemoteSignal_upvr.new(Util_upvr.GetCommSubFolder(arg1, "RE"):Expect("Failed to get Comm RE folder"), arg2, arg3, arg4)
end
local RemoteProperty_upvr = require(script.RemoteProperty)
function module_upvr.CreateProperty(arg1, arg2, arg3, arg4, arg5) -- Line 126
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: RemoteProperty_upvr (readonly)
	]]
	assert(Util_upvr.IsServer, "CreateProperty must be called from the server")
	return RemoteProperty_upvr.new(Util_upvr.GetCommSubFolder(arg1, "RP"):Expect("Failed to get Comm RP folder"), arg2, arg3, arg4, arg5)
end
return module_upvr

Script name: RemoteProperty
  - Script: 


local Players_upvr = game:GetService("Players")
local None_upvr = require(script.Parent.Parent.Util).None
local module_upvr = {}
module_upvr.__index = module_upvr
local RemoteSignal_upvr = require(script.Parent.RemoteSignal)
function module_upvr.new(arg1, arg2, arg3, arg4, arg5) -- Line 53
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: RemoteSignal_upvr (readonly)
		[3]: Players_upvr (readonly)
		[4]: None_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._rs = RemoteSignal_upvr.new(arg1, arg2, arg4, arg5)
	setmetatable_result1_upvr._value = arg3
	setmetatable_result1_upvr._perPlayer = {}
	setmetatable_result1_upvr._playerRemoving = Players_upvr.PlayerRemoving:Connect(function(arg1_2) -- Line 64
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		setmetatable_result1_upvr._perPlayer[arg1_2] = nil
	end)
	setmetatable_result1_upvr._rs:Connect(function(arg1_3) -- Line 67
		--[[ Upvalues[2]:
			[1]: setmetatable_result1_upvr (readonly)
			[2]: None_upvr (copied, readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 12 start (CF ANALYSIS FAILED)
		local var8 = setmetatable_result1_upvr._perPlayer[arg1_3]
		local var9
		if var8 == nil then
			var9 = setmetatable_result1_upvr._value
			-- KONSTANTWARNING: GOTO [16] #13
		end
		-- KONSTANTERROR: [0] 1. Error Block 12 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [10] 8. Error Block 13 start (CF ANALYSIS FAILED)
		if var8 == None_upvr then
			var9 = nil
		else
			var9 = var8
		end
		setmetatable_result1_upvr._rs:Fire(arg1_3, var9)
		-- KONSTANTERROR: [10] 8. Error Block 13 end (CF ANALYSIS FAILED)
	end)
	return setmetatable_result1_upvr
end
function module_upvr.Set(arg1, arg2) -- Line 91
	arg1._value = arg2
	table.clear(arg1._perPlayer)
	arg1._rs:FireAll(arg2)
end
function module_upvr.SetTop(arg1, arg2) -- Line 118
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	arg1._value = arg2
	for _, v in ipairs(Players_upvr:GetPlayers()) do
		if arg1._perPlayer[v] == nil then
			arg1._rs:Fire(v, arg2)
		end
	end
end
function module_upvr.SetFilter(arg1, arg2, arg3) -- Line 141
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v_2 in ipairs(Players_upvr:GetPlayers()) do
		if arg2(v_2, arg3) then
			arg1:SetFor(v_2, arg3)
		end
	end
end
function module_upvr.SetFor(arg1, arg2, arg3) -- Line 163
	--[[ Upvalues[1]:
		[1]: None_upvr (readonly)
	]]
	local var20
	if arg2.Parent then
		if arg3 == nil then
			var20 = None_upvr
		else
			var20 = arg3
		end
		arg1._perPlayer[arg2] = var20
	end
	arg1._rs:Fire(arg2, arg3)
end
function module_upvr.SetForList(arg1, arg2, arg3) -- Line 179
	for _, v_3 in ipairs(arg2) do
		arg1:SetFor(v_3, arg3)
	end
end
function module_upvr.ClearFor(arg1, arg2) -- Line 206
	if arg1._perPlayer[arg2] == nil then
	else
		arg1._perPlayer[arg2] = nil
		arg1._rs:Fire(arg2, arg1._value)
	end
end
function module_upvr.ClearForList(arg1, arg2) -- Line 219
	for _, v_4 in ipairs(arg2) do
		arg1:ClearFor(v_4)
	end
end
function module_upvr.ClearFilter(arg1, arg2) -- Line 229
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v_5 in ipairs(Players_upvr:GetPlayers()) do
		if arg2(v_5) then
			arg1:ClearFor(v_5)
		end
	end
end
function module_upvr.Get(arg1) -- Line 247
	return arg1._value
end
function module_upvr.GetFor(arg1, arg2) -- Line 281
	--[[ Upvalues[1]:
		[1]: None_upvr (readonly)
	]]
	local var36 = arg1._perPlayer[arg2]
	if var36 == nil then
		return arg1._value
	end
	if var36 == None_upvr then
		return nil
	end
	return var36
end
function module_upvr.Destroy(arg1) -- Line 290
	arg1._rs:Destroy()
	arg1._playerRemoving:Disconnect()
end
return module_upvr

Script name: RemoteSignal
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local Signal_upvr = require(script.Parent.Parent.Parent.Signal)
function module_upvr.new(arg1, arg2, arg3, arg4) -- Line 25
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Signal_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._re = Instance.new("RemoteEvent")
	setmetatable_result1_upvr._re.Name = arg2
	setmetatable_result1_upvr._re.Parent = arg1
	if arg4 and 0 < #arg4 then
		setmetatable_result1_upvr._hasOutbound = true
		setmetatable_result1_upvr._outbound = arg4
	else
		setmetatable_result1_upvr._hasOutbound = false
	end
	if arg3 and 0 < #arg3 then
		setmetatable_result1_upvr._directConnect = false
		setmetatable_result1_upvr._signal = Signal_upvr.new()
		setmetatable_result1_upvr._re.OnServerEvent:Connect(function(arg1_2, ...) -- Line 44
			--[[ Upvalues[2]:
				[1]: arg3 (readonly)
				[2]: setmetatable_result1_upvr (readonly)
			]]
			local packed_3 = table.pack(...)
			for _, v in ipairs(arg3) do
				if not table.pack(v(arg1_2, packed_3))[1] then return end
				packed_3.n = #packed_3
			end
			setmetatable_result1_upvr._signal:Fire(arg1_2, table.unpack(packed_3, 1, packed_3.n))
		end)
		return setmetatable_result1_upvr
	end
	setmetatable_result1_upvr._directConnect = true
	return setmetatable_result1_upvr
end
function module_upvr.Connect(arg1, arg2) -- Line 68
	if arg1._directConnect then
		return arg1._re.OnServerEvent:Connect(arg2)
	end
	return arg1._signal:Connect(arg2)
end
function module_upvr._processOutboundMiddleware(arg1, arg2, ...) -- Line 76
	if not arg1._hasOutbound then
		return ...
	end
	local packed_2 = table.pack(...)
	for _, v_2 in ipairs(arg1._outbound) do
		local packed = table.pack(v_2(arg2, packed_2))
		if not packed[1] then
			return table.unpack(packed, 2, packed.n)
		end
		packed_2.n = #packed_2
	end
	return table.unpack(packed_2, 1, packed_2.n)
end
function module_upvr.Fire(arg1, arg2, ...) -- Line 101
	arg1._re:FireClient(arg2, arg1:_processOutboundMiddleware(arg2, ...))
end
function module_upvr.FireAll(arg1, ...) -- Line 114
	arg1._re:FireAllClients(arg1:_processOutboundMiddleware(nil, ...))
end
function module_upvr.FireExcept(arg1, arg2, ...) -- Line 129
	arg1:FireFilter(function(arg1_3) -- Line 130
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		local var19
		if arg1_3 == arg2 then
			var19 = false
		else
			var19 = true
		end
		return var19
	end, ...)
end
local Players_upvr = game:GetService("Players")
function module_upvr.FireFilter(arg1, arg2, ...) -- Line 159
	--[[ Upvalues[1]:
		[1]: Players_upvr (readonly)
	]]
	for _, v_3 in ipairs(Players_upvr:GetPlayers()) do
		if arg2(v_3, ...) then
			arg1._re:FireClient(v_3, arg1:_processOutboundMiddleware(nil, ...))
		end
	end
end
function module_upvr.FireFor(arg1, arg2, ...) -- Line 183
	for _, v_4 in ipairs(arg2) do
		arg1._re:FireClient(v_4, arg1:_processOutboundMiddleware(nil, ...))
	end
end
function module_upvr.Destroy(arg1) -- Line 192
	arg1._re:Destroy()
	if arg1._signal then
		arg1._signal:Destroy()
	end
end
return module_upvr

Script name: ServerComm
  - Script: 


local Parent_upvr = require(script.Parent)
local module_upvr = {}
module_upvr.__index = module_upvr
local Util_upvr = require(script.Parent.Parent.Util)
function module_upvr.new(arg1, arg2) -- Line 44
	--[[ Upvalues[2]:
		[1]: Util_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local IsServer = Util_upvr.IsServer
	assert(IsServer, "ServerComm must be constructed from the server")
	if typeof(arg1) ~= "Instance" then
		IsServer = false
	else
		IsServer = true
	end
	assert(IsServer, "Parent must be of type Instance")
	local DefaultCommFolderName = Util_upvr.DefaultCommFolderName
	if arg2 then
		DefaultCommFolderName = arg2
	end
	assert(not arg1:FindFirstChild(DefaultCommFolderName), "Parent already has another ServerComm bound to namespace "..DefaultCommFolderName)
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._instancesFolder = Instance.new("Folder")
	setmetatable_result1._instancesFolder.Name = DefaultCommFolderName
	setmetatable_result1._instancesFolder.Parent = arg1
	return setmetatable_result1
end
function module_upvr.BindFunction(arg1, arg2, arg3, arg4, arg5) -- Line 76
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.BindFunction(arg1._instancesFolder, arg2, arg3, arg4, arg5)
end
function module_upvr.WrapMethod(arg1, arg2, arg3, arg4, arg5) -- Line 108
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.WrapMethod(arg1._instancesFolder, arg2, arg3, arg4, arg5)
end
function module_upvr.CreateSignal(arg1, arg2, arg3, arg4) -- Line 141
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.CreateSignal(arg1._instancesFolder, arg2, arg3, arg4)
end
function module_upvr.CreateProperty(arg1, arg2, arg3, arg4, arg5) -- Line 189
	--[[ Upvalues[1]:
		[1]: Parent_upvr (readonly)
	]]
	return Parent_upvr.CreateProperty(arg1._instancesFolder, arg2, arg3, arg4, arg5)
end
function module_upvr.Destroy(arg1) -- Line 201
	arg1._instancesFolder:Destroy()
end
return module_upvr

Script name: Types
  - Script: 


return nil

Script name: Util
  - Script: 


local module_upvr = {
	IsServer = game:GetService("RunService"):IsServer();
	WaitForChildTimeout = 60;
	DefaultCommFolderName = "__comm__";
	None = newproxy();
}
local Option_upvr = require(script.Parent.Parent.Option)
function module_upvr.GetCommSubFolder(arg1, arg2) -- Line 12
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: Option_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 9 start (CF ANALYSIS FAILED)
	local var3
	if module_upvr.IsServer then
		var3 = arg1:FindFirstChild(arg2)
		if not var3 then
			var3 = Instance.new("Folder")
			var3.Name = arg2
			var3.Parent = arg1
			-- KONSTANTWARNING: GOTO [29] #23
		end
	else
		var3 = arg1:WaitForChild(arg2, module_upvr.WaitForChildTimeout)
	end
	-- KONSTANTERROR: [0] 1. Error Block 9 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 23. Error Block 6 start (CF ANALYSIS FAILED)
	do
		return Option_upvr.Wrap(var3)
	end
	-- KONSTANTERROR: [29] 23. Error Block 6 end (CF ANALYSIS FAILED)
end
return module_upvr

Script name: Promise
  - Script: 


return require(script.Parent.Parent["evaera_promise@4.0.0"].promise)

Script name: Signal
  - Script: 


return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

Script name: Symbol
  - Script: 


return require(script.Parent.Parent["sleitnick_symbol@2.0.1"].symbol)

Script name: Trove
  - Script: 


return require(script.Parent.Parent["sleitnick_trove@0.4.2"].trove)

Script name: component
  - Script: 


local RunService_upvr = game:GetService("RunService")
local Symbol = require(script.Parent.Symbol)
local tbl_upvr_2 = {workspace, game:GetService("Players")}
local var2_result1_upvr_6 = Symbol("Ancestors")
local var2_result1_upvr_2 = Symbol("InstancesToComponents")
local var2_result1_upvr_4 = Symbol("LockConstruct")
local var2_result1_upvr_7 = Symbol("Components")
local Symbol_result1_upvr = Symbol("Trove")
local var2_result1_upvr_5 = Symbol("Extensions")
local var2_result1_upvr = Symbol("ActiveExtensions")
local var2_result1_upvr_3 = Symbol("Started")
local var12_upvw = 0
local function _() -- Line 192, Named "NextRenderName"
	--[[ Upvalues[1]:
		[1]: var12_upvw (read and write)
	]]
	var12_upvw += 1
	return "ComponentRender"..tostring(var12_upvw)
end
local function InvokeExtensionFn_upvr(arg1, arg2) -- Line 197, Named "InvokeExtensionFn"
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr (readonly)
	]]
	for _, v in ipairs(arg1[var2_result1_upvr]) do
		local var18 = v[arg2]
		if type(var18) == "function" then
			var18(arg1)
		end
	end
end
local function ShouldConstruct_upvr(arg1) -- Line 206, Named "ShouldConstruct"
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr (readonly)
	]]
	for _, v_2 in ipairs(arg1[var2_result1_upvr]) do
		local ShouldConstruct = v_2.ShouldConstruct
		if type(ShouldConstruct) == "function" and not ShouldConstruct(arg1) then
			return false
		end
	end
	return true
end
local function GetActiveExtensions_upvr(arg1, arg2) -- Line 219, Named "GetActiveExtensions"
	local var32
	for _, v_3 in ipairs(arg2) do
		local ShouldExtend = v_3.ShouldExtend
		local var34 = true
		if type(ShouldExtend) == "function" then
			var34 = not not ShouldExtend(arg1)
		end
		if var34 then
			table.insert(table.create(#arg2), v_3)
		else
		end
	end
	if nil then
		return arg2
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return table.create(#arg2)
end
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Trove)
local Signal_upvr = require(script.Parent.Signal)
function module_upvr.new(arg1) -- Line 298
	--[[ Upvalues[11]:
		[1]: var2_result1_upvr_6 (readonly)
		[2]: tbl_upvr_2 (readonly)
		[3]: var2_result1_upvr_2 (readonly)
		[4]: var2_result1_upvr_7 (readonly)
		[5]: var2_result1_upvr_4 (readonly)
		[6]: Symbol_result1_upvr (readonly)
		[7]: Trove_upvr (readonly)
		[8]: var2_result1_upvr_5 (readonly)
		[9]: var2_result1_upvr_3 (readonly)
		[10]: Signal_upvr (readonly)
		[11]: module_upvr (readonly)
	]]
	local module = {}
	module.__index = module
	function module.__tostring() -- Line 301
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		return "Component<"..arg1.Tag..'>'
	end
	local Ancestors = arg1.Ancestors
	if not Ancestors then
		Ancestors = tbl_upvr_2
	end
	module[var2_result1_upvr_6] = Ancestors
	module[var2_result1_upvr_2] = {}
	module[var2_result1_upvr_7] = {}
	module[var2_result1_upvr_4] = {}
	module[Symbol_result1_upvr] = Trove_upvr.new()
	local Extensions = arg1.Extensions
	if not Extensions then
		Extensions = {}
	end
	module[var2_result1_upvr_5] = Extensions
	module[var2_result1_upvr_3] = false
	module.Tag = arg1.Tag
	module.Started = module[Symbol_result1_upvr]:Construct(Signal_upvr)
	module.Stopped = module[Symbol_result1_upvr]:Construct(Signal_upvr)
	setmetatable(module, module_upvr)
	module:_setup()
	return module
end
function module_upvr._instantiate(arg1, arg2) -- Line 319
	--[[ Upvalues[5]:
		[1]: var2_result1_upvr (readonly)
		[2]: GetActiveExtensions_upvr (readonly)
		[3]: var2_result1_upvr_5 (readonly)
		[4]: ShouldConstruct_upvr (readonly)
		[5]: InvokeExtensionFn_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, arg1)
	setmetatable_result1.Instance = arg2
	setmetatable_result1[var2_result1_upvr] = GetActiveExtensions_upvr(setmetatable_result1, arg1[var2_result1_upvr_5])
	if not ShouldConstruct_upvr(setmetatable_result1) then
		return nil
	end
	InvokeExtensionFn_upvr(setmetatable_result1, "Constructing")
	if type(setmetatable_result1.Construct) == "function" then
		setmetatable_result1:Construct()
	end
	InvokeExtensionFn_upvr(setmetatable_result1, "Constructed")
	return setmetatable_result1
end
local any_IsServer_result1_upvr = RunService_upvr:IsServer()
local CollectionService_upvr = game:GetService("CollectionService")
function module_upvr._setup(arg1) -- Line 334
	--[[ Upvalues[11]:
		[1]: InvokeExtensionFn_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: any_IsServer_result1_upvr (readonly)
		[4]: var12_upvw (read and write)
		[5]: var2_result1_upvr_3 (readonly)
		[6]: var2_result1_upvr_4 (readonly)
		[7]: var2_result1_upvr_2 (readonly)
		[8]: var2_result1_upvr_7 (readonly)
		[9]: var2_result1_upvr_6 (readonly)
		[10]: Symbol_result1_upvr (readonly)
		[11]: CollectionService_upvr (readonly)
	]]
	local tbl_upvr = {}
	local function StartComponent_upvr(arg1_2) -- Line 337, Named "StartComponent"
		--[[ Upvalues[6]:
			[1]: InvokeExtensionFn_upvr (copied, readonly)
			[2]: RunService_upvr (copied, readonly)
			[3]: any_IsServer_result1_upvr (copied, readonly)
			[4]: var12_upvw (copied, read and write)
			[5]: var2_result1_upvr_3 (copied, readonly)
			[6]: arg1 (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 30 start (CF ANALYSIS FAILED)
		InvokeExtensionFn_upvr(arg1_2, "Starting")
		arg1_2:Start()
		local var50 = InvokeExtensionFn_upvr
		var50(arg1_2, "Started")
		local var51
		if typeof(arg1_2.HeartbeatUpdate) ~= "function" then
			var50 = false
		else
			var50 = true
		end
		var51 = typeof(arg1_2.SteppedUpdate)
		if var51 ~= "function" then
			-- KONSTANTWARNING: GOTO [31] #25
		end
		-- KONSTANTERROR: [0] 1. Error Block 30 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [30] 24. Error Block 37 start (CF ANALYSIS FAILED)
		if typeof(arg1_2.RenderSteppedUpdate) ~= "function" then
			var51 = false
		else
			var51 = true
		end
		if var50 then
			arg1_2._heartbeatUpdate = RunService_upvr.Heartbeat:Connect(function(arg1_3) -- Line 345
				--[[ Upvalues[1]:
					[1]: arg1_2 (readonly)
				]]
				arg1_2:HeartbeatUpdate(arg1_3)
			end)
		end
		if true then
			arg1_2._steppedUpdate = RunService_upvr.Stepped:Connect(function(arg1_4, arg2) -- Line 350
				--[[ Upvalues[1]:
					[1]: arg1_2 (readonly)
				]]
				arg1_2:SteppedUpdate(arg2)
			end)
		end
		if var51 and not any_IsServer_result1_upvr then
			if arg1_2.RenderPriority then
				var12_upvw += 1
				arg1_2._renderName = "ComponentRender"..tostring(var12_upvw)
				RunService_upvr:BindToRenderStep(arg1_2._renderName, arg1_2.RenderPriority, function(arg1_5) -- Line 357
					--[[ Upvalues[1]:
						[1]: arg1_2 (readonly)
					]]
					arg1_2:RenderSteppedUpdate(arg1_5)
				end)
			else
				arg1_2._renderSteppedUpdate = RunService_upvr.RenderStepped:Connect(function(arg1_6) -- Line 361
					--[[ Upvalues[1]:
						[1]: arg1_2 (readonly)
					]]
					arg1_2:RenderSteppedUpdate(arg1_6)
				end)
			end
		end
		arg1_2[var2_result1_upvr_3] = true
		arg1.Started:Fire(arg1_2)
		-- KONSTANTERROR: [30] 24. Error Block 37 end (CF ANALYSIS FAILED)
	end
	local function StopComponent_upvr(arg1_7) -- Line 370, Named "StopComponent"
		--[[ Upvalues[3]:
			[1]: RunService_upvr (copied, readonly)
			[2]: InvokeExtensionFn_upvr (copied, readonly)
			[3]: arg1 (readonly)
		]]
		if arg1_7._heartbeatUpdate then
			arg1_7._heartbeatUpdate:Disconnect()
		end
		if arg1_7._steppedUpdate then
			arg1_7._steppedUpdate:Disconnect()
		end
		if arg1_7._renderSteppedUpdate then
			arg1_7._renderSteppedUpdate:Disconnect()
		elseif arg1_7._renderName then
			RunService_upvr:UnbindFromRenderStep(arg1_7._renderName)
		end
		InvokeExtensionFn_upvr(arg1_7, "Stopping")
		arg1_7:Stop()
		InvokeExtensionFn_upvr(arg1_7, "Stopped")
		arg1.Stopped:Fire(arg1_7)
	end
	local function _(arg1_8, arg2) -- Line 388, Named "SafeConstruct"
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: var2_result1_upvr_4 (copied, readonly)
		]]
		if arg1[var2_result1_upvr_4][arg1_8] ~= arg2 then
			return nil
		end
		if arg1[var2_result1_upvr_4][arg1_8] ~= arg2 then
			return nil
		end
		return arg1:_instantiate(arg1_8)
	end
	local function _(arg1_9) -- Line 399, Named "TryConstructComponent"
		--[[ Upvalues[5]:
			[1]: arg1 (readonly)
			[2]: var2_result1_upvr_2 (copied, readonly)
			[3]: var2_result1_upvr_4 (copied, readonly)
			[4]: var2_result1_upvr_7 (copied, readonly)
			[5]: StartComponent_upvr (readonly)
		]]
		if arg1[var2_result1_upvr_2][arg1_9] then
		else
			local var56_upvw = (arg1[var2_result1_upvr_4][arg1_9] or 0) + 1
			arg1[var2_result1_upvr_4][arg1_9] = var56_upvw
			task.defer(function() -- Line 406
				--[[ Upvalues[7]:
					[1]: arg1_9 (readonly)
					[2]: var56_upvw (read and write)
					[3]: arg1 (copied, readonly)
					[4]: var2_result1_upvr_4 (copied, readonly)
					[5]: var2_result1_upvr_2 (copied, readonly)
					[6]: var2_result1_upvr_7 (copied, readonly)
					[7]: StartComponent_upvr (copied, readonly)
				]]
				local var58 = arg1_9
				local var59 = var56_upvw
				local var60_upvr
				if arg1[var2_result1_upvr_4][var58] ~= var59 then
					var60_upvr = nil
				elseif arg1[var2_result1_upvr_4][var58] ~= var59 then
					var60_upvr = nil
				else
					var60_upvr = arg1:_instantiate(var58)
				end
				if not var60_upvr then
				else
					arg1[var2_result1_upvr_2][arg1_9] = var60_upvr
					table.insert(arg1[var2_result1_upvr_7], var60_upvr)
					task.defer(function() -- Line 413
						--[[ Upvalues[5]:
							[1]: arg1 (copied, readonly)
							[2]: var2_result1_upvr_2 (copied, readonly)
							[3]: arg1_9 (copied, readonly)
							[4]: var60_upvr (readonly)
							[5]: StartComponent_upvr (copied, readonly)
						]]
						if arg1[var2_result1_upvr_2][arg1_9] == var60_upvr then
							StartComponent_upvr(var60_upvr)
						end
					end)
				end
			end)
		end
	end
	local function TryDeconstructComponent_upvr(arg1_10) -- Line 421, Named "TryDeconstructComponent"
		--[[ Upvalues[6]:
			[1]: arg1 (readonly)
			[2]: var2_result1_upvr_2 (copied, readonly)
			[3]: var2_result1_upvr_4 (copied, readonly)
			[4]: var2_result1_upvr_7 (copied, readonly)
			[5]: var2_result1_upvr_3 (copied, readonly)
			[6]: StopComponent_upvr (readonly)
		]]
		local var62 = arg1[var2_result1_upvr_2][arg1_10]
		if not var62 then
		else
			arg1[var2_result1_upvr_2][arg1_10] = nil
			arg1[var2_result1_upvr_4][arg1_10] = nil
			local var63 = arg1[var2_result1_upvr_7]
			local table_find_result1 = table.find(var63, var62)
			if table_find_result1 then
				local len = #var63
				var63[table_find_result1] = var63[len]
				var63[len] = nil
			end
			if var62[var2_result1_upvr_3] then
				task.spawn(StopComponent_upvr, var62)
			end
		end
	end
	local function StartWatchingInstance_upvr(arg1_11) -- Line 440, Named "StartWatchingInstance"
		--[[ Upvalues[9]:
			[1]: tbl_upvr (readonly)
			[2]: arg1 (readonly)
			[3]: var2_result1_upvr_6 (copied, readonly)
			[4]: Symbol_result1_upvr (copied, readonly)
			[5]: var2_result1_upvr_2 (copied, readonly)
			[6]: var2_result1_upvr_4 (copied, readonly)
			[7]: var2_result1_upvr_7 (copied, readonly)
			[8]: StartComponent_upvr (readonly)
			[9]: TryDeconstructComponent_upvr (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 15 start (CF ANALYSIS FAILED)
		if tbl_upvr[arg1_11] then return end
		local function _() -- Line 444, Named "IsInAncestorList"
			--[[ Upvalues[3]:
				[1]: arg1 (copied, readonly)
				[2]: var2_result1_upvr_6 (copied, readonly)
				[3]: arg1_11 (readonly)
			]]
			for _, v_4 in ipairs(arg1[var2_result1_upvr_6]) do
				if arg1_11:IsDescendantOf(v_4) then
					return true
				end
			end
			return false
		end
		tbl_upvr[arg1_11] = arg1[Symbol_result1_upvr]:Connect(arg1_11.AncestryChanged, function(arg1_12, arg2) -- Line 452
			--[[ Upvalues[8]:
				[1]: arg1 (copied, readonly)
				[2]: var2_result1_upvr_6 (copied, readonly)
				[3]: arg1_11 (readonly)
				[4]: var2_result1_upvr_2 (copied, readonly)
				[5]: var2_result1_upvr_4 (copied, readonly)
				[6]: var2_result1_upvr_7 (copied, readonly)
				[7]: StartComponent_upvr (copied, readonly)
				[8]: TryDeconstructComponent_upvr (copied, readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [18] 16. Error Block 16 start (CF ANALYSIS FAILED)
			if false then
				local var72_upvr = arg1_11
				if arg1[var2_result1_upvr_2][var72_upvr] then
				else
					local var73_upvw = (arg1[var2_result1_upvr_4][var72_upvr] or 0) + 1
					arg1[var2_result1_upvr_4][var72_upvr] = var73_upvw
					task.defer(function() -- Line 406
						--[[ Upvalues[7]:
							[1]: var72_upvr (readonly)
							[2]: var73_upvw (read and write)
							[3]: arg1 (copied, readonly)
							[4]: var2_result1_upvr_4 (copied, readonly)
							[5]: var2_result1_upvr_2 (copied, readonly)
							[6]: var2_result1_upvr_7 (copied, readonly)
							[7]: StartComponent_upvr (copied, readonly)
						]]
						local var75 = var72_upvr
						local var76 = var73_upvw
						local var77_upvr
						if arg1[var2_result1_upvr_4][var75] ~= var76 then
							var77_upvr = nil
						elseif arg1[var2_result1_upvr_4][var75] ~= var76 then
							var77_upvr = nil
						else
							var77_upvr = arg1:_instantiate(var75)
						end
						if not var77_upvr then
						else
							arg1[var2_result1_upvr_2][var72_upvr] = var77_upvr
							table.insert(arg1[var2_result1_upvr_7], var77_upvr)
							task.defer(function() -- Line 413
								--[[ Upvalues[5]:
									[1]: arg1 (copied, readonly)
									[2]: var2_result1_upvr_2 (copied, readonly)
									[3]: var72_upvr (copied, readonly)
									[4]: var77_upvr (readonly)
									[5]: StartComponent_upvr (copied, readonly)
								]]
								if arg1[var2_result1_upvr_2][var72_upvr] == var77_upvr then
									StartComponent_upvr(var77_upvr)
								end
							end)
						end
					end)
				end
			end
			-- KONSTANTERROR: [18] 16. Error Block 16 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [50] 47. Error Block 11 start (CF ANALYSIS FAILED)
			var72_upvr = TryDeconstructComponent_upvr
			var72_upvr(arg1_11)
			-- KONSTANTERROR: [50] 47. Error Block 11 end (CF ANALYSIS FAILED)
		end)
		local ipairs_result1_2, ipairs_result2, ipairs_result3_3 = ipairs(arg1[var2_result1_upvr_6])
		-- KONSTANTERROR: [0] 1. Error Block 15 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [41] 38. Error Block 6 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [41] 38. Error Block 6 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [34] 32. Error Block 19 start (CF ANALYSIS FAILED)
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [41.9]
		if nil then
			-- KONSTANTWARNING: GOTO [44] #40
		end
		-- KONSTANTERROR: [34] 32. Error Block 19 end (CF ANALYSIS FAILED)
	end
	local function InstanceTagged(arg1_13) -- Line 465
		--[[ Upvalues[1]:
			[1]: StartWatchingInstance_upvr (readonly)
		]]
		StartWatchingInstance_upvr(arg1_13)
	end
	arg1[Symbol_result1_upvr]:Connect(CollectionService_upvr:GetInstanceAddedSignal(arg1.Tag), InstanceTagged)
	arg1[Symbol_result1_upvr]:Connect(CollectionService_upvr:GetInstanceRemovedSignal(arg1.Tag), function(arg1_14) -- Line 469, Named "InstanceUntagged"
		--[[ Upvalues[2]:
			[1]: tbl_upvr (readonly)
			[2]: TryDeconstructComponent_upvr (readonly)
		]]
		local var83 = tbl_upvr[arg1_14]
		if var83 then
			var83:Disconnect()
			tbl_upvr[arg1_14] = nil
		end
		TryDeconstructComponent_upvr(arg1_14)
	end)
	for _, v_5 in ipairs(CollectionService_upvr:GetTagged(arg1.Tag)) do
		task.defer(InstanceTagged, v_5)
	end
end
function module_upvr.GetAll(arg1) -- Line 506
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr_7 (readonly)
	]]
	return arg1[var2_result1_upvr_7]
end
function module_upvr.FromInstance(arg1, arg2) -- Line 523
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr_2 (readonly)
	]]
	return arg1[var2_result1_upvr_2][arg2]
end
local Promise_upvr = require(script.Parent.Promise)
function module_upvr.WaitForInstance(arg1, arg2, arg3) -- Line 546
	--[[ Upvalues[1]:
		[1]: Promise_upvr (readonly)
	]]
	local any_FromInstance_result1_upvw = arg1:FromInstance(arg2)
	if any_FromInstance_result1_upvw then
		return Promise_upvr.resolve(any_FromInstance_result1_upvw)
	end
	local function var91(arg1_15) -- Line 551
		--[[ Upvalues[2]:
			[1]: arg2 (readonly)
			[2]: any_FromInstance_result1_upvw (read and write)
		]]
		local var90
		if arg1_15.Instance ~= arg2 then
			var90 = false
		else
			var90 = true
		end
		if var90 then
			any_FromInstance_result1_upvw = arg1_15
		end
		return var90
	end
	function var91() -- Line 558
		--[[ Upvalues[1]:
			[1]: any_FromInstance_result1_upvw (read and write)
		]]
		return any_FromInstance_result1_upvw
	end
	local var92 = var91
	if type(arg3) == "number" then
		var92 = arg3
	else
		var92 = 60
	end
	return Promise_upvr.fromEvent(arg1.Started, var91):andThen(var92):timeout(var92)
end
function module_upvr.Construct(arg1) -- Line 578
end
function module_upvr.Start(arg1) -- Line 595
end
function module_upvr.Stop(arg1) -- Line 615
end
function module_upvr.GetComponent(arg1, arg2) -- Line 634
	--[[ Upvalues[1]:
		[1]: var2_result1_upvr_2 (readonly)
	]]
	return arg2[var2_result1_upvr_2][arg1.Instance]
end
function module_upvr.Destroy(arg1) -- Line 719
	--[[ Upvalues[1]:
		[1]: Symbol_result1_upvr (readonly)
	]]
	arg1[Symbol_result1_upvr]:Destroy()
end
return module_upvr

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	local CollectionService_upvr = game:GetService("CollectionService")
	local var4_upvw
	local function _() -- Line 11, Named "CreateTaggedInstance"
		--[[ Upvalues[2]:
			[1]: CollectionService_upvr (readonly)
			[2]: var4_upvw (read and write)
		]]
		local Folder_5 = Instance.new("Folder")
		CollectionService_upvr:AddTag(Folder_5, "__KnitTestComponent__")
		Folder_5.Name = "ComponentTest"
		Folder_5.Archivable = false
		Folder_5.Parent = var4_upvw
		return Folder_5
	end
	local tbl = {}
	local function ShouldConstruct(arg1) -- Line 21
		return true
	end
	tbl.ShouldConstruct = ShouldConstruct
	local function Constructing(arg1) -- Line 24
		arg1.Data = 'a'
		arg1.DidHeartbeat = false
		arg1.DidStepped = false
		arg1.DidRenderStepped = false
	end
	tbl.Constructing = Constructing
	function tbl.Constructed(arg1) -- Line 30
		arg1.Data ..= 'c'
	end
	function tbl.Starting(arg1) -- Line 33
		arg1.Data ..= 'd'
	end
	function tbl.Started(arg1) -- Line 36
		arg1.Data ..= 'f'
	end
	function tbl.Stopping(arg1) -- Line 39
		arg1.Data ..= 'g'
	end
	function tbl.Stopped(arg1) -- Line 42
		arg1.Data ..= 'i'
	end
	local any_new_result1_upvr = Parent_upvr.new({
		Tag = "__KnitTestComponent__";
		Ancestors = {workspace, game:GetService("Lighting")};
		Extensions = {tbl};
	})
	local any_new_result1_upvr_3 = Parent_upvr.new({
		Tag = "__KnitTestComponent__";
	})
	function any_new_result1_upvr_3.GetData(arg1) -- Line 53
		return true
	end
	local function Construct(arg1) -- Line 57
		arg1.Data ..= 'b'
	end
	any_new_result1_upvr.Construct = Construct
	function any_new_result1_upvr.Start(arg1) -- Line 61
		--[[ Upvalues[1]:
			[1]: any_new_result1_upvr_3 (readonly)
		]]
		arg1.Another = arg1:GetComponent(any_new_result1_upvr_3)
		arg1.Data ..= 'e'
	end
	function any_new_result1_upvr.Stop(arg1) -- Line 66
		arg1.Data ..= 'h'
	end
	function any_new_result1_upvr.HeartbeatUpdate(arg1, arg2) -- Line 70
		arg1.DidHeartbeat = true
	end
	function any_new_result1_upvr.SteppedUpdate(arg1, arg2) -- Line 74
		arg1.DidStepped = true
	end
	function any_new_result1_upvr.RenderSteppedUpdate(arg1, arg2) -- Line 78
		arg1.DidRenderStepped = true
	end
	beforeAll(function() -- Line 82
		--[[ Upvalues[1]:
			[1]: var4_upvw (read and write)
		]]
		var4_upvw = Instance.new("Folder")
		var4_upvw.Name = "KnitComponentTest"
		var4_upvw.Archivable = false
		var4_upvw.Parent = workspace
	end)
	afterEach(function() -- Line 89
		--[[ Upvalues[1]:
			[1]: var4_upvw (read and write)
		]]
		var4_upvw:ClearAllChildren()
	end)
	afterAll(function() -- Line 93
		--[[ Upvalues[2]:
			[1]: var4_upvw (read and write)
			[2]: any_new_result1_upvr (readonly)
		]]
		var4_upvw:Destroy()
		any_new_result1_upvr:Destroy()
	end)
	local RunService_upvr = game:GetService("RunService")
	describe("Component", function() -- Line 98
		--[[ Upvalues[5]:
			[1]: any_new_result1_upvr (readonly)
			[2]: CollectionService_upvr (readonly)
			[3]: var4_upvw (read and write)
			[4]: RunService_upvr (readonly)
			[5]: Parent_upvr (readonly)
		]]
		it("should capture start and stop events", function() -- Line 99
			--[[ Upvalues[3]:
				[1]: any_new_result1_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
				[3]: var4_upvw (copied, read and write)
			]]
			local var19_upvw = 0
			local var20_upvw = 0
			local Folder_4 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_4, "__KnitTestComponent__")
			Folder_4.Name = "ComponentTest"
			Folder_4.Archivable = false
			Folder_4.Parent = var4_upvw
			task.wait()
			Folder_4:Destroy()
			task.wait()
			any_new_result1_upvr.Started:Connect(function() -- Line 102
				--[[ Upvalues[1]:
					[1]: var19_upvw (read and write)
				]]
				var19_upvw += 1
			end):Disconnect()
			any_new_result1_upvr.Stopped:Connect(function() -- Line 105
				--[[ Upvalues[1]:
					[1]: var20_upvw (read and write)
				]]
				var20_upvw += 1
			end):Disconnect()
			expect(var19_upvw).to.equal(1)
			expect(var20_upvw).to.equal(1)
		end)
		it("should be able to get component from the instance", function() -- Line 118
			--[[ Upvalues[3]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
			]]
			local Folder_13 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_13, "__KnitTestComponent__")
			Folder_13.Name = "ComponentTest"
			Folder_13.Archivable = false
			Folder_13.Parent = var4_upvw
			task.wait()
			expect(any_new_result1_upvr:FromInstance(Folder_13)).to.be.ok()
		end)
		it("should be able to get all component instances existing", function() -- Line 125
			--[[ Upvalues[3]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
			]]
			local table_create_result1 = table.create(3)
			local Folder_14 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_14, "__KnitTestComponent__")
			Folder_14.Name = "ComponentTest"
			Folder_14.Archivable = false
			Folder_14.Parent = var4_upvw
			table_create_result1[1] = Folder_14
			local Folder_7 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_7, "__KnitTestComponent__")
			Folder_7.Name = "ComponentTest"
			Folder_7.Archivable = false
			Folder_7.Parent = var4_upvw
			table_create_result1[2] = Folder_7
			local Folder_2 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_2, "__KnitTestComponent__")
			Folder_2.Name = "ComponentTest"
			Folder_2.Archivable = false
			Folder_2.Parent = var4_upvw
			table_create_result1[3] = Folder_2
			task.wait()
			local any_GetAll_result1 = any_new_result1_upvr:GetAll()
			expect(any_GetAll_result1).to.be.a("table")
			expect(#any_GetAll_result1).to.equal(3)
			for _, v in ipairs(any_GetAll_result1) do
				expect(table.find(table_create_result1, v.Instance)).to.be.ok()
			end
		end)
		it("should call lifecycle methods and extension functions", function() -- Line 141
			--[[ Upvalues[4]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
				[4]: RunService_upvr (copied, readonly)
			]]
			local Folder_9 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_9, "__KnitTestComponent__")
			Folder_9.Name = "ComponentTest"
			Folder_9.Archivable = false
			Folder_9.Parent = var4_upvw
			local var41 = Folder_9
			task.wait(0.2)
			local any_FromInstance_result1_4 = any_new_result1_upvr:FromInstance(var41)
			expect(any_FromInstance_result1_4).to.be.ok()
			expect(any_FromInstance_result1_4.Data).to.equal("abcdef")
			expect(any_FromInstance_result1_4.DidHeartbeat).to.equal(true)
			expect(any_FromInstance_result1_4.DidStepped).to.equal(RunService_upvr:IsRunning())
			expect(any_FromInstance_result1_4.DidRenderStepped).to.never.equal(true)
			var41:Destroy()
			task.wait()
			expect(any_FromInstance_result1_4.Data).to.equal("abcdefghi")
		end)
		it("should get another component linked to the same instance", function() -- Line 155
			--[[ Upvalues[3]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: var4_upvw (copied, read and write)
				[3]: any_new_result1_upvr (copied, readonly)
			]]
			local Folder_12 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_12, "__KnitTestComponent__")
			Folder_12.Name = "ComponentTest"
			Folder_12.Archivable = false
			Folder_12.Parent = var4_upvw
			task.wait()
			local any_FromInstance_result1_3 = any_new_result1_upvr:FromInstance(Folder_12)
			expect(any_FromInstance_result1_3).to.be.ok()
			expect(any_FromInstance_result1_3.Another).to.be.ok()
			expect(any_FromInstance_result1_3.Another:GetData()).to.equal(true)
		end)
		it("should use extension to decide whether or not to construct", function() -- Line 164
			--[[ Upvalues[3]:
				[1]: Parent_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
				[3]: var4_upvw (copied, read and write)
			]]
			local tbl_upvr = {
				c = true;
			}
			local function ShouldConstruct(arg1) -- Line 166
				--[[ Upvalues[1]:
					[1]: tbl_upvr (readonly)
				]]
				return tbl_upvr.c
			end
			tbl_upvr.ShouldConstruct = ShouldConstruct
			local tbl_upvr_3 = {
				c = true;
			}
			local function ShouldConstruct(arg1) -- Line 171
				--[[ Upvalues[1]:
					[1]: tbl_upvr_3 (readonly)
				]]
				return tbl_upvr_3.c
			end
			tbl_upvr_3.ShouldConstruct = ShouldConstruct
			local tbl_upvr_2 = {
				c = true;
			}
			function tbl_upvr_2.ShouldConstruct(arg1) -- Line 176
				--[[ Upvalues[1]:
					[1]: tbl_upvr_2 (readonly)
				]]
				return tbl_upvr_2.c
			end
			local any_new_result1_upvr_4 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr};
			})
			local any_new_result1_upvr_5 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr, tbl_upvr_3};
			})
			local any_new_result1_upvr_2 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr, tbl_upvr_3, tbl_upvr_2};
			})
			local function _(arg1, arg2, arg3) -- Line 184, Named "SetE"
				--[[ Upvalues[3]:
					[1]: tbl_upvr (readonly)
					[2]: tbl_upvr_3 (readonly)
					[3]: tbl_upvr_2 (readonly)
				]]
				tbl_upvr.c = arg1
				tbl_upvr_3.c = arg2
				tbl_upvr_2.c = arg3
			end
			local function Check_upvr(arg1, arg2, arg3) -- Line 190, Named "Check"
				local any_FromInstance_result1_2 = arg2:FromInstance(arg1)
				if arg3 then
					expect(any_FromInstance_result1_2).to.be.ok()
				else
					expect(any_FromInstance_result1_2).to.never.be.ok()
				end
			end
			local function _(arg1, arg2, arg3) -- Line 199, Named "CreateAndCheckAll"
				--[[ Upvalues[6]:
					[1]: CollectionService_upvr (copied, readonly)
					[2]: var4_upvw (copied, read and write)
					[3]: Check_upvr (readonly)
					[4]: any_new_result1_upvr_4 (readonly)
					[5]: any_new_result1_upvr_5 (readonly)
					[6]: any_new_result1_upvr_2 (readonly)
				]]
				local Folder_3 = Instance.new("Folder")
				CollectionService_upvr:AddTag(Folder_3, "__KnitTestComponent__")
				Folder_3.Name = "ComponentTest"
				Folder_3.Archivable = false
				Folder_3.Parent = var4_upvw
				local var61 = Folder_3
				task.wait()
				Check_upvr(var61, any_new_result1_upvr_4, arg1)
				Check_upvr(var61, any_new_result1_upvr_5, arg2)
				Check_upvr(var61, any_new_result1_upvr_2, arg3)
			end
			tbl_upvr.c = true
			tbl_upvr_3.c = true
			tbl_upvr_2.c = true
			local Folder = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder, "__KnitTestComponent__")
			Folder.Name = "ComponentTest"
			Folder.Archivable = false
			Folder.Parent = var4_upvw
			local var63 = Folder
			task.wait()
			Check_upvr(var63, any_new_result1_upvr_4, true)
			Check_upvr(var63, any_new_result1_upvr_5, true)
			Check_upvr(var63, any_new_result1_upvr_2, true)
			tbl_upvr.c = false
			tbl_upvr_3.c = false
			tbl_upvr_2.c = false
			local Folder_11 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_11, "__KnitTestComponent__")
			Folder_11.Name = "ComponentTest"
			Folder_11.Archivable = false
			Folder_11.Parent = var4_upvw
			local var65 = Folder_11
			task.wait()
			Check_upvr(var65, any_new_result1_upvr_4, false)
			Check_upvr(var65, any_new_result1_upvr_5, false)
			Check_upvr(var65, any_new_result1_upvr_2, false)
			tbl_upvr.c = true
			tbl_upvr_3.c = false
			tbl_upvr_2.c = true
			local Folder_8 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_8, "__KnitTestComponent__")
			Folder_8.Name = "ComponentTest"
			Folder_8.Archivable = false
			Folder_8.Parent = var4_upvw
			local var67 = Folder_8
			task.wait()
			Check_upvr(var67, any_new_result1_upvr_4, true)
			Check_upvr(var67, any_new_result1_upvr_5, false)
			Check_upvr(var67, any_new_result1_upvr_2, false)
			tbl_upvr.c = false
			tbl_upvr_3.c = false
			tbl_upvr_2.c = true
			local Folder_10 = Instance.new("Folder")
			CollectionService_upvr:AddTag(Folder_10, "__KnitTestComponent__")
			Folder_10.Name = "ComponentTest"
			Folder_10.Archivable = false
			Folder_10.Parent = var4_upvw
			local var69 = Folder_10
			task.wait()
			Check_upvr(var69, any_new_result1_upvr_4, false)
			Check_upvr(var69, any_new_result1_upvr_5, false)
			Check_upvr(var69, any_new_result1_upvr_2, false)
		end)
		it("should decide whether or not to use extend", function() -- Line 224
			--[[ Upvalues[3]:
				[1]: Parent_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
				[3]: var4_upvw (copied, read and write)
			]]
			local tbl_upvr_5 = {
				extend = true;
			}
			local function ShouldExtend(arg1) -- Line 226
				--[[ Upvalues[1]:
					[1]: tbl_upvr_5 (readonly)
				]]
				return tbl_upvr_5.extend
			end
			tbl_upvr_5.ShouldExtend = ShouldExtend
			local function Constructing(arg1) -- Line 229
				arg1.E1 = true
			end
			tbl_upvr_5.Constructing = Constructing
			local tbl_upvr_4 = {
				extend = true;
			}
			function tbl_upvr_4.ShouldExtend(arg1) -- Line 234
				--[[ Upvalues[1]:
					[1]: tbl_upvr_4 (readonly)
				]]
				return tbl_upvr_4.extend
			end
			function tbl_upvr_4.Constructing(arg1) -- Line 237
				arg1.E2 = true
			end
			local any_new_result1_upvr_6 = Parent_upvr.new({
				Tag = "__KnitTestComponent__";
				Extensions = {tbl_upvr_5, tbl_upvr_4};
			})
			local function SetAndCheck(arg1, arg2) -- Line 243
				--[[ Upvalues[5]:
					[1]: tbl_upvr_5 (readonly)
					[2]: tbl_upvr_4 (readonly)
					[3]: CollectionService_upvr (copied, readonly)
					[4]: var4_upvw (copied, read and write)
					[5]: any_new_result1_upvr_6 (readonly)
				]]
				tbl_upvr_5.extend = arg1
				tbl_upvr_4.extend = arg2
				local Folder_6 = Instance.new("Folder")
				CollectionService_upvr:AddTag(Folder_6, "__KnitTestComponent__")
				Folder_6.Name = "ComponentTest"
				Folder_6.Archivable = false
				Folder_6.Parent = var4_upvw
				task.wait()
				local any_FromInstance_result1 = any_new_result1_upvr_6:FromInstance(Folder_6)
				expect(any_FromInstance_result1).to.be.ok()
				if arg1 then
					expect(any_FromInstance_result1.E1).to.equal(true)
				else
					expect(any_FromInstance_result1.E1).to.never.be.ok()
				end
				if arg2 then
					expect(any_FromInstance_result1.E2).to.equal(true)
				else
					expect(any_FromInstance_result1.E2).to.never.be.ok()
				end
			end
			SetAndCheck(true, true)
			SetAndCheck(false, false)
			SetAndCheck(true, false)
			SetAndCheck(false, true)
		end)
		it("should allow yielding within construct", function() -- Line 268
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: CollectionService_upvr (copied, readonly)
			]]
			local var80_upvw = 0
			Parent_upvr.new({
				Tag = "CustomTag";
			}).Construct = function(arg1) -- Line 275, Named "Construct"
				--[[ Upvalues[1]:
					[1]: var80_upvw (read and write)
				]]
				var80_upvw += 1
				task.wait(0.5)
			end
			local Part = Instance.new("Part")
			Part.Anchored = true
			Part.Parent = game:GetService("ReplicatedStorage")
			CollectionService_upvr:AddTag(Part, "CustomTag")
			local clone = Part:Clone()
			clone.Parent = workspace
			task.wait(0.6)
			expect(var80_upvw).to.equal(1)
			Part:Destroy()
			clone:Destroy()
		end)
		it("should wait for instance", function() -- Line 294
			--[[ Upvalues[2]:
				[1]: CollectionService_upvr (copied, readonly)
				[2]: any_new_result1_upvr (copied, readonly)
			]]
			local Part_upvr = Instance.new("Part")
			Part_upvr.Anchored = true
			Part_upvr.Parent = workspace
			task.delay(0.1, function() -- Line 298
				--[[ Upvalues[2]:
					[1]: CollectionService_upvr (copied, readonly)
					[2]: Part_upvr (readonly)
				]]
				CollectionService_upvr:AddTag(Part_upvr, "__KnitTestComponent__")
			end)
			local any_await_result1, any_await_result2 = any_new_result1_upvr:WaitForInstance(Part_upvr):timeout(1):await()
			expect(any_await_result1).to.equal(true)
			expect(any_await_result2).to.be.a("table")
			expect(any_await_result2.Instance).to.equal(Part_upvr)
			Part_upvr:Destroy()
		end)
	end)
end

Script name: enum-list
  - Script: 


local newproxy_result1_upvr_2 = newproxy()
local newproxy_result1_upvr = newproxy()
local function _(arg1, arg2, arg3) -- Line 25, Named "CreateEnumItem"
	local module = {}
	module.Name = arg1
	module.Value = arg2
	module.EnumType = arg3
	table.freeze(module)
	return module
end
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new(arg1, arg2) -- Line 59
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: newproxy_result1_upvr_2 (readonly)
		[3]: newproxy_result1_upvr (readonly)
	]]
	local var9
	if type(arg1) ~= "string" then
		var9 = false
	else
		var9 = true
	end
	assert(var9, "Name string required")
	if type(arg2) ~= "table" then
		var9 = false
	else
		var9 = true
	end
	assert(var9, "Enums table required")
	var9 = {}
	local setmetatable_result1 = setmetatable(var9, module_upvr)
	var9 = newproxy_result1_upvr_2
	setmetatable_result1[var9] = {}
	var9 = newproxy_result1_upvr
	setmetatable_result1[var9] = arg1
	var9 = ipairs(arg2)
	local ipairs_result1, ipairs_result2, ipairs_result3 = ipairs(arg2)
	for i, v in ipairs_result1, ipairs_result2, ipairs_result3 do
		local var14
		if type(v) ~= "string" then
			var14 = false
		else
			var14 = true
		end
		assert(var14, "Enum name must be a string")
		var14 = {}
		var14.Name = v
		var14.Value = i
		var14.EnumType = setmetatable_result1
		table.freeze(var14)
		local var15 = var14
		setmetatable_result1[v] = var15
		var14 = table.insert
		var14(setmetatable_result1[newproxy_result1_upvr_2], var15)
	end
	ipairs_result1 = table.freeze
	ipairs_result1(setmetatable_result1)
	return setmetatable_result1
end
function module_upvr.BelongsTo(arg1, arg2) -- Line 80
	local var16 = false
	if type(arg2) == "table" then
		if arg2.EnumType ~= arg1 then
			var16 = false
		else
			var16 = true
		end
	end
	return var16
end
function module_upvr.GetEnumItems(arg1) -- Line 89
	--[[ Upvalues[1]:
		[1]: newproxy_result1_upvr_2 (readonly)
	]]
	return arg1[newproxy_result1_upvr_2]
end
function module_upvr.GetName(arg1) -- Line 98
	--[[ Upvalues[1]:
		[1]: newproxy_result1_upvr (readonly)
	]]
	return arg1[newproxy_result1_upvr]
end
return module_upvr

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Constructor", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a new enumlist", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 6
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new("Test", {"ABC", "XYZ"})
			end).never.to.throw()
		end)
		it("should fail to create a new enumlist with no name", function() -- Line 11
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 12
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new(nil, {"ABC", "XYZ"})
			end).to.throw()
		end)
		it("should fail to create a new enumlist with no enums", function() -- Line 17
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 18
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new("Test")
			end).to.throw()
		end)
		it("should fail to create a new enumlist with non string enums", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 24
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.new("Test", {true, false, 32, "ABC"})
			end).to.throw()
		end)
	end)
	describe("Access", function() -- Line 30
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be able to access enum items", function() -- Line 31
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_upvr_2 = Parent_upvr.new("Test", {"ABC", "XYZ"})
			expect(function() -- Line 33
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr_2 (readonly)
				]]
			end).never.to.throw()
			expect(any_new_result1_upvr_2:BelongsTo(any_new_result1_upvr_2.ABC)).to.equal(true)
		end)
		it("should throw if trying to modify the enumlist", function() -- Line 39
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_upvr_3 = Parent_upvr.new("Test", {"ABC", "XYZ"})
			expect(function() -- Line 41
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr_3 (readonly)
				]]
				any_new_result1_upvr_3.Hello = 32
			end).to.throw()
			expect(function() -- Line 44
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr_3 (readonly)
				]]
				any_new_result1_upvr_3.ABC = 32
			end).to.throw()
		end)
		it("should throw if trying to modify an enumitem", function() -- Line 49
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1_upvr = Parent_upvr.new("Test", {"ABC", "XYZ"})
			expect(function() -- Line 51
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr (readonly)
				]]
				any_new_result1_upvr.ABC.XYZ = 32
			end).to.throw()
			expect(function() -- Line 55
				--[[ Upvalues[1]:
					[1]: any_new_result1_upvr (readonly)
				]]
				any_new_result1_upvr.ABC.Name = "NewName"
			end).to.throw()
		end)
		it("should get the name", function() -- Line 61
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.new("Test", {"ABC", "XYZ"}):GetName()).to.equal("Test")
		end)
	end)
	describe("Get Items", function() -- Line 68
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be able to get all enum items", function() -- Line 69
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_new_result1 = Parent_upvr.new("Test", {"ABC", "XYZ"})
			local any_GetEnumItems_result1 = any_new_result1:GetEnumItems()
			expect(any_GetEnumItems_result1).to.be.a("table")
			expect(#any_GetEnumItems_result1).to.equal(2)
			for i, v in ipairs(any_GetEnumItems_result1) do
				expect(v).to.be.a("table")
				expect(v.Name).to.be.a("string")
				expect(v.Value).to.be.a("number")
				expect(v.Value).to.equal(i)
				expect(v.EnumType).to.equal(any_new_result1)
			end
		end)
	end)
end

Script name: Signal
  - Script: 


return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

Script name: Trove
  - Script: 


return require(script.Parent.Parent["sleitnick_trove@0.4.2"].trove)

Script name: input
  - Script: 


return {
	PreferredInput = require(script.PreferredInput);
	Mouse = require(script.Mouse);
	Keyboard = require(script.Keyboard);
	Touch = require(script.Touch);
	Gamepad = require(script.Gamepad);
}

Script name: Gamepad
  - Script: 


local UserInputService_upvr = game:GetService("UserInputService")
local HapticService_upvr = game:GetService("HapticService")
local GuiService_upvr = game:GetService("GuiService")
local RunService_upvr = game:GetService("RunService")
local function _(arg1, arg2) -- Line 13, Named "ApplyDeadzone"
	if math.abs(arg1) < arg2 then
		return 0
	end
	return (math.abs(arg1) - arg2) / (1 - arg2) * math.sign(arg1)
end
local function GetActiveGamepad_upvr() -- Line 20, Named "GetActiveGamepad"
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local any_GetNavigationGamepads_result1 = UserInputService_upvr:GetNavigationGamepads()
	local var10
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [9] 8. Error Block 30 start (CF ANALYSIS FAILED)
	for _, v in ipairs(any_GetNavigationGamepads_result1) do
		if var10 == nil or v.Value < var10.Value then
			var10 = v
		end
	end
	if var10 and not UserInputService_upvr:GetGamepadConnected(var10) then
		var10 = nil
	end
	do
		return var10
	end
	-- KONSTANTERROR: [9] 8. Error Block 30 end (CF ANALYSIS FAILED)
end
local function _(arg1, arg2) -- Line 43, Named "HeartbeatDelay"
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local time_result1_upvr_2 = time()
	local var16_upvw
	var16_upvw = RunService_upvr.Heartbeat:Connect(function() -- Line 46
		--[[ Upvalues[4]:
			[1]: time_result1_upvr_2 (readonly)
			[2]: arg1 (readonly)
			[3]: var16_upvw (read and write)
			[4]: arg2 (readonly)
		]]
		if arg1 <= time() - time_result1_upvr_2 then
			var16_upvw:Disconnect()
			arg2()
		end
	end)
	return var16_upvw
end
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new(arg1) -- Line 232
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._trove = Trove_upvr.new()
	setmetatable_result1._gamepadTrove = setmetatable_result1._trove:Construct(Trove_upvr)
	setmetatable_result1.ButtonDown = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.ButtonUp = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.Connected = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.Disconnected = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.GamepadChanged = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.DefaultDeadzone = 0.05
	setmetatable_result1.SupportsVibration = false
	setmetatable_result1.State = {}
	setmetatable_result1:_setupGamepad(arg1)
	setmetatable_result1:_setupMotors()
	return setmetatable_result1
end
function module_upvr._setupActiveGamepad(arg1, arg2) -- Line 249
	--[[ Upvalues[2]:
		[1]: HapticService_upvr (readonly)
		[2]: UserInputService_upvr (readonly)
	]]
	local _gamepad = arg1._gamepad
	if arg2 == _gamepad then
	else
		arg1._gamepadTrove:Clean()
		local clear = table.clear
		clear(arg1.State)
		if arg2 then
			clear = HapticService_upvr:IsVibrationSupported(arg2)
		else
			clear = false
		end
		arg1.SupportsVibration = clear
		arg1._gamepad = arg2
		if not arg2 then
			arg1.Disconnected:Fire()
			arg1.GamepadChanged:Fire(nil)
			return
		end
		for _, v_4 in ipairs(UserInputService_upvr:GetGamepadState(arg2)) do
			arg1.State[v_4.KeyCode] = v_4
		end
		arg1._gamepadTrove:Add(arg1, "StopMotors")
		arg1._gamepadTrove:Connect(UserInputService_upvr.InputBegan, function(arg1_2, arg2_2) -- Line 274
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: arg1 (readonly)
			]]
			if arg1_2.UserInputType == arg2 then
				arg1.ButtonDown:Fire(arg1_2.KeyCode, arg2_2)
			end
		end)
		arg1._gamepadTrove:Connect(UserInputService_upvr.InputEnded, function(arg1_3, arg2_3) -- Line 280
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: arg1 (readonly)
			]]
			if arg1_3.UserInputType == arg2 then
				arg1.ButtonUp:Fire(arg1_3.KeyCode, arg2_3)
			end
		end)
		if _gamepad == nil then
			arg1.Connected:Fire()
		end
		arg1.GamepadChanged:Fire(arg2)
	end
end
function module_upvr._setupGamepad(arg1, arg2) -- Line 292
	--[[ Upvalues[2]:
		[1]: UserInputService_upvr (readonly)
		[2]: GetActiveGamepad_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 23. Error Block 3 start (CF ANALYSIS FAILED)
	arg1:_setupActiveGamepad(arg2)
	do
		return
	end
	-- KONSTANTERROR: [29] 23. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [34] 27. Error Block 4 start (CF ANALYSIS FAILED)
	local function CheckToSetupActive() -- Line 314
		--[[ Upvalues[2]:
			[1]: GetActiveGamepad_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		local GetActiveGamepad_upvr_result1 = GetActiveGamepad_upvr()
		if GetActiveGamepad_upvr_result1 ~= arg1._gamepad then
			arg1:_setupActiveGamepad(GetActiveGamepad_upvr_result1)
		end
	end
	arg1._trove:Connect(UserInputService_upvr.GamepadConnected, CheckToSetupActive)
	arg1._trove:Connect(UserInputService_upvr.GamepadDisconnected, CheckToSetupActive)
	arg1:_setupActiveGamepad(GetActiveGamepad_upvr())
	-- KONSTANTERROR: [34] 27. Error Block 4 end (CF ANALYSIS FAILED)
end
function module_upvr._setupMotors(arg1) -- Line 327
	arg1._setMotorIds = {}
	for _, v_2 in ipairs(Enum.VibrationMotor:GetEnumItems()) do
		arg1._setMotorIds[v_2] = 0
	end
end
function module_upvr.GetThumbstick(arg1, arg2, arg3) -- Line 349
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local Position = arg1.State[arg2].Position
	local var39 = arg3
	if not var39 then
		var39 = arg1.DefaultDeadzone
	end
	local X = Position.X
	if math.abs(X) < var39 then
	else
	end
	local Y = Position.Y
	if math.abs(Y) < var39 then
	else
	end
	return Vector2.new((math.abs(X) - var39) / (1 - var39) * math.sign(X), (math.abs(Y) - var39) / (1 - var39) * math.sign(Y))
end
function module_upvr.GetTrigger(arg1, arg2, arg3) -- Line 371
	local Z = arg1.State[arg2].Position.Z
	local var43 = arg3
	if not var43 then
		var43 = arg1.DefaultDeadzone
	end
	if math.abs(Z) < var43 then
		return 0
	end
	return (math.abs(Z) - var43) / (1 - var43) * math.sign(Z)
end
function module_upvr.IsButtonDown(arg1, arg2) -- Line 389
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsGamepadButtonDown(arg1._gamepad, arg2)
end
function module_upvr.IsMotorSupported(arg1, arg2) -- Line 408
	--[[ Upvalues[1]:
		[1]: HapticService_upvr (readonly)
	]]
	return HapticService_upvr:IsMotorSupported(arg1._gamepad, arg2)
end
function module_upvr.SetMotor(arg1, arg2, arg3) -- Line 422
	--[[ Upvalues[1]:
		[1]: HapticService_upvr (readonly)
	]]
	local _setMotorIds = arg1._setMotorIds
	_setMotorIds[arg2] += 1
	HapticService_upvr:SetMotor(arg1._gamepad, arg2, arg3)
	return arg1._setMotorIds[arg2]
end
function module_upvr.PulseMotor(arg1, arg2, arg3, arg4) -- Line 454
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local any_SetMotor_result1_upvr = arg1:SetMotor(arg2, arg3)
	local function var45_upvr() -- Line 456
		--[[ Upvalues[3]:
			[1]: arg1 (readonly)
			[2]: arg2 (readonly)
			[3]: any_SetMotor_result1_upvr (readonly)
		]]
		if arg1._setMotorIds[arg2] ~= any_SetMotor_result1_upvr then
		else
			arg1:StopMotor(arg2)
		end
	end
	local time_result1_upvr = time()
	local var49_upvw
	var49_upvw = RunService_upvr.Heartbeat:Connect(function() -- Line 46
		--[[ Upvalues[4]:
			[1]: time_result1_upvr (readonly)
			[2]: arg4 (readonly)
			[3]: var49_upvw (read and write)
			[4]: var45_upvr (readonly)
		]]
		if arg4 <= time() - time_result1_upvr then
			var49_upvw:Disconnect()
			var45_upvr()
		end
	end)
	var45_upvr = arg1._gamepadTrove:Add
	var45_upvr(var49_upvw)
end
function module_upvr.StopMotor(arg1, arg2) -- Line 476
	arg1:SetMotor(arg2, 0)
end
function module_upvr.StopMotors(arg1) -- Line 490
	for _, v_3 in ipairs(Enum.VibrationMotor:GetEnumItems()) do
		if arg1:IsMotorSupported(v_3) then
			arg1:StopMotor(v_3)
		end
	end
end
function module_upvr.IsConnected(arg1) -- Line 502
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	if arg1._gamepad then
		return UserInputService_upvr:GetGamepadConnected(arg1._gamepad)
	end
	return false
end
function module_upvr.GetUserInputType(arg1) -- Line 511
	return arg1._gamepad
end
function module_upvr.SetAutoSelectGui(arg1, arg2) -- Line 533
	--[[ Upvalues[1]:
		[1]: GuiService_upvr (readonly)
	]]
	GuiService_upvr.AutoSelectGuiEnabled = arg2
end
function module_upvr.IsAutoSelectGuiEnabled(arg1) -- Line 542
	--[[ Upvalues[1]:
		[1]: GuiService_upvr (readonly)
	]]
	return GuiService_upvr.AutoSelectGuiEnabled
end
function module_upvr.Destroy(arg1) -- Line 549
	arg1._trove:Destroy()
end
return module_upvr

Script name: Keyboard
  - Script: 


local UserInputService_upvr = game:GetService("UserInputService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new() -- Line 55
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._trove = Trove_upvr.new()
	setmetatable_result1.KeyDown = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1.KeyUp = setmetatable_result1._trove:Construct(Signal_upvr)
	setmetatable_result1:_setup()
	return setmetatable_result1
end
function module_upvr.IsKeyDown(arg1, arg2) -- Line 72
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsKeyDown(arg2)
end
function module_upvr.AreKeysDown(arg1, arg2, arg3) -- Line 84
	local any_IsKeyDown_result1 = arg1:IsKeyDown(arg2)
	if any_IsKeyDown_result1 then
		any_IsKeyDown_result1 = arg1:IsKeyDown(arg3)
	end
	return any_IsKeyDown_result1
end
function module_upvr.AreEitherKeysDown(arg1, arg2, arg3) -- Line 99
	local any_IsKeyDown_result1_2 = arg1:IsKeyDown(arg2)
	if not any_IsKeyDown_result1_2 then
		any_IsKeyDown_result1_2 = arg1:IsKeyDown(arg3)
	end
	return any_IsKeyDown_result1_2
end
function module_upvr._setup(arg1) -- Line 103
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	arg1._trove:Connect(UserInputService_upvr.InputBegan, function(arg1_2, arg2) -- Line 104
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg2 then
		elseif arg1_2.UserInputType == Enum.UserInputType.Keyboard then
			arg1.KeyDown:Fire(arg1_2.KeyCode)
		end
	end)
	arg1._trove:Connect(UserInputService_upvr.InputEnded, function(arg1_3, arg2) -- Line 113
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		if arg2 then
		elseif arg1_3.UserInputType == Enum.UserInputType.Keyboard then
			arg1.KeyUp:Fire(arg1_3.KeyCode)
		end
	end)
end
function module_upvr.Destroy(arg1) -- Line 126
	arg1._trove:Destroy()
end
return module_upvr

Script name: Mouse
  - Script: 


local UserInputService_upvr = game:GetService("UserInputService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new() -- Line 63
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
		[4]: UserInputService_upvr (readonly)
	]]
	local setmetatable_result1_upvr = setmetatable({}, module_upvr)
	setmetatable_result1_upvr._trove = Trove_upvr.new()
	setmetatable_result1_upvr.LeftDown = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.LeftUp = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.RightDown = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.RightUp = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr.Scrolled = setmetatable_result1_upvr._trove:Construct(Signal_upvr)
	setmetatable_result1_upvr._trove:Connect(UserInputService_upvr.InputBegan, function(arg1, arg2) -- Line 74
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if arg2 then
		else
			if arg1.UserInputType == Enum.UserInputType.MouseButton1 then
				setmetatable_result1_upvr.LeftDown:Fire()
				return
			end
			if arg1.UserInputType == Enum.UserInputType.MouseButton2 then
				setmetatable_result1_upvr.RightDown:Fire()
			end
		end
	end)
	setmetatable_result1_upvr._trove:Connect(UserInputService_upvr.InputEnded, function(arg1, arg2) -- Line 85
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if arg2 then
		else
			if arg1.UserInputType == Enum.UserInputType.MouseButton1 then
				setmetatable_result1_upvr.LeftUp:Fire()
				return
			end
			if arg1.UserInputType == Enum.UserInputType.MouseButton2 then
				setmetatable_result1_upvr.RightUp:Fire()
			end
		end
	end)
	setmetatable_result1_upvr._trove:Connect(UserInputService_upvr.InputChanged, function(arg1, arg2) -- Line 96
		--[[ Upvalues[1]:
			[1]: setmetatable_result1_upvr (readonly)
		]]
		if arg2 then
		elseif arg1.UserInputType == Enum.UserInputType.MouseWheel then
			setmetatable_result1_upvr.Scrolled:Fire(arg1.Position.Z)
		end
	end)
	return setmetatable_result1_upvr
end
function module_upvr.IsLeftDown(arg1) -- Line 111
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)
end
function module_upvr.IsRightDown(arg1) -- Line 118
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)
end
function module_upvr.GetPosition(arg1) -- Line 125
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:GetMouseLocation()
end
function module_upvr.GetDelta(arg1) -- Line 139
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr:GetMouseDelta()
end
function module_upvr.GetRay(arg1, arg2) -- Line 147
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	local var9 = arg2
	if not var9 then
		var9 = UserInputService_upvr:GetMouseLocation()
	end
	return workspace.CurrentCamera:ViewportPointToRay(var9.X, var9.Y)
end
function module_upvr.Raycast(arg1, arg2, arg3, arg4) -- Line 174
	local any_GetRay_result1_2 = arg1:GetRay(arg4)
	return workspace:Raycast(any_GetRay_result1_2.Origin, any_GetRay_result1_2.Direction * (arg3 or 1000), arg2)
end
function module_upvr.Project(arg1, arg2, arg3) -- Line 206
	local any_GetRay_result1 = arg1:GetRay(arg3)
	return any_GetRay_result1.Origin + any_GetRay_result1.Direction.Unit * (arg2 or 1000)
end
function module_upvr.Lock(arg1) -- Line 220
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
end
function module_upvr.LockCenter(arg1) -- Line 231
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.LockCenter
end
function module_upvr.Unlock(arg1) -- Line 238
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	UserInputService_upvr.MouseBehavior = Enum.MouseBehavior.Default
end
function module_upvr.Destroy(arg1) -- Line 245
	arg1._trove:Destroy()
end
return module_upvr

Script name: PreferredInput
  - Script: 


local UserInputService = game:GetService("UserInputService")
local tbl_upvr = {}
local tbl = {
	Current = "MouseKeyboard";
}
local var4_upvw
function tbl.Observe(arg1) -- Line 81
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: var4_upvw (read and write)
	]]
	if table.find(tbl_upvr, arg1) then
		error("function already subscribed", 2)
	end
	table.insert(tbl_upvr, arg1)
	task.spawn(arg1, var4_upvw.Current)
	return function() -- Line 87
		--[[ Upvalues[2]:
			[1]: tbl_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		local table_find_result1 = table.find(tbl_upvr, arg1)
		if table_find_result1 then
			local len = #tbl_upvr
			tbl_upvr[table_find_result1] = tbl_upvr[len]
			tbl_upvr[len] = nil
		end
	end
end
var4_upvw = tbl
local var8_upvw = var4_upvw
local function SetPreferred_upvr(arg1) -- Line 97, Named "SetPreferred"
	--[[ Upvalues[2]:
		[1]: var8_upvw (read and write)
		[2]: tbl_upvr (readonly)
	]]
	if arg1 == var8_upvw.Current then
	else
		var8_upvw.Current = arg1
		for _, v in ipairs(tbl_upvr) do
			task.spawn(v, arg1)
		end
	end
end
local Touch_upvr = Enum.UserInputType.Touch
local Keyboard_upvr = Enum.UserInputType.Keyboard
local function DeterminePreferred(arg1) -- Line 107
	--[[ Upvalues[3]:
		[1]: Touch_upvr (readonly)
		[2]: SetPreferred_upvr (readonly)
		[3]: Keyboard_upvr (readonly)
	]]
	if arg1 == Touch_upvr then
		SetPreferred_upvr("Touch")
	else
		if arg1 == Keyboard_upvr or arg1.Name:sub(1, 5) == "Mouse" then
			SetPreferred_upvr("MouseKeyboard")
			return
		end
		if arg1.Name:sub(1, 7) == "Gamepad" then
			SetPreferred_upvr("Gamepad")
		end
	end
end
DeterminePreferred(UserInputService:GetLastInputType())
UserInputService.LastInputTypeChanged:Connect(DeterminePreferred)
return var8_upvw

Script name: Touch
  - Script: 


local UserInputService_upvr = game:GetService("UserInputService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
function module_upvr.new() -- Line 87
	--[[ Upvalues[4]:
		[1]: module_upvr (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
		[4]: UserInputService_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._trove = Trove_upvr.new()
	setmetatable_result1.TouchTap = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchTap)
	setmetatable_result1.TouchTapInWorld = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchTapInWorld)
	setmetatable_result1.TouchMoved = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchMoved)
	setmetatable_result1.TouchLongPress = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchLongPress)
	setmetatable_result1.TouchPan = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchPan)
	setmetatable_result1.TouchPinch = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchPinch)
	setmetatable_result1.TouchRotate = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchRotate)
	setmetatable_result1.TouchSwipe = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchSwipe)
	setmetatable_result1.TouchStarted = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchStarted)
	setmetatable_result1.TouchEnded = setmetatable_result1._trove:Construct(Signal_upvr.Wrap, UserInputService_upvr.TouchEnded)
	return setmetatable_result1
end
function module_upvr.IsTouchEnabled(arg1) -- Line 109
	--[[ Upvalues[1]:
		[1]: UserInputService_upvr (readonly)
	]]
	return UserInputService_upvr.TouchEnabled
end
function module_upvr.Destroy(arg1) -- Line 116
	arg1._trove:Destroy()
end
return module_upvr

Script name: option
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr._new(arg1) -- Line 94
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	local var3 = "Option"
	module.ClassName = var3
	module._v = arg1
	if arg1 == nil then
		var3 = false
	else
		var3 = true
	end
	module._s = var3
	return setmetatable(module, module_2_upvr)
end
function module_2_upvr.Some(arg1) -- Line 110
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1 == nil then
	else
	end
	assert(true, "Option.Some() value cannot be nil")
	return module_2_upvr._new(arg1)
end
function module_2_upvr.Wrap(arg1) -- Line 123
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1 == nil then
		return module_2_upvr.None
	end
	return module_2_upvr.Some(arg1)
end
function module_2_upvr.Is(arg1) -- Line 136
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local var4 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= module_2_upvr then
			var4 = false
		else
			var4 = true
		end
	end
	return var4
end
function module_2_upvr.Assert(arg1) -- Line 144
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	assert(module_2_upvr.Is(arg1), "Result was not of type Option")
end
function module_2_upvr.Deserialize(arg1) -- Line 154
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local var5 = false
	local var6
	if type(arg1) == "table" then
		if arg1.ClassName ~= "Option" then
			var5 = false
		else
			var5 = true
		end
	end
	var6 = assert
	var6(var5, "Invalid data for deserializing Option")
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var6 = module_2_upvr.None
		return var6
	end
	if arg1.Value ~= nil or not INLINED() then
		var6 = module_2_upvr.Some(arg1.Value)
	end
	return var6
end
function module_2_upvr.Serialize(arg1) -- Line 163
	return {
		ClassName = arg1.ClassName;
		Value = arg1._v;
	}
end
function module_2_upvr.Match(arg1, arg2) -- Line 184
	local Some_2 = arg2.Some
	local None = arg2.None
	local var10
	if type(Some_2) ~= "function" then
		var10 = false
	else
		var10 = true
	end
	assert(var10, "Missing 'Some' match")
	if type(None) ~= "function" then
		var10 = false
	else
		var10 = true
	end
	assert(var10, "Missing 'None' match")
	if arg1:IsSome() then
		var10 = arg1:Unwrap()
		return Some_2(var10)
	end
	return None()
end
function module_2_upvr.IsSome(arg1) -- Line 200
	return arg1._s
end
function module_2_upvr.IsNone(arg1) -- Line 208
	return not arg1._s
end
function module_2_upvr.Expect(arg1, arg2) -- Line 222
	assert(arg1:IsSome(), arg2)
	return arg1._v
end
function module_2_upvr.ExpectNone(arg1, arg2) -- Line 231
	assert(arg1:IsNone(), arg2)
end
function module_2_upvr.Unwrap(arg1) -- Line 239
	return arg1:Expect("Cannot unwrap option of None type")
end
function module_2_upvr.UnwrapOr(arg1, arg2) -- Line 248
	if arg1:IsSome() then
		return arg1:Unwrap()
	end
	return arg2
end
function module_2_upvr.UnwrapOrElse(arg1, arg2) -- Line 262
	if arg1:IsSome() then
		return arg1:Unwrap()
	end
	return arg2()
end
function module_2_upvr.And(arg1, arg2) -- Line 288
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsSome() then
		return arg2
	end
	return module_2_upvr.None
end
function module_2_upvr.AndThen(arg1, arg2) -- Line 312
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsSome() then
		local arg2_result1 = arg2(arg1:Unwrap())
		module_2_upvr.Assert(arg2_result1)
		return arg2_result1
	end
	return module_2_upvr.None
end
function module_2_upvr.Or(arg1, arg2) -- Line 327
	if arg1:IsSome() then
		return arg1
	end
	return arg2
end
function module_2_upvr.OrElse(arg1, arg2) -- Line 341
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsSome() then
		return arg1
	end
	local arg2_result1_2 = arg2()
	module_2_upvr.Assert(arg2_result1_2)
	return arg2_result1_2
end
function module_2_upvr.XOr(arg1, arg2) -- Line 358
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local any_IsSome_result1_4 = arg1:IsSome()
	if any_IsSome_result1_4 == arg2:IsSome() then
		return module_2_upvr.None
	end
	if any_IsSome_result1_4 then
		return arg1
	end
	return arg2
end
function module_2_upvr.Filter(arg1, arg2) -- Line 376
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if arg1:IsNone() or not arg2(arg1._v) then
		return module_2_upvr.None
	end
	return arg1
end
function module_2_upvr.Contains(arg1, arg2) -- Line 389
	local any_IsSome_result1_2 = arg1:IsSome()
	if any_IsSome_result1_2 then
		if arg1._v ~= arg2 then
			any_IsSome_result1_2 = false
		else
			any_IsSome_result1_2 = true
		end
	end
	return any_IsSome_result1_2
end
function module_2_upvr.__tostring(arg1) -- Line 403
	if arg1:IsSome() then
		return "Option<"..typeof(arg1._v)..'>'
	end
	return "Option<None>"
end
function module_2_upvr.__eq(arg1, arg2) -- Line 429
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if module_2_upvr.Is(arg2) then
		if arg1:IsSome() then
			local any_IsSome_result1 = arg2:IsSome()
			if any_IsSome_result1 then
				if arg1:Unwrap() ~= arg2:Unwrap() then
					any_IsSome_result1 = false
				else
					any_IsSome_result1 = true
				end
				return any_IsSome_result1
			end
		end
		if arg1:IsNone() and arg2:IsNone() then
			return true
		end
	end
	return false
end
module_2_upvr.None = module_2_upvr._new()
return module_2_upvr

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Some", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create some option", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(true):IsSome()).to.equal(true)
		end)
		it("should fail to create some option with nil", function() -- Line 10
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 11
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				Parent_upvr.Some(nil)
			end).to.throw()
		end)
		it("should not be none", function() -- Line 16
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):IsNone()).to.equal(false)
		end)
	end)
	describe("None", function() -- Line 22
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should be able to reference none", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(function() -- Line 24
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
			end).never.to.throw()
		end)
		it("should be able to check if none", function() -- Line 29
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:IsNone()).to.equal(true)
		end)
		it("should be able to check if not some", function() -- Line 34
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:IsSome()).to.equal(false)
		end)
	end)
	describe("Equality", function() -- Line 40
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should equal the same some from same options", function() -- Line 41
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_3 = Parent_upvr.Some(32)
			expect(any_Some_result1_3).to.equal(any_Some_result1_3)
		end)
		it("should equal the same some from different options", function() -- Line 46
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(32)).to.equal(Parent_upvr.Some(32))
		end)
	end)
	describe("Assert", function() -- Line 53
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should assert that a some option is an option", function() -- Line 54
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Is(Parent_upvr.Some(10))).to.equal(true)
		end)
		it("should assert that a none option is an option", function() -- Line 58
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Is(Parent_upvr.None)).to.equal(true)
		end)
		it("should assert that a non-option is not an option", function() -- Line 62
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Is(10)).to.equal(false)
			expect(Parent_upvr.Is(true)).to.equal(false)
			expect(Parent_upvr.Is(false)).to.equal(false)
			expect(Parent_upvr.Is("Test")).to.equal(false)
			expect(Parent_upvr.Is({})).to.equal(false)
			expect(Parent_upvr.Is(function() -- Line 68
			end)).to.equal(false)
			expect(Parent_upvr.Is(coroutine.create(function() -- Line 69
			end))).to.equal(false)
			expect(Parent_upvr.Is(Parent_upvr)).to.equal(false)
		end)
	end)
	describe("Unwrap", function() -- Line 74
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should unwrap a some option", function() -- Line 75
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_5_upvr = Parent_upvr.Some(10)
			expect(function() -- Line 77
				--[[ Upvalues[1]:
					[1]: any_Some_result1_5_upvr (readonly)
				]]
				any_Some_result1_5_upvr:Unwrap()
			end).never.to.throw()
			expect(any_Some_result1_5_upvr:Unwrap()).to.equal(10)
		end)
		it("should fail to unwrap a none option", function() -- Line 83
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr = Parent_upvr.None
			expect(function() -- Line 85
				--[[ Upvalues[1]:
					[1]: None_upvr (readonly)
				]]
				None_upvr:Unwrap()
			end).to.throw()
		end)
	end)
	describe("Expect", function() -- Line 91
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should expect a some option", function() -- Line 92
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_13_upvr = Parent_upvr.Some(10)
			expect(function() -- Line 94
				--[[ Upvalues[1]:
					[1]: any_Some_result1_13_upvr (readonly)
				]]
				any_Some_result1_13_upvr:Expect("Expecting some value")
			end).never.to.throw()
			expect(any_Some_result1_13_upvr:Unwrap()).to.equal(10)
		end)
		it("should fail when expecting on a none option", function() -- Line 100
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr_3 = Parent_upvr.None
			expect(function() -- Line 102
				--[[ Upvalues[1]:
					[1]: None_upvr_3 (readonly)
				]]
				None_upvr_3:Expect("Expecting some value")
			end).to.throw()
		end)
	end)
	describe("ExpectNone", function() -- Line 108
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should fail to expect a none option", function() -- Line 109
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_9_upvr = Parent_upvr.Some(10)
			expect(function() -- Line 111
				--[[ Upvalues[1]:
					[1]: any_Some_result1_9_upvr (readonly)
				]]
				any_Some_result1_9_upvr:ExpectNone("Expecting some value")
			end).to.throw()
		end)
		it("should expect a none option", function() -- Line 116
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr_4 = Parent_upvr.None
			expect(function() -- Line 118
				--[[ Upvalues[1]:
					[1]: None_upvr_4 (readonly)
				]]
				None_upvr_4:ExpectNone("Expecting some value")
			end).never.to.throw()
		end)
	end)
	describe("UnwrapOr", function() -- Line 124
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should unwrap a some option", function() -- Line 125
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):UnwrapOr(20)).to.equal(10)
		end)
		it("should unwrap a none option", function() -- Line 130
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:UnwrapOr(20)).to.equal(20)
		end)
	end)
	describe("UnwrapOrElse", function() -- Line 136
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should unwrap a some option", function() -- Line 137
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):UnwrapOrElse(function() -- Line 139
				return 30
			end)).to.equal(10)
		end)
		it("should unwrap a none option", function() -- Line 145
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:UnwrapOrElse(function() -- Line 147
				return 30
			end)).to.equal(30)
		end)
	end)
	describe("And", function() -- Line 154
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the second option with and when both are some", function() -- Line 155
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_12 = Parent_upvr.Some(2)
			expect(Parent_upvr.Some(1):And(any_Some_result1_12)).to.equal(any_Some_result1_12)
		end)
		it("should return none when first option is some and second option is none", function() -- Line 161
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(1):And(Parent_upvr.None):IsNone()).to.equal(true)
		end)
		it("should return none when first option is none and second option is some", function() -- Line 167
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:And(Parent_upvr.Some(2)):IsNone()).to.equal(true)
		end)
		it("should return none when both options are none", function() -- Line 173
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:And(Parent_upvr.None):IsNone()).to.equal(true)
		end)
	end)
	describe("AndThen", function() -- Line 180
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should pass the some value to the predicate", function() -- Line 181
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			Parent_upvr.Some(32):AndThen(function(arg1) -- Line 183
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				expect(arg1).to.equal(32)
				return Parent_upvr.None
			end)
		end)
		it("should throw if an option is not returned from predicate", function() -- Line 189
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_upvr = Parent_upvr.Some(32)
			expect(function() -- Line 191
				--[[ Upvalues[1]:
					[1]: any_Some_result1_upvr (readonly)
				]]
				any_Some_result1_upvr:AndThen(function() -- Line 192
				end)
			end).to.throw()
		end)
		it("should return none if the option is none", function() -- Line 196
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:AndThen(function() -- Line 198
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.Some(10)
			end):IsNone()).to.equal(true)
		end)
		it("should return option of predicate if option is some", function() -- Line 203
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_AndThen_result1 = Parent_upvr.Some(32):AndThen(function() -- Line 205
				--[[ Upvalues[1]:
					[1]: Parent_upvr (copied, readonly)
				]]
				return Parent_upvr.Some(10)
			end)
			expect(any_AndThen_result1:IsSome()).to.equal(true)
			expect(any_AndThen_result1:Unwrap()).to.equal(10)
		end)
	end)
	describe("Or", function() -- Line 213
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the first option if it is some", function() -- Line 214
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_8 = Parent_upvr.Some(10)
			expect(any_Some_result1_8:Or(Parent_upvr.Some(20))).to.equal(any_Some_result1_8)
		end)
		it("should return the second option if the first one is none", function() -- Line 220
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_11 = Parent_upvr.Some(20)
			expect(Parent_upvr.None:Or(any_Some_result1_11)).to.equal(any_Some_result1_11)
		end)
	end)
	describe("OrElse", function() -- Line 227
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return the first option if it is some", function() -- Line 228
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1 = Parent_upvr.Some(10)
			local any_Some_result1_7_upvr = Parent_upvr.Some(20)
			expect(any_Some_result1:OrElse(function() -- Line 231
				--[[ Upvalues[1]:
					[1]: any_Some_result1_7_upvr (readonly)
				]]
				return any_Some_result1_7_upvr
			end)).to.equal(any_Some_result1)
		end)
		it("should return the second option if the first one is none", function() -- Line 236
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_10_upvr = Parent_upvr.Some(20)
			expect(Parent_upvr.None:OrElse(function() -- Line 239
				--[[ Upvalues[1]:
					[1]: any_Some_result1_10_upvr (readonly)
				]]
				return any_Some_result1_10_upvr
			end)).to.equal(any_Some_result1_10_upvr)
		end)
		it("should throw if the predicate does not return an option", function() -- Line 244
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local None_upvr_2 = Parent_upvr.None
			expect(function() -- Line 246
				--[[ Upvalues[1]:
					[1]: None_upvr_2 (readonly)
				]]
				None_upvr_2:OrElse(function() -- Line 247
				end)
			end).to.throw()
		end)
	end)
	describe("XOr", function() -- Line 252
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return first option if first option is some and second option is none", function() -- Line 253
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_6 = Parent_upvr.Some(1)
			expect(any_Some_result1_6:XOr(Parent_upvr.None)).to.equal(any_Some_result1_6)
		end)
		it("should return second option if first option is none and second option is some", function() -- Line 259
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_4 = Parent_upvr.Some(2)
			expect(Parent_upvr.None:XOr(any_Some_result1_4)).to.equal(any_Some_result1_4)
		end)
		it("should return none if first and second option are some", function() -- Line 265
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(1):XOr(Parent_upvr.Some(2))).to.equal(Parent_upvr.None)
		end)
		it("should return none if first and second option are none", function() -- Line 271
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:XOr(Parent_upvr.None)).to.equal(Parent_upvr.None)
		end)
	end)
	describe("Filter", function() -- Line 278
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return none if option is none", function() -- Line 279
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:Filter(function() -- Line 281
			end)).to.equal(Parent_upvr.None)
		end)
		it("should return none if option is some but fails predicate", function() -- Line 284
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(10):Filter(function(arg1) -- Line 286
				return false
			end)).to.equal(Parent_upvr.None)
		end)
		it("should return self if option is some and passes predicate", function() -- Line 291
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Some_result1_2 = Parent_upvr.Some(10)
			expect(any_Some_result1_2:Filter(function(arg1) -- Line 293
				return true
			end)).to.equal(any_Some_result1_2)
		end)
	end)
	describe("Contains", function() -- Line 299
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return true if some option contains the given value", function() -- Line 300
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(32):Contains(32)).to.equal(true)
		end)
		it("should return false if some option does not contain the given value", function() -- Line 305
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some(32):Contains(64)).to.equal(false)
		end)
		it("should return false if option is none", function() -- Line 310
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.None:Contains(64)).to.equal(false)
		end)
	end)
	describe("ToString", function() -- Line 316
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should return string of none option", function() -- Line 317
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(tostring(Parent_upvr.None)).to.equal("Option<None>")
		end)
		it("should return string of some option with type", function() -- Line 322
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			for _, v in ipairs({10, true, false, "test", {}, function() -- Line 323
			end, coroutine.create(function() -- Line 323
			end), workspace}) do
				expect(tostring(Parent_upvr.Some(v))).to.equal("Option<%s>":format(typeof(v)))
			end
		end)
	end)
end

Script name: signal
  - Script: 


local var1_upvw
local function acquireRunnerThreadAndCallEventHandler_upvr(arg1, ...) -- Line 53, Named "acquireRunnerThreadAndCallEventHandler"
	--[[ Upvalues[1]:
		[1]: var1_upvw (read and write)
	]]
	var1_upvw = nil
	arg1(...)
	var1_upvw = var1_upvw
end
local function runEventHandlerInFreeThread_upvr(...) -- Line 64, Named "runEventHandlerInFreeThread"
	--[[ Upvalues[1]:
		[1]: acquireRunnerThreadAndCallEventHandler_upvr (readonly)
	]]
	acquireRunnerThreadAndCallEventHandler_upvr(...)
	while true do
		acquireRunnerThreadAndCallEventHandler_upvr(coroutine.yield())
	end
end
local tbl_upvr_2 = {}
tbl_upvr_2.__index = tbl_upvr_2
local function new(arg1, arg2) -- Line 90
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	local module_2 = {
		Connected = true;
	}
	module_2._signal = arg1
	module_2._fn = arg2
	module_2._next = false
	return setmetatable(module_2, tbl_upvr_2)
end
tbl_upvr_2.new = new
function tbl_upvr_2.Disconnect(arg1) -- Line 99
	local var4
	if not var4 then
	else
		var4 = false
		arg1.Connected = var4
		var4 = arg1._signal._handlerListHead
		if var4 == arg1 then
			var4 = arg1._signal
			var4._handlerListHead = arg1._next
			return
		end
		var4 = arg1._signal._handlerListHead
		while var4 and var4._next ~= arg1 do
			var4 = var4._next
		end
		if var4 then
			var4._next = arg1._next
		end
	end
end
tbl_upvr_2.Destroy = tbl_upvr_2.Disconnect
local tbl = {}
local function __index(arg1, arg2) -- Line 126
	error("Attempt to get Connection::%s (not a valid member)":format(tostring(arg2)), 2)
end
tbl.__index = __index
local function __newindex(arg1, arg2, arg3) -- Line 129
	error("Attempt to set Connection::%s (not a valid member)":format(tostring(arg2)), 2)
end
tbl.__newindex = __newindex
setmetatable(tbl_upvr_2, tbl)
local tbl_upvr = {}
tbl_upvr.__index = tbl_upvr
function tbl_upvr.new() -- Line 165
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	return setmetatable({
		_handlerListHead = false;
		_proxyHandler = nil;
	}, tbl_upvr)
end
function tbl_upvr.Wrap(arg1) -- Line 186
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var8
	if typeof(arg1) ~= "RBXScriptSignal" then
		var8 = false
	else
		var8 = true
	end
	assert(var8, "Argument #1 to Signal.Wrap must be a RBXScriptSignal; got "..typeof(arg1))
	var8 = tbl_upvr
	local any_new_result1_upvr = var8.new()
	var8 = arg1:Connect(function(...) -- Line 192
		--[[ Upvalues[1]:
			[1]: any_new_result1_upvr (readonly)
		]]
		any_new_result1_upvr:Fire(...)
	end)
	any_new_result1_upvr._proxyHandler = var8
	return any_new_result1_upvr
end
function tbl_upvr.Is(arg1) -- Line 204
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var11 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= tbl_upvr then
			var11 = false
		else
			var11 = true
		end
	end
	return var11
end
function tbl_upvr.Connect(arg1, arg2) -- Line 221
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	local any_new_result1 = tbl_upvr_2.new(arg1, arg2)
	if arg1._handlerListHead then
		any_new_result1._next = arg1._handlerListHead
		arg1._handlerListHead = any_new_result1
		return any_new_result1
	end
	arg1._handlerListHead = any_new_result1
	return any_new_result1
end
function tbl_upvr.ConnectOnce(arg1, arg2) -- Line 237
	return arg1:Once(arg2)
end
function tbl_upvr.Once(arg1, arg2) -- Line 256
	local var14_upvw = false
	local var15_upvw
	var15_upvw = arg1:Connect(function(...) -- Line 259
		--[[ Upvalues[3]:
			[1]: var14_upvw (read and write)
			[2]: var15_upvw (read and write)
			[3]: arg2 (readonly)
		]]
		if var14_upvw then
		else
			var14_upvw = true
			var15_upvw:Disconnect()
			arg2(...)
		end
	end)
	return var15_upvw
end
function tbl_upvr.GetConnections(arg1) -- Line 270
	local module = {}
	local _handlerListHead = arg1._handlerListHead
	while _handlerListHead do
		table.insert(module, _handlerListHead)
	end
	return module
end
function tbl_upvr.DisconnectAll(arg1) -- Line 288
	local _handlerListHead_4 = arg1._handlerListHead
	while _handlerListHead_4 do
		_handlerListHead_4.Connected = false
	end
	arg1._handlerListHead = false
end
function tbl_upvr.Fire(arg1, ...) -- Line 312
	--[[ Upvalues[2]:
		[1]: var1_upvw (read and write)
		[2]: runEventHandlerInFreeThread_upvr (readonly)
	]]
	local _handlerListHead_2 = arg1._handlerListHead
	while _handlerListHead_2 do
		if _handlerListHead_2.Connected then
			if not var1_upvw then
				var1_upvw = coroutine.create(runEventHandlerInFreeThread_upvr)
			end
			task.spawn(var1_upvw, _handlerListHead_2._fn, ...)
		end
	end
end
function tbl_upvr.FireDeferred(arg1, ...) -- Line 333
	local _handlerListHead_3 = arg1._handlerListHead
	while _handlerListHead_3 do
		task.defer(_handlerListHead_3._fn, ...)
	end
end
function tbl_upvr.Wait(arg1) -- Line 356
	local var22_upvw = false
	local var23_upvw
	local current_thread_upvr = coroutine.running()
	var23_upvw = arg1:Connect(function(...) -- Line 360
		--[[ Upvalues[3]:
			[1]: var22_upvw (read and write)
			[2]: var23_upvw (read and write)
			[3]: current_thread_upvr (readonly)
		]]
		if var22_upvw then
		else
			var22_upvw = true
			var23_upvw:Disconnect()
			task.spawn(current_thread_upvr, ...)
		end
	end)
	return coroutine.yield()
end
function tbl_upvr.Destroy(arg1) -- Line 383
	arg1:DisconnectAll()
	local rawget_result1 = rawget(arg1, "_proxyHandler")
	if rawget_result1 then
		rawget_result1:Disconnect()
	end
end
setmetatable(tbl_upvr, {
	__index = function(arg1, arg2) -- Line 393, Named "__index"
		error("Attempt to get Signal::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
	__newindex = function(arg1, arg2, arg3) -- Line 396, Named "__newindex"
		error("Attempt to set Signal::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
})
return {
	new = tbl_upvr.new;
	Wrap = tbl_upvr.Wrap;
	Is = tbl_upvr.Is;
}

Script name: init.spec
  - Script: 


local function AwaitCondition_upvr(arg1, arg2) -- Line 1, Named "AwaitCondition"
	while true do
		if arg1() then
			return true
		end
		if (arg2 or 10) < os.clock() - os.clock() then
			return false
		end
		task.wait()
	end
end
return function() -- Line 15
	--[[ Upvalues[1]:
		[1]: AwaitCondition_upvr (readonly)
	]]
	local Parent_upvr = require(script.Parent)
	local var3_upvw
	local function _(arg1) -- Line 20, Named "NumConns"
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		local var4 = arg1
		if not var4 then
			var4 = var3_upvw
		end
		return #var4:GetConnections()
	end
	beforeEach(function() -- Line 25
		--[[ Upvalues[2]:
			[1]: var3_upvw (read and write)
			[2]: Parent_upvr (readonly)
		]]
		var3_upvw = Parent_upvr.new()
	end)
	afterEach(function() -- Line 29
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		var3_upvw:Destroy()
	end)
	describe("Constructor", function() -- Line 33
		--[[ Upvalues[3]:
			[1]: Parent_upvr (readonly)
			[2]: var3_upvw (read and write)
			[3]: AwaitCondition_upvr (copied, readonly)
		]]
		it("should create a new signal and fire it", function() -- Line 34
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: var3_upvw (copied, read and write)
			]]
			expect(Parent_upvr.Is(var3_upvw)).to.equal(true)
			task.defer(function() -- Line 36
				--[[ Upvalues[1]:
					[1]: var3_upvw (copied, read and write)
				]]
				var3_upvw:Fire(10, 20)
			end)
			local any_Wait_result1, any_Wait_result2_2 = var3_upvw:Wait()
			expect(any_Wait_result1).to.equal(10)
			expect(any_Wait_result2_2).to.equal(20)
		end)
		it("should create a proxy signal and connect to it", function() -- Line 44
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local any_Wrap_result1 = Parent_upvr.Wrap(game:GetService("RunService").Heartbeat)
			expect(Parent_upvr.Is(any_Wrap_result1)).to.equal(true)
			local var14_upvw = false
			any_Wrap_result1:Connect(function() -- Line 48
				--[[ Upvalues[1]:
					[1]: var14_upvw (read and write)
				]]
				var14_upvw = true
			end)
			expect(AwaitCondition_upvr(function() -- Line 51
				--[[ Upvalues[1]:
					[1]: var14_upvw (read and write)
				]]
				return var14_upvw
			end, 2)).to.equal(true)
			any_Wrap_result1:Destroy()
		end)
	end)
	describe("FireDeferred", function() -- Line 58
		--[[ Upvalues[2]:
			[1]: var3_upvw (read and write)
			[2]: AwaitCondition_upvr (copied, readonly)
		]]
		it("should be able to fire primitive argument", function() -- Line 59
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local var19_upvw
			var3_upvw:Connect(function(arg1) -- Line 62
				--[[ Upvalues[1]:
					[1]: var19_upvw (read and write)
				]]
				var19_upvw = arg1
			end)
			var3_upvw:FireDeferred(10)
			expect(AwaitCondition_upvr(function() -- Line 66
				--[[ Upvalues[1]:
					[1]: var19_upvw (read and write)
				]]
				local var22
				if var19_upvw ~= 10 then
					var22 = false
				else
					var22 = true
				end
				return var22
			end, 1)).to.equal(true)
		end)
		it("should be able to fire a reference based argument", function() -- Line 71
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local tbl_2_upvr = {10, 20}
			local var25_upvw
			var3_upvw:Connect(function(arg1) -- Line 74
				--[[ Upvalues[1]:
					[1]: var25_upvw (read and write)
				]]
				var25_upvw = arg1
			end)
			var3_upvw:FireDeferred(tbl_2_upvr)
			expect(AwaitCondition_upvr(function() -- Line 78
				--[[ Upvalues[2]:
					[1]: tbl_2_upvr (readonly)
					[2]: var25_upvw (read and write)
				]]
				local var28
				if tbl_2_upvr ~= var25_upvw then
					var28 = false
				else
					var28 = true
				end
				return var28
			end, 1)).to.equal(true)
		end)
	end)
	describe("Fire", function() -- Line 84
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should be able to fire primitive argument", function() -- Line 85
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var31_upvw
			var3_upvw:Connect(function(arg1) -- Line 88
				--[[ Upvalues[1]:
					[1]: var31_upvw (read and write)
				]]
				var31_upvw = arg1
			end)
			var3_upvw:Fire(10)
			expect(var31_upvw).to.equal(10)
		end)
		it("should be able to fire a reference based argument", function() -- Line 95
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local tbl = {10, 20}
			local var35_upvw
			var3_upvw:Connect(function(arg1) -- Line 98
				--[[ Upvalues[1]:
					[1]: var35_upvw (read and write)
				]]
				var35_upvw = arg1
			end)
			var3_upvw:Fire(tbl)
			expect(var35_upvw).to.equal(tbl)
		end)
	end)
	describe("ConnectOnce", function() -- Line 106
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should only capture first fire", function() -- Line 107
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var39_upvw
			local any_ConnectOnce_result1 = var3_upvw:ConnectOnce(function(arg1) -- Line 109
				--[[ Upvalues[1]:
					[1]: var39_upvw (read and write)
				]]
				var39_upvw = arg1
			end)
			expect(any_ConnectOnce_result1.Connected).to.equal(true)
			var3_upvw:Fire(10)
			expect(any_ConnectOnce_result1.Connected).to.equal(false)
			var3_upvw:Fire(20)
			expect(var39_upvw).to.equal(10)
		end)
	end)
	describe("Wait", function() -- Line 120
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should be able to wait for a signal to fire", function() -- Line 121
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			task.defer(function() -- Line 122
				--[[ Upvalues[1]:
					[1]: var3_upvw (copied, read and write)
				]]
				var3_upvw:Fire(10, 20, 30)
			end)
			local any_Wait_result1_2, any_Wait_result2, any_Wait_result3 = var3_upvw:Wait()
			expect(any_Wait_result1_2).to.equal(10)
			expect(any_Wait_result2).to.equal(20)
			expect(any_Wait_result3).to.equal(30)
		end)
	end)
	describe("DisconnectAll", function() -- Line 132
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		it("should disconnect all connections", function() -- Line 133
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			var3_upvw:Connect(function() -- Line 134
			end)
			var3_upvw:Connect(function() -- Line 135
			end)
			local var52
			if not var52 then
				var52 = var3_upvw
			end
			expect(#var52:GetConnections()).to.equal(2)
			var3_upvw:DisconnectAll()
			local var53
			if not var53 then
				var53 = var3_upvw
			end
			expect(#var53:GetConnections()).to.equal(0)
		end)
	end)
	describe("Disconnect", function() -- Line 142
		--[[ Upvalues[2]:
			[1]: var3_upvw (read and write)
			[2]: AwaitCondition_upvr (copied, readonly)
		]]
		it("should disconnect connection", function() -- Line 143
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var57
			if not var57 then
				var57 = var3_upvw
			end
			expect(#var57:GetConnections()).to.equal(1)
			var3_upvw:Connect(function() -- Line 144
			end):Disconnect()
			local var58
			if not var58 then
				var58 = var3_upvw
			end
			expect(#var58:GetConnections()).to.equal(0)
		end)
		it("should still work if connections disconnected while firing", function() -- Line 150
			--[[ Upvalues[1]:
				[1]: var3_upvw (copied, read and write)
			]]
			local var60_upvw = 0
			var3_upvw:Connect(function() -- Line 153
				--[[ Upvalues[1]:
					[1]: var60_upvw (read and write)
				]]
				var60_upvw += 1
			end)
			local var63_upvw
			var63_upvw = var3_upvw:Connect(function() -- Line 156
				--[[ Upvalues[2]:
					[1]: var63_upvw (read and write)
					[2]: var60_upvw (read and write)
				]]
				var63_upvw:Disconnect()
				var60_upvw += 1
			end)
			var3_upvw:Connect(function() -- Line 160
				--[[ Upvalues[1]:
					[1]: var60_upvw (read and write)
				]]
				var60_upvw += 1
			end)
			var3_upvw:Fire()
			expect(var60_upvw).to.equal(3)
		end)
		it("should still work if connections disconnected while firing deferred", function() -- Line 167
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: AwaitCondition_upvr (copied, readonly)
			]]
			local var66_upvw = 0
			var3_upvw:Connect(function() -- Line 170
				--[[ Upvalues[1]:
					[1]: var66_upvw (read and write)
				]]
				var66_upvw += 1
			end)
			local var69_upvw
			var69_upvw = var3_upvw:Connect(function() -- Line 173
				--[[ Upvalues[2]:
					[1]: var69_upvw (read and write)
					[2]: var66_upvw (read and write)
				]]
				var69_upvw:Disconnect()
				var66_upvw += 1
			end)
			var3_upvw:Connect(function() -- Line 177
				--[[ Upvalues[1]:
					[1]: var66_upvw (read and write)
				]]
				var66_upvw += 1
			end)
			var3_upvw:FireDeferred()
			expect(AwaitCondition_upvr(function() -- Line 181
				--[[ Upvalues[1]:
					[1]: var66_upvw (read and write)
				]]
				local var72
				if var66_upvw ~= 3 then
					var72 = false
				else
					var72 = true
				end
				return var72
			end)).to.equal(true)
		end)
	end)
end

Script name: Signal
  - Script: 


return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

Script name: Trove
  - Script: 


return require(script.Parent.Parent["sleitnick_trove@0.4.2"].trove)

Script name: streamable
  - Script: 


return {
	Streamable = require(script.Streamable);
	StreamableUtil = require(script.StreamableUtil);
}

Script name: Streamable
  - Script: 


local Trove_upvr = require(script.Parent.Parent.Trove)
local Signal_upvr = require(script.Parent.Parent.Signal)
local module_upvr_4 = {}
module_upvr_4.__index = module_upvr_4
function module_upvr_4.new(arg1, arg2) -- Line 96
	--[[ Upvalues[3]:
		[1]: module_upvr_4 (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local module_upvr_2 = {}
	setmetatable(module_upvr_2, module_upvr_4)
	module_upvr_2._trove = Trove_upvr.new()
	module_upvr_2._shown = module_upvr_2._trove:Construct(Signal_upvr)
	module_upvr_2._shownTrove = Trove_upvr.new()
	module_upvr_2._trove:Add(module_upvr_2._shownTrove)
	module_upvr_2.Instance = arg1:FindFirstChild(arg2)
	local function OnInstanceSet_upvr() -- Line 107, Named "OnInstanceSet"
		--[[ Upvalues[1]:
			[1]: module_upvr_2 (readonly)
		]]
		local Instance_upvr = module_upvr_2.Instance
		if typeof(Instance_upvr) == "Instance" then
			module_upvr_2._shown:Fire(Instance_upvr, module_upvr_2._shownTrove)
			module_upvr_2._shownTrove:Connect(Instance_upvr:GetPropertyChangedSignal("Parent"), function() -- Line 111
				--[[ Upvalues[2]:
					[1]: Instance_upvr (readonly)
					[2]: module_upvr_2 (copied, readonly)
				]]
				if not Instance_upvr.Parent then
					module_upvr_2._shownTrove:Clean()
				end
			end)
			module_upvr_2._shownTrove:Add(function() -- Line 116
				--[[ Upvalues[2]:
					[1]: module_upvr_2 (copied, readonly)
					[2]: Instance_upvr (readonly)
				]]
				if module_upvr_2.Instance == Instance_upvr then
					module_upvr_2.Instance = nil
				end
			end)
		end
	end
	module_upvr_2._trove:Connect(arg1.ChildAdded, function(arg1_2) -- Line 124, Named "OnChildAdded"
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: module_upvr_2 (readonly)
			[3]: OnInstanceSet_upvr (readonly)
		]]
		if arg1_2.Name == arg2 and not module_upvr_2.Instance then
			module_upvr_2.Instance = arg1_2
			OnInstanceSet_upvr()
		end
	end)
	if module_upvr_2.Instance then
		OnInstanceSet_upvr()
	end
	return module_upvr_2
end
function module_upvr_4.primary(arg1) -- Line 146
	--[[ Upvalues[3]:
		[1]: module_upvr_4 (readonly)
		[2]: Trove_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local module_upvr = {}
	setmetatable(module_upvr, module_upvr_4)
	module_upvr._trove = Trove_upvr.new()
	module_upvr._shown = module_upvr._trove:Construct(Signal_upvr)
	module_upvr._shownTrove = Trove_upvr.new()
	module_upvr._trove:Add(module_upvr._shownTrove)
	module_upvr.Instance = arg1.PrimaryPart
	module_upvr._trove:Connect(arg1:GetPropertyChangedSignal("PrimaryPart"), function() -- Line 157, Named "OnPrimaryPartChanged"
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: module_upvr (readonly)
		]]
		local PrimaryPart_4 = arg1.PrimaryPart
		module_upvr._shownTrove:Clean()
		module_upvr.Instance = PrimaryPart_4
		if PrimaryPart_4 then
			module_upvr._shown:Fire(PrimaryPart_4, module_upvr._shownTrove)
		end
	end)
	if module_upvr.Instance then
		local PrimaryPart = arg1.PrimaryPart
		module_upvr._shownTrove:Clean()
		module_upvr.Instance = PrimaryPart
		if PrimaryPart then
			module_upvr._shown:Fire(PrimaryPart, module_upvr._shownTrove)
		end
	end
	return module_upvr
end
function module_upvr_4.Observe(arg1, arg2) -- Line 184
	if arg1.Instance then
		task.spawn(arg2, arg1.Instance, arg1._shownTrove)
	end
	return arg1._shown:Connect(arg2)
end
function module_upvr_4.Destroy(arg1) -- Line 196
	arg1._trove:Destroy()
end
return module_upvr_4

Script name: Streamable.spec
  - Script: 


return function() -- Line 1
	local var2_upvw
	local var3_upvw
	local function _(arg1) -- Line 7, Named "CreateInstance"
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		local Folder = Instance.new("Folder")
		Folder.Name = arg1
		Folder.Archivable = false
		Folder.Parent = var2_upvw
		return Folder
	end
	local function _() -- Line 15, Named "CreatePrimary"
		--[[ Upvalues[1]:
			[1]: var3_upvw (read and write)
		]]
		local Part_2 = Instance.new("Part")
		Part_2.Anchored = true
		Part_2.Parent = var3_upvw
		var3_upvw.PrimaryPart = Part_2
		return Part_2
	end
	beforeAll(function() -- Line 23
		--[[ Upvalues[2]:
			[1]: var2_upvw (read and write)
			[2]: var3_upvw (read and write)
		]]
		var2_upvw = Instance.new("Folder")
		var2_upvw.Name = "KnitTestFolder"
		var2_upvw.Archivable = false
		var2_upvw.Parent = workspace
		var3_upvw = Instance.new("Model")
		var3_upvw.Name = "KnitTestModel"
		var3_upvw.Archivable = false
		var3_upvw.Parent = workspace
	end)
	afterEach(function() -- Line 34
		--[[ Upvalues[2]:
			[1]: var2_upvw (read and write)
			[2]: var3_upvw (read and write)
		]]
		var2_upvw:ClearAllChildren()
		var3_upvw:ClearAllChildren()
	end)
	afterAll(function() -- Line 39
		--[[ Upvalues[2]:
			[1]: var2_upvw (read and write)
			[2]: var3_upvw (read and write)
		]]
		var2_upvw:Destroy()
		var3_upvw:Destroy()
	end)
	local Streamable_upvr = require(script.Parent.Streamable)
	describe("Streamable", function() -- Line 44
		--[[ Upvalues[3]:
			[1]: var2_upvw (read and write)
			[2]: Streamable_upvr (readonly)
			[3]: var3_upvw (read and write)
		]]
		it("should detect instance that is immediately available", function() -- Line 45
			--[[ Upvalues[2]:
				[1]: var2_upvw (copied, read and write)
				[2]: Streamable_upvr (copied, readonly)
			]]
			local Folder_2 = Instance.new("Folder")
			Folder_2.Name = "TestImmediate"
			Folder_2.Archivable = false
			Folder_2.Parent = var2_upvw
			local var13 = Folder_2
			local any_new_result1 = Streamable_upvr.new(var2_upvw, "TestImmediate")
			local var15_upvw = 0
			local var16_upvw = 0
			any_new_result1:Observe(function(arg1, arg2) -- Line 50
				--[[ Upvalues[2]:
					[1]: var15_upvw (read and write)
					[2]: var16_upvw (read and write)
				]]
				var15_upvw += 1
				arg2:Add(function() -- Line 52
					--[[ Upvalues[1]:
						[1]: var16_upvw (copied, read and write)
					]]
					var16_upvw += 1
				end)
			end)
			task.wait()
			var13.Parent = nil
			task.wait()
			var13.Parent = var2_upvw
			task.wait()
			any_new_result1:Destroy()
			task.wait()
			expect(var15_upvw).to.equal(2)
			expect(var16_upvw).to.equal(2)
		end)
		it("should detect instance that is not immediately available", function() -- Line 67
			--[[ Upvalues[2]:
				[1]: Streamable_upvr (copied, readonly)
				[2]: var2_upvw (copied, read and write)
			]]
			local any_new_result1_2 = Streamable_upvr.new(var2_upvw, "TestImmediate")
			local var21_upvw = 0
			local var22_upvw = 0
			any_new_result1_2:Observe(function(arg1, arg2) -- Line 71
				--[[ Upvalues[2]:
					[1]: var21_upvw (read and write)
					[2]: var22_upvw (read and write)
				]]
				var21_upvw += 1
				arg2:Add(function() -- Line 73
					--[[ Upvalues[1]:
						[1]: var22_upvw (copied, read and write)
					]]
					var22_upvw += 1
				end)
			end)
			task.wait(0.1)
			local Folder_3 = Instance.new("Folder")
			Folder_3.Name = "TestImmediate"
			Folder_3.Archivable = false
			Folder_3.Parent = var2_upvw
			local var26 = Folder_3
			task.wait()
			var26.Parent = nil
			task.wait()
			var26.Parent = var2_upvw
			task.wait()
			any_new_result1_2:Destroy()
			task.wait()
			expect(var21_upvw).to.equal(2)
			expect(var22_upvw).to.equal(2)
		end)
		it("should detect primary part that is immediately available", function() -- Line 90
			--[[ Upvalues[2]:
				[1]: var3_upvw (copied, read and write)
				[2]: Streamable_upvr (copied, readonly)
			]]
			local Part_3 = Instance.new("Part")
			Part_3.Anchored = true
			Part_3.Parent = var3_upvw
			var3_upvw.PrimaryPart = Part_3
			local var29 = Part_3
			local any_primary_result1_2 = Streamable_upvr.primary(var3_upvw)
			local var31_upvw = 0
			local var32_upvw = 0
			any_primary_result1_2:Observe(function(arg1, arg2) -- Line 95
				--[[ Upvalues[2]:
					[1]: var31_upvw (read and write)
					[2]: var32_upvw (read and write)
				]]
				var31_upvw += 1
				arg2:Add(function() -- Line 97
					--[[ Upvalues[1]:
						[1]: var32_upvw (copied, read and write)
					]]
					var32_upvw += 1
				end)
			end)
			task.wait()
			var29.Parent = nil
			task.wait()
			var29.Parent = var3_upvw
			var3_upvw.PrimaryPart = var29
			task.wait()
			any_primary_result1_2:Destroy()
			task.wait()
			expect(var31_upvw).to.equal(2)
			expect(var32_upvw).to.equal(2)
		end)
		it("should detect primary part that is not immediately available", function() -- Line 113
			--[[ Upvalues[2]:
				[1]: Streamable_upvr (copied, readonly)
				[2]: var3_upvw (copied, read and write)
			]]
			local any_primary_result1 = Streamable_upvr.primary(var3_upvw)
			local var37_upvw = 0
			local var38_upvw = 0
			any_primary_result1:Observe(function(arg1, arg2) -- Line 117
				--[[ Upvalues[2]:
					[1]: var37_upvw (read and write)
					[2]: var38_upvw (read and write)
				]]
				var37_upvw += 1
				arg2:Add(function() -- Line 119
					--[[ Upvalues[1]:
						[1]: var38_upvw (copied, read and write)
					]]
					var38_upvw += 1
				end)
			end)
			task.wait(0.1)
			local Part = Instance.new("Part")
			Part.Anchored = true
			Part.Parent = var3_upvw
			var3_upvw.PrimaryPart = Part
			local var42 = Part
			task.wait()
			var42.Parent = nil
			task.wait()
			var42.Parent = var3_upvw
			var3_upvw.PrimaryPart = var42
			task.wait()
			any_primary_result1:Destroy()
			task.wait()
			expect(var37_upvw).to.equal(2)
			expect(var38_upvw).to.equal(2)
		end)
	end)
end

Script name: StreamableUtil
  - Script: 


local module = {}
local Trove_upvr = require(script.Parent.Parent.Trove)
function module.Compound(arg1, arg2) -- Line 47
	--[[ Upvalues[1]:
		[1]: Trove_upvr (readonly)
	]]
	local any_new_result1 = Trove_upvr.new()
	local any_new_result1_upvr = Trove_upvr.new()
	local var9_upvw = false
	local function _() -- Line 51, Named "Check"
		--[[ Upvalues[4]:
			[1]: var9_upvw (read and write)
			[2]: arg1 (readonly)
			[3]: arg2 (readonly)
			[4]: any_new_result1_upvr (readonly)
		]]
		if var9_upvw then
		else
			for _, v_2 in pairs(arg1) do
				if not v_2.Instance then return end
			end
			var9_upvw = true
			arg2(arg1, any_new_result1_upvr)
		end
	end
	local function Cleanup_upvr() -- Line 63, Named "Cleanup"
		--[[ Upvalues[2]:
			[1]: var9_upvw (read and write)
			[2]: any_new_result1_upvr (readonly)
		]]
		if not var9_upvw then
		else
			var9_upvw = false
			any_new_result1_upvr:Clean()
		end
	end
	for _, v in pairs(arg1) do
		any_new_result1:Add(v:Observe(function(arg1_2, arg2_2) -- Line 71
			--[[ Upvalues[5]:
				[1]: var9_upvw (read and write)
				[2]: arg1 (readonly)
				[3]: arg2 (readonly)
				[4]: any_new_result1_upvr (readonly)
				[5]: Cleanup_upvr (readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 12 start (CF ANALYSIS FAILED)
			if var9_upvw then
				-- KONSTANTWARNING: GOTO [20] #18
			end
			-- KONSTANTERROR: [0] 1. Error Block 12 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [3] 4. Error Block 10 start (CF ANALYSIS FAILED)
			local _, _, _ = pairs(arg1)
			-- KONSTANTERROR: [3] 4. Error Block 10 end (CF ANALYSIS FAILED)
		end))
	end
	any_new_result1:Add(Cleanup_upvr)
	return any_new_result1
end
return module

Script name: StreamableUtil.spec
  - Script: 


return function() -- Line 1
	local var2_upvw
	local function _(arg1) -- Line 7, Named "CreateInstance"
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		local Folder_3 = Instance.new("Folder")
		Folder_3.Name = arg1
		Folder_3.Archivable = false
		Folder_3.Parent = var2_upvw
		return Folder_3
	end
	beforeAll(function() -- Line 15
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		var2_upvw = Instance.new("Folder")
		var2_upvw.Name = "KnitTest"
		var2_upvw.Archivable = false
		var2_upvw.Parent = workspace
	end)
	afterEach(function() -- Line 22
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		var2_upvw:ClearAllChildren()
	end)
	afterAll(function() -- Line 26
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		var2_upvw:Destroy()
	end)
	local Streamable_upvr = require(script.Parent.Streamable)
	local StreamableUtil_upvr = require(script.Parent.StreamableUtil)
	describe("Compound", function() -- Line 30
		--[[ Upvalues[3]:
			[1]: Streamable_upvr (readonly)
			[2]: var2_upvw (read and write)
			[3]: StreamableUtil_upvr (readonly)
		]]
		it("should capture multiple streams", function() -- Line 31
			--[[ Upvalues[3]:
				[1]: Streamable_upvr (copied, readonly)
				[2]: var2_upvw (copied, read and write)
				[3]: StreamableUtil_upvr (copied, readonly)
			]]
			local any_new_result1 = Streamable_upvr.new(var2_upvw, "ABC")
			local any_new_result1_2 = Streamable_upvr.new(var2_upvw, "XYZ")
			local var13_upvw = 0
			local var14_upvw = 0
			StreamableUtil_upvr.Compound({
				S1 = any_new_result1;
				S2 = any_new_result1_2;
			}, function(arg1, arg2) -- Line 36
				--[[ Upvalues[2]:
					[1]: var13_upvw (read and write)
					[2]: var14_upvw (read and write)
				]]
				var13_upvw += 1
				arg2:Add(function() -- Line 38
					--[[ Upvalues[1]:
						[1]: var14_upvw (copied, read and write)
					]]
					var14_upvw += 1
				end)
			end)
			local Folder = Instance.new("Folder")
			Folder.Name = "ABC"
			Folder.Archivable = false
			Folder.Parent = var2_upvw
			local var19 = Folder
			local Folder_2 = Instance.new("Folder")
			Folder_2.Name = "XYZ"
			Folder_2.Archivable = false
			Folder_2.Parent = var2_upvw
			local var21 = Folder_2
			task.wait()
			var19.Parent = nil
			task.wait()
			var19.Parent = var2_upvw
			task.wait()
			var19.Parent = nil
			var21.Parent = nil
			task.wait()
			var21.Parent = var2_upvw
			task.wait()
			expect(var13_upvw).to.equal(2)
			expect(var14_upvw).to.equal(2)
			any_new_result1:Destroy()
			any_new_result1_2:Destroy()
		end)
	end)
end

Script name: symbol
  - Script: 


return function(arg1) -- Line 45, Named "Symbol"
	local newproxy_result1 = newproxy(true)
	local var2_upvw
	if not var2_upvw then
		var2_upvw = ""
	end
	getmetatable(newproxy_result1).__tostring = function() -- Line 50
		--[[ Upvalues[1]:
			[1]: var2_upvw (read and write)
		]]
		return "Symbol("..var2_upvw..')'
	end
	return newproxy_result1
end

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Constructor", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a new symbol", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local Parent_upvr_result1_2 = Parent_upvr("Test")
			local expect_result1 = expect(Parent_upvr_result1_2)
			expect_result1.to.be.a("userdata")
			if Parent_upvr_result1_2 ~= Parent_upvr_result1_2 then
				expect_result1 = false
			else
				expect_result1 = true
			end
			expect(expect_result1).to.equal(true)
			expect(tostring(Parent_upvr_result1_2)).to.equal("Symbol(Test)")
		end)
		it("should create a new symbol with no name", function() -- Line 12
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local var3_result1 = Parent_upvr()
			local expect_result1_2 = expect(var3_result1)
			expect_result1_2.to.be.a("userdata")
			if var3_result1 ~= var3_result1 then
				expect_result1_2 = false
			else
				expect_result1_2 = true
			end
			expect(expect_result1_2).to.equal(true)
			expect(tostring(var3_result1)).to.equal("Symbol()")
		end)
		it("should be unique regardless of the name", function() -- Line 19
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
			local var11
			if Parent_upvr("Test") ~= Parent_upvr("Test") then
				var11 = false
			else
				var11 = true
			end
			expect(var11).to.equal(false)
			if Parent_upvr() ~= Parent_upvr() then
				var11 = false
				-- KONSTANTWARNING: GOTO [29] #24
			end
			-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [28] 23. Error Block 29 start (CF ANALYSIS FAILED)
			var11 = true
			expect(var11).to.equal(false)
			if Parent_upvr("Test") ~= Parent_upvr() then
				var11 = false
				-- KONSTANTWARNING: GOTO [47] #38
			end
			-- KONSTANTERROR: [28] 23. Error Block 29 end (CF ANALYSIS FAILED)
		end)
		it("should be useable as a table key", function() -- Line 26
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local Parent_upvr_result1 = Parent_upvr()
			expect(({
				[Parent_upvr_result1] = 100;
			})[Parent_upvr_result1]).to.equal(100)
		end)
	end)
end

Script name: table-util
  - Script: 


local module = {}
local HttpService_upvr = game:GetService("HttpService")
local random_state_upvr = Random.new()
local function Sync_upvr(arg1, arg2) -- Line 84, Named "Sync"
	--[[ Upvalues[1]:
		[1]: Sync_upvr (readonly)
	]]
	local var15
	if type(arg1) ~= "table" then
		var15 = false
	else
		var15 = true
	end
	assert(var15, "First argument must be a table")
	if type(arg2) ~= "table" then
		var15 = false
	else
		var15 = true
	end
	assert(var15, "Second argument must be a table")
	var15 = arg1
	local clone_3 = table.clone(var15)
	var15 = pairs(clone_3)
	local pairs_result1, pairs_result2, pairs_result3 = pairs(clone_3)
	for i_2, v_2 in pairs_result1, pairs_result2, pairs_result3 do
		local var20 = arg2[i_2]
		if var20 == nil then
			clone_3[i_2] = nil
		elseif type(v_2) ~= type(var20) then
			if type(var20) == "table" then
				local function DeepCopy(arg1_3) -- Line 44
					--[[ Upvalues[1]:
						[1]: DeepCopy (readonly)
					]]
					local clone = table.clone(arg1_3)
					for i_29, v_24 in clone do
						if type(v_24) == "table" then
							clone[i_29] = DeepCopy(v_24)
						end
					end
					return clone
				end
				clone_3[i_2] = DeepCopy(var20)
			else
				clone_3[i_2] = var20
			end
		else
			DeepCopy = v_2
			if type(DeepCopy) == "table" then
				DeepCopy = v_2
				clone_3[i_2] = Sync_upvr(DeepCopy, var20)
			end
		end
	end
	pairs_result1 = pairs(arg2)
	for i_3, v_3 in pairs(arg2) do
		if clone_3[i_3] == nil then
			DeepCopy = v_3
			if type(DeepCopy) == "table" then
				function DeepCopy(arg1_4) -- Line 44
					--[[ Upvalues[1]:
						[1]: var27_upvr (readonly)
					]]
					local clone_10 = table.clone(arg1_4)
					for i_4, v_4 in clone_10 do
						if type(v_4) == "table" then
							clone_10[i_4] = var27_upvr(v_4)
						end
					end
					return clone_10
				end
				local var27_upvr = DeepCopy
				clone_3[i_3] = var27_upvr(v_3)
			else
				clone_3[i_3] = v_3
			end
		end
	end
	return clone_3
end
local function Reconcile_upvr(arg1, arg2) -- Line 156, Named "Reconcile"
	--[[ Upvalues[1]:
		[1]: Reconcile_upvr (readonly)
	]]
	local var35
	if type(arg1) ~= "table" then
		var35 = false
	else
		var35 = true
	end
	assert(var35, "First argument must be a table")
	if type(arg2) ~= "table" then
		var35 = false
	else
		var35 = true
	end
	assert(var35, "Second argument must be a table")
	var35 = arg1
	var35 = arg2
	for i_5, v_5 in var35 do
		local var36 = arg1[i_5]
		if var36 == nil then
			if type(v_5) == "table" then
				local function DeepCopy_upvr(arg1_5) -- Line 44, Named "DeepCopy"
					--[[ Upvalues[1]:
						[1]: DeepCopy_upvr (readonly)
					]]
					local clone_2 = table.clone(arg1_5)
					for i_6, v_6 in clone_2 do
						if type(v_6) == "table" then
							clone_2[i_6] = DeepCopy_upvr(v_6)
						end
					end
					return clone_2
				end
				table.clone(var35)[i_5] = DeepCopy_upvr(v_5)
			else
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				table.clone(var35)[i_5] = v_5
			end
		else
			DeepCopy_upvr = var36
			if type(DeepCopy_upvr) == "table" then
				DeepCopy_upvr = v_5
				if type(DeepCopy_upvr) == "table" then
					DeepCopy_upvr = var36
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					table.clone(var35)[i_5] = Reconcile_upvr(DeepCopy_upvr, v_5)
				else
					function DeepCopy_upvr(arg1_6) -- Line 44, Named "DeepCopy"
						--[[ Upvalues[1]:
							[1]: var40_upvr (readonly)
						]]
						local clone_8 = table.clone(arg1_6)
						for i_7, v_7 in clone_8 do
							if type(v_7) == "table" then
								clone_8[i_7] = var40_upvr(v_7)
							end
						end
						return clone_8
					end
					local var40_upvr = DeepCopy_upvr
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					table.clone(var35)[i_5] = var40_upvr(var36)
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return table.clone(var35)
end
local function Map_upvr(arg1, arg2) -- Line 262, Named "Map"
	local var51
	if type(arg1) ~= "table" then
		var51 = false
	else
		var51 = true
	end
	assert(var51, "First argument must be a table")
	if type(arg2) ~= "function" then
		var51 = false
	else
		var51 = true
	end
	assert(var51, "Second argument must be a function")
	var51 = #arg1
	var51 = arg1
	for i_8, v_8 in var51 do
		table.create(var51)[i_8] = arg2(v_8, i_8, arg1)
		local var53
	end
	return var53
end
function module.Copy(arg1, arg2) -- Line 40
	if not arg2 then
		return table.clone(arg1)
	end
	local function DeepCopy(arg1_2) -- Line 44
		--[[ Upvalues[1]:
			[1]: DeepCopy (readonly)
		]]
		local clone_7 = table.clone(arg1_2)
		for i, v in clone_7 do
			if type(v) == "table" then
				clone_7[i] = DeepCopy(v)
			end
		end
		return clone_7
	end
	return DeepCopy(arg1)
end
module.Sync = Sync_upvr
module.Reconcile = Reconcile_upvr
function module.SwapRemove(arg1, arg2) -- Line 209
	local len_3 = #arg1
	arg1[arg2] = arg1[len_3]
	arg1[len_3] = nil
end
function module.SwapRemoveFirstValue(arg1, arg2) -- Line 234
	local table_find_result1 = table.find(arg1, arg2)
	if table_find_result1 then
		local len_2 = #arg1
		arg1[table_find_result1] = arg1[len_2]
		arg1[len_2] = nil
	end
	return table_find_result1
end
module.Map = Map_upvr
function module.Filter(arg1, arg2) -- Line 292
	local var62
	if type(arg1) ~= "table" then
		var62 = false
	else
		var62 = true
	end
	assert(var62, "First argument must be a table")
	if type(arg2) ~= "function" then
		var62 = false
	else
		var62 = true
	end
	assert(var62, "Second argument must be a function")
	var62 = #arg1
	local table_create_result1_2 = table.create(var62)
	var62 = #arg1
	if 0 < var62 then
		var62 = 0
		for i_9, v_9 in arg1 do
			if arg2(v_9, i_9, arg1) then
				var62 += 1
				table_create_result1_2[var62] = v_9
			end
		end
		return table_create_result1_2
	end
	var62 = arg1
	for i_10, _ in var62 do
		if arg2(i_9, i_10, arg1) then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			table_create_result1_2[i_10] = i_9
		end
	end
	return table_create_result1_2
end
function module.Reduce(arg1, arg2, arg3) -- Line 335
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var76
	if type(arg1) ~= "table" then
		var76 = false
	else
		var76 = true
	end
	assert(var76, "First argument must be a table")
	if type(arg2) ~= "function" then
		var76 = false
	else
		var76 = true
	end
	assert(var76, "Second argument must be a function")
	var76 = #arg1
	if 0 < var76 then
		var76 = 1
		if arg3 == nil then
			var76 = 2
		end
		for i_11 = var76, #arg1 do
		end
		return arg2(arg1[1], arg1[i_11], i_11, arg1)
	end
	if arg3 == nil then
		local next_result1_2 = next(arg1)
	end
	for i_12, v_11 in next, arg1, next_result1_2 do
	end
	return arg2(next_result1_2, v_11, i_12, arg1)
end
function module.Assign(arg1, ...) -- Line 378
	local clone_6 = table.clone(arg1)
	for _, v_12 in {...} do
		for i_14, v_13 in v_12 do
			clone_6[i_14] = v_13
		end
	end
	return clone_6
end
function module.Extend(arg1, arg2) -- Line 407
	local clone_5 = table.clone(arg1)
	for _, v_14 in arg2 do
		table.insert(clone_5, v_14)
	end
	return clone_5
end
function module.Reverse(arg1) -- Line 432
	local len_4 = #arg1
	local table_create_result1_5 = table.create(len_4)
	for i_16 = 1, len_4 do
		table_create_result1_5[i_16] = arg1[len_4 - i_16 + 1]
	end
	return table_create_result1_5
end
function module.Shuffle(arg1, arg2) -- Line 459
	--[[ Upvalues[1]:
		[1]: random_state_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var101
	if type(arg1) ~= "table" then
		var101 = false
	else
		var101 = true
	end
	assert(var101, "First argument must be a table")
	var101 = arg1
	local clone_9 = table.clone(var101)
	if typeof(arg2) == "Random" then
		var101 = arg2
	else
		var101 = random_state_upvr
	end
	for i_17 = #arg1, 2, -1 do
		local any_NextInteger_result1_2 = var101:NextInteger(1, i_17)
		clone_9[i_17] = clone_9[any_NextInteger_result1_2]
		clone_9[any_NextInteger_result1_2] = clone_9[i_17]
		local var104
	end
	return var104
end
function module.Sample(arg1, arg2, arg3) -- Line 489
	--[[ Upvalues[1]:
		[1]: random_state_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 25 start (CF ANALYSIS FAILED)
	local var109
	if type(arg1) ~= "table" then
		var109 = false
	else
		var109 = true
	end
	assert(var109, "First argument must be a table")
	if type(arg2) ~= "number" then
		var109 = false
		-- KONSTANTWARNING: GOTO [24] #19
	end
	-- KONSTANTERROR: [0] 1. Error Block 25 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [23] 18. Error Block 27 start (CF ANALYSIS FAILED)
	var109 = true
	assert(var109, "Second argument must be a number")
	var109 = arg1
	local clone_4 = table.clone(var109)
	var109 = table.create(arg2)
	if typeof(arg3) == "Random" then
	else
	end
	local len_5 = #arg1
	local clamped_2 = math.clamp(arg2, 1, len_5)
	for i_18 = 1, clamped_2 do
		local any_NextInteger_result1 = random_state_upvr:NextInteger(i_18, len_5)
		clone_4[i_18] = clone_4[any_NextInteger_result1]
		clone_4[any_NextInteger_result1] = clone_4[i_18]
		local _
	end
	table.move(clone_4, 1, clamped_2, 1, var109)
	do
		return var109
	end
	-- KONSTANTERROR: [23] 18. Error Block 27 end (CF ANALYSIS FAILED)
end
function module.Flat(arg1, arg2) -- Line 526
	local var115_upvr
	if type(arg2) == "number" then
		var115_upvr = arg2
	else
		var115_upvr = 1
	end
	local table_create_result1_upvr = table.create(#arg1)
	local function Scan(arg1_7, arg2_2) -- Line 529
		--[[ Upvalues[3]:
			[1]: var115_upvr (readonly)
			[2]: Scan (readonly)
			[3]: table_create_result1_upvr (readonly)
		]]
		for _, v_15 in arg1_7 do
			if type(v_15) == "table" and arg2_2 < var115_upvr then
				Scan(v_15, arg2_2 + 1)
			else
				table.insert(table_create_result1_upvr, v_15)
			end
		end
	end
	Scan(arg1, 0)
	return table_create_result1_upvr
end
function module.FlatMap(arg1, arg2) -- Line 563
	--[[ Upvalues[1]:
		[1]: Map_upvr (readonly)
	]]
	local Map_result1 = Map_upvr(arg1, arg2)
	local table_create_result1_3_upvr = table.create(#Map_result1)
	local var121_upvr = 1
	local function Scan_upvr(arg1_8, arg2_3) -- Line 529, Named "Scan"
		--[[ Upvalues[3]:
			[1]: var121_upvr (readonly)
			[2]: Scan_upvr (readonly)
			[3]: table_create_result1_3_upvr (readonly)
		]]
		for _, v_16 in arg1_8 do
			if type(v_16) == "table" and arg2_3 < var121_upvr then
				Scan_upvr(v_16, arg2_3 + 1)
			else
				table.insert(table_create_result1_3_upvr, v_16)
			end
		end
	end
	var121_upvr = Scan_upvr
	var121_upvr(Map_result1, 0)
	return table_create_result1_3_upvr
end
function module.Keys(arg1) -- Line 589
	local table_create_result1 = table.create(#arg1)
	for i_21 in arg1 do
		table.insert(table_create_result1, i_21)
	end
	return table_create_result1
end
function module.Values(arg1) -- Line 619
	local table_create_result1_4 = table.create(#arg1)
	for _, v_17 in arg1 do
		table.insert(table_create_result1_4, v_17)
	end
	return table_create_result1_4
end
function module.Find(arg1, arg2) -- Line 658
	for i_23, v_18 in arg1 do
		if arg2(v_18, i_23, arg1) then
			return v_18, i_23
		end
	end
	return nil, nil
end
function module.Every(arg1, arg2) -- Line 687
	for i_24, v_19 in arg1 do
		if not arg2(v_19, i_24, arg1) then
			return false
		end
	end
	return true
end
function module.Some(arg1, arg2) -- Line 716
	for i_25, v_20 in arg1 do
		if arg2(v_20, i_25, arg1) then
			return true
		end
	end
	return false
end
function module.Truncate(arg1, arg2) -- Line 742
	local len = #arg1
	local clamped = math.clamp(arg2, 1, len)
	if clamped == len then
		return table.clone(arg1)
	end
	return table.move(arg1, 1, clamped, 1, table.create(clamped))
end
function module.Zip(...) -- Line 775
	local ZipIteratorMap
	if 0 >= select('#', ...) then
		ZipIteratorMap = false
	else
		ZipIteratorMap = true
	end
	assert(ZipIteratorMap, "Must supply at least 1 table")
	function ZipIteratorMap(arg1, arg2) -- Line 790
		for i_27, v_22 in arg1 do
			local next_result1 = next(v_22, arg2)
			if next_result1 ~= nil then
				({})[i_27] = next_result1
			else
				return nil, nil
			end
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		return arg2, {}
	end
	local args_list = {...}
	if 0 < #args_list[1] then
		return function(arg1, arg2) -- Line 777, Named "ZipIteratorArray"
			local var143 = arg2 + 1
			for i_26, v_21 in arg1 do
				local var144 = v_21[var143]
				if var144 ~= nil then
					({})[i_26] = var144
				else
					return nil, nil
				end
			end
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			return var143, {}
		end, args_list, 0
	end
	return ZipIteratorMap, args_list, nil
end
function module.Lock(arg1) -- Line 828
	local function Freeze_upvr(arg1_9) -- Line 829, Named "Freeze"
		--[[ Upvalues[1]:
			[1]: Freeze_upvr (readonly)
		]]
		for i_28, v_23 in pairs(arg1_9) do
			if type(v_23) == "table" then
				arg1_9[i_28] = Freeze_upvr(v_23)
			end
		end
		return table.freeze(arg1_9)
	end
	return Freeze_upvr(arg1)
end
function module.IsEmpty(arg1) -- Line 858
	local var154
	if next(arg1) ~= nil then
		var154 = false
	else
		var154 = true
	end
	return var154
end
function module.EncodeJSON(arg1) -- Line 870
	--[[ Upvalues[1]:
		[1]: HttpService_upvr (readonly)
	]]
	return HttpService_upvr:JSONEncode(arg1)
end
function module.DecodeJSON(arg1) -- Line 882
	--[[ Upvalues[1]:
		[1]: HttpService_upvr (readonly)
	]]
	return HttpService_upvr:JSONDecode(arg1)
end
return module

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Copy (Deep)", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a deep table copy", function() -- Line 5
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_19 = {
				a = {
					b = {
						c = {
							d = 32;
						};
					};
				};
			}
			local any_Copy_result1_3 = Parent_upvr.Copy(tbl_19, true)
			expect(tbl_19).never.to.equal(any_Copy_result1_3)
			expect(tbl_19.a).never.to.equal(any_Copy_result1_3.a)
			expect(any_Copy_result1_3.a.b.c.d).to.equal(tbl_19.a.b.c.d)
		end)
	end)
	describe("Copy (Shallow)", function() -- Line 14
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a shallow dictionary copy", function() -- Line 15
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_21 = {
				a = {
					b = {
						c = {
							d = 32;
						};
					};
				};
			}
			local any_Copy_result1_2 = Parent_upvr.Copy(tbl_21)
			expect(any_Copy_result1_2).never.to.equal(tbl_21)
			expect(any_Copy_result1_2.a).to.equal(tbl_21.a)
			expect(any_Copy_result1_2.a.b.c.d).to.equal(tbl_21.a.b.c.d)
		end)
		it("should create a shallow array copy", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_2 = {10, 20, 30, 40}
			local any_Copy_result1 = Parent_upvr.Copy(tbl_2)
			expect(any_Copy_result1).never.to.equal(tbl_2)
			for i, v in ipairs(tbl_2) do
				expect(any_Copy_result1[i]).to.equal(v)
			end
		end)
	end)
	describe("Sync", function() -- Line 33
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should sync tables", function() -- Line 34
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_7 = {
				a = 32;
				b = 64;
				c = 128;
				e = {
					h = 1;
				};
			}
			local any_Sync_result1 = Parent_upvr.Sync({
				a = 32;
				b = 10;
				d = 1;
				e = {
					h = 2;
					n = 2;
				};
				f = {
					x = 10;
				};
			}, tbl_7)
			expect(any_Sync_result1.a).to.equal(tbl_7.a)
			expect(any_Sync_result1.b).to.equal(10)
			expect(any_Sync_result1.c).to.equal(tbl_7.c)
			expect(any_Sync_result1.d).never.to.be.ok()
			expect(any_Sync_result1.e.h).to.equal(2)
			expect(any_Sync_result1.e.n).never.to.be.ok()
			expect(any_Sync_result1.f).never.to.be.ok()
		end)
	end)
	describe("Reconcile", function() -- Line 48
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should reconcile table", function() -- Line 49
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_8 = {
				kills = 0;
				deaths = 0;
				xp = 10;
				stuff = {};
				stuff2 = "abc";
				stuff3 = {"data"};
			}
			local tbl_24 = {
				kills = 10;
				deaths = 4;
				stuff = {"abc", "xyz"};
				extra = 5;
				stuff2 = {
					abc = 10;
				};
				stuff3 = true;
			}
			local any_Reconcile_result1 = Parent_upvr.Reconcile(tbl_24, tbl_8)
			expect(any_Reconcile_result1).never.to.equal(tbl_24)
			expect(any_Reconcile_result1).never.to.equal(tbl_8)
			expect(any_Reconcile_result1.kills).to.equal(10)
			expect(any_Reconcile_result1.deaths).to.equal(4)
			expect(any_Reconcile_result1.xp).to.equal(10)
			expect(any_Reconcile_result1.stuff[1]).to.equal("abc")
			expect(any_Reconcile_result1.stuff[2]).to.equal("xyz")
			expect(any_Reconcile_result1.extra).to.equal(5)
			expect(type(any_Reconcile_result1.stuff2)).to.equal("table")
			expect(any_Reconcile_result1.stuff2).never.to.equal(tbl_24.stuff2)
			expect(any_Reconcile_result1.stuff2.abc).to.equal(10)
			expect(type(any_Reconcile_result1.stuff3)).to.equal("boolean")
			expect(any_Reconcile_result1.stuff3).to.equal(true)
		end)
	end)
	describe("SwapRemove", function() -- Line 70
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should swap remove index", function() -- Line 71
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_22 = {1, 2, 3, 4, 5}
			Parent_upvr.SwapRemove(tbl_22, 3)
			expect(#tbl_22).to.equal(4)
			expect(tbl_22[3]).to.equal(5)
		end)
	end)
	describe("SwapRemoveFirstValue", function() -- Line 79
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should swap remove first value given", function() -- Line 80
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_5 = {"hello", "world", "goodbye", "planet"}
			Parent_upvr.SwapRemoveFirstValue(tbl_5, "world")
			expect(#tbl_5).to.equal(3)
			expect(tbl_5[2]).to.equal("planet")
		end)
	end)
	describe("Map", function() -- Line 88
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should map table", function() -- Line 89
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Map_result1 = Parent_upvr.Map({{
				FirstName = "John";
				LastName = "Doe";
			}, {
				FirstName = "Jane";
				LastName = "Smith";
			}}, function(arg1) -- Line 94
				return arg1.FirstName..' '..arg1.LastName
			end)
			expect(any_Map_result1[1]).to.equal("John Doe")
			expect(any_Map_result1[2]).to.equal("Jane Smith")
		end)
	end)
	describe("Filter", function() -- Line 102
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should filter table", function() -- Line 103
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Filter_result1 = Parent_upvr.Filter({10, 20, 30, 40, 50, 60, 70, 80, 90}, function(arg1) -- Line 105
				local var60 = false
				if 30 <= arg1 then
					if arg1 > 60 then
						var60 = false
					else
						var60 = true
					end
				end
				return var60
			end)
			expect(#any_Filter_result1).to.equal(4)
			expect(any_Filter_result1[1]).to.equal(30)
			expect(any_Filter_result1[#any_Filter_result1]).to.equal(60)
		end)
	end)
	describe("Reduce", function() -- Line 114
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should reduce table with numbers", function() -- Line 115
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({1, 2, 3, 4, 5}, function(arg1, arg2) -- Line 117
				return arg1 + arg2
			end)).to.equal(15)
		end)
		it("should reduce table", function() -- Line 123
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({{
				Score = 10;
			}, {
				Score = 20;
			}, {
				Score = 30;
			}}, function(arg1, arg2) -- Line 125
				return arg1 + arg2.Score
			end, 0)).to.equal(60)
		end)
		it("should reduce table with initial value", function() -- Line 131
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({{
				Score = 10;
			}, {
				Score = 20;
			}, {
				Score = 30;
			}}, function(arg1, arg2) -- Line 133
				return arg1 + arg2.Score
			end, 40)).to.equal(100)
		end)
		it("should reduce functions", function() -- Line 139
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Reduce({function(arg1) -- Line 140, Named "Square"
				return arg1 * arg1
			end, function(arg1) -- Line 143, Named "Double"
				return arg1 * 2
			end}, function(arg1, arg2) -- Line 146
				return function(arg1_2) -- Line 147
					--[[ Upvalues[2]:
						[1]: arg1 (readonly)
						[2]: arg2 (readonly)
					]]
					return arg1(arg2(arg1_2))
				end
			end)(10)).to.equal(400)
		end)
	end)
	describe("Assign", function() -- Line 156
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should assign tables", function() -- Line 157
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Assign_result1 = Parent_upvr.Assign({
				a = 32;
				x = 100;
			}, {
				b = 64;
				c = 128;
			}, {
				a = 10;
				c = 100;
				d = 200;
			})
			expect(any_Assign_result1.a).to.equal(10)
			expect(any_Assign_result1.b).to.equal(64)
			expect(any_Assign_result1.c).to.equal(100)
			expect(any_Assign_result1.d).to.equal(200)
			expect(any_Assign_result1.x).to.equal(100)
		end)
	end)
	describe("Extend", function() -- Line 170
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should extend tables", function() -- Line 171
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.Extend({'a', 'b', 'c'}, {'d', 'e', 'f'}))).to.equal("abcdef")
		end)
	end)
	describe("Reverse", function() -- Line 179
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should create a table in reverse", function() -- Line 180
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.Reverse({1, 2, 3}))).to.equal("321")
		end)
	end)
	describe("Shuffle", function() -- Line 187
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should shuffle a table", function() -- Line 188
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_9_upvr = {1, 2, 3, 4, 5}
			expect(function() -- Line 190
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: tbl_9_upvr (readonly)
				]]
				Parent_upvr.Shuffle(tbl_9_upvr)
			end).never.to.throw()
		end)
	end)
	describe("Sample", function() -- Line 196
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should sample a table", function() -- Line 197
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(#Parent_upvr.Sample({1, 2, 3, 4, 5}, 3)).to.equal(3)
		end)
	end)
	describe("Flat", function() -- Line 204
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should flatten table", function() -- Line 205
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.Flat({1, 2, 3, {4, 5, {6, 7}}}, 3))).to.equal("1234567")
		end)
	end)
	describe("FlatMap", function() -- Line 212
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should map and flatten table", function() -- Line 213
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(table.concat(Parent_upvr.FlatMap({1, 2, 3, 4, 5, 6, 7}, function(arg1) -- Line 215
				local module = {}
				module[1] = arg1
				module[2] = arg1 * 2
				return module
			end))).to.equal("12243648510612714")
		end)
	end)
	describe("Keys", function() -- Line 222
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should give all keys of table", function() -- Line 223
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Keys_result1 = Parent_upvr.Keys({
				a = 1;
				b = 2;
				c = 3;
			})
			expect(#any_Keys_result1).to.equal(3)
			expect(table.find(any_Keys_result1, 'a')).to.be.ok()
			expect(table.find(any_Keys_result1, 'b')).to.be.ok()
			expect(table.find(any_Keys_result1, 'c')).to.be.ok()
		end)
	end)
	describe("Values", function() -- Line 233
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should give all values of table", function() -- Line 234
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Values_result1 = Parent_upvr.Values({
				a = 1;
				b = 2;
				c = 3;
			})
			expect(#any_Values_result1).to.equal(3)
			expect(table.find(any_Values_result1, 1)).to.be.ok()
			expect(table.find(any_Values_result1, 2)).to.be.ok()
			expect(table.find(any_Values_result1, 3)).to.be.ok()
		end)
	end)
	describe("Find", function() -- Line 244
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should find item in array", function() -- Line 245
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Find_result1, any_Find_result2_2 = Parent_upvr.Find({10, 20, 30}, function(arg1) -- Line 247
				if arg1 ~= 20 then
				else
				end
				return true
			end)
			expect(any_Find_result1).to.be.ok()
			expect(any_Find_result2_2).to.equal(2)
			expect(any_Find_result1).to.equal(20)
		end)
		it("should find item in dictionary", function() -- Line 255
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_Find_result1_2, any_Find_result2 = Parent_upvr.Find({{
				Score = 10;
			}, {
				Score = 20;
			}, {
				Score = 30;
			}}, function(arg1) -- Line 257
				local var132
				if arg1.Score ~= 20 then
					var132 = false
				else
					var132 = true
				end
				return var132
			end)
			expect(any_Find_result1_2).to.be.ok()
			expect(any_Find_result2).to.equal(2)
			expect(any_Find_result1_2.Score).to.equal(20)
		end)
	end)
	describe("Every", function() -- Line 266
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should see every value is above 20", function() -- Line 267
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Every({21, 40, 200}, function(arg1) -- Line 269
				local var139
				if 20 >= arg1 then
					var139 = false
				else
					var139 = true
				end
				return var139
			end)).to.equal(true)
		end)
		it("should see every value is not above 20", function() -- Line 275
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Every({20, 40, 200}, function(arg1) -- Line 277
				local var143
				if 20 >= arg1 then
					var143 = false
				else
					var143 = true
				end
				return var143
			end)).never.to.equal(true)
		end)
	end)
	describe("Some", function() -- Line 284
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should see some value is above 20", function() -- Line 285
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some({5, 40, 1}, function(arg1) -- Line 287
				local var148
				if 20 >= arg1 then
					var148 = false
				else
					var148 = true
				end
				return var148
			end)).to.equal(true)
		end)
		it("should see some value is not above 20", function() -- Line 293
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.Some({5, 15, 1}, function(arg1) -- Line 295
				local var152
				if 20 >= arg1 then
					var152 = false
				else
					var152 = true
				end
				return var152
			end)).never.to.equal(true)
		end)
	end)
	describe("Truncate", function() -- Line 302
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should truncate an array", function() -- Line 303
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_3 = {1, 2, 3, 4, 5}
			local any_Truncate_result1_2 = Parent_upvr.Truncate(tbl_3, 3)
			expect(#any_Truncate_result1_2).to.equal(3)
			expect(any_Truncate_result1_2[1]).to.equal(tbl_3[1])
			expect(any_Truncate_result1_2[2]).to.equal(tbl_3[2])
			expect(any_Truncate_result1_2[3]).to.equal(tbl_3[3])
		end)
		it("should truncate an array with out of bounds sizes", function() -- Line 312
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_20_upvr = {1, 2, 3, 4, 5}
			expect(function() -- Line 314
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: tbl_20_upvr (readonly)
				]]
				Parent_upvr.Truncate(tbl_20_upvr, -1)
			end).to.never.throw()
			expect(function() -- Line 317
				--[[ Upvalues[2]:
					[1]: Parent_upvr (copied, readonly)
					[2]: tbl_20_upvr (readonly)
				]]
				Parent_upvr.Truncate(tbl_20_upvr, #tbl_20_upvr + 1)
			end).to.never.throw()
			local any_Truncate_result1 = Parent_upvr.Truncate(tbl_20_upvr, #tbl_20_upvr + 10)
			expect(#any_Truncate_result1).to.equal(#tbl_20_upvr)
			expect(any_Truncate_result1).to.never.equal(tbl_20_upvr)
		end)
	end)
	describe("Lock", function() -- Line 326
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should lock a table", function() -- Line 327
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_18_upvr = {
				abc = {
					xyz = {
						num = 32;
					};
				};
			}
			expect(function() -- Line 329
				--[[ Upvalues[1]:
					[1]: tbl_18_upvr (readonly)
				]]
				tbl_18_upvr.abc.xyz.num = 64
			end).never.to.throw()
			expect(tbl_18_upvr.abc.xyz.num).to.equal(64)
			expect(tbl_18_upvr).to.equal(Parent_upvr.Lock(tbl_18_upvr))
			expect(function() -- Line 335
				--[[ Upvalues[1]:
					[1]: tbl_18_upvr (readonly)
				]]
				tbl_18_upvr.abc.xyz.num = 10
			end).to.throw()
		end)
	end)
	describe("Zip", function() -- Line 341
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should zip arrays together", function() -- Line 342
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_17 = {1, 2, 3, 4, 5}
			local tbl_16 = {9, 8, 7, 6, 5}
			local tbl_23 = {1, 1, 1, 1, 1}
			local var181
			for i_2, v_2 in Parent_upvr.Zip(tbl_17, tbl_16, tbl_23) do
				expect(v_2[1]).to.equal(tbl_17[i_2])
				expect(v_2[2]).to.equal(tbl_16[i_2])
				expect(v_2[3]).to.equal(tbl_23[i_2])
			end
			expect(nil).to.equal(math.min(#tbl_17, #tbl_16, #tbl_23))
		end)
		it("should zip arrays of different lengths together", function() -- Line 356
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl = {1, 2, 3, 4, 5}
			local tbl_15 = {9, 8, 7, 6}
			local tbl_14 = {1, 1, 1}
			local var193
			for i_3, v_3 in Parent_upvr.Zip(tbl, tbl_15, tbl_14) do
				expect(v_3[1]).to.equal(tbl[i_3])
				expect(v_3[2]).to.equal(tbl_15[i_3])
				expect(v_3[3]).to.equal(tbl_14[i_3])
			end
			expect(nil).to.equal(math.min(#tbl, #tbl_15, #tbl_14))
		end)
		it("should zip maps together", function() -- Line 370
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_13 = {
				a = 10;
				b = 20;
				c = 30;
			}
			local tbl_4 = {
				a = 100;
				b = 200;
				c = 300;
			}
			local tbl_12 = {
				a = 3000;
				b = 2000;
				c = 3000;
			}
			for i_4, v_4 in Parent_upvr.Zip(tbl_13, tbl_4, tbl_12) do
				expect(v_4[1]).to.equal(tbl_13[i_4])
				expect(v_4[2]).to.equal(tbl_4[i_4])
				expect(v_4[3]).to.equal(tbl_12[i_4])
			end
		end)
		it("should zip maps of different keys together", function() -- Line 381
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local tbl_11 = {
				a = 10;
				b = 20;
				c = 30;
				d = 40;
			}
			local tbl_10 = {
				a = 100;
				b = 200;
				c = 300;
				z = 10;
			}
			local tbl_6 = {
				a = 3000;
				b = 2000;
				c = 3000;
				x = 0;
			}
			for i_5, v_5 in Parent_upvr.Zip(tbl_11, tbl_10, tbl_6) do
				expect(v_5[1]).to.equal(tbl_11[i_5])
				expect(v_5[2]).to.equal(tbl_10[i_5])
				expect(v_5[3]).to.equal(tbl_6[i_5])
			end
		end)
	end)
	describe("IsEmpty", function() -- Line 393
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should detect that table is empty", function() -- Line 394
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.IsEmpty({})).to.equal(true)
		end)
		it("should detect that array is not empty", function() -- Line 400
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.IsEmpty({10, 20, 30})).to.equal(false)
		end)
		it("should detect that dictionary is not empty", function() -- Line 406
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.IsEmpty({
				a = 10;
				b = 20;
				c = 30;
			})).to.equal(false)
		end)
	end)
	describe("JSON", function() -- Line 413
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		it("should encode json", function() -- Line 414
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			expect(Parent_upvr.EncodeJSON({
				hello = "world";
			})).to.equal("{\"hello\":\"world\"}")
		end)
		it("should decode json", function() -- Line 420
			--[[ Upvalues[1]:
				[1]: Parent_upvr (copied, readonly)
			]]
			local any_DecodeJSON_result1 = Parent_upvr.DecodeJSON("{\"hello\":\"world\"}")
			expect(any_DecodeJSON_result1).to.be.a("table")
			expect(any_DecodeJSON_result1.hello).to.equal("world")
		end)
	end)
end

Script name: Signal
  - Script: 


return require(script.Parent.Parent["sleitnick_signal@1.5.0"].signal)

Script name: timer
  - Script: 


local RunService_upvr = game:GetService("RunService")
local module_upvr = {}
module_upvr.__index = module_upvr
local Signal_upvr = require(script.Parent.Signal)
function module_upvr.new(arg1) -- Line 73
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Signal_upvr (readonly)
	]]
	local var4
	if type(arg1) ~= "number" then
		var4 = false
	else
		var4 = true
	end
	assert(var4, "Argument #1 to Timer.new must be a number; got "..type(arg1))
	if 0 > arg1 then
		var4 = false
	else
		var4 = true
	end
	assert(var4, "Argument #1 to Timer.new must be greater or equal to 0; got "..tostring(arg1))
	var4 = {}
	local setmetatable_result1 = setmetatable(var4, module_upvr)
	var4 = nil
	setmetatable_result1._runHandle = var4
	setmetatable_result1.Interval = arg1
	var4 = RunService_upvr.Heartbeat
	setmetatable_result1.UpdateSignal = var4
	var4 = time
	setmetatable_result1.TimeFunction = var4
	var4 = true
	setmetatable_result1.AllowDrift = var4
	var4 = Signal_upvr.new()
	setmetatable_result1.Tick = var4
	return setmetatable_result1
end
function module_upvr.Simple(arg1, arg2, arg3, arg4, arg5) -- Line 103
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local var6 = arg4
	if not var6 then
		var6 = RunService_upvr.Heartbeat
	end
	local var7_upvr = arg5
	if not var7_upvr then
		var7_upvr = time
	end
	if arg3 then
		task.defer(arg2)
	end
	local var9_upvw = var7_upvr() + arg1
	return var6:Connect(function() -- Line 116
		--[[ Upvalues[4]:
			[1]: var7_upvr (readonly)
			[2]: var9_upvw (read and write)
			[3]: arg1 (readonly)
			[4]: arg2 (readonly)
		]]
		local var7_result1 = var7_upvr()
		if var9_upvw <= var7_result1 then
			var9_upvw = var7_result1 + arg1
			task.defer(arg2)
		end
	end)
end
function module_upvr.Is(arg1) -- Line 128
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var11 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= module_upvr then
			var11 = false
		else
			var11 = true
		end
	end
	return var11
end
function module_upvr._startTimer(arg1) -- Line 132
	local TimeFunction_upvr_2 = arg1.TimeFunction
	local var14_upvw = TimeFunction_upvr_2() + arg1.Interval
	arg1._runHandle = arg1.UpdateSignal:Connect(function() -- Line 135
		--[[ Upvalues[3]:
			[1]: TimeFunction_upvr_2 (readonly)
			[2]: var14_upvw (read and write)
			[3]: arg1 (readonly)
		]]
		local var12_result1 = TimeFunction_upvr_2()
		if var14_upvw <= var12_result1 then
			var14_upvw = var12_result1 + arg1.Interval
			arg1.Tick:Fire()
		end
	end)
end
function module_upvr._startTimerNoDrift(arg1) -- Line 144
	local var16_upvw
	if 0 >= arg1.Interval then
		var16_upvw = false
	else
		var16_upvw = true
	end
	assert(var16_upvw, "Interval must be greater than 0 when AllowDrift is set to false")
	local TimeFunction_upvr = arg1.TimeFunction
	var16_upvw = 1
	local TimeFunction_upvr_result1_upvr = TimeFunction_upvr()
	local var20_upvw = TimeFunction_upvr_result1_upvr + arg1.Interval
	arg1._runHandle = arg1.UpdateSignal:Connect(function() -- Line 150
		--[[ Upvalues[5]:
			[1]: TimeFunction_upvr (readonly)
			[2]: var20_upvw (read and write)
			[3]: var16_upvw (read and write)
			[4]: TimeFunction_upvr_result1_upvr (readonly)
			[5]: arg1 (readonly)
		]]
		while var20_upvw <= TimeFunction_upvr() do
			var16_upvw += 1
			var20_upvw = TimeFunction_upvr_result1_upvr + arg1.Interval * var16_upvw
			arg1.Tick:Fire()
		end
	end)
end
function module_upvr.Start(arg1) -- Line 167
	if arg1._runHandle then
	else
		if arg1.AllowDrift then
			arg1:_startTimer()
			return
		end
		arg1:_startTimerNoDrift()
	end
end
function module_upvr.StartNow(arg1) -- Line 186
	if arg1._runHandle then
	else
		arg1.Tick:Fire()
		arg1:Start()
	end
end
function module_upvr.Stop(arg1) -- Line 201
	if not arg1._runHandle then
	else
		arg1._runHandle:Disconnect()
		arg1._runHandle = nil
	end
end
function module_upvr.IsRunning(arg1) -- Line 218
	local var21
	if arg1._runHandle == nil then
		var21 = false
	else
		var21 = true
	end
	return var21
end
function module_upvr.Destroy(arg1) -- Line 225
	arg1.Tick:Destroy()
	arg1:Stop()
end
return module_upvr

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Timer", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		local var4_upvw
		beforeEach(function() -- Line 7
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			var4_upvw = Parent_upvr.new(0.1)
			var4_upvw.TimeFunction = os.clock
		end)
		afterEach(function() -- Line 12
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			if var4_upvw then
				var4_upvw:Destroy()
				var4_upvw = nil
			end
		end)
		it("should create a new timer", function() -- Line 19
			--[[ Upvalues[2]:
				[1]: Parent_upvr (copied, readonly)
				[2]: var4_upvw (read and write)
			]]
			expect(Parent_upvr.Is(var4_upvw)).to.equal(true)
		end)
		it("should tick appropriately", function() -- Line 23
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			var4_upvw:Start()
			var4_upvw.Tick:Wait()
			local var9 = os.clock() - os.clock()
			expect(var9).to.be.near(var9, 0.02)
		end)
		it("should start immediately", function() -- Line 31
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var11_upvw
			var4_upvw.Tick:Connect(function() -- Line 34
				--[[ Upvalues[1]:
					[1]: var11_upvw (read and write)
				]]
				if not var11_upvw then
					var11_upvw = os.clock()
				end
			end)
			var4_upvw:StartNow()
			var4_upvw.Tick:Wait()
			expect(var11_upvw).to.be.a("number")
			expect(var11_upvw - os.clock()).to.be.near(0, 0.02)
		end)
		it("should stop", function() -- Line 46
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var14_upvw = 0
			var4_upvw.Tick:Connect(function() -- Line 48
				--[[ Upvalues[1]:
					[1]: var14_upvw (read and write)
				]]
				var14_upvw += 1
			end)
			var4_upvw:StartNow()
			var4_upvw:Stop()
			task.wait(1)
			expect(var14_upvw).to.equal(1)
		end)
		it("should detect if running", function() -- Line 57
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			expect(var4_upvw:IsRunning()).to.equal(false)
			var4_upvw:Start()
			expect(var4_upvw:IsRunning()).to.equal(true)
			var4_upvw:Stop()
			expect(var4_upvw:IsRunning()).to.equal(false)
			var4_upvw:StartNow()
			expect(var4_upvw:IsRunning()).to.equal(true)
			var4_upvw:Stop()
			expect(var4_upvw:IsRunning()).to.equal(false)
		end)
	end)
end

Script name: trove
  - Script: 


local newproxy_result1_upvr_2 = newproxy()
local newproxy_result1_upvr = newproxy()
local function GetObjectCleanupFunction_upvr(arg1, arg2) -- Line 10, Named "GetObjectCleanupFunction"
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	local typeof_result1 = typeof(arg1)
	if typeof_result1 == "function" then
		return newproxy_result1_upvr_2
	end
	if typeof_result1 == "thread" then
		return newproxy_result1_upvr
	end
	if arg2 then
		return arg2
	end
	if typeof_result1 == "Instance" then
		return "Destroy"
	end
	if typeof_result1 == "RBXScriptConnection" then
		return "Disconnect"
	end
	if typeof_result1 == "table" then
		if typeof(arg1.Destroy) == "function" then
			return "Destroy"
		end
		if typeof(arg1.Disconnect) == "function" then
			return "Disconnect"
		end
	end
	error("Failed to get cleanup function for object "..typeof_result1..": "..tostring(arg1), 3)
end
local function _(arg1) -- Line 34, Named "AssertPromiseLike"
	if type(arg1) ~= "table" or type(arg1.getStatus) ~= "function" or type(arg1.finally) ~= "function" or type(arg1.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
end
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new() -- Line 57
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._objects = {}
	return setmetatable_result1
end
function module_upvr.Extend(arg1) -- Line 82
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	return arg1:Construct(module_upvr)
end
function module_upvr.Clone(arg1, arg2) -- Line 90
	return arg1:Add(arg2:Clone())
end
function module_upvr.Construct(arg1, arg2, ...) -- Line 127
	local var6
	local type_result1 = type(arg2)
	if type_result1 == "table" then
		var6 = arg2.new(...)
	elseif type_result1 == "function" then
		var6 = arg2(...)
	end
	return arg1:Add(var6)
end
function module_upvr.Connect(arg1, arg2, arg3) -- Line 153
	return arg1:Add(arg2:Connect(arg3))
end
local RunService_upvr = game:GetService("RunService")
function module_upvr.BindToRenderStep(arg1, arg2, arg3, arg4) -- Line 170
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	RunService_upvr:BindToRenderStep(arg2, arg3, arg4)
	arg1:Add(function() -- Line 172
		--[[ Upvalues[2]:
			[1]: RunService_upvr (copied, readonly)
			[2]: arg2 (readonly)
		]]
		RunService_upvr:UnbindFromRenderStep(arg2)
	end)
end
function module_upvr.AddPromise(arg1, arg2) -- Line 200
	if type(arg2) ~= "table" or type(arg2.getStatus) ~= "function" or type(arg2.finally) ~= "function" or type(arg2.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
	if arg2:getStatus() == "Started" then
		arg2:finally(function() -- Line 203
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			return arg1:_findAndRemoveFromObjects(arg2, false)
		end)
		arg1:Add(arg2, "cancel")
	end
	return arg2
end
function module_upvr.Add(arg1, arg2, arg3) -- Line 259
	--[[ Upvalues[1]:
		[1]: GetObjectCleanupFunction_upvr (readonly)
	]]
	local tbl = {}
	tbl[1] = arg2
	tbl[2] = GetObjectCleanupFunction_upvr(arg2, arg3)
	table.insert(arg1._objects, tbl)
	return arg2
end
function module_upvr.Remove(arg1, arg2) -- Line 275
	return arg1:_findAndRemoveFromObjects(arg2, true)
end
function module_upvr.Clean(arg1) -- Line 284
	for _, v in ipairs(arg1._objects) do
		arg1:_cleanupObject(v[1], v[2])
	end
	table.clear(arg1._objects)
end
function module_upvr._findAndRemoveFromObjects(arg1, arg2, arg3) -- Line 291
	local _objects = arg1._objects
	for i_2, v_2 in ipairs(_objects) do
		if v_2[1] == arg2 then
			local len = #_objects
			_objects[i_2] = _objects[len]
			_objects[len] = nil
			if arg3 then
				arg1:_cleanupObject(v_2[1], v_2[2])
			end
			return true
		end
	end
	return false
end
function module_upvr._cleanupObject(arg1, arg2, arg3) -- Line 307
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	if arg3 == newproxy_result1_upvr_2 then
		arg2()
	else
		if arg3 == newproxy_result1_upvr then
			coroutine.close(arg2)
			return
		end
		arg2[arg3](arg2)
	end
end
function module_upvr.AttachToInstance(arg1, arg2) -- Line 330
	assert(arg2:IsDescendantOf(game), "Instance is not a descendant of the game hierarchy")
	return arg1:Connect(arg2.Destroying, function() -- Line 332
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:Destroy()
	end)
end
function module_upvr.Destroy(arg1) -- Line 340
	arg1:Clean()
end
return module_upvr

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Trove", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		local var4_upvw
		beforeEach(function() -- Line 7
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			var4_upvw = Parent_upvr.new()
		end)
		afterEach(function() -- Line 11
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			if var4_upvw then
				var4_upvw:Destroy()
				var4_upvw = nil
			end
		end)
		it("should add and clean up roblox instance", function() -- Line 18
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_4 = Instance.new("Part")
			Part_4.Parent = workspace
			var4_upvw:Add(Part_4)
			var4_upvw:Destroy()
			expect(Part_4.Parent).to.equal(nil)
		end)
		it("should add and clean up roblox connection", function() -- Line 26
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1 = workspace.Changed:Connect(function() -- Line 27
			end)
			var4_upvw:Add(any_Connect_result1)
			var4_upvw:Destroy()
			expect(any_Connect_result1.Connected).to.equal(false)
		end)
		it("should add and clean up a table with a destroy method", function() -- Line 33
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_2 = {
				Destroyed = false;
			}
			local function Destroy(arg1) -- Line 35
				arg1.Destroyed = true
			end
			tbl_2.Destroy = Destroy
			var4_upvw:Add(tbl_2)
			var4_upvw:Destroy()
			expect(tbl_2.Destroyed).to.equal(true)
		end)
		it("should add and clean up a table with a disconnect method", function() -- Line 43
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl = {
				Connected = true;
				Disconnect = function(arg1) -- Line 45, Named "Disconnect"
					arg1.Connected = false
				end;
			}
			var4_upvw:Add(tbl)
			var4_upvw:Destroy()
			expect(tbl.Connected).to.equal(false)
		end)
		it("should add and clean up a function", function() -- Line 53
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var17_upvw = false
			var4_upvw:Add(function() -- Line 55
				--[[ Upvalues[1]:
					[1]: var17_upvw (read and write)
				]]
				var17_upvw = true
			end)
			var4_upvw:Destroy()
			expect(var17_upvw).to.equal(true)
		end)
		it("should allow a custom cleanup method", function() -- Line 62
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_3 = {
				Cleaned = false;
				Cleanup = function(arg1) -- Line 64, Named "Cleanup"
					arg1.Cleaned = true
				end;
			}
			var4_upvw:Add(tbl_3, "Cleanup")
			var4_upvw:Destroy()
			expect(tbl_3.Cleaned).to.equal(true)
		end)
		it("should return the object passed to add", function() -- Line 72
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part = Instance.new("Part")
			expect(Part).to.equal(var4_upvw:Add(Part))
			var4_upvw:Destroy()
		end)
		it("should fail to add object without proper cleanup method", function() -- Line 79
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_4_upvr = {}
			expect(function() -- Line 81
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: tbl_4_upvr (readonly)
				]]
				var4_upvw:Add(tbl_4_upvr)
			end).to.throw()
		end)
		it("should construct an object and add it", function() -- Line 86
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_upvr = {}
			tbl_upvr.__index = tbl_upvr
			function tbl_upvr.new(arg1) -- Line 89
				--[[ Upvalues[1]:
					[1]: tbl_upvr (readonly)
				]]
				local setmetatable_result1 = setmetatable({}, tbl_upvr)
				setmetatable_result1._msg = arg1
				setmetatable_result1._destroyed = false
				return setmetatable_result1
			end
			function tbl_upvr.Destroy(arg1) -- Line 95
				arg1._destroyed = true
			end
			local any_Construct_result1 = var4_upvw:Construct(tbl_upvr, "abc")
			expect(typeof(any_Construct_result1)).to.equal("table")
			expect(getmetatable(any_Construct_result1)).to.equal(tbl_upvr)
			expect(any_Construct_result1._msg).to.equal("abc")
			expect(any_Construct_result1._destroyed).to.equal(false)
			var4_upvw:Destroy()
			expect(any_Construct_result1._destroyed).to.equal(true)
		end)
		it("should connect to a signal", function() -- Line 108
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_4 = var4_upvw:Connect(workspace.Changed, function() -- Line 109
			end)
			expect(typeof(any_Connect_result1_4)).to.equal("RBXScriptConnection")
			expect(any_Connect_result1_4.Connected).to.equal(true)
			var4_upvw:Destroy()
			expect(any_Connect_result1_4.Connected).to.equal(false)
		end)
		it("should remove an object", function() -- Line 116
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_2 = var4_upvw:Connect(workspace.Changed, function() -- Line 117
			end)
			expect(var4_upvw:Remove(any_Connect_result1_2)).to.equal(true)
			expect(any_Connect_result1_2.Connected).to.equal(false)
		end)
		it("should not remove an object not in the trove", function() -- Line 122
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_3 = workspace.Changed:Connect(function() -- Line 123
			end)
			expect(var4_upvw:Remove(any_Connect_result1_3)).to.equal(false)
			expect(any_Connect_result1_3.Connected).to.equal(true)
			any_Connect_result1_3:Disconnect()
		end)
		it("should attach to instance", function() -- Line 129
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_3 = Instance.new("Part")
			Part_3.Parent = workspace
			local any_AttachToInstance_result1 = var4_upvw:AttachToInstance(Part_3)
			expect(any_AttachToInstance_result1.Connected).to.equal(true)
			Part_3:Destroy()
			expect(any_AttachToInstance_result1.Connected).to.equal(false)
		end)
		it("should fail to attach to instance not in hierarchy", function() -- Line 138
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_2_upvr = Instance.new("Part")
			expect(function() -- Line 140
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: Part_2_upvr (readonly)
				]]
				var4_upvw:AttachToInstance(Part_2_upvr)
			end).to.throw()
		end)
		it("should extend itself", function() -- Line 145
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			local any_Extend_result1 = var4_upvw:Extend()
			local var47_upvw = false
			any_Extend_result1:Add(function() -- Line 148
				--[[ Upvalues[1]:
					[1]: var47_upvw (read and write)
				]]
				var47_upvw = true
			end)
			expect(any_Extend_result1).to.be.a("table")
			expect(getmetatable(any_Extend_result1)).to.equal(Parent_upvr)
			var4_upvw:Clean()
			expect(var47_upvw).to.equal(true)
		end)
		it("should clone an instance", function() -- Line 157
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Construct_result1_2 = var4_upvw:Construct(Instance.new, "Part")
			any_Construct_result1_2.Name = "TroveCloneTest"
			local clone = var4_upvw:Clone(any_Construct_result1_2)
			expect(typeof(clone)).to.equal("Instance")
			expect(clone).to.never.equal(any_Construct_result1_2)
			expect(clone.Name).to.equal("TroveCloneTest")
			expect(any_Construct_result1_2.Name).to.equal(clone.Name)
		end)
		it("should clean up a thread", function() -- Line 168
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local coroutine_create_result1 = coroutine.create(function() -- Line 169
			end)
			var4_upvw:Add(coroutine_create_result1)
			expect(coroutine.status(coroutine_create_result1)).to.equal("suspended")
			var4_upvw:Clean()
			expect(coroutine.status(coroutine_create_result1)).to.equal("dead")
		end)
	end)
end

Script name: trove
  - Script: 


local newproxy_result1_upvr_2 = newproxy()
local newproxy_result1_upvr = newproxy()
local function GetObjectCleanupFunction_upvr(arg1, arg2) -- Line 10, Named "GetObjectCleanupFunction"
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	local typeof_result1 = typeof(arg1)
	if typeof_result1 == "function" then
		return newproxy_result1_upvr_2
	end
	if typeof_result1 == "thread" then
		return newproxy_result1_upvr
	end
	if arg2 then
		return arg2
	end
	if typeof_result1 == "Instance" then
		return "Destroy"
	end
	if typeof_result1 == "RBXScriptConnection" then
		return "Disconnect"
	end
	if typeof_result1 == "table" then
		if typeof(arg1.Destroy) == "function" then
			return "Destroy"
		end
		if typeof(arg1.Disconnect) == "function" then
			return "Disconnect"
		end
	end
	error("Failed to get cleanup function for object "..typeof_result1..": "..tostring(arg1), 3)
end
local function _(arg1) -- Line 34, Named "AssertPromiseLike"
	if type(arg1) ~= "table" or type(arg1.getStatus) ~= "function" or type(arg1.finally) ~= "function" or type(arg1.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
end
local module_upvr = {}
module_upvr.__index = module_upvr
function module_upvr.new() -- Line 57
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local setmetatable_result1 = setmetatable({}, module_upvr)
	setmetatable_result1._objects = {}
	setmetatable_result1._cleaning = false
	return setmetatable_result1
end
function module_upvr.Extend(arg1) -- Line 83
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if arg1._cleaning then
		error("Cannot call trove:Extend() while cleaning", 2)
	end
	return arg1:Construct(module_upvr)
end
function module_upvr.Clone(arg1, arg2) -- Line 94
	if arg1._cleaning then
		error("Cannot call trove:Clone() while cleaning", 2)
	end
	return arg1:Add(arg2:Clone())
end
function module_upvr.Construct(arg1, arg2, ...) -- Line 134
	if arg1._cleaning then
		error("Cannot call trove:Construct() while cleaning", 2)
	end
	local var6
	local type_result1 = type(arg2)
	if type_result1 == "table" then
		var6 = arg2.new(...)
	elseif type_result1 == "function" then
		var6 = arg2(...)
	end
	return arg1:Add(var6)
end
function module_upvr.Connect(arg1, arg2, arg3) -- Line 163
	if arg1._cleaning then
		error("Cannot call trove:Connect() while cleaning", 2)
	end
	return arg1:Add(arg2:Connect(arg3))
end
local RunService_upvr = game:GetService("RunService")
function module_upvr.BindToRenderStep(arg1, arg2, arg3, arg4) -- Line 183
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if arg1._cleaning then
		error("Cannot call trove:BindToRenderStep() while cleaning", 2)
	end
	RunService_upvr:BindToRenderStep(arg2, arg3, arg4)
	arg1:Add(function() -- Line 188
		--[[ Upvalues[2]:
			[1]: RunService_upvr (copied, readonly)
			[2]: arg2 (readonly)
		]]
		RunService_upvr:UnbindFromRenderStep(arg2)
	end)
end
function module_upvr.AddPromise(arg1, arg2) -- Line 216
	if arg1._cleaning then
		error("Cannot call trove:AddPromise() while cleaning", 2)
	end
	if type(arg2) ~= "table" or type(arg2.getStatus) ~= "function" or type(arg2.finally) ~= "function" or type(arg2.cancel) ~= "function" then
		error("Did not receive a Promise as an argument", 3)
	end
	if arg2:getStatus() == "Started" then
		arg2:finally(function() -- Line 222
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: arg2 (readonly)
			]]
			if arg1._cleaning then
			else
				arg1:_findAndRemoveFromObjects(arg2, false)
			end
		end)
		arg1:Add(arg2, "cancel")
	end
	return arg2
end
function module_upvr.Add(arg1, arg2, arg3) -- Line 281
	--[[ Upvalues[1]:
		[1]: GetObjectCleanupFunction_upvr (readonly)
	]]
	if arg1._cleaning then
		error("Cannot call trove:Add() while cleaning", 2)
	end
	local tbl = {}
	tbl[1] = arg2
	tbl[2] = GetObjectCleanupFunction_upvr(arg2, arg3)
	table.insert(arg1._objects, tbl)
	return arg2
end
function module_upvr.Remove(arg1, arg2) -- Line 300
	if arg1._cleaning then
		error("Cannot call trove:Remove() while cleaning", 2)
	end
	return arg1:_findAndRemoveFromObjects(arg2, true)
end
function module_upvr.Clean(arg1) -- Line 313
	if arg1._cleaning then
	else
		arg1._cleaning = true
		for _, v_2 in arg1._objects do
			arg1:_cleanupObject(v_2[1], v_2[2])
		end
		table.clear(arg1._objects)
		arg1._cleaning = false
	end
end
function module_upvr._findAndRemoveFromObjects(arg1, arg2, arg3) -- Line 325
	local _objects = arg1._objects
	for i, v in ipairs(_objects) do
		if v[1] == arg2 then
			local len = #_objects
			_objects[i] = _objects[len]
			_objects[len] = nil
			if arg3 then
				arg1:_cleanupObject(v[1], v[2])
			end
			return true
		end
	end
	return false
end
function module_upvr._cleanupObject(arg1, arg2, arg3) -- Line 341
	--[[ Upvalues[2]:
		[1]: newproxy_result1_upvr_2 (readonly)
		[2]: newproxy_result1_upvr (readonly)
	]]
	if arg3 == newproxy_result1_upvr_2 then
		arg2()
	else
		if arg3 == newproxy_result1_upvr then
			coroutine.close(arg2)
			return
		end
		arg2[arg3](arg2)
	end
end
function module_upvr.AttachToInstance(arg1, arg2) -- Line 364
	if arg1._cleaning then
		error("Cannot call trove:AttachToInstance() while cleaning", 2)
	elseif not arg2:IsDescendantOf(game) then
		error("Instance is not a descendant of the game hierarchy", 2)
	end
	return arg1:Connect(arg2.Destroying, function() -- Line 370
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1:Destroy()
	end)
end
function module_upvr.Destroy(arg1) -- Line 378
	arg1:Clean()
end
return module_upvr

Script name: init.spec
  - Script: 


return function() -- Line 1
	local Parent_upvr = require(script.Parent)
	describe("Trove", function() -- Line 4
		--[[ Upvalues[1]:
			[1]: Parent_upvr (readonly)
		]]
		local var4_upvw
		beforeEach(function() -- Line 7
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			var4_upvw = Parent_upvr.new()
		end)
		afterEach(function() -- Line 11
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			if var4_upvw then
				var4_upvw:Destroy()
				var4_upvw = nil
			end
		end)
		it("should add and clean up roblox instance", function() -- Line 18
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_4 = Instance.new("Part")
			Part_4.Parent = workspace
			var4_upvw:Add(Part_4)
			var4_upvw:Destroy()
			expect(Part_4.Parent).to.equal(nil)
		end)
		it("should add and clean up roblox connection", function() -- Line 26
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_2 = workspace.Changed:Connect(function() -- Line 27
			end)
			var4_upvw:Add(any_Connect_result1_2)
			var4_upvw:Destroy()
			expect(any_Connect_result1_2.Connected).to.equal(false)
		end)
		it("should add and clean up a table with a destroy method", function() -- Line 33
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl = {
				Destroyed = false;
			}
			local function Destroy(arg1) -- Line 35
				arg1.Destroyed = true
			end
			tbl.Destroy = Destroy
			var4_upvw:Add(tbl)
			var4_upvw:Destroy()
			expect(tbl.Destroyed).to.equal(true)
		end)
		it("should add and clean up a table with a disconnect method", function() -- Line 43
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_4 = {
				Connected = true;
				Disconnect = function(arg1) -- Line 45, Named "Disconnect"
					arg1.Connected = false
				end;
			}
			var4_upvw:Add(tbl_4)
			var4_upvw:Destroy()
			expect(tbl_4.Connected).to.equal(false)
		end)
		it("should add and clean up a function", function() -- Line 53
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local var17_upvw = false
			var4_upvw:Add(function() -- Line 55
				--[[ Upvalues[1]:
					[1]: var17_upvw (read and write)
				]]
				var17_upvw = true
			end)
			var4_upvw:Destroy()
			expect(var17_upvw).to.equal(true)
		end)
		it("should allow a custom cleanup method", function() -- Line 62
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_5 = {
				Cleaned = false;
				Cleanup = function(arg1) -- Line 64, Named "Cleanup"
					arg1.Cleaned = true
				end;
			}
			var4_upvw:Add(tbl_5, "Cleanup")
			var4_upvw:Destroy()
			expect(tbl_5.Cleaned).to.equal(true)
		end)
		it("should return the object passed to add", function() -- Line 72
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part = Instance.new("Part")
			expect(Part).to.equal(var4_upvw:Add(Part))
			var4_upvw:Destroy()
		end)
		it("should fail to add object without proper cleanup method", function() -- Line 79
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_2_upvr = {}
			expect(function() -- Line 81
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: tbl_2_upvr (readonly)
				]]
				var4_upvw:Add(tbl_2_upvr)
			end).to.throw()
		end)
		it("should construct an object and add it", function() -- Line 86
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local tbl_3_upvr = {}
			tbl_3_upvr.__index = tbl_3_upvr
			function tbl_3_upvr.new(arg1) -- Line 89
				--[[ Upvalues[1]:
					[1]: tbl_3_upvr (readonly)
				]]
				local setmetatable_result1 = setmetatable({}, tbl_3_upvr)
				setmetatable_result1._msg = arg1
				setmetatable_result1._destroyed = false
				return setmetatable_result1
			end
			function tbl_3_upvr.Destroy(arg1) -- Line 95
				arg1._destroyed = true
			end
			local any_Construct_result1_2 = var4_upvw:Construct(tbl_3_upvr, "abc")
			expect(typeof(any_Construct_result1_2)).to.equal("table")
			expect(getmetatable(any_Construct_result1_2)).to.equal(tbl_3_upvr)
			expect(any_Construct_result1_2._msg).to.equal("abc")
			expect(any_Construct_result1_2._destroyed).to.equal(false)
			var4_upvw:Destroy()
			expect(any_Construct_result1_2._destroyed).to.equal(true)
		end)
		it("should connect to a signal", function() -- Line 108
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_4 = var4_upvw:Connect(workspace.Changed, function() -- Line 109
			end)
			expect(typeof(any_Connect_result1_4)).to.equal("RBXScriptConnection")
			expect(any_Connect_result1_4.Connected).to.equal(true)
			var4_upvw:Destroy()
			expect(any_Connect_result1_4.Connected).to.equal(false)
		end)
		it("should remove an object", function() -- Line 116
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1 = var4_upvw:Connect(workspace.Changed, function() -- Line 117
			end)
			expect(var4_upvw:Remove(any_Connect_result1)).to.equal(true)
			expect(any_Connect_result1.Connected).to.equal(false)
		end)
		it("should not remove an object not in the trove", function() -- Line 122
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Connect_result1_3 = workspace.Changed:Connect(function() -- Line 123
			end)
			expect(var4_upvw:Remove(any_Connect_result1_3)).to.equal(false)
			expect(any_Connect_result1_3.Connected).to.equal(true)
			any_Connect_result1_3:Disconnect()
		end)
		it("should attach to instance", function() -- Line 129
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_3 = Instance.new("Part")
			Part_3.Parent = workspace
			local any_AttachToInstance_result1 = var4_upvw:AttachToInstance(Part_3)
			expect(any_AttachToInstance_result1.Connected).to.equal(true)
			Part_3:Destroy()
			expect(any_AttachToInstance_result1.Connected).to.equal(false)
		end)
		it("should fail to attach to instance not in hierarchy", function() -- Line 138
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local Part_2_upvr = Instance.new("Part")
			expect(function() -- Line 140
				--[[ Upvalues[2]:
					[1]: var4_upvw (copied, read and write)
					[2]: Part_2_upvr (readonly)
				]]
				var4_upvw:AttachToInstance(Part_2_upvr)
			end).to.throw()
		end)
		it("should extend itself", function() -- Line 145
			--[[ Upvalues[2]:
				[1]: var4_upvw (read and write)
				[2]: Parent_upvr (copied, readonly)
			]]
			local any_Extend_result1 = var4_upvw:Extend()
			local var47_upvw = false
			any_Extend_result1:Add(function() -- Line 148
				--[[ Upvalues[1]:
					[1]: var47_upvw (read and write)
				]]
				var47_upvw = true
			end)
			expect(any_Extend_result1).to.be.a("table")
			expect(getmetatable(any_Extend_result1)).to.equal(Parent_upvr)
			var4_upvw:Clean()
			expect(var47_upvw).to.equal(true)
		end)
		it("should clone an instance", function() -- Line 157
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local any_Construct_result1 = var4_upvw:Construct(Instance.new, "Part")
			any_Construct_result1.Name = "TroveCloneTest"
			local clone = var4_upvw:Clone(any_Construct_result1)
			expect(typeof(clone)).to.equal("Instance")
			expect(clone).to.never.equal(any_Construct_result1)
			expect(clone.Name).to.equal("TroveCloneTest")
			expect(any_Construct_result1.Name).to.equal(clone.Name)
		end)
		it("should clean up a thread", function() -- Line 168
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			local coroutine_create_result1 = coroutine.create(function() -- Line 169
			end)
			var4_upvw:Add(coroutine_create_result1)
			expect(coroutine.status(coroutine_create_result1)).to.equal("suspended")
			var4_upvw:Clean()
			expect(coroutine.status(coroutine_create_result1)).to.equal("dead")
		end)
		it("should not allow objects added during cleanup", function() -- Line 176
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			expect(function() -- Line 177
				--[[ Upvalues[1]:
					[1]: var4_upvw (copied, read and write)
				]]
				var4_upvw:Add(function() -- Line 178
					--[[ Upvalues[1]:
						[1]: var4_upvw (copied, read and write)
					]]
					var4_upvw:Add(function() -- Line 179
					end)
				end)
				var4_upvw:Clean()
			end).to.throw()
		end)
		it("should not allow objects to be removed during cleanup", function() -- Line 185
			--[[ Upvalues[1]:
				[1]: var4_upvw (read and write)
			]]
			expect(function() -- Line 186
				--[[ Upvalues[1]:
					[1]: var4_upvw (copied, read and write)
				]]
				local function var61_upvr() -- Line 187
				end
				var4_upvw:Add(var61_upvr)
				var4_upvw:Add(function() -- Line 189
					--[[ Upvalues[2]:
						[1]: var4_upvw (copied, read and write)
						[2]: var61_upvr (readonly)
					]]
					var4_upvw:Remove(var61_upvr)
				end)
				var4_upvw:Clean()
			end).to.throw()
		end)
	end)
end

Script name: Icon
  - Script: 


local GuiService = game:GetService("GuiService")
local script_upvr = script
local Reference = require(script_upvr.Reference)
local any_getObject_result1 = Reference.getObject()
local var9
if var9 then
	var9 = any_getObject_result1.Value
end
if var9 and var9 ~= script_upvr then
	return require(var9)
end
if not any_getObject_result1 then
	Reference.addToReplicatedStorage()
end
local GoodSignal_upvr = require(script_upvr.Packages.GoodSignal)
local Utility_upvr = require(script_upvr.Utility)
local Themes_2_upvr = require(script_upvr.Features.Themes)
local module_upvr = {}
module_upvr.__index = module_upvr
local Themes = script_upvr.Features.Themes
local tbl_7_upvr = {}
local any_new_result1_2_upvr = GoodSignal_upvr.new()
local Elements_upvr = script_upvr.Elements
if GuiService.TopbarInset.Height == 0 then
	GuiService:GetPropertyChangedSignal("TopbarInset"):Wait()
end
module_upvr.baseDisplayOrderChanged = GoodSignal_upvr.new()
module_upvr.baseDisplayOrder = 10
local Default = require(Themes.Default)
module_upvr.baseTheme = Default
if GuiService.TopbarInset.Height ~= 36 then
	Default = false
else
	Default = true
end
module_upvr.isOldTopbar = Default
module_upvr.iconsDictionary = tbl_7_upvr
module_upvr.container = require(Elements_upvr.Container)(module_upvr)
module_upvr.topbarEnabled = true
module_upvr.iconAdded = GoodSignal_upvr.new()
module_upvr.iconRemoved = GoodSignal_upvr.new()
module_upvr.iconChanged = GoodSignal_upvr.new()
function module_upvr.getIcons() -- Line 112
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	return module_upvr.iconsDictionary
end
function module_upvr.getIconByUID(arg1) -- Line 116
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var19 = module_upvr.iconsDictionary[arg1]
	if var19 then
		return var19
	end
end
function module_upvr.getIcon(arg1) -- Line 123
	--[[ Upvalues[2]:
		[1]: module_upvr (readonly)
		[2]: tbl_7_upvr (readonly)
	]]
	local any_getIconByUID_result1_3 = module_upvr.getIconByUID(arg1)
	if any_getIconByUID_result1_3 then
		return any_getIconByUID_result1_3
	end
	for _, v in pairs(tbl_7_upvr) do
		if v.name == arg1 then
			return v
		end
	end
end
function module_upvr.setTopbarEnabled(arg1, arg2) -- Line 135
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var30
	if typeof(arg1) ~= "boolean" then
		var30 = module_upvr.topbarEnabled
	end
	if not arg2 then
		module_upvr.topbarEnabled = var30
	end
	for _, v_2 in pairs(module_upvr.container) do
		v_2.Enabled = var30
	end
end
function module_upvr.modifyBaseTheme(arg1) -- Line 147
	--[[ Upvalues[3]:
		[1]: Themes_2_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: tbl_7_upvr (readonly)
	]]
	for _, v_3 in pairs(Themes_2_upvr.getModifications(arg1)) do
		for _, v_4 in pairs(module_upvr.baseTheme) do
			Themes_2_upvr.merge(v_4, v_3)
		end
	end
	for _, v_5 in pairs(tbl_7_upvr) do
		v_5:setTheme(module_upvr.baseTheme)
	end
end
function module_upvr.setDisplayOrder(arg1) -- Line 159
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	module_upvr.baseDisplayOrder = arg1
	module_upvr.baseDisplayOrderChanged:Fire(arg1)
end
task.defer(require(script_upvr.Features.Gamepad).start, module_upvr)
task.defer(require(script_upvr.Features.Overflow).start, module_upvr)
for _, v_6 in pairs(module_upvr.container) do
	v_6.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
	local _
end
if module_upvr.isOldTopbar then
	module_upvr.modifyBaseTheme(require(Themes.Classic))
end
local Janitor_upvr = require(script_upvr.Packages.Janitor)
local var54_upvw = 0
local UserInputService_upvr = game:GetService("UserInputService")
local StarterGui_upvr = game:GetService("StarterGui")
function module_upvr.new() -- Line 179
	--[[ Upvalues[11]:
		[1]: module_upvr (readonly)
		[2]: Janitor_upvr (readonly)
		[3]: Utility_upvr (readonly)
		[4]: tbl_7_upvr (readonly)
		[5]: GoodSignal_upvr (readonly)
		[6]: script_upvr (readonly)
		[7]: Elements_upvr (readonly)
		[8]: var54_upvw (read and write)
		[9]: UserInputService_upvr (readonly)
		[10]: any_new_result1_2_upvr (readonly)
		[11]: StarterGui_upvr (readonly)
	]]
	local module_2_upvr = {}
	setmetatable(module_2_upvr, module_upvr)
	local any_new_result1 = Janitor_upvr.new()
	module_2_upvr.janitor = any_new_result1
	module_2_upvr.themesJanitor = any_new_result1:add(Janitor_upvr.new())
	module_2_upvr.singleClickJanitor = any_new_result1:add(Janitor_upvr.new())
	module_2_upvr.captionJanitor = any_new_result1:add(Janitor_upvr.new())
	module_2_upvr.joinJanitor = any_new_result1:add(Janitor_upvr.new())
	module_2_upvr.menuJanitor = any_new_result1:add(Janitor_upvr.new())
	module_2_upvr.dropdownJanitor = any_new_result1:add(Janitor_upvr.new())
	local any_generateUID_result1_upvr = Utility_upvr.generateUID()
	tbl_7_upvr[any_generateUID_result1_upvr] = module_2_upvr
	any_new_result1:add(function() -- Line 196
		--[[ Upvalues[2]:
			[1]: tbl_7_upvr (copied, readonly)
			[2]: any_generateUID_result1_upvr (readonly)
		]]
		tbl_7_upvr[any_generateUID_result1_upvr] = nil
	end)
	module_2_upvr.selected = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.deselected = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.toggled = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.viewingStarted = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.viewingEnded = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.stateChanged = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.notified = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.noticeStarted = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.noticeChanged = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.endNotices = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.toggleKeyAdded = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.fakeToggleKeyChanged = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.alignmentChanged = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.updateSize = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.resizingComplete = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.joinedParent = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.menuSet = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.dropdownSet = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.updateMenu = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.startMenuUpdate = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.childThemeModified = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.indicatorSet = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.dropdownChildAdded = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.menuChildAdded = any_new_result1:add(GoodSignal_upvr.new())
	module_2_upvr.iconModule = script_upvr
	module_2_upvr.UID = any_generateUID_result1_upvr
	module_2_upvr.isEnabled = true
	module_2_upvr.isSelected = false
	module_2_upvr.isViewing = false
	module_2_upvr.joinedFrame = false
	module_2_upvr.parentIconUID = false
	module_2_upvr.deselectWhenOtherIconSelected = true
	module_2_upvr.totalNotices = 0
	module_2_upvr.activeState = "Deselected"
	module_2_upvr.alignment = ""
	module_2_upvr.originalAlignment = ""
	module_2_upvr.appliedTheme = {}
	module_2_upvr.appearance = {}
	module_2_upvr.cachedInstances = {}
	module_2_upvr.cachedNamesToInstances = {}
	module_2_upvr.cachedCollectives = {}
	module_2_upvr.bindedToggleKeys = {}
	module_2_upvr.customBehaviours = {}
	module_2_upvr.toggleItems = {}
	module_2_upvr.bindedEvents = {}
	module_2_upvr.notices = {}
	module_2_upvr.menuIcons = {}
	module_2_upvr.dropdownIcons = {}
	module_2_upvr.childIconsDict = {}
	module_2_upvr.isOldTopbar = module_upvr.isOldTopbar
	module_2_upvr.creationTime = os.clock()
	module_2_upvr.widget = any_new_result1:add(require(Elements_upvr.Widget)(module_2_upvr, module_upvr))
	module_2_upvr:setAlignment()
	var54_upvw += 1
	module_2_upvr:setOrder(var54_upvw)
	module_2_upvr:setTheme(module_upvr.baseTheme)
	local any_getInstance_result1_3 = module_2_upvr:getInstance("ClickRegion")
	local function _() -- Line 271, Named "handleToggle"
		--[[ Upvalues[1]:
			[1]: module_2_upvr (readonly)
		]]
		if module_2_upvr.locked then
		else
			if module_2_upvr.isSelected then
				module_2_upvr:deselect("User", module_2_upvr)
				return
			end
			module_2_upvr:select("User", module_2_upvr)
		end
	end
	local var66_upvw = false
	local var67_upvw = false
	any_getInstance_result1_3.MouseButton1Click:Connect(function() -- Line 283
		--[[ Upvalues[3]:
			[1]: var66_upvw (read and write)
			[2]: var67_upvw (read and write)
			[3]: module_2_upvr (readonly)
		]]
		if var66_upvw then
		else
			var67_upvw = true
			task.delay(0.01, function() -- Line 288
				--[[ Upvalues[1]:
					[1]: var67_upvw (copied, read and write)
				]]
				var67_upvw = false
			end)
			if module_2_upvr.locked then return end
			if module_2_upvr.isSelected then
				module_2_upvr:deselect("User", module_2_upvr)
				return
			end
			module_2_upvr:select("User", module_2_upvr)
		end
	end)
	any_getInstance_result1_3.TouchTap:Connect(function() -- Line 293
		--[[ Upvalues[3]:
			[1]: var67_upvw (read and write)
			[2]: var66_upvw (read and write)
			[3]: module_2_upvr (readonly)
		]]
		if var67_upvw then
		else
			var66_upvw = true
			task.delay(0.01, function() -- Line 300
				--[[ Upvalues[1]:
					[1]: var66_upvw (copied, read and write)
				]]
				var66_upvw = false
			end)
			if module_2_upvr.locked then return end
			if module_2_upvr.isSelected then
				module_2_upvr:deselect("User", module_2_upvr)
				return
			end
			module_2_upvr:select("User", module_2_upvr)
		end
	end)
	any_new_result1:add(UserInputService_upvr.InputBegan:Connect(function(arg1, arg2) -- Line 307
		--[[ Upvalues[1]:
			[1]: module_2_upvr (readonly)
		]]
		if module_2_upvr.locked then
		elseif module_2_upvr.bindedToggleKeys[arg1.KeyCode] and not arg2 then
			if module_2_upvr.locked then return end
			if module_2_upvr.isSelected then
				module_2_upvr:deselect("User", module_2_upvr)
				return
			end
			module_2_upvr:select("User", module_2_upvr)
		end
	end))
	local function viewingEnded() -- Line 329
		--[[ Upvalues[1]:
			[1]: module_2_upvr (readonly)
		]]
		if module_2_upvr.locked then
		else
			module_2_upvr.isViewing = false
			module_2_upvr.viewingEnded:Fire(true)
			module_2_upvr:setState(nil, "User", module_2_upvr)
		end
	end
	module_2_upvr.joinedParent:Connect(function() -- Line 337
		--[[ Upvalues[1]:
			[1]: module_2_upvr (readonly)
		]]
		if module_2_upvr.isViewing then
			if module_2_upvr.locked then return end
			module_2_upvr.isViewing = false
			module_2_upvr.viewingEnded:Fire(true)
			module_2_upvr:setState(nil, "User", module_2_upvr)
		end
	end)
	any_getInstance_result1_3.MouseEnter:Connect(function() -- Line 342
		--[[ Upvalues[2]:
			[1]: UserInputService_upvr (copied, readonly)
			[2]: module_2_upvr (readonly)
		]]
		if module_2_upvr.locked then
		else
			module_2_upvr.isViewing = true
			module_2_upvr.viewingStarted:Fire(true)
			if not not UserInputService_upvr.KeyboardEnabled then
				module_2_upvr:setState("Viewing", "User", module_2_upvr)
			end
		end
	end)
	local var75_upvw = 0
	any_new_result1:add(UserInputService_upvr.TouchEnded:Connect(viewingEnded))
	any_getInstance_result1_3.MouseLeave:Connect(viewingEnded)
	any_getInstance_result1_3.SelectionGained:Connect(function(arg1) -- Line 319, Named "viewingStarted"
		--[[ Upvalues[1]:
			[1]: module_2_upvr (readonly)
		]]
		if module_2_upvr.locked then
		else
			module_2_upvr.isViewing = true
			module_2_upvr.viewingStarted:Fire(true)
			if not arg1 then
				module_2_upvr:setState("Viewing", "User", module_2_upvr)
			end
		end
	end)
	any_getInstance_result1_3.SelectionLost:Connect(viewingEnded)
	any_getInstance_result1_3.MouseButton1Down:Connect(function() -- Line 351
		--[[ Upvalues[3]:
			[1]: module_2_upvr (readonly)
			[2]: UserInputService_upvr (copied, readonly)
			[3]: var75_upvw (read and write)
		]]
		if not module_2_upvr.locked and UserInputService_upvr.TouchEnabled then
			var75_upvw += 1
			task.delay(0.2, function() -- Line 355
				--[[ Upvalues[3]:
					[1]: var75_upvw (readonly)
					[2]: var75_upvw (copied, read and write)
					[3]: module_2_upvr (copied, readonly)
				]]
				if var75_upvw == var75_upvw then
					if module_2_upvr.locked then return end
					module_2_upvr.isViewing = true
					module_2_upvr.viewingStarted:Fire(true)
					module_2_upvr:setState("Viewing", "User", module_2_upvr)
				end
			end)
		end
	end)
	any_getInstance_result1_3.MouseButton1Up:Connect(function() -- Line 362
		--[[ Upvalues[1]:
			[1]: var75_upvw (read and write)
		]]
		var75_upvw += 1
	end)
	local any_getInstance_result1_2_upvr = module_2_upvr:getInstance("IconOverlay")
	module_2_upvr.viewingStarted:Connect(function() -- Line 368
		--[[ Upvalues[2]:
			[1]: any_getInstance_result1_2_upvr (readonly)
			[2]: module_2_upvr (readonly)
		]]
		any_getInstance_result1_2_upvr.Visible = not module_2_upvr.overlayDisabled
	end)
	module_2_upvr.viewingEnded:Connect(function() -- Line 371
		--[[ Upvalues[1]:
			[1]: any_getInstance_result1_2_upvr (readonly)
		]]
		any_getInstance_result1_2_upvr.Visible = false
	end)
	any_new_result1:add(any_new_result1_2_upvr:Connect(function(arg1) -- Line 376
		--[[ Upvalues[1]:
			[1]: module_2_upvr (readonly)
		]]
		if arg1 ~= module_2_upvr and module_2_upvr.deselectWhenOtherIconSelected and arg1.deselectWhenOtherIconSelected then
			module_2_upvr:deselect("AutoDeselect", arg1)
		end
	end))
	local var86
	for var116, v_7 in pairs(string.split(debug.info(2, 's'), '.')) do
		local SOME = game:FindFirstChild(v_7)
		if not SOME then break end
		if SOME:IsA("ScreenGui") then
			var86 = SOME
		end
	end
	if SOME and var86 and var86.ResetOnSpawn == true then
		Utility_upvr.localPlayerRespawned(function() -- Line 401
			--[[ Upvalues[1]:
				[1]: module_2_upvr (readonly)
			]]
			module_2_upvr:destroy()
		end)
	end
	function var116(arg1) -- Line 408
		--[[ Upvalues[2]:
			[1]: module_2_upvr (readonly)
			[2]: module_upvr (copied, readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		module_2_upvr.noticeChanged:Fire(module_2_upvr.totalNotices)
		for i_8, _ in pairs(module_2_upvr.childIconsDict) do
			local any_getIconByUID_result1 = module_upvr.getIconByUID(i_8)
			any_getIconByUID_result1.noticeChanged:Fire(any_getIconByUID_result1.totalNotices)
			if not arg1 and any_getIconByUID_result1.isSelected then
				for _, _ in pairs(any_getIconByUID_result1.childIconsDict) do
					any_getIconByUID_result1:deselect("HideParentFeature", module_2_upvr)
				end
			end
		end
	end
	module_2_upvr.toggled:Connect(var116)
	function var116() -- Line 431
		--[[ Upvalues[2]:
			[1]: module_2_upvr (readonly)
			[2]: StarterGui_upvr (copied, readonly)
		]]
		local var114
		if 0 >= #module_2_upvr.dropdownIcons then
			var114 = false
		else
			var114 = true
		end
		if var114 then
			if StarterGui_upvr:GetCore("ChatActive") and module_2_upvr.alignment ~= "Right" then
				module_2_upvr.chatWasPreviouslyActive = true
				StarterGui_upvr:SetCore("ChatActive", false)
			end
			if StarterGui_upvr:GetCoreGuiEnabled("PlayerList") and module_2_upvr.alignment ~= "Left" then
				module_2_upvr.playerlistWasPreviouslyActive = true
				StarterGui_upvr:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false)
			end
		end
	end
	module_2_upvr.selected:Connect(var116)
	function var116() -- Line 444
		--[[ Upvalues[2]:
			[1]: module_2_upvr (readonly)
			[2]: StarterGui_upvr (copied, readonly)
		]]
		if module_2_upvr.chatWasPreviouslyActive then
			module_2_upvr.chatWasPreviouslyActive = nil
			StarterGui_upvr:SetCore("ChatActive", true)
		end
		if module_2_upvr.playerlistWasPreviouslyActive then
			module_2_upvr.playerlistWasPreviouslyActive = nil
			StarterGui_upvr:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
		end
	end
	module_2_upvr.deselected:Connect(var116)
	function var116() -- Line 459
		--[[ Upvalues[1]:
			[1]: module_2_upvr (readonly)
		]]
		if module_2_upvr.activeState == "Deselected" then
			module_2_upvr.stateChanged:Fire("Deselected")
			module_2_upvr:refresh()
		end
	end
	task.delay(0.1, var116)
	var116 = module_2_upvr
	module_upvr.iconAdded:Fire(var116)
	return module_2_upvr
end
function module_upvr.setName(arg1, arg2) -- Line 475
	arg1.widget.Name = arg2
	arg1.name = arg2
	return arg1
end
function module_upvr.setState(arg1, arg2, arg3, arg4) -- Line 481
	--[[ Upvalues[2]:
		[1]: Utility_upvr (readonly)
		[2]: any_new_result1_2_upvr (readonly)
	]]
	if not arg2 then
		if arg1.isSelected then
		else
		end
	end
	local any_formatStateName_result1 = Utility_upvr.formatStateName("Deselected")
	if arg1.activeState == any_formatStateName_result1 then
	else
		arg1.activeState = any_formatStateName_result1
		if any_formatStateName_result1 == "Deselected" then
			arg1.isSelected = false
			if arg1.isSelected then
				arg1.toggled:Fire(false, arg3, arg4)
				arg1.deselected:Fire(arg3, arg4)
			end
			arg1:_setToggleItemsVisible(false, arg3, arg4)
		elseif any_formatStateName_result1 == "Selected" then
			arg1.isSelected = true
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if not arg1.isSelected then
				arg1.toggled:Fire(true, arg3, arg4)
				arg1.selected:Fire(arg3, arg4)
				any_new_result1_2_upvr:Fire(arg1, arg3, arg4)
			end
			arg1:_setToggleItemsVisible(true, arg3, arg4)
		end
		arg1.stateChanged:Fire(any_formatStateName_result1, arg3, arg4)
	end
end
function module_upvr.getInstance(arg1, arg2) -- Line 514
	--[[ Upvalues[1]:
		[1]: Themes_2_upvr (readonly)
	]]
	local var118 = arg1.cachedNamesToInstances[arg2]
	if var118 then
		return var118
	end
	local function cacheInstance_upvr(arg1_2, arg2_2) -- Line 522, Named "cacheInstance"
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		local var119
		if not arg1.cachedInstances[arg2_2] then
			local Collective = arg2_2:GetAttribute("Collective")
			var119 = Collective
			if var119 then
				var119 = arg1.cachedCollectives[Collective]
			end
			if var119 then
				table.insert(var119, arg2_2)
			end
			arg1.cachedNamesToInstances[arg1_2] = arg2_2
			arg1.cachedInstances[arg2_2] = true
			arg2_2.Destroying:Once(function() -- Line 532
				--[[ Upvalues[3]:
					[1]: arg1 (copied, readonly)
					[2]: arg1_2 (readonly)
					[3]: arg2_2 (readonly)
				]]
				arg1.cachedNamesToInstances[arg1_2] = nil
				arg1.cachedInstances[arg2_2] = nil
			end)
		end
	end
	local widget = arg1.widget
	cacheInstance_upvr("Widget", widget)
	if arg2 == "Widget" then
		return widget
	end
	local var123_upvw
	local function scanChildren_upvr(arg1_3) -- Line 545, Named "scanChildren"
		--[[ Upvalues[6]:
			[1]: arg1 (readonly)
			[2]: Themes_2_upvr (copied, readonly)
			[3]: scanChildren_upvr (readonly)
			[4]: cacheInstance_upvr (readonly)
			[5]: arg2 (readonly)
			[6]: var123_upvw (read and write)
		]]
		for _, v_10 in pairs(arg1_3:GetChildren()) do
			local WidgetUID = v_10:GetAttribute("WidgetUID")
			if not WidgetUID or WidgetUID == arg1.UID then
				local any_getRealInstance_result1 = Themes_2_upvr.getRealInstance(v_10)
				if any_getRealInstance_result1 then
					v_10 = any_getRealInstance_result1
				end
				scanChildren_upvr(v_10)
				if v_10:IsA("GuiBase") or v_10:IsA("UIBase") or v_10:IsA("ValueBase") then
					local Name = v_10.Name
					cacheInstance_upvr(Name, v_10)
					if Name == arg2 then
						var123_upvw = v_10
					end
				end
			end
		end
	end
	scanChildren_upvr(widget)
	return var123_upvw
end
function module_upvr.getCollective(arg1, arg2) -- Line 575
	local var134 = arg1.cachedCollectives[arg2]
	if var134 then
		return var134
	end
	local module = {}
	for i_11, _ in pairs(arg1.cachedInstances) do
		if i_11:GetAttribute("Collective") == arg2 then
			table.insert(module, i_11)
		end
	end
	arg1.cachedCollectives[arg2] = module
	return module
end
function module_upvr.getInstanceOrCollective(arg1, arg2) -- Line 596
	local any_getInstance_result1 = arg1:getInstance(arg2)
	local var140
	if any_getInstance_result1 then
		table.insert(var140, any_getInstance_result1)
	end
	if #var140 == 0 then
		var140 = arg1:getCollective(arg2)
	end
	return var140
end
function module_upvr.getStateGroup(arg1, arg2) -- Line 610
	local var141 = arg2
	if not var141 then
		var141 = arg1.activeState
	end
	local var142 = arg1.appearance[var141]
	if not var142 then
		var142 = {}
		arg1.appearance[var141] = var142
	end
	return var142
end
function module_upvr.refreshAppearance(arg1, arg2, arg3) -- Line 620
	--[[ Upvalues[1]:
		[1]: Themes_2_upvr (readonly)
	]]
	Themes_2_upvr.refresh(arg1, arg2, arg3)
	return arg1
end
function module_upvr.refresh(arg1) -- Line 625
	arg1:refreshAppearance(arg1.widget)
	arg1.updateSize:Fire()
	return arg1
end
function module_upvr.updateParent(arg1) -- Line 631
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local any_getIconByUID_result1_2 = module_upvr.getIconByUID(arg1.parentIconUID)
	if any_getIconByUID_result1_2 then
		any_getIconByUID_result1_2.updateSize:Fire()
	end
end
function module_upvr.setBehaviour(arg1, arg2, arg3, arg4, arg5) -- Line 638
	arg1.customBehaviours[arg2..'-'..arg3] = arg4
	if arg5 then
		for _, v_12 in pairs(arg1:getInstanceOrCollective(arg2)) do
			arg1:refreshAppearance(v_12, arg3)
		end
	end
end
function module_upvr.modifyTheme(arg1, arg2, arg3) -- Line 651
	--[[ Upvalues[1]:
		[1]: Themes_2_upvr (readonly)
	]]
	return arg1, Themes_2_upvr.modify(arg1, arg2, arg3)
end
function module_upvr.modifyChildTheme(arg1, arg2, arg3) -- Line 656
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	arg1.childModifications = arg2
	arg1.childModificationsUID = arg3
	for i_13, _ in pairs(arg1.childIconsDict) do
		module_upvr.getIconByUID(i_13):modifyTheme(arg2, arg3)
	end
	arg1.childThemeModified:Fire()
	return arg1
end
function module_upvr.removeModification(arg1, arg2) -- Line 669
	--[[ Upvalues[1]:
		[1]: Themes_2_upvr (readonly)
	]]
	Themes_2_upvr.remove(arg1, arg2)
	return arg1
end
function module_upvr.removeModificationWith(arg1, arg2, arg3, arg4) -- Line 674
	--[[ Upvalues[1]:
		[1]: Themes_2_upvr (readonly)
	]]
	Themes_2_upvr.removeWith(arg1, arg2, arg3, arg4)
	return arg1
end
function module_upvr.setTheme(arg1, arg2) -- Line 679
	--[[ Upvalues[1]:
		[1]: Themes_2_upvr (readonly)
	]]
	Themes_2_upvr.set(arg1, arg2)
	return arg1
end
function module_upvr.setEnabled(arg1, arg2) -- Line 684
	arg1.isEnabled = arg2
	arg1.widget.Visible = arg2
	arg1:updateParent()
	return arg1
end
function module_upvr.select(arg1, arg2, arg3) -- Line 691
	arg1:setState("Selected", arg2, arg3)
	return arg1
end
function module_upvr.deselect(arg1, arg2, arg3) -- Line 696
	arg1:setState("Deselected", arg2, arg3)
	return arg1
end
function module_upvr.notify(arg1, arg2, arg3) -- Line 701
	--[[ Upvalues[2]:
		[1]: Elements_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if not arg1.notice then
		arg1.notice = require(Elements_upvr.Notice)(arg1, module_upvr)
	end
	arg1.noticeStarted:Fire(arg2, arg3)
	return arg1
end
function module_upvr.clearNotices(arg1) -- Line 715
	arg1.endNotices:Fire()
	return arg1
end
function module_upvr.disableOverlay(arg1, arg2) -- Line 720
	arg1.overlayDisabled = arg2
	return arg1
end
module_upvr.disableStateOverlay = module_upvr.disableOverlay
function module_upvr.setImage(arg1, arg2, arg3) -- Line 726
	local tbl_10 = {"IconImage", "Image"}
	tbl_10[3] = arg2
	tbl_10[4] = arg3
	arg1:modifyTheme(tbl_10)
	return arg1
end
function module_upvr.setLabel(arg1, arg2, arg3) -- Line 731
	local tbl_2 = {"IconLabel", "Text"}
	tbl_2[3] = arg2
	tbl_2[4] = arg3
	arg1:modifyTheme(tbl_2)
	return arg1
end
function module_upvr.setOrder(arg1, arg2, arg3) -- Line 736
	local tbl_9 = {"Widget", "LayoutOrder"}
	tbl_9[3] = arg2
	tbl_9[4] = arg3
	arg1:modifyTheme(tbl_9)
	return arg1
end
function module_upvr.setCornerRadius(arg1, arg2, arg3) -- Line 741
	local tbl_11 = {"IconCorners", "CornerRadius"}
	tbl_11[3] = arg2
	tbl_11[4] = arg3
	arg1:modifyTheme(tbl_11)
	return arg1
end
function module_upvr.align(arg1, arg2, arg3) -- Line 746
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local any_lower_result1 = tostring(arg2):lower()
	if any_lower_result1 == "mid" or any_lower_result1 == "centre" then
	end
	if "center" ~= "left" then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
		if "center" ~= "center" and "center" ~= "right" then
		end
	end
	if "left" ~= "center" or not module_upvr.container.TopbarCentered then
		local TopbarStandard_2 = module_upvr.container.TopbarStandard
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	local var164 = string.upper(string.sub("left", 1, 1))..string.sub("left", 2)
	if not arg3 then
		arg1.originalAlignment = var164
	end
	local var165 = TopbarStandard_2.Holders[var164]
	arg1.screenGui = TopbarStandard_2
	arg1.alignmentHolder = var165
	if not arg1.isDestroyed then
		arg1.widget.Parent = arg1.joinedFrame or var165
	end
	arg1.alignment = var164
	arg1.alignmentChanged:Fire(var164)
	module_upvr.iconChanged:Fire(arg1)
	return arg1
end
module_upvr.setAlignment = module_upvr.align
function module_upvr.setLeft(arg1) -- Line 775
	arg1:setAlignment("Left")
	return arg1
end
function module_upvr.setMid(arg1) -- Line 780
	arg1:setAlignment("Center")
	return arg1
end
function module_upvr.setRight(arg1) -- Line 785
	arg1:setAlignment("Right")
	return arg1
end
function module_upvr.setWidth(arg1, arg2, arg3) -- Line 790
	local tbl_8 = {"Widget", "Size", UDim2.fromOffset(arg2, arg1.widget.Size.Y.Offset)}
	tbl_8[4] = arg3
	arg1:modifyTheme(tbl_8)
	local tbl_5 = {"Widget", "DesiredWidth"}
	tbl_5[3] = arg2
	tbl_5[4] = arg3
	arg1:modifyTheme(tbl_5)
	return arg1
end
function module_upvr.setImageScale(arg1, arg2, arg3) -- Line 800
	local tbl_4 = {"IconImageScale", "Value"}
	tbl_4[3] = arg2
	tbl_4[4] = arg3
	arg1:modifyTheme(tbl_4)
	return arg1
end
function module_upvr.setImageRatio(arg1, arg2, arg3) -- Line 805
	local tbl_3 = {"IconImageRatio", "AspectRatio"}
	tbl_3[3] = arg2
	tbl_3[4] = arg3
	arg1:modifyTheme(tbl_3)
	return arg1
end
function module_upvr.setTextSize(arg1, arg2, arg3) -- Line 810
	local tbl = {"IconLabel", "TextSize"}
	tbl[3] = arg2
	tbl[4] = arg3
	arg1:modifyTheme(tbl)
	return arg1
end
function module_upvr.setTextFont(arg1, arg2, arg3, arg4, arg5) -- Line 815
	-- KONSTANTERROR: [0] 1. Error Block 22 start (CF ANALYSIS FAILED)
	local var171
	if not var171 then
		var171 = Enum.FontWeight.Regular
	end
	var171 = arg4
	if not var171 then
		var171 = Enum.FontStyle.Normal
	end
	var171 = nil
	local typeof_result1 = typeof(arg2)
	if typeof_result1 == "number" then
		var171 = Font.fromId(arg2, var171, var171)
		-- KONSTANTWARNING: GOTO [48] #39
	end
	-- KONSTANTERROR: [0] 1. Error Block 22 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [26] 22. Error Block 23 start (CF ANALYSIS FAILED)
	if typeof_result1 == "EnumItem" then
		var171 = Font.fromEnum(arg2)
	elseif typeof_result1 == "string" and not arg2:match("rbxasset") then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
		var171 = Font.fromName(arg2, var171, var171)
	end
	if not var171 then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
		var171 = Font.new(arg2, var171, var171)
	end
	local tbl_6 = {"IconLabel", "FontFace", var171}
	tbl_6[4] = arg5
	arg1:modifyTheme(tbl_6)
	do
		return arg1
	end
	-- KONSTANTERROR: [26] 22. Error Block 23 end (CF ANALYSIS FAILED)
end
function module_upvr.bindToggleItem(arg1, arg2) -- Line 836
	if not arg2:IsA("GuiObject") and not arg2:IsA("LayerCollector") then
		error("Toggle item must be a GuiObject or LayerCollector!")
	end
	arg1.toggleItems[arg2] = true
	arg1:_updateSelectionInstances()
	return arg1
end
function module_upvr.unbindToggleItem(arg1, arg2) -- Line 845
	arg1.toggleItems[arg2] = nil
	arg1:_updateSelectionInstances()
	return arg1
end
function module_upvr._updateSelectionInstances(arg1) -- Line 851
	for i_14, _ in pairs(arg1.toggleItems) do
		for _, v_15 in pairs(i_14:GetDescendants()) do
			if v_15:IsA("TextButton") or v_15:IsA("ImageButton") then
				if v_15.Active then
					table.insert({}, v_15)
				end
			end
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		arg1.toggleItems[i_14] = {}
	end
end
function module_upvr._setToggleItemsVisible(arg1, arg2, arg3, arg4) -- Line 865
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local _
	for i_16, _ in pairs(arg1.toggleItems) do
		if not arg4 or arg4 == arg1 or arg4.toggleItems[i_16] == nil then
			if i_16:IsA("LayerCollector") then
			end
			i_16.Enabled = arg2
		end
	end
end
function module_upvr.bindEvent(arg1, arg2, arg3) -- Line 877
	local var199 = arg1[arg2]
	local var200
	if var200 then
		var200 = false
		if typeof(var199) == "table" then
			var200 = var199.Connect
		end
	end
	assert(var200, "argument[1] must be a valid topbarplus icon event name!")
	if typeof(arg3) ~= "function" then
		var200 = false
	else
		var200 = true
	end
	assert(var200, "argument[2] must be a function!")
	var200 = var199:Connect(function(...) -- Line 881
		--[[ Upvalues[2]:
			[1]: arg3 (readonly)
			[2]: arg1 (readonly)
		]]
		arg3(arg1, ...)
	end)
	arg1.bindedEvents[arg2] = var200
	return arg1
end
function module_upvr.unbindEvent(arg1, arg2) -- Line 887
	local var202 = arg1.bindedEvents[arg2]
	if var202 then
		var202:Disconnect()
		arg1.bindedEvents[arg2] = nil
	end
	return arg1
end
function module_upvr.bindToggleKey(arg1, arg2) -- Line 896
	local var203
	if typeof(arg2) ~= "EnumItem" then
		var203 = false
	else
		var203 = true
	end
	assert(var203, "argument[1] must be a KeyCode EnumItem!")
	var203 = true
	arg1.bindedToggleKeys[arg2] = var203
	arg1.toggleKeyAdded:Fire(arg2)
	arg1:setCaption("_hotkey_")
	return arg1
end
function module_upvr.unbindToggleKey(arg1, arg2) -- Line 904
	local var204
	if typeof(arg2) ~= "EnumItem" then
		var204 = false
	else
		var204 = true
	end
	assert(var204, "argument[1] must be a KeyCode EnumItem!")
	var204 = nil
	arg1.bindedToggleKeys[arg2] = var204
	return arg1
end
function module_upvr.call(arg1, arg2, ...) -- Line 910
	local packed_upvr = table.pack(...)
	task.spawn(function() -- Line 912
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: arg1 (readonly)
			[3]: packed_upvr (readonly)
		]]
		arg2(arg1, table.unpack(packed_upvr))
	end)
	return arg1
end
function module_upvr.addToJanitor(arg1, arg2) -- Line 918
	arg1.janitor:add(arg2)
	return arg1
end
function module_upvr.lock(arg1) -- Line 923
	arg1:getInstance("ClickRegion").Visible = false
	arg1.locked = true
	return arg1
end
function module_upvr.unlock(arg1) -- Line 931
	arg1:getInstance("ClickRegion").Visible = true
	arg1.locked = false
	return arg1
end
function module_upvr.debounce(arg1, arg2) -- Line 938
	arg1:lock()
	task.wait(arg2)
	arg1:unlock()
	return arg1
end
function module_upvr.autoDeselect(arg1, arg2) -- Line 945
	if arg2 == nil then
	end
	arg1.deselectWhenOtherIconSelected = true
	return arg1
end
function module_upvr.oneClick(arg1, arg2) -- Line 955
	local singleClickJanitor = arg1.singleClickJanitor
	singleClickJanitor:clean()
	if arg2 or arg2 == nil then
		singleClickJanitor:add(arg1.selected:Connect(function() -- Line 961
			--[[ Upvalues[1]:
				[1]: arg1 (readonly)
			]]
			arg1:deselect("OneClick", arg1)
		end))
	end
	arg1.oneClickEnabled = true
	return arg1
end
function module_upvr.setCaption(arg1, arg2) -- Line 969
	--[[ Upvalues[1]:
		[1]: Elements_upvr (readonly)
	]]
	if arg2 == "_hotkey_" and arg1.captionText then
		return arg1
	end
	arg1.captionJanitor:clean()
	if not arg2 or arg2 == "" then
		arg1.caption = nil
		arg1.captionText = nil
		return arg1
	end
	local any_add_result1 = arg1.captionJanitor:add(require(Elements_upvr.Caption)(arg1))
	any_add_result1:SetAttribute("CaptionText", arg2)
	arg1.caption = any_add_result1
	arg1.captionText = arg2
	return arg1
end
function module_upvr.setCaptionHint(arg1, arg2) -- Line 987
	local var210
	if typeof(arg2) ~= "EnumItem" then
		var210 = false
	else
		var210 = true
	end
	assert(var210, "argument[1] must be a KeyCode EnumItem!")
	arg1.fakeToggleKey = arg2
	arg1.fakeToggleKeyChanged:Fire(arg2)
	arg1:setCaption("_hotkey_")
	return arg1
end
function module_upvr.leave(arg1) -- Line 995
	arg1.joinJanitor:clean()
	return arg1
end
function module_upvr.joinMenu(arg1, arg2) -- Line 1001
	--[[ Upvalues[1]:
		[1]: Utility_upvr (readonly)
	]]
	Utility_upvr.joinFeature(arg1, arg2, arg2.menuIcons, arg2:getInstance("Menu"))
	arg2.menuChildAdded:Fire(arg1)
	return arg1
end
function module_upvr.setMenu(arg1, arg2) -- Line 1007
	arg1.menuSet:Fire(arg2)
	return arg1
end
function module_upvr.setFrozenMenu(arg1, arg2) -- Line 1012
	arg1:freezeMenu(arg2)
	arg1:setMenu(arg2)
end
function module_upvr.freezeMenu(arg1) -- Line 1017
	arg1:select("FrozenMenu", arg1)
	arg1:bindEvent("deselected", function(arg1_4) -- Line 1021
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
		arg1_4:select("FrozenMenu", arg1)
	end)
	arg1:modifyTheme({"IconSpot", "Visible", false})
end
function module_upvr.joinDropdown(arg1, arg2) -- Line 1027
	--[[ Upvalues[1]:
		[1]: Utility_upvr (readonly)
	]]
	arg2:getDropdown()
	Utility_upvr.joinFeature(arg1, arg2, arg2.dropdownIcons, arg2:getInstance("DropdownScroller"))
	arg2.dropdownChildAdded:Fire(arg1)
	return arg1
end
function module_upvr.getDropdown(arg1) -- Line 1034
	--[[ Upvalues[1]:
		[1]: Elements_upvr (readonly)
	]]
	if not arg1.dropdown then
		local var213 = require(Elements_upvr.Dropdown)(arg1)
		arg1.dropdown = var213
		arg1:clipOutside(var213)
	end
	return var213
end
function module_upvr.setDropdown(arg1, arg2) -- Line 1044
	arg1:getDropdown()
	arg1.dropdownSet:Fire(arg2)
	return arg1
end
function module_upvr.clipOutside(arg1, arg2) -- Line 1050
	--[[ Upvalues[1]:
		[1]: Utility_upvr (readonly)
	]]
	arg1:refreshAppearance(arg2)
	return arg1, Utility_upvr.clipOutside(arg1, arg2)
end
function module_upvr.setIndicator(arg1, arg2) -- Line 1061
	--[[ Upvalues[2]:
		[1]: Elements_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if not arg1.indicator then
		arg1.indicator = arg1.janitor:add(require(Elements_upvr.Indicator)(arg1, module_upvr))
	end
	arg1.indicatorSet:Fire(arg2)
end
function module_upvr.destroy(arg1) -- Line 1076
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if arg1.isDestroyed then
	else
		arg1:clearNotices()
		if arg1.parentIconUID then
			arg1:leave()
		end
		arg1.isDestroyed = true
		arg1.janitor:clean()
		module_upvr.iconRemoved:Fire(arg1)
	end
end
module_upvr.Destroy = module_upvr.destroy
return module_upvr

Script name: Attribute
  - Script: 


if not game:GetService("RunService"):IsStudio() then
	print(`🍍 Running TopbarPlus {require(script.Parent.VERSION)} by ForeverHD`)
end
return {}

Script name: Reference
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local module_upvr = {
	objectName = "TopbarPlusReference";
}
function module_upvr.addToReplicatedStorage() -- Line 10
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if ReplicatedStorage_upvr:FindFirstChild(module_upvr.objectName) then
		return false
	end
	local ObjectValue = Instance.new("ObjectValue")
	ObjectValue.Name = module_upvr.objectName
	ObjectValue.Value = script.Parent
	ObjectValue.Parent = ReplicatedStorage_upvr
	return ObjectValue
end
function module_upvr.getObject() -- Line 22
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local SOME = ReplicatedStorage_upvr:FindFirstChild(module_upvr.objectName)
	if SOME then
		return SOME
	end
	return false
end
return module_upvr

Script name: VERSION
  - Script: 


return "v3.0.2"

Script name: Utility
  - Script: 


local module_upvr = {
	createStagger = function(arg1, arg2, arg3) -- Line 13, Named "createStagger"
		local var2_upvw
		if not var2_upvw or var2_upvw == 0 then
			var2_upvw = 0.01
		end
		local var3_upvw = false
		local var4_upvw = false
		local function staggeredCallback_upvr(...) -- Line 29, Named "staggeredCallback"
			--[[ Upvalues[6]:
				[1]: var3_upvw (read and write)
				[2]: var4_upvw (read and write)
				[3]: arg3 (readonly)
				[4]: var2_upvw (read and write)
				[5]: arg2 (readonly)
				[6]: staggeredCallback_upvr (readonly)
			]]
			if var3_upvw then
				var4_upvw = true
			else
				local packed_upvr = table.pack(...)
				var3_upvw = true
				var4_upvw = false
				task.spawn(function() -- Line 37
					--[[ Upvalues[4]:
						[1]: arg3 (copied, readonly)
						[2]: var2_upvw (copied, read and write)
						[3]: arg2 (copied, readonly)
						[4]: packed_upvr (readonly)
					]]
					if arg3 then
						task.wait(var2_upvw)
					end
					arg2(table.unpack(packed_upvr))
				end)
				task.delay(var2_upvw, function() -- Line 43
					--[[ Upvalues[4]:
						[1]: var3_upvw (copied, read and write)
						[2]: var4_upvw (copied, read and write)
						[3]: staggeredCallback_upvr (copied, readonly)
						[4]: packed_upvr (readonly)
					]]
					var3_upvw = false
					if var4_upvw then
						staggeredCallback_upvr(table.unpack(packed_upvr))
					end
				end)
			end
		end
		return staggeredCallback_upvr
	end;
	round = function(arg1) -- Line 55, Named "round"
		return math.floor(arg1 + 0.5)
	end;
	reverseTable = function(arg1) -- Line 60, Named "reverseTable"
		for i = 1, math.floor(#arg1 / 2) do
			local var9 = #arg1 - i + 1
			arg1[i] = arg1[var9]
			arg1[var9] = arg1[i]
		end
	end;
}
function module_upvr.copyTable(arg1) -- Line 67
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var14
	if type(arg1) ~= "table" then
		var14 = false
	else
		var14 = true
	end
	assert(var14, "First argument must be a table")
	var14 = #arg1
	var14 = pairs(arg1)
	for i_2, v in pairs(arg1) do
		if type(v) == "table" then
			table.create(var14)[i_2] = module_upvr.copyTable(v)
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			table.create(var14)[i_2] = v
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return table.create(var14)
end
local tbl_upvr = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '<', '>', '?', '@', '{', '}', '[', ']', '!', '(', ')', '=', '+', '~', '#'}
function module_upvr.generateUID(arg1) -- Line 82
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var21 = ""
	local var22 = tbl_upvr
	local len = #var22
	for _ = 1, arg1 or 8 do
		var21 = var21..var22[math.random(1, len)]
	end
	return var21
end
local tbl_upvr_2 = {}
function module_upvr.setVisible(arg1, arg2, arg3) -- Line 95
	--[[ Upvalues[1]:
		[1]: tbl_upvr_2 (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	local var25
	if not var25 then
		var25 = {}
		tbl_upvr_2[arg1] = var25
		arg1.Destroying:Once(function() -- Line 104
			--[[ Upvalues[2]:
				[1]: tbl_upvr_2 (copied, readonly)
				[2]: arg1 (readonly)
			]]
			tbl_upvr_2[arg1] = nil
		end)
	end
	if not arg2 then
		var25[arg3] = true
	else
		var25[arg3] = nil
	end
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [28] 25. Error Block 9 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [28] 25. Error Block 9 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [32] 28. Error Block 13 start (CF ANALYSIS FAILED)
	arg1.Visible = false
	-- KONSTANTERROR: [32] 28. Error Block 13 end (CF ANALYSIS FAILED)
end
function module_upvr.formatStateName(arg1) -- Line 123
	return string.upper(string.sub(arg1, 1, 1))..string.lower(string.sub(arg1, 2))
end
local LocalPlayer_upvr = game:GetService("Players").LocalPlayer
function module_upvr.localPlayerRespawned(arg1) -- Line 127
	--[[ Upvalues[1]:
		[1]: LocalPlayer_upvr (readonly)
	]]
	LocalPlayer_upvr.CharacterRemoving:Connect(arg1)
end
function module_upvr.getClippedContainer(arg1) -- Line 137
	if not arg1:FindFirstChild("ClippedContainer") then
		local Folder = Instance.new("Folder")
		Folder.Name = "ClippedContainer"
		Folder.Parent = arg1
	end
	return Folder
end
local Janitor_upvr = require(script.Parent.Packages.Janitor)
local GuiService_upvr = game:GetService("GuiService")
function module_upvr.clipOutside(arg1, arg2) -- Line 151
	--[[ Upvalues[3]:
		[1]: Janitor_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: GuiService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 25 start (CF ANALYSIS FAILED)
	local any_add_result1_upvr = arg1.janitor:add(Janitor_upvr.new())
	arg2.Destroying:Once(function() -- Line 153
		--[[ Upvalues[1]:
			[1]: any_add_result1_upvr (readonly)
		]]
		any_add_result1_upvr:Destroy()
	end)
	arg1.janitor:add(arg2)
	local Parent_upvr = arg2.Parent
	local any_add_result1_upvr_2 = any_add_result1_upvr:add(Instance.new("Frame"))
	any_add_result1_upvr_2:SetAttribute("IsAClippedClone", true)
	any_add_result1_upvr_2.Name = arg2.Name
	any_add_result1_upvr_2.AnchorPoint = arg2.AnchorPoint
	any_add_result1_upvr_2.Size = arg2.Size
	any_add_result1_upvr_2.Position = arg2.Position
	any_add_result1_upvr_2.BackgroundTransparency = 1
	any_add_result1_upvr_2.LayoutOrder = arg2.LayoutOrder
	any_add_result1_upvr_2.Parent = Parent_upvr
	local ObjectValue = Instance.new("ObjectValue")
	ObjectValue.Name = "OriginalInstance"
	ObjectValue.Value = arg2
	ObjectValue.Parent = any_add_result1_upvr_2
	local clone = ObjectValue:Clone()
	arg2:SetAttribute("HasAClippedClone", true)
	clone.Name = "ClippedClone"
	clone.Value = any_add_result1_upvr_2
	clone.Parent = arg2
	local var41_upvw
	local function updateScreenGui() -- Line 181
		--[[ Upvalues[4]:
			[1]: Parent_upvr (readonly)
			[2]: var41_upvw (read and write)
			[3]: arg2 (readonly)
			[4]: module_upvr (copied, readonly)
		]]
		local class_ScreenGui = Parent_upvr:FindFirstAncestorWhichIsA("ScreenGui")
		local var43
		if string.match(class_ScreenGui.Name, "Clipped") then
			var43 = class_ScreenGui
		else
			var43 = class_ScreenGui.Parent[class_ScreenGui.Name.."Clipped"]
		end
		var41_upvw = var43
		var43 = arg2
		var43.AnchorPoint = Vector2.new(0, 0)
		var43 = arg2
		var43.Parent = module_upvr.getClippedContainer(var41_upvw)
	end
	any_add_result1_upvr:add(arg1.alignmentChanged:Connect(updateScreenGui))
	updateScreenGui()
	local var47
	for _, v_2 in pairs(arg2:GetChildren()) do
		if v_2:IsA("UIAspectRatioConstraint") then
			v_2:Clone().Parent = any_add_result1_upvr_2
		end
	end
	local widget_upvr = arg1.widget
	local var49_upvw = false
	local IgnoreVisibilityUpdater_upvr = arg2:GetAttribute("IgnoreVisibilityUpdater")
	any_add_result1_upvr:add(widget_upvr:GetPropertyChangedSignal("Visible"):Connect(function() -- Line 203, Named "updateVisibility"
		--[[ Upvalues[5]:
			[1]: IgnoreVisibilityUpdater_upvr (readonly)
			[2]: widget_upvr (readonly)
			[3]: var49_upvw (read and write)
			[4]: module_upvr (copied, readonly)
			[5]: arg2 (readonly)
		]]
		if IgnoreVisibilityUpdater_upvr then
		else
			local Visible_2 = widget_upvr.Visible
			if var49_upvw then
				Visible_2 = false
			end
			module_upvr.setVisible(arg2, Visible_2, "ClipHandler")
		end
	end))
	local var52_upvw
	local iconModule_upvr = require(arg1.iconModule)
	local function checkIfOutsideParentXBounds_upvr() -- Line 218, Named "checkIfOutsideParentXBounds"
		--[[ Upvalues[10]:
			[1]: arg1 (readonly)
			[2]: arg2 (readonly)
			[3]: iconModule_upvr (readonly)
			[4]: var49_upvw (read and write)
			[5]: IgnoreVisibilityUpdater_upvr (readonly)
			[6]: widget_upvr (readonly)
			[7]: module_upvr (copied, readonly)
			[8]: var52_upvw (read and write)
			[9]: checkIfOutsideParentXBounds_upvr (readonly)
			[10]: any_add_result1_upvr (readonly)
		]]
		task.defer(function() -- Line 220
			--[[ Upvalues[10]:
				[1]: arg1 (copied, readonly)
				[2]: arg2 (copied, readonly)
				[3]: iconModule_upvr (copied, readonly)
				[4]: var49_upvw (copied, read and write)
				[5]: IgnoreVisibilityUpdater_upvr (copied, readonly)
				[6]: widget_upvr (copied, readonly)
				[7]: module_upvr (copied, readonly)
				[8]: var52_upvw (copied, read and write)
				[9]: checkIfOutsideParentXBounds_upvr (copied, readonly)
				[10]: any_add_result1_upvr (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local var76
			local UID_3 = arg1.UID
			local var78
			if arg2:GetAttribute("ClipToJoinedParent") then
				for _ = 1, 10 do
					local any_getIconByUID_result1_4 = iconModule_upvr.getIconByUID(UID_3)
					if not any_getIconByUID_result1_4 then break end
					local joinedFrame_4 = any_getIconByUID_result1_4.joinedFrame
					if not joinedFrame_4 then break end
					var76 = joinedFrame_4
				end
			end
			if not var76 then
				var49_upvw = false
				if IgnoreVisibilityUpdater_upvr then
				else
					local Visible_6 = widget_upvr.Visible
					if var49_upvw then
						Visible_6 = false
					end
					module_upvr.setVisible(arg2, Visible_6, "ClipHandler")
				end
			end
			local AbsolutePosition = var76.AbsolutePosition
			local AbsoluteSize_5 = var76.AbsoluteSize
			local var84 = arg2.AbsolutePosition + arg2.AbsoluteSize / 2
			if var84.X >= AbsolutePosition.X then
				var78 = false
			else
				var78 = true
			end
			if AbsolutePosition.X + AbsoluteSize_5.X >= var84.X then
				-- KONSTANTWARNING: GOTO [79] #62
			end
			if var84.Y >= AbsolutePosition.Y then
				-- KONSTANTWARNING: GOTO [87] #67
			end
			if AbsolutePosition.Y + AbsoluteSize_5.Y >= var84.Y then
			else
			end
			if not var78 then
				if not true then
					if not true then
						local var85 = true
					end
				end
			end
			if var85 ~= var49_upvw then
				var49_upvw = var85
				if IgnoreVisibilityUpdater_upvr then
				else
					local Visible_5 = widget_upvr.Visible
					if var49_upvw then
						Visible_5 = false
					end
					module_upvr.setVisible(arg2, Visible_5, "ClipHandler")
				end
			end
			if var76:IsA("ScrollingFrame") and var52_upvw ~= var76 then
				var52_upvw = var76
				any_add_result1_upvr:add(var76:GetPropertyChangedSignal("AbsoluteWindowSize"):Connect(function() -- Line 262
					--[[ Upvalues[1]:
						[1]: checkIfOutsideParentXBounds_upvr (copied, readonly)
					]]
					checkIfOutsideParentXBounds_upvr()
				end), "Disconnect", "TrackUtilityScroller-"..UID_3)
			end
		end)
	end
	local CurrentCamera_upvr = workspace.CurrentCamera
	local var89_upvr = arg2:GetAttribute("AdditionalOffsetX") or 0
	local function trackProperty(arg1_2) -- Line 272
		--[[ Upvalues[15]:
			[1]: any_add_result1_upvr_2 (readonly)
			[2]: CurrentCamera_upvr (readonly)
			[3]: arg2 (readonly)
			[4]: GuiService_upvr (copied, readonly)
			[5]: var41_upvw (read and write)
			[6]: arg1 (readonly)
			[7]: var89_upvr (readonly)
			[8]: iconModule_upvr (readonly)
			[9]: var49_upvw (read and write)
			[10]: IgnoreVisibilityUpdater_upvr (readonly)
			[11]: widget_upvr (readonly)
			[12]: module_upvr (copied, readonly)
			[13]: var52_upvw (read and write)
			[14]: checkIfOutsideParentXBounds_upvr (readonly)
			[15]: any_add_result1_upvr (readonly)
		]]
		local var90_upvr = "Absolute"..arg1_2
		local function updateProperty() -- Line 274
			--[[ Upvalues[17]:
				[1]: any_add_result1_upvr_2 (copied, readonly)
				[2]: var90_upvr (readonly)
				[3]: arg1_2 (readonly)
				[4]: CurrentCamera_upvr (copied, readonly)
				[5]: arg2 (copied, readonly)
				[6]: GuiService_upvr (copied, readonly)
				[7]: var41_upvw (copied, read and write)
				[8]: arg1 (copied, readonly)
				[9]: var89_upvr (copied, readonly)
				[10]: iconModule_upvr (copied, readonly)
				[11]: var49_upvw (copied, read and write)
				[12]: IgnoreVisibilityUpdater_upvr (copied, readonly)
				[13]: widget_upvr (copied, readonly)
				[14]: module_upvr (copied, readonly)
				[15]: var52_upvw (copied, read and write)
				[16]: checkIfOutsideParentXBounds_upvr (copied, readonly)
				[17]: any_add_result1_upvr (copied, readonly)
			]]
			local var91 = any_add_result1_upvr_2[var90_upvr]
			local udim2 = UDim2.fromOffset(var91.X, var91.Y)
			if arg1_2 == "Position" then
				local var93 = CurrentCamera_upvr.ViewportSize.X - arg2.AbsoluteSize.X - 4
				local Offset = udim2.X.Offset
				if Offset < 4 then
					Offset = 4
				elseif var93 < Offset then
					Offset = var93
				end
				udim2 = UDim2.fromOffset(Offset, udim2.Y.Offset)
				local TopbarInset = GuiService_upvr.TopbarInset
				local X = TopbarInset.Min.X
				if arg1.isOldTopbar then
					X = var41_upvw.AbsolutePosition.X
				else
					X = workspace.CurrentCamera.ViewportSize.X - var41_upvw.AbsoluteSize.X - 0
				end
				udim2 += UDim2.fromOffset(-(X - var89_upvr), TopbarInset.Height)
				task.defer(function() -- Line 220
					--[[ Upvalues[10]:
						[1]: arg1 (copied, readonly)
						[2]: arg2 (copied, readonly)
						[3]: iconModule_upvr (copied, readonly)
						[4]: var49_upvw (copied, read and write)
						[5]: IgnoreVisibilityUpdater_upvr (copied, readonly)
						[6]: widget_upvr (copied, readonly)
						[7]: module_upvr (copied, readonly)
						[8]: var52_upvw (copied, read and write)
						[9]: checkIfOutsideParentXBounds_upvr (copied, readonly)
						[10]: any_add_result1_upvr (copied, readonly)
					]]
					-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
					local var103
					local UID_2 = arg1.UID
					local var105
					if arg2:GetAttribute("ClipToJoinedParent") then
						for _ = 1, 10 do
							local any_getIconByUID_result1_5 = iconModule_upvr.getIconByUID(UID_2)
							if not any_getIconByUID_result1_5 then break end
							local joinedFrame_2 = any_getIconByUID_result1_5.joinedFrame
							if not joinedFrame_2 then break end
							var103 = joinedFrame_2
						end
					end
					if not var103 then
						var49_upvw = false
						if IgnoreVisibilityUpdater_upvr then
						else
							local Visible_8 = widget_upvr.Visible
							if var49_upvw then
								Visible_8 = false
							end
							module_upvr.setVisible(arg2, Visible_8, "ClipHandler")
						end
					end
					local AbsolutePosition_4 = var103.AbsolutePosition
					local AbsoluteSize_4 = var103.AbsoluteSize
					local var111 = arg2.AbsolutePosition + arg2.AbsoluteSize / 2
					if var111.X >= AbsolutePosition_4.X then
						var105 = false
					else
						var105 = true
					end
					if AbsolutePosition_4.X + AbsoluteSize_4.X >= var111.X then
						-- KONSTANTWARNING: GOTO [79] #62
					end
					if var111.Y >= AbsolutePosition_4.Y then
						-- KONSTANTWARNING: GOTO [87] #67
					end
					if AbsolutePosition_4.Y + AbsoluteSize_4.Y >= var111.Y then
					else
					end
					if not var105 then
						if not true then
							if not true then
								local var112 = true
							end
						end
					end
					if var112 ~= var49_upvw then
						var49_upvw = var112
						if IgnoreVisibilityUpdater_upvr then
						else
							local Visible_7 = widget_upvr.Visible
							if var49_upvw then
								Visible_7 = false
							end
							module_upvr.setVisible(arg2, Visible_7, "ClipHandler")
						end
					end
					if var103:IsA("ScrollingFrame") and var52_upvw ~= var103 then
						var52_upvw = var103
						any_add_result1_upvr:add(var103:GetPropertyChangedSignal("AbsoluteWindowSize"):Connect(function() -- Line 262
							--[[ Upvalues[1]:
								[1]: checkIfOutsideParentXBounds_upvr (copied, readonly)
							]]
							checkIfOutsideParentXBounds_upvr()
						end), "Disconnect", "TrackUtilityScroller-"..UID_2)
					end
				end)
			end
			arg2[arg1_2] = udim2
		end
		any_add_result1_upvr:add(any_add_result1_upvr_2:GetPropertyChangedSignal(var90_upvr):Connect(module_upvr.createStagger(0.01, updateProperty)))
		any_add_result1_upvr:add(any_add_result1_upvr_2:GetPropertyChangedSignal(var90_upvr):Connect(module_upvr.createStagger(0.5, updateProperty, true)))
	end
	var47 = task.delay
	var47(0.1, checkIfOutsideParentXBounds_upvr)
	var47 = task.defer
	var47(function() -- Line 220
		--[[ Upvalues[10]:
			[1]: arg1 (readonly)
			[2]: arg2 (readonly)
			[3]: iconModule_upvr (readonly)
			[4]: var49_upvw (read and write)
			[5]: IgnoreVisibilityUpdater_upvr (readonly)
			[6]: widget_upvr (readonly)
			[7]: module_upvr (copied, readonly)
			[8]: var52_upvw (read and write)
			[9]: checkIfOutsideParentXBounds_upvr (readonly)
			[10]: any_add_result1_upvr (readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var120
		local UID_4 = arg1.UID
		local var122
		if arg2:GetAttribute("ClipToJoinedParent") then
			for _ = 1, 10 do
				local any_getIconByUID_result1_2 = iconModule_upvr.getIconByUID(UID_4)
				if not any_getIconByUID_result1_2 then break end
				local joinedFrame_3 = any_getIconByUID_result1_2.joinedFrame
				if not joinedFrame_3 then break end
				var120 = joinedFrame_3
			end
		end
		if not var120 then
			var49_upvw = false
			if IgnoreVisibilityUpdater_upvr then
			else
				local Visible_4 = widget_upvr.Visible
				if var49_upvw then
					Visible_4 = false
				end
				module_upvr.setVisible(arg2, Visible_4, "ClipHandler")
			end
		end
		local AbsolutePosition_2 = var120.AbsolutePosition
		local AbsoluteSize = var120.AbsoluteSize
		local var128 = arg2.AbsolutePosition + arg2.AbsoluteSize / 2
		if var128.X >= AbsolutePosition_2.X then
			var122 = false
		else
			var122 = true
		end
		if AbsolutePosition_2.X + AbsoluteSize.X >= var128.X then
			-- KONSTANTWARNING: GOTO [79] #62
		end
		if var128.Y >= AbsolutePosition_2.Y then
			-- KONSTANTWARNING: GOTO [87] #67
		end
		if AbsolutePosition_2.Y + AbsoluteSize.Y >= var128.Y then
		else
		end
		if not var122 then
			if not true then
				if not true then
					local var129 = true
				end
			end
		end
		if var129 ~= var49_upvw then
			var49_upvw = var129
			if IgnoreVisibilityUpdater_upvr then
			else
				local Visible_9 = widget_upvr.Visible
				if var49_upvw then
					Visible_9 = false
				end
				module_upvr.setVisible(arg2, Visible_9, "ClipHandler")
			end
		end
		if var120:IsA("ScrollingFrame") and var52_upvw ~= var120 then
			var52_upvw = var120
			any_add_result1_upvr:add(var120:GetPropertyChangedSignal("AbsoluteWindowSize"):Connect(function() -- Line 262
				--[[ Upvalues[1]:
					[1]: checkIfOutsideParentXBounds_upvr (copied, readonly)
				]]
				checkIfOutsideParentXBounds_upvr()
			end), "Disconnect", "TrackUtilityScroller-"..UID_4)
		end
	end)
	if IgnoreVisibilityUpdater_upvr then
		-- KONSTANTWARNING: GOTO [221] #167
	end
	-- KONSTANTERROR: [0] 1. Error Block 25 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [210] 158. Error Block 21 start (CF ANALYSIS FAILED)
	var47 = widget_upvr.Visible
	if var49_upvw then
		var47 = false
	end
	module_upvr.setVisible(arg2, var47, "ClipHandler")
	var47 = trackProperty
	var47("Position")
	var47 = any_add_result1_upvr:add
	var47(arg2:GetPropertyChangedSignal("Visible"):Connect(function() -- Line 333
	end))
	var47 = arg2:GetAttribute("TrackCloneSize")
	if var47 then
		trackProperty("Size")
	else
		any_add_result1_upvr:add(arg2:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() -- Line 343
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: any_add_result1_upvr_2 (readonly)
			]]
			local AbsoluteSize_3 = arg2.AbsoluteSize
			any_add_result1_upvr_2.Size = UDim2.fromOffset(AbsoluteSize_3.X, AbsoluteSize_3.Y)
		end))
	end
	do
		return any_add_result1_upvr_2
	end
	-- KONSTANTERROR: [210] 158. Error Block 21 end (CF ANALYSIS FAILED)
end
function module_upvr.joinFeature(arg1, arg2, arg3, arg4) -- Line 352
	local joinJanitor = arg1.joinJanitor
	joinJanitor:clean()
	if not arg4 then
		arg1:leave()
	else
		arg1.parentIconUID = arg2.UID
		arg1.joinedFrame = arg4
		joinJanitor:add(arg2.alignmentChanged:Connect(function() -- Line 363, Named "updateAlignent"
			--[[ Upvalues[2]:
				[1]: arg2 (readonly)
				[2]: arg1 (readonly)
			]]
			local alignment_2 = arg2.alignment
			if alignment_2 == "Center" then
				alignment_2 = "Left"
			end
			arg1:setAlignment(alignment_2, true)
		end))
		local alignment = arg2.alignment
		if alignment == "Center" then
			alignment = "Left"
		end
		arg1:setAlignment(alignment, true)
		arg1:modifyTheme({"IconButton", "BackgroundTransparency", 1}, "JoinModification")
		arg1:modifyTheme({"ClickRegion", "Active", false}, "JoinModification")
		if arg2.childModifications then
			task.defer(function() -- Line 378
				--[[ Upvalues[2]:
					[1]: arg1 (readonly)
					[2]: arg2 (readonly)
				]]
				arg1:modifyTheme(arg2.childModifications, arg2.childModificationsUID)
			end)
		end
		local any_getInstance_result1_upvr = arg1:getInstance("ClickRegion")
		local function makeSelectable() -- Line 384
			--[[ Upvalues[2]:
				[1]: any_getInstance_result1_upvr (readonly)
				[2]: arg2 (readonly)
			]]
			any_getInstance_result1_upvr.Selectable = arg2.isSelected
		end
		joinJanitor:add(arg2.toggled:Connect(makeSelectable))
		task.defer(makeSelectable)
		joinJanitor:add(function() -- Line 389
			--[[ Upvalues[1]:
				[1]: any_getInstance_result1_upvr (readonly)
			]]
			any_getInstance_result1_upvr.Selectable = true
		end)
		local UID_upvr = arg1.UID
		table.insert(arg3, UID_upvr)
		arg2:autoDeselect(false)
		arg2.childIconsDict[UID_upvr] = true
		if not arg2.isEnabled then
			arg2:setEnabled(true)
		end
		arg1.joinedParent:Fire(arg2)
		joinJanitor:add(function() -- Line 407
			--[[ Upvalues[4]:
				[1]: arg1 (readonly)
				[2]: arg3 (readonly)
				[3]: UID_upvr (readonly)
				[4]: arg2 (readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 23 start (CF ANALYSIS FAILED)
			if not arg1.joinedFrame then return end
			local pairs_result1_2, pairs_result2_2, pairs_result3_2 = pairs(arg3)
			-- KONSTANTERROR: [0] 1. Error Block 23 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [19] 16. Error Block 6 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [19] 16. Error Block 6 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [10] 9. Error Block 29 start (CF ANALYSIS FAILED)
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [19.5]
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [19.6]
			if nil == nil then
				local any_getIconByUID_result1_3 = require(arg1.iconModule).getIconByUID(arg1.parentIconUID)
				if not any_getIconByUID_result1_3 then return end
				arg1:setAlignment(arg1.originalAlignment)
				arg1.parentIconUID = false
				arg1.joinedFrame = false
				arg1:setBehaviour("IconButton", "BackgroundTransparency", nil, true)
				arg1:removeModification("JoinModification")
				local childIconsDict = any_getIconByUID_result1_3.childIconsDict
				childIconsDict[UID_upvr] = nil
				local _, _, _ = pairs(childIconsDict)
				-- KONSTANTWARNING: GOTO [74] #58
			end
			-- KONSTANTERROR: [10] 9. Error Block 29 end (CF ANALYSIS FAILED)
		end)
	end
end
return module_upvr

Script name: Caption
  - Script: 


return function(arg1) -- Line 1
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local any_getInstance_result1_upvr = arg1:getInstance("ClickRegion")
	local CanvasGroup_upvr = Instance.new("CanvasGroup")
	CanvasGroup_upvr.Name = "Caption"
	CanvasGroup_upvr.AnchorPoint = Vector2.new(0.5, 0)
	CanvasGroup_upvr.BackgroundTransparency = 1
	CanvasGroup_upvr.BorderSizePixel = 0
	CanvasGroup_upvr.GroupTransparency = 1
	CanvasGroup_upvr.Position = UDim2.fromOffset(0, 0)
	CanvasGroup_upvr.Visible = true
	CanvasGroup_upvr.ZIndex = 30
	CanvasGroup_upvr.Parent = any_getInstance_result1_upvr
	local Frame_upvr = Instance.new("Frame")
	Frame_upvr.Name = "Box"
	Frame_upvr.AutomaticSize = Enum.AutomaticSize.XY
	Frame_upvr.BackgroundColor3 = Color3.fromRGB(101, 102, 104)
	Frame_upvr.Position = UDim2.fromOffset(4, 7)
	Frame_upvr.ZIndex = 12
	Frame_upvr.Parent = CanvasGroup_upvr
	local TextLabel = Instance.new("TextLabel")
	TextLabel.Name = "Header"
	TextLabel.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
	TextLabel.Text = "Caption"
	TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel.TextSize = 14
	TextLabel.TextTruncate = Enum.TextTruncate.None
	TextLabel.TextWrapped = false
	TextLabel.TextXAlignment = Enum.TextXAlignment.Left
	TextLabel.AutomaticSize = Enum.AutomaticSize.X
	TextLabel.BackgroundTransparency = 1
	TextLabel.LayoutOrder = 1
	TextLabel.Size = UDim2.fromOffset(0, 16)
	TextLabel.ZIndex = 18
	TextLabel.Parent = Frame_upvr
	local UIListLayout = Instance.new("UIListLayout")
	UIListLayout.Name = "Layout"
	UIListLayout.Padding = UDim.new(0, 8)
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.Parent = Frame_upvr
	local UICorner = Instance.new("UICorner")
	UICorner.Name = "CaptionCorner"
	UICorner.Parent = Frame_upvr
	local UIPadding_2 = Instance.new("UIPadding")
	UIPadding_2.Name = "Padding"
	UIPadding_2.PaddingBottom = UDim.new(0, 12)
	UIPadding_2.PaddingLeft = UDim.new(0, 12)
	UIPadding_2.PaddingRight = UDim.new(0, 12)
	UIPadding_2.PaddingTop = UDim.new(0, 12)
	UIPadding_2.Parent = Frame_upvr
	local Frame_upvr_2 = Instance.new("Frame")
	Frame_upvr_2.Name = "Hotkeys"
	Frame_upvr_2.AutomaticSize = Enum.AutomaticSize.Y
	Frame_upvr_2.BackgroundTransparency = 1
	Frame_upvr_2.LayoutOrder = 3
	Frame_upvr_2.Size = UDim2.fromScale(1, 0)
	Frame_upvr_2.Visible = false
	Frame_upvr_2.Parent = Frame_upvr
	local UIListLayout_2 = Instance.new("UIListLayout")
	UIListLayout_2.Name = "Layout1"
	UIListLayout_2.Padding = UDim.new(0, 6)
	UIListLayout_2.FillDirection = Enum.FillDirection.Vertical
	UIListLayout_2.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout_2.HorizontalFlex = Enum.UIFlexAlignment.None
	UIListLayout_2.ItemLineAlignment = Enum.ItemLineAlignment.Automatic
	UIListLayout_2.VerticalFlex = Enum.UIFlexAlignment.None
	UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout_2.Parent = Frame_upvr_2
	local ImageLabel = Instance.new("ImageLabel")
	ImageLabel.Name = "Key1"
	ImageLabel.Image = "rbxasset://textures/ui/Controls/key_single.png"
	ImageLabel.ImageTransparency = 0.7
	ImageLabel.ScaleType = Enum.ScaleType.Slice
	ImageLabel.SliceCenter = Rect.new(5, 5, 23, 24)
	ImageLabel.AutomaticSize = Enum.AutomaticSize.X
	ImageLabel.BackgroundTransparency = 1
	ImageLabel.LayoutOrder = 1
	ImageLabel.Size = UDim2.fromOffset(0, 30)
	ImageLabel.ZIndex = 15
	ImageLabel.Parent = Frame_upvr_2
	local UIPadding = Instance.new("UIPadding")
	UIPadding.Name = "Inset"
	UIPadding.PaddingLeft = UDim.new(0, 8)
	UIPadding.PaddingRight = UDim.new(0, 8)
	UIPadding.Parent = ImageLabel
	local TextLabel_upvr = Instance.new("TextLabel")
	TextLabel_upvr.AutoLocalize = false
	TextLabel_upvr.Name = "LabelContent"
	TextLabel_upvr.FontFace = Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal)
	TextLabel_upvr.Text = ""
	TextLabel_upvr.TextColor3 = Color3.fromRGB(189, 190, 190)
	TextLabel_upvr.TextSize = 14
	TextLabel_upvr.AutomaticSize = Enum.AutomaticSize.X
	TextLabel_upvr.BackgroundTransparency = 1
	TextLabel_upvr.Position = UDim2.fromOffset(0, -1)
	TextLabel_upvr.Size = UDim2.fromScale(1, 1)
	TextLabel_upvr.ZIndex = 16
	TextLabel_upvr.Parent = ImageLabel
	local ImageLabel_2_upvr = Instance.new("ImageLabel")
	ImageLabel_2_upvr.Name = "Caret"
	ImageLabel_2_upvr.Image = "rbxasset://LuaPackages/Packages/_Index/UIBlox/UIBlox/AppImageAtlas/img_set_1x_1.png"
	ImageLabel_2_upvr.ImageColor3 = Color3.fromRGB(101, 102, 104)
	ImageLabel_2_upvr.ImageRectOffset = Vector2.new(260, 440)
	ImageLabel_2_upvr.ImageRectSize = Vector2.new(16, 8)
	ImageLabel_2_upvr.AnchorPoint = Vector2.new(0, 0.5)
	ImageLabel_2_upvr.BackgroundTransparency = 1
	ImageLabel_2_upvr.Position = UDim2.new(0, 0, 0, 4)
	ImageLabel_2_upvr.Rotation = 180
	ImageLabel_2_upvr.Size = UDim2.fromOffset(16, 8)
	ImageLabel_2_upvr.ZIndex = 12
	ImageLabel_2_upvr.Parent = CanvasGroup_upvr
	local ImageLabel_3_upvr = Instance.new("ImageLabel")
	ImageLabel_3_upvr.Name = "DropShadow"
	ImageLabel_3_upvr.Image = "rbxasset://LuaPackages/Packages/_Index/UIBlox/UIBlox/AppImageAtlas/img_set_1x_1.png"
	ImageLabel_3_upvr.ImageColor3 = Color3.fromRGB(0, 0, 0)
	ImageLabel_3_upvr.ImageRectOffset = Vector2.new(217, 486)
	ImageLabel_3_upvr.ImageRectSize = Vector2.new(25, 25)
	ImageLabel_3_upvr.ImageTransparency = 0.45
	ImageLabel_3_upvr.ScaleType = Enum.ScaleType.Slice
	ImageLabel_3_upvr.SliceCenter = Rect.new(12, 12, 13, 13)
	ImageLabel_3_upvr.BackgroundTransparency = 1
	ImageLabel_3_upvr.Position = UDim2.fromOffset(0, 5)
	ImageLabel_3_upvr.Size = UDim2.new(1, 0, 0, 48)
	ImageLabel_3_upvr.Parent = CanvasGroup_upvr
	Frame_upvr:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() -- Line 147
		--[[ Upvalues[2]:
			[1]: ImageLabel_3_upvr (readonly)
			[2]: Frame_upvr (readonly)
		]]
		ImageLabel_3_upvr.Size = UDim2.new(1, 0, 0, Frame_upvr.AbsoluteSize.Y + 8)
	end)
	local captionJanitor = arg1.captionJanitor
	local _, any_clipOutside_result2_upvr = arg1:clipOutside(CanvasGroup_upvr)
	any_clipOutside_result2_upvr.AutomaticSize = Enum.AutomaticSize.None
	captionJanitor:add(CanvasGroup_upvr:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() -- Line 157, Named "matchSize"
		--[[ Upvalues[2]:
			[1]: CanvasGroup_upvr (readonly)
			[2]: any_clipOutside_result2_upvr (readonly)
		]]
		local AbsoluteSize_3 = CanvasGroup_upvr.AbsoluteSize
		any_clipOutside_result2_upvr.Size = UDim2.fromOffset(AbsoluteSize_3.X, AbsoluteSize_3.Y)
	end))
	local AbsoluteSize_2 = CanvasGroup_upvr.AbsoluteSize
	any_clipOutside_result2_upvr.Size = UDim2.fromOffset(AbsoluteSize_2.X, AbsoluteSize_2.Y)
	local var22_upvw = false
	local UserInputService_upvr = game:GetService("UserInputService")
	local Header_upvr = CanvasGroup_upvr.Box.Header
	local function updateHotkey(arg1_2) -- Line 170
		--[[ Upvalues[6]:
			[1]: UserInputService_upvr (readonly)
			[2]: CanvasGroup_upvr (readonly)
			[3]: arg1 (readonly)
			[4]: Header_upvr (readonly)
			[5]: TextLabel_upvr (readonly)
			[6]: Frame_upvr_2 (readonly)
		]]
		local KeyboardEnabled = UserInputService_upvr.KeyboardEnabled
		local var26 = CanvasGroup_upvr:GetAttribute("CaptionText") or ""
		local var27
		if var26 ~= "_hotkey_" then
			var27 = false
		else
			var27 = true
		end
		if not KeyboardEnabled and var27 then
			arg1:setCaption()
		else
			Header_upvr.Text = var26
			Header_upvr.Visible = not var27
			if arg1_2 then
				TextLabel_upvr.Text = arg1_2.Name
				Frame_upvr_2.Visible = true
			end
			if not KeyboardEnabled then
				Frame_upvr_2.Visible = false
			end
		end
	end
	CanvasGroup_upvr:GetAttributeChangedSignal("CaptionText"):Connect(updateHotkey)
	local Quad = Enum.EasingStyle.Quad
	local function _(arg1_3) -- Line 196, Named "getCaptionPosition"
		--[[ Upvalues[1]:
			[1]: var22_upvw (read and write)
		]]
		if arg1_3 ~= nil then
		else
		end
		if var22_upvw then
		else
		end
		return UDim2.new(0.5, 0, 1, 2)
	end
	local TweenInfo_new_result1_upvr = TweenInfo.new(0.2, Quad, Enum.EasingDirection.In)
	local TweenInfo_new_result1_upvr_2 = TweenInfo.new(0.2, Quad, Enum.EasingDirection.Out)
	local TweenService_upvr = game:GetService("TweenService")
	local RunService_upvr = game:GetService("RunService")
	local function updatePosition_upvr(arg1_4) -- Line 203, Named "updatePosition"
		--[[ Upvalues[9]:
			[1]: var22_upvw (read and write)
			[2]: ImageLabel_2_upvr (readonly)
			[3]: CanvasGroup_upvr (readonly)
			[4]: any_getInstance_result1_upvr (readonly)
			[5]: any_clipOutside_result2_upvr (readonly)
			[6]: TweenInfo_new_result1_upvr (readonly)
			[7]: TweenInfo_new_result1_upvr_2 (readonly)
			[8]: TweenService_upvr (readonly)
			[9]: RunService_upvr (readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		-- KONSTANTERROR: [0] 1. Error Block 43 start (CF ANALYSIS FAILED)
		local var33
		if not var33 then
		else
			if arg1_4 ~= nil then
				var33 = arg1_4
			else
				var33 = var22_upvw
			end
			if not var33 ~= nil then
				-- KONSTANTWARNING: GOTO [14] #13
			end
			-- KONSTANTERROR: [0] 1. Error Block 43 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [13] 12. Error Block 47 start (CF ANALYSIS FAILED)
			if var22_upvw then
			else
			end
			if var33 ~= nil then
				-- KONSTANTWARNING: GOTO [31] #28
			end
			if var22_upvw then
			else
			end
			if var33 then
				ImageLabel_2_upvr.Position = UDim2.fromOffset(0, ImageLabel_2_upvr.Position.Y.Offset)
				CanvasGroup_upvr.AutomaticSize = Enum.AutomaticSize.XY
				CanvasGroup_upvr.Size = UDim2.fromOffset(32, 53)
			else
				local AbsoluteSize = CanvasGroup_upvr.AbsoluteSize
				CanvasGroup_upvr.AutomaticSize = Enum.AutomaticSize.Y
				CanvasGroup_upvr.Size = UDim2.fromOffset(AbsoluteSize.X, AbsoluteSize.Y)
			end
			local var36_upvw
			local function updateCaret() -- Line 232
				--[[ Upvalues[4]:
					[1]: any_getInstance_result1_upvr (copied, readonly)
					[2]: CanvasGroup_upvr (copied, readonly)
					[3]: ImageLabel_2_upvr (copied, readonly)
					[4]: var36_upvw (read and write)
				]]
				local var37 = any_getInstance_result1_upvr.AbsolutePosition.X - CanvasGroup_upvr.AbsolutePosition.X + any_getInstance_result1_upvr.AbsoluteSize.X / 2 - ImageLabel_2_upvr.AbsoluteSize.X / 2
				local Offset = ImageLabel_2_upvr.Position.Y.Offset
				if var36_upvw ~= var37 then
					var36_upvw = var37
					ImageLabel_2_upvr.Position = UDim2.fromOffset(0, Offset)
					task.wait()
				end
				ImageLabel_2_upvr.Position = UDim2.fromOffset(var37, Offset)
			end
			any_clipOutside_result2_upvr.Position = UDim2.new(0.5, 0, 1, 2)
			updateCaret()
			if not var33 or not TweenInfo_new_result1_upvr then
			end
			local any_Create_result1 = TweenService_upvr:Create(any_clipOutside_result2_upvr, TweenInfo_new_result1_upvr_2, {
				Position = UDim2.new(0.5, 0, 1, 2);
			})
			any_Create_result1:Play()
			local any_Connect_result1_upvr = RunService_upvr.Heartbeat:Connect(updateCaret)
			any_Create_result1.Completed:Once(function() -- Line 255
				--[[ Upvalues[1]:
					[1]: any_Connect_result1_upvr (readonly)
				]]
				any_Connect_result1_upvr:Disconnect()
			end)
			-- KONSTANTERROR: [13] 12. Error Block 47 end (CF ANALYSIS FAILED)
		end
	end
	captionJanitor:add(any_getInstance_result1_upvr:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() -- Line 260
		--[[ Upvalues[1]:
			[1]: updatePosition_upvr (readonly)
		]]
		updatePosition_upvr()
	end))
	updatePosition_upvr(false)
	captionJanitor:add(arg1.toggleKeyAdded:Connect(updateHotkey))
	local pairs_result1, pairs_result2, pairs_result3 = pairs(arg1.bindedToggleKeys)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [714] 492. Error Block 13 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [714] 492. Error Block 13 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [679] 467. Error Block 37 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [714.36]
	if nil ~= "_hotkey_" then
	else
	end
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [714.35]
	-- KONSTANTERROR: [679] 467. Error Block 37 end (CF ANALYSIS FAILED)
end

Script name: Container
  - Script: 


return function(arg1) -- Line 1
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local GuiService = game:GetService("GuiService")
	local isOldTopbar = arg1.isOldTopbar
	local module = {}
	local any_IsTenFootInterface_result1 = GuiService:IsTenFootInterface()
	local var6
	if isOldTopbar then
		var6 = 12
	else
		var6 = GuiService:GetGuiInset().Y - 46
	end
	if any_IsTenFootInterface_result1 then
		var6 = 10
	end
	local ScreenGui_upvr = Instance.new("ScreenGui")
	ScreenGui_upvr:SetAttribute("StartInset", var6)
	ScreenGui_upvr.Name = "TopbarStandard"
	ScreenGui_upvr.Enabled = true
	ScreenGui_upvr.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	ScreenGui_upvr.IgnoreGuiInset = true
	ScreenGui_upvr.ResetOnSpawn = false
	ScreenGui_upvr.ScreenInsets = Enum.ScreenInsets.TopbarSafeInsets
	module[ScreenGui_upvr.Name] = ScreenGui_upvr
	ScreenGui_upvr.DisplayOrder = arg1.baseDisplayOrder
	arg1.baseDisplayOrderChanged:Connect(function() -- Line 22
		--[[ Upvalues[2]:
			[1]: ScreenGui_upvr (readonly)
			[2]: arg1 (readonly)
		]]
		ScreenGui_upvr.DisplayOrder = arg1.baseDisplayOrder
	end)
	local Frame = Instance.new("Frame")
	if isOldTopbar then
	else
	end
	if any_IsTenFootInterface_result1 then
		local var10_upvw = 50
	end
	Frame.Name = "Holders"
	Frame.BackgroundTransparency = 1
	Frame.Position = UDim2.new(0, 0, 0, 0 + 13)
	Frame.Size = UDim2.new(1, 0, 1, var10_upvw)
	Frame.Visible = true
	Frame.ZIndex = 1
	Frame.Parent = ScreenGui_upvr
	local clone_5_upvr = ScreenGui_upvr:Clone()
	local Holders_upvr = clone_5_upvr.Holders
	local GuiService_2_upvr = game:GetService("GuiService")
	clone_5_upvr.Name = "TopbarCentered"
	clone_5_upvr.ScreenInsets = Enum.ScreenInsets.None
	arg1.baseDisplayOrderChanged:Connect(function() -- Line 49
		--[[ Upvalues[2]:
			[1]: clone_5_upvr (readonly)
			[2]: arg1 (readonly)
		]]
		clone_5_upvr.DisplayOrder = arg1.baseDisplayOrder
	end)
	module[clone_5_upvr.Name] = clone_5_upvr
	GuiService_2_upvr:GetPropertyChangedSignal("TopbarInset"):Connect(function() -- Line 44, Named "updateCenteredHoldersHeight"
		--[[ Upvalues[3]:
			[1]: Holders_upvr (readonly)
			[2]: GuiService_2_upvr (readonly)
			[3]: var10_upvw (read and write)
		]]
		Holders_upvr.Size = UDim2.new(1, 0, 0, GuiService_2_upvr.TopbarInset.Height + var10_upvw)
	end)
	Holders_upvr.Size = UDim2.new(1, 0, 0, GuiService_2_upvr.TopbarInset.Height + var10_upvw)
	local clone_3_upvr = ScreenGui_upvr:Clone()
	clone_3_upvr.Name ..= "Clipped"
	clone_3_upvr.DisplayOrder += 1
	arg1.baseDisplayOrderChanged:Connect(function() -- Line 59
		--[[ Upvalues[2]:
			[1]: clone_3_upvr (readonly)
			[2]: arg1 (readonly)
		]]
		clone_3_upvr.DisplayOrder = arg1.baseDisplayOrder + 1
	end)
	module[clone_3_upvr.Name] = clone_3_upvr
	local clone_4_upvr = clone_5_upvr:Clone()
	clone_4_upvr.Name ..= "Clipped"
	clone_4_upvr.DisplayOrder += 1
	arg1.baseDisplayOrderChanged:Connect(function() -- Line 67
		--[[ Upvalues[2]:
			[1]: clone_4_upvr (readonly)
			[2]: arg1 (readonly)
		]]
		clone_4_upvr.DisplayOrder = arg1.baseDisplayOrder + 1
	end)
	module[clone_4_upvr.Name] = clone_4_upvr
	if isOldTopbar then
		task.defer(function() -- Line 73
			--[[ Upvalues[2]:
				[1]: GuiService_2_upvr (readonly)
				[2]: arg1 (readonly)
			]]
			GuiService_2_upvr:GetPropertyChangedSignal("MenuIsOpen"):Connect(function() -- Line 74, Named "decideToHideTopbar"
				--[[ Upvalues[2]:
					[1]: GuiService_2_upvr (copied, readonly)
					[2]: arg1 (copied, readonly)
				]]
				if GuiService_2_upvr.MenuIsOpen then
					arg1.setTopbarEnabled(false, true)
				else
					arg1.setTopbarEnabled()
				end
			end)
			if GuiService_2_upvr.MenuIsOpen then
				arg1.setTopbarEnabled(false, true)
			else
				arg1.setTopbarEnabled()
			end
		end)
	end
	local ScrollingFrame = Instance.new("ScrollingFrame")
	ScrollingFrame:SetAttribute("IsAHolder", true)
	ScrollingFrame.Name = "Left"
	ScrollingFrame.Position = UDim2.fromOffset(var6, 0)
	ScrollingFrame.Size = UDim2.new(1, -24, 1, 0)
	ScrollingFrame.BackgroundTransparency = 1
	ScrollingFrame.Visible = true
	ScrollingFrame.ZIndex = 1
	ScrollingFrame.Active = false
	ScrollingFrame.ClipsDescendants = true
	ScrollingFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.None
	ScrollingFrame.CanvasSize = UDim2.new(0, 0, 1, -1)
	ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.X
	ScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.X
	ScrollingFrame.ScrollBarThickness = 0
	ScrollingFrame.BorderSizePixel = 0
	ScrollingFrame.Selectable = false
	ScrollingFrame.ScrollingEnabled = false
	ScrollingFrame.ElasticBehavior = Enum.ElasticBehavior.Never
	ScrollingFrame.Parent = Frame
	local UIListLayout = Instance.new("UIListLayout")
	UIListLayout.Padding = UDim.new(0, var6)
	UIListLayout.FillDirection = Enum.FillDirection.Horizontal
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
	UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
	UIListLayout.Parent = ScrollingFrame
	local clone = ScrollingFrame:Clone()
	clone.ScrollingEnabled = false
	clone.UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	clone.Name = "Center"
	clone.Parent = Holders_upvr
	local clone_2 = ScrollingFrame:Clone()
	clone_2.UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
	clone_2.Name = "Right"
	clone_2.AnchorPoint = Vector2.new(1, 0)
	clone_2.Position = UDim2.new(1, -12, 0, 0)
	clone_2.Parent = Frame
	return module
end

Script name: Dropdown
  - Script: 


return function(arg1) -- Line 1
	local Frame_upvr = Instance.new("Frame")
	Frame_upvr.Name = "Dropdown"
	Frame_upvr.AutomaticSize = Enum.AutomaticSize.XY
	Frame_upvr.BackgroundTransparency = 1
	Frame_upvr.BorderSizePixel = 0
	Frame_upvr.AnchorPoint = Vector2.new(0.5, 0)
	Frame_upvr.Position = UDim2.new(0.5, 0, 1, 10)
	Frame_upvr.ZIndex = -2
	Frame_upvr.ClipsDescendants = true
	Frame_upvr.Parent = arg1.widget
	local UICorner = Instance.new("UICorner")
	UICorner.Name = "DropdownCorner"
	UICorner.CornerRadius = UDim.new(0, 10)
	UICorner.Parent = Frame_upvr
	local ScrollingFrame_upvr = Instance.new("ScrollingFrame")
	ScrollingFrame_upvr.Name = "DropdownScroller"
	ScrollingFrame_upvr.AutomaticSize = Enum.AutomaticSize.X
	ScrollingFrame_upvr.BackgroundTransparency = 1
	ScrollingFrame_upvr.BorderSizePixel = 0
	ScrollingFrame_upvr.AnchorPoint = Vector2.new(0, 0)
	ScrollingFrame_upvr.Position = UDim2.new(0, 0, 0, 0)
	ScrollingFrame_upvr.ZIndex = -1
	ScrollingFrame_upvr.ClipsDescendants = true
	ScrollingFrame_upvr.Visible = true
	ScrollingFrame_upvr.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar
	ScrollingFrame_upvr.VerticalScrollBarPosition = Enum.VerticalScrollBarPosition.Right
	ScrollingFrame_upvr.Active = false
	ScrollingFrame_upvr.ScrollingEnabled = true
	ScrollingFrame_upvr.AutomaticCanvasSize = Enum.AutomaticSize.Y
	ScrollingFrame_upvr.ScrollBarThickness = 5
	ScrollingFrame_upvr.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
	ScrollingFrame_upvr.ScrollBarImageTransparency = 0.8
	ScrollingFrame_upvr.CanvasSize = UDim2.new(0, 0, 0, 0)
	ScrollingFrame_upvr.Selectable = false
	ScrollingFrame_upvr.Active = true
	ScrollingFrame_upvr.Parent = Frame_upvr
	local UIPadding_upvr = Instance.new("UIPadding")
	UIPadding_upvr.Name = "DropdownPadding"
	UIPadding_upvr.PaddingTop = UDim.new(0, 8)
	UIPadding_upvr.PaddingBottom = UDim.new(0, 8)
	UIPadding_upvr.Parent = ScrollingFrame_upvr
	local UIListLayout = Instance.new("UIListLayout")
	UIListLayout.Name = "DropdownList"
	UIListLayout.FillDirection = Enum.FillDirection.Vertical
	UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	UIListLayout.HorizontalFlex = Enum.UIFlexAlignment.SpaceEvenly
	UIListLayout.Parent = ScrollingFrame_upvr
	local dropdownJanitor = arg1.dropdownJanitor
	local iconModule_upvr = require(arg1.iconModule)
	arg1.dropdownChildAdded:Connect(function(arg1_2) -- Line 58
		local _, any_modifyTheme_result2_upvr = arg1_2:modifyTheme({{"Widget", "BorderSize", 0}, {"IconCorners", "CornerRadius", UDim.new(0, 4)}, {"Widget", "MinimumWidth", 190}, {"Widget", "MinimumHeight", 56}, {"IconLabel", "TextSize", 19}, {"PaddingLeft", "Size", UDim2.fromOffset(25, 0)}, {"Notice", "Position", UDim2.new(1, -24, 0, 5)}, {"ContentsList", "HorizontalAlignment", Enum.HorizontalAlignment.Left}, {"Selection", "Size", UDim2.new(1, -8, 1, -8)}, {"Selection", "Position", UDim2.new(0, 4, 0, 4)}})
		task.defer(function() -- Line 72
			--[[ Upvalues[2]:
				[1]: arg1_2 (readonly)
				[2]: any_modifyTheme_result2_upvr (readonly)
			]]
			arg1_2.joinJanitor:add(function() -- Line 73
				--[[ Upvalues[2]:
					[1]: arg1_2 (copied, readonly)
					[2]: any_modifyTheme_result2_upvr (copied, readonly)
				]]
				arg1_2:removeModification(any_modifyTheme_result2_upvr)
			end)
		end)
	end)
	arg1.dropdownSet:Connect(function(arg1_3) -- Line 78
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: iconModule_upvr (readonly)
		]]
		for _, v in pairs(arg1.dropdownIcons) do
			iconModule_upvr.getIconByUID(v):destroy()
		end
		if type(arg1_3) == "table" then
			for _, v_2 in pairs(arg1_3) do
				v_2:joinDropdown(arg1)
			end
		end
	end)
	local Utility_upvr = require(script.Parent.Parent.Utility)
	dropdownJanitor:add(arg1.toggled:Connect(function() -- Line 95, Named "updateVisibility"
		--[[ Upvalues[3]:
			[1]: Utility_upvr (readonly)
			[2]: Frame_upvr (readonly)
			[3]: arg1 (readonly)
		]]
		Utility_upvr.setVisible(Frame_upvr, arg1.isSelected, "InternalDropdown")
	end))
	Utility_upvr.setVisible(Frame_upvr, arg1.isSelected, "InternalDropdown")
	local var37_upvw = 0
	local var38_upvw = false
	local function updateMaxIcons_upvr() -- Line 107, Named "updateMaxIcons"
		--[[ Upvalues[8]:
			[1]: var37_upvw (read and write)
			[2]: var38_upvw (read and write)
			[3]: updateMaxIcons_upvr (readonly)
			[4]: Frame_upvr (readonly)
			[5]: ScrollingFrame_upvr (readonly)
			[6]: iconModule_upvr (readonly)
			[7]: arg1 (readonly)
			[8]: UIPadding_upvr (readonly)
		]]
		var37_upvw += 1
		local var45
		if var38_upvw then
		else
			var38_upvw = true
			task.defer(function() -- Line 116
				--[[ Upvalues[4]:
					[1]: var38_upvw (copied, read and write)
					[2]: var37_upvw (copied, read and write)
					[3]: var37_upvw (readonly)
					[4]: updateMaxIcons_upvr (copied, readonly)
				]]
				var38_upvw = false
				if var37_upvw ~= var37_upvw then
					updateMaxIcons_upvr()
				end
			end)
			var45 = "MaxIcons"
			local attribute = Frame_upvr:GetAttribute(var45)
			if not attribute then return end
			local tbl = {}
			var45 = pairs(ScrollingFrame_upvr:GetChildren())
			local pairs_result1, pairs_result2_2, pairs_result3 = pairs(ScrollingFrame_upvr:GetChildren())
			for _, v_3 in pairs_result1, pairs_result2_2, pairs_result3 do
				if v_3:IsA("GuiObject") then
					table.insert(tbl, {v_3, v_3.AbsolutePosition.Y})
				end
			end
			pairs_result1 = table.sort
			pairs_result1(tbl, function(arg1_4, arg2) -- Line 133
				local var54
				if arg1_4[2] >= arg2[2] then
					var54 = false
				else
					var54 = true
				end
				return var54
			end)
			pairs_result1 = 0
			for i_4 = 1, attribute do
				local var55 = tbl[i_4]
				local var56
				if not var55 then break end
				local _1 = var55[1]
				pairs_result1 += _1.AbsoluteSize.Y
				local WidgetUID = _1:GetAttribute("WidgetUID")
				var56 = WidgetUID
				if var56 then
					var56 = iconModule_upvr.getIconByUID(WidgetUID)
				end
				if var56 then
					local var59
					if not false then
						var59 = arg1:getInstance("ClickRegion")
					end
					var56:getInstance("ClickRegion").NextSelectionUp = var59
				end
			end
			pairs_result1 += UIPadding_upvr.PaddingTop.Offset
			pairs_result1 += UIPadding_upvr.PaddingBottom.Offset
			ScrollingFrame_upvr.Size = UDim2.fromOffset(0, pairs_result1)
		end
	end
	dropdownJanitor:add(ScrollingFrame_upvr:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(updateMaxIcons_upvr))
	dropdownJanitor:add(ScrollingFrame_upvr.ChildAdded:Connect(updateMaxIcons_upvr))
	dropdownJanitor:add(ScrollingFrame_upvr.ChildRemoved:Connect(updateMaxIcons_upvr))
	dropdownJanitor:add(Frame_upvr:GetAttributeChangedSignal("MaxIcons"):Connect(updateMaxIcons_upvr))
	dropdownJanitor:add(arg1.childThemeModified:Connect(updateMaxIcons_upvr))
	updateMaxIcons_upvr()
	return Frame_upvr
end

Script name: Indicator
  - Script: 


return function(arg1, arg2) -- Line 1
	local widget_upvr = arg1.widget
	local Frame_upvr_2 = Instance.new("Frame")
	Frame_upvr_2.Name = "Indicator"
	Frame_upvr_2.LayoutOrder = 9999999
	Frame_upvr_2.ZIndex = 6
	Frame_upvr_2.Size = UDim2.new(0, 42, 0, 42)
	Frame_upvr_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr_2.BackgroundTransparency = 1
	Frame_upvr_2.Position = UDim2.new(1, 0, 0.5, 0)
	Frame_upvr_2.BorderSizePixel = 0
	Frame_upvr_2.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr_2.Parent = arg1:getInstance("Contents")
	local Frame_upvr = Instance.new("Frame")
	Frame_upvr.Name = "IndicatorButton"
	Frame_upvr.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
	Frame_upvr.BorderSizePixel = 0
	Frame_upvr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr.Parent = Frame_upvr_2
	local GuiService_upvr = game:GetService("GuiService")
	local GamepadService_upvr = game:GetService("GamepadService")
	local any_getInstance_result1_upvr = arg1:getInstance("ClickRegion")
	local function selectionChanged() -- Line 28
		--[[ Upvalues[3]:
			[1]: GuiService_upvr (readonly)
			[2]: any_getInstance_result1_upvr (readonly)
			[3]: Frame_upvr (readonly)
		]]
		if GuiService_upvr.SelectedObject == any_getInstance_result1_upvr then
			Frame_upvr.BackgroundTransparency = 1
			Frame_upvr.Position = UDim2.new(0.5, -2, 0.5, 0)
			Frame_upvr.Size = UDim2.fromScale(1.2, 1.2)
		else
			Frame_upvr.BackgroundTransparency = 0.75
			Frame_upvr.Position = UDim2.new(0.5, 2, 0.5, 0)
			Frame_upvr.Size = UDim2.fromScale(1, 1)
		end
	end
	arg1.janitor:add(GuiService_upvr:GetPropertyChangedSignal("SelectedObject"):Connect(selectionChanged))
	selectionChanged()
	local ImageLabel_upvr = Instance.new("ImageLabel")
	ImageLabel_upvr.LayoutOrder = 2
	ImageLabel_upvr.ZIndex = 15
	ImageLabel_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
	ImageLabel_upvr.Size = UDim2.new(0.5, 0, 0.5, 0)
	ImageLabel_upvr.BackgroundTransparency = 1
	ImageLabel_upvr.Position = UDim2.new(0.5, 0, 0.5, 0)
	ImageLabel_upvr.Image = "rbxasset://textures/ui/Controls/XboxController/DPadUp@2x.png"
	ImageLabel_upvr.Parent = Frame_upvr
	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(1, 0)
	UICorner.Parent = Frame_upvr
	local function setIndicatorVisible_upvr(arg1_2) -- Line 58, Named "setIndicatorVisible"
		--[[ Upvalues[3]:
			[1]: Frame_upvr_2 (readonly)
			[2]: GamepadService_upvr (readonly)
			[3]: arg1 (readonly)
		]]
		if arg1_2 == nil then
		end
		if GamepadService_upvr.GamepadCursorEnabled then
			local var10 = false
		end
		if var10 then
			arg1:modifyTheme({"PaddingRight", "Size", UDim2.new(0, 0, 1, 0)}, "IndicatorPadding")
		elseif Frame_upvr_2.Visible then
			arg1:removeModification("IndicatorPadding")
		end
		arg1:modifyTheme({"Indicator", "Visible", var10})
		arg1.updateSize:Fire()
	end
	arg1.janitor:add(GamepadService_upvr:GetPropertyChangedSignal("GamepadCursorEnabled"):Connect(setIndicatorVisible_upvr))
	local UserInputService_upvr = game:GetService("UserInputService")
	arg1.indicatorSet:Connect(function(arg1_3) -- Line 74
		--[[ Upvalues[3]:
			[1]: ImageLabel_upvr (readonly)
			[2]: UserInputService_upvr (readonly)
			[3]: setIndicatorVisible_upvr (readonly)
		]]
		local var15 = false
		if arg1_3 then
			ImageLabel_upvr.Image = UserInputService_upvr:GetImageForKeyCode(arg1_3)
			var15 = true
		end
		setIndicatorVisible_upvr(var15)
	end)
	widget_upvr:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() -- Line 83, Named "updateSize"
		--[[ Upvalues[2]:
			[1]: widget_upvr (readonly)
			[2]: Frame_upvr_2 (readonly)
		]]
		local var16 = widget_upvr.AbsoluteSize.Y * 0.96
		Frame_upvr_2.Size = UDim2.new(0, var16, 0, var16)
	end)
	local var17 = widget_upvr.AbsoluteSize.Y * 0.96
	Frame_upvr_2.Size = UDim2.new(0, var17, 0, var17)
	return Frame_upvr_2
end

Script name: Menu
  - Script: 


return function(arg1) -- Line 1
	local ScrollingFrame_upvr = Instance.new("ScrollingFrame")
	ScrollingFrame_upvr.Name = "Menu"
	ScrollingFrame_upvr.BackgroundTransparency = 1
	ScrollingFrame_upvr.Visible = true
	ScrollingFrame_upvr.ZIndex = 1
	ScrollingFrame_upvr.Size = UDim2.fromScale(1, 1)
	ScrollingFrame_upvr.ClipsDescendants = true
	ScrollingFrame_upvr.TopImage = ""
	ScrollingFrame_upvr.BottomImage = ""
	ScrollingFrame_upvr.HorizontalScrollBarInset = Enum.ScrollBarInset.Always
	ScrollingFrame_upvr.CanvasSize = UDim2.new(0, 0, 1, -1)
	ScrollingFrame_upvr.ScrollingEnabled = true
	ScrollingFrame_upvr.ScrollingDirection = Enum.ScrollingDirection.X
	ScrollingFrame_upvr.ZIndex = 20
	ScrollingFrame_upvr.ScrollBarThickness = 3
	ScrollingFrame_upvr.ScrollBarImageColor3 = Color3.fromRGB(255, 255, 255)
	ScrollingFrame_upvr.ScrollBarImageTransparency = 0.8
	ScrollingFrame_upvr.BorderSizePixel = 0
	ScrollingFrame_upvr.Selectable = false
	local iconModule_upvr = require(arg1.iconModule)
	local clone_upvr = iconModule_upvr.container.TopbarStandard:FindFirstChild("UIListLayout", true):Clone()
	clone_upvr.Name = "MenuUIListLayout"
	clone_upvr.VerticalAlignment = Enum.VerticalAlignment.Center
	clone_upvr.Parent = ScrollingFrame_upvr
	local Frame = Instance.new("Frame")
	Frame.Name = "MenuGap"
	Frame.BackgroundTransparency = 1
	Frame.Visible = false
	Frame.AnchorPoint = Vector2.new(0, 0.5)
	Frame.ZIndex = 5
	Frame.Parent = ScrollingFrame_upvr
	local var6_upvw = false
	local Themes_upvr = require(script.Parent.Parent.Features.Themes)
	arg1.menuChildAdded:Connect(function() -- Line 39, Named "totalChildrenChanged"
		--[[ Upvalues[5]:
			[1]: arg1 (readonly)
			[2]: var6_upvw (read and write)
			[3]: ScrollingFrame_upvr (readonly)
			[4]: Themes_upvr (readonly)
			[5]: clone_upvr (readonly)
		]]
		local menuJanitor_upvr = arg1.menuJanitor
		if var6_upvw then
			if #arg1.menuIcons <= 0 then
				menuJanitor_upvr:clean()
				var6_upvw = false
			end
		else
			var6_upvw = true
			menuJanitor_upvr:add(arg1.toggled:Connect(function() -- Line 53
				--[[ Upvalues[1]:
					[1]: arg1 (copied, readonly)
				]]
				if 0 < #arg1.menuIcons then
					arg1.updateSize:Fire()
				end
			end))
			local _, any_modifyTheme_result2_upvr = arg1:modifyTheme({{"Menu", "Active", true}})
			task.defer(function() -- Line 63
				--[[ Upvalues[3]:
					[1]: menuJanitor_upvr (readonly)
					[2]: arg1 (copied, readonly)
					[3]: any_modifyTheme_result2_upvr (readonly)
				]]
				menuJanitor_upvr:add(function() -- Line 64
					--[[ Upvalues[2]:
						[1]: arg1 (copied, readonly)
						[2]: any_modifyTheme_result2_upvr (copied, readonly)
					]]
					arg1:removeModification(any_modifyTheme_result2_upvr)
				end)
			end)
			local X_upvw = ScrollingFrame_upvr.AbsoluteCanvasSize.X
			local function rightAlignCanvas() -- Line 73
				--[[ Upvalues[3]:
					[1]: arg1 (copied, readonly)
					[2]: ScrollingFrame_upvr (copied, readonly)
					[3]: X_upvw (read and write)
				]]
				if arg1.alignment == "Right" then
					local X = ScrollingFrame_upvr.AbsoluteCanvasSize.X
					X_upvw = X
					ScrollingFrame_upvr.CanvasPosition = Vector2.new((ScrollingFrame_upvr.CanvasPosition.X) - (X_upvw - X), 0)
				end
			end
			menuJanitor_upvr:add(arg1.selected:Connect(rightAlignCanvas))
			menuJanitor_upvr:add(ScrollingFrame_upvr:GetPropertyChangedSignal("AbsoluteCanvasSize"):Connect(rightAlignCanvas))
			local any_getStateGroup_result1 = arg1:getStateGroup()
			if Themes_upvr.getThemeValue(any_getStateGroup_result1, "IconImage", "Image", "Deselected") == Themes_upvr.getThemeValue(any_getStateGroup_result1, "IconImage", "Image", "Selected") then
				arg1:removeModificationWith("IconLabel", "Text", "Viewing")
				arg1:removeModificationWith("IconLabel", "Image", "Viewing")
				arg1:modifyTheme({{"IconLabel", "FontFace", Font.new("rbxasset://fonts/families/FredokaOne.json", Enum.FontWeight.Light, Enum.FontStyle.Normal), "Selected"}, {"IconLabel", "Text", 'X', "Selected"}, {"IconLabel", "TextSize", 20, "Selected"}, {"IconLabel", "TextStrokeTransparency", 0.8, "Selected"}, {"IconImage", "Image", "", "Selected"}})
			end
			local any_getInstance_result1_upvr_2 = arg1:getInstance("IconSpot")
			local any_getInstance_result1_upvr = arg1:getInstance("MenuGap")
			menuJanitor_upvr:add(arg1.alignmentChanged:Connect(function() -- Line 105, Named "updateAlignent"
				--[[ Upvalues[3]:
					[1]: arg1 (copied, readonly)
					[2]: any_getInstance_result1_upvr_2 (readonly)
					[3]: any_getInstance_result1_upvr (readonly)
				]]
				if arg1.alignment == "Right" then
					any_getInstance_result1_upvr_2.LayoutOrder = 99999
					any_getInstance_result1_upvr.LayoutOrder = 99998
				else
					any_getInstance_result1_upvr_2.LayoutOrder = -99999
					any_getInstance_result1_upvr.LayoutOrder = -99998
				end
			end))
			if arg1.alignment == "Right" then
				any_getInstance_result1_upvr_2.LayoutOrder = 99999
				any_getInstance_result1_upvr.LayoutOrder = 99998
			else
				any_getInstance_result1_upvr_2.LayoutOrder = -99999
				any_getInstance_result1_upvr.LayoutOrder = -99998
			end
			ScrollingFrame_upvr:GetAttributeChangedSignal("MenuCanvasWidth"):Connect(function() -- Line 120
				--[[ Upvalues[1]:
					[1]: ScrollingFrame_upvr (copied, readonly)
				]]
				local Y = ScrollingFrame_upvr.CanvasSize.Y
				ScrollingFrame_upvr.CanvasSize = UDim2.new(0, ScrollingFrame_upvr:GetAttribute("MenuCanvasWidth"), Y.Scale, Y.Offset)
			end)
			menuJanitor_upvr:add(arg1.updateMenu:Connect(function() -- Line 125
				--[[ Upvalues[2]:
					[1]: ScrollingFrame_upvr (copied, readonly)
					[2]: clone_upvr (copied, readonly)
				]]
				local MaxIcons = ScrollingFrame_upvr:GetAttribute("MaxIcons")
				local var37
				if not MaxIcons then
				else
					local tbl = {}
					var37 = pairs(ScrollingFrame_upvr:GetChildren())
					local pairs_result1_2, pairs_result2, pairs_result3 = pairs(ScrollingFrame_upvr:GetChildren())
					for _, v_3 in pairs_result1_2, pairs_result2, pairs_result3 do
						if v_3:GetAttribute("WidgetUID") and v_3.Visible then
							table.insert(tbl, {v_3, v_3.AbsolutePosition.X})
						end
					end
					pairs_result1_2 = table.sort
					pairs_result1_2(tbl, function(arg1_2, arg2) -- Line 137
						local var44
						if arg1_2[2] >= arg2[2] then
							var44 = false
						else
							var44 = true
						end
						return var44
					end)
					pairs_result1_2 = 0
					for i_4 = 1, MaxIcons do
						if not tbl[i_4] then break end
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						pairs_result1_2 += tbl[i_4][1].AbsoluteSize.X + clone_upvr.Padding.Offset
					end
					ScrollingFrame_upvr:SetAttribute("MenuWidth", pairs_result1_2)
				end
			end))
			local function startMenuUpdate() -- Line 152
				--[[ Upvalues[1]:
					[1]: arg1 (copied, readonly)
				]]
				task.delay(0.1, function() -- Line 153
					--[[ Upvalues[1]:
						[1]: arg1 (copied, readonly)
					]]
					arg1.startMenuUpdate:Fire()
				end)
			end
			menuJanitor_upvr:add(ScrollingFrame_upvr.ChildAdded:Connect(startMenuUpdate))
			menuJanitor_upvr:add(ScrollingFrame_upvr.ChildRemoved:Connect(startMenuUpdate))
			menuJanitor_upvr:add(ScrollingFrame_upvr:GetAttributeChangedSignal("MaxIcons"):Connect(startMenuUpdate))
			menuJanitor_upvr:add(ScrollingFrame_upvr:GetAttributeChangedSignal("MaxWidth"):Connect(startMenuUpdate))
			task.delay(0.1, function() -- Line 153
				--[[ Upvalues[1]:
					[1]: arg1 (copied, readonly)
				]]
				arg1.startMenuUpdate:Fire()
			end)
		end
	end)
	arg1.menuSet:Connect(function(arg1_3) -- Line 167
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: iconModule_upvr (readonly)
		]]
		for _, v in pairs(arg1.menuIcons) do
			iconModule_upvr.getIconByUID(v):destroy()
		end
		if type(arg1_3) == "table" then
			for _, v_2 in pairs(arg1_3) do
				v_2:joinMenu(arg1)
			end
		end
	end)
	return ScrollingFrame_upvr
end

Script name: Selection
  - Script: 


return function(arg1) -- Line 1
	local Frame = Instance.new("Frame")
	Frame.Name = "SelectionContainer"
	Frame.Visible = false
	local Frame_upvr = Instance.new("Frame")
	Frame_upvr.Name = "Selection"
	Frame_upvr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_upvr.BackgroundTransparency = 1
	Frame_upvr.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr.BorderSizePixel = 0
	Frame_upvr.Parent = Frame
	local UIStroke = Instance.new("UIStroke")
	UIStroke.Name = "UIStroke"
	UIStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	UIStroke.Color = Color3.fromRGB(255, 255, 255)
	UIStroke.Thickness = 3
	UIStroke.Parent = Frame_upvr
	local UIGradient_upvr = Instance.new("UIGradient")
	UIGradient_upvr.Name = "SelectionGradient"
	UIGradient_upvr.Parent = UIStroke
	local UICorner = Instance.new("UICorner")
	UICorner:SetAttribute("Collective", "IconCorners")
	UICorner.Name = "UICorner"
	UICorner.CornerRadius = UDim.new(1, 0)
	UICorner.Parent = Frame_upvr
	local var7_upvw = 1
	Frame_upvr:GetAttributeChangedSignal("RotationSpeed"):Connect(function() -- Line 37
		--[[ Upvalues[2]:
			[1]: var7_upvw (read and write)
			[2]: Frame_upvr (readonly)
		]]
		var7_upvw = Frame_upvr:GetAttribute("RotationSpeed")
	end)
	local GuiService_upvr = game:GetService("GuiService")
	game:GetService("RunService").Heartbeat:Connect(function() -- Line 40
		--[[ Upvalues[3]:
			[1]: GuiService_upvr (readonly)
			[2]: UIGradient_upvr (readonly)
			[3]: var7_upvw (read and write)
		]]
		if not GuiService_upvr.SelectedObject then
		else
			UIGradient_upvr.Rotation = os.clock() * var7_upvw * 100 % 360
		end
	end)
	return Frame
end

Script name: Widget
  - Script: 


return function(arg1, arg2) -- Line 6
	local Frame_upvr_7 = Instance.new("Frame")
	Frame_upvr_7:SetAttribute("WidgetUID", arg1.UID)
	Frame_upvr_7.Name = "Widget"
	Frame_upvr_7.BackgroundTransparency = 1
	Frame_upvr_7.Visible = true
	Frame_upvr_7.ZIndex = 20
	Frame_upvr_7.Active = false
	Frame_upvr_7.ClipsDescendants = true
	local Frame_upvr = Instance.new("Frame")
	Frame_upvr.Name = "IconButton"
	Frame_upvr.Visible = true
	Frame_upvr.ZIndex = 2
	Frame_upvr.BorderSizePixel = 0
	Frame_upvr.Parent = Frame_upvr_7
	Frame_upvr.ClipsDescendants = true
	Frame_upvr.Active = false
	arg1.deselected:Connect(function() -- Line 25
		--[[ Upvalues[1]:
			[1]: Frame_upvr (readonly)
		]]
		Frame_upvr.ClipsDescendants = true
	end)
	arg1.selected:Connect(function() -- Line 28
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: Frame_upvr (readonly)
		]]
		task.defer(function() -- Line 29
			--[[ Upvalues[2]:
				[1]: arg1 (copied, readonly)
				[2]: Frame_upvr (copied, readonly)
			]]
			arg1.resizingComplete:Once(function() -- Line 30
				--[[ Upvalues[2]:
					[1]: arg1 (copied, readonly)
					[2]: Frame_upvr (copied, readonly)
				]]
				if arg1.isSelected then
					Frame_upvr.ClipsDescendants = false
				end
			end)
		end)
	end)
	local UICorner = Instance.new("UICorner")
	UICorner:SetAttribute("Collective", "IconCorners")
	UICorner.Parent = Frame_upvr
	local var9_upvr = require(script.Parent.Menu)(arg1)
	local MenuUIListLayout_upvr = var9_upvr.MenuUIListLayout
	local MenuGap_upvr = var9_upvr.MenuGap
	var9_upvr.Parent = Frame_upvr
	local Frame_upvr_5 = Instance.new("Frame")
	Frame_upvr_5.Name = "IconSpot"
	Frame_upvr_5.BackgroundColor3 = Color3.fromRGB(225, 225, 225)
	Frame_upvr_5.BackgroundTransparency = 0.9
	Frame_upvr_5.Visible = true
	Frame_upvr_5.AnchorPoint = Vector2.new(0, 0.5)
	Frame_upvr_5.ZIndex = 5
	Frame_upvr_5.Parent = var9_upvr
	UICorner:Clone().Parent = Frame_upvr_5
	local clone = Frame_upvr_5:Clone()
	clone.Name = "IconOverlay"
	clone.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	clone.ZIndex = Frame_upvr_5.ZIndex + 1
	clone.Size = UDim2.new(1, 0, 1, 0)
	clone.Position = UDim2.new(0, 0, 0, 0)
	clone.AnchorPoint = Vector2.new(0, 0)
	clone.Visible = false
	clone.Parent = Frame_upvr_5
	local TextButton_upvr = Instance.new("TextButton")
	TextButton_upvr:SetAttribute("CorrespondingIconUID", arg1.UID)
	TextButton_upvr.Name = "ClickRegion"
	TextButton_upvr.BackgroundTransparency = 1
	TextButton_upvr.Visible = true
	TextButton_upvr.Text = ""
	TextButton_upvr.ZIndex = 20
	TextButton_upvr.Selectable = true
	TextButton_upvr.SelectionGroup = true
	TextButton_upvr.Parent = Frame_upvr_5
	require(script.Parent.Parent.Features.Gamepad).registerButton(TextButton_upvr)
	UICorner:Clone().Parent = TextButton_upvr
	local Frame_upvr_6 = Instance.new("Frame")
	Frame_upvr_6.Name = "Contents"
	Frame_upvr_6.BackgroundTransparency = 1
	Frame_upvr_6.Size = UDim2.fromScale(1, 1)
	Frame_upvr_6.Parent = Frame_upvr_5
	local UIListLayout_upvr = Instance.new("UIListLayout")
	UIListLayout_upvr.Name = "ContentsList"
	UIListLayout_upvr.FillDirection = Enum.FillDirection.Horizontal
	UIListLayout_upvr.VerticalAlignment = Enum.VerticalAlignment.Center
	UIListLayout_upvr.SortOrder = Enum.SortOrder.LayoutOrder
	UIListLayout_upvr.VerticalFlex = Enum.UIFlexAlignment.SpaceEvenly
	UIListLayout_upvr.Padding = UDim.new(0, 3)
	UIListLayout_upvr.Parent = Frame_upvr_6
	local Frame_upvr_4 = Instance.new("Frame")
	Frame_upvr_4.Name = "PaddingLeft"
	Frame_upvr_4.LayoutOrder = 1
	Frame_upvr_4.ZIndex = 5
	Frame_upvr_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr_4.BackgroundTransparency = 1
	Frame_upvr_4.BorderSizePixel = 0
	Frame_upvr_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_upvr_4.Parent = Frame_upvr_6
	local Frame_upvr_2 = Instance.new("Frame")
	Frame_upvr_2.Name = "PaddingCenter"
	Frame_upvr_2.LayoutOrder = 3
	Frame_upvr_2.ZIndex = 5
	Frame_upvr_2.Size = UDim2.new(0, 0, 1, 0)
	Frame_upvr_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr_2.BackgroundTransparency = 1
	Frame_upvr_2.BorderSizePixel = 0
	Frame_upvr_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_upvr_2.Parent = Frame_upvr_6
	local Frame_upvr_3 = Instance.new("Frame")
	Frame_upvr_3.Name = "PaddingRight"
	Frame_upvr_3.LayoutOrder = 5
	Frame_upvr_3.ZIndex = 5
	Frame_upvr_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr_3.BackgroundTransparency = 1
	Frame_upvr_3.BorderSizePixel = 0
	Frame_upvr_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_upvr_3.Parent = Frame_upvr_6
	local Frame_upvr_8 = Instance.new("Frame")
	Frame_upvr_8.Name = "IconLabelContainer"
	Frame_upvr_8.LayoutOrder = 4
	Frame_upvr_8.ZIndex = 3
	Frame_upvr_8.AnchorPoint = Vector2.new(0, 0.5)
	Frame_upvr_8.Size = UDim2.new(0, 0, 0.5, 0)
	Frame_upvr_8.BackgroundTransparency = 1
	Frame_upvr_8.Position = UDim2.new(0.5, 0, 0.5, 0)
	Frame_upvr_8.Parent = Frame_upvr_6
	local TextLabel_upvr = Instance.new("TextLabel")
	local var22_upvr = workspace.CurrentCamera.ViewportSize.X + 200
	TextLabel_upvr.Name = "IconLabel"
	TextLabel_upvr.LayoutOrder = 4
	TextLabel_upvr.ZIndex = 15
	TextLabel_upvr.AnchorPoint = Vector2.new(0, 0)
	TextLabel_upvr.Size = UDim2.new(0, var22_upvr, 1, 0)
	TextLabel_upvr.ClipsDescendants = false
	TextLabel_upvr.BackgroundTransparency = 1
	TextLabel_upvr.Position = UDim2.fromScale(0, 0)
	TextLabel_upvr.RichText = true
	TextLabel_upvr.TextColor3 = Color3.fromRGB(255, 255, 255)
	TextLabel_upvr.TextXAlignment = Enum.TextXAlignment.Left
	TextLabel_upvr.Text = ""
	TextLabel_upvr.TextWrapped = true
	TextLabel_upvr.TextWrap = true
	TextLabel_upvr.TextScaled = false
	TextLabel_upvr.Active = false
	TextLabel_upvr.AutoLocalize = true
	TextLabel_upvr.Parent = Frame_upvr_8
	local ImageLabel_upvr = Instance.new("ImageLabel")
	ImageLabel_upvr.Name = "IconImage"
	ImageLabel_upvr.LayoutOrder = 2
	ImageLabel_upvr.ZIndex = 15
	ImageLabel_upvr.AnchorPoint = Vector2.new(0, 0.5)
	ImageLabel_upvr.Size = UDim2.new(0, 0, 0.5, 0)
	ImageLabel_upvr.BackgroundTransparency = 1
	ImageLabel_upvr.Position = UDim2.new(0, 11, 0.5, 0)
	ImageLabel_upvr.ScaleType = Enum.ScaleType.Stretch
	ImageLabel_upvr.Active = false
	ImageLabel_upvr.Parent = Frame_upvr_6
	local clone_2 = UICorner:Clone()
	clone_2:SetAttribute("Collective", nil)
	clone_2.CornerRadius = UDim.new(0, 0)
	clone_2.Name = "IconImageCorner"
	clone_2.Parent = ImageLabel_upvr
	local TweenService_upvr = game:GetService("TweenService")
	local var26_upvw = 0
	local any_createStagger_result1_upvr = require(script.Parent.Parent.Utility).createStagger(0.01, function(arg1_2) -- Line 184, Named "handleLabelAndImageChangesUnstaggered"
		--[[ Upvalues[20]:
			[1]: arg1 (readonly)
			[2]: TextLabel_upvr (readonly)
			[3]: ImageLabel_upvr (readonly)
			[4]: Frame_upvr_8 (readonly)
			[5]: Frame_upvr_4 (readonly)
			[6]: Frame_upvr_2 (readonly)
			[7]: Frame_upvr_3 (readonly)
			[8]: Frame_upvr (readonly)
			[9]: UIListLayout_upvr (readonly)
			[10]: Frame_upvr_6 (readonly)
			[11]: Frame_upvr_7 (readonly)
			[12]: var22_upvr (readonly)
			[13]: var9_upvr (readonly)
			[14]: Frame_upvr_5 (readonly)
			[15]: MenuUIListLayout_upvr (readonly)
			[16]: MenuGap_upvr (readonly)
			[17]: TweenService_upvr (readonly)
			[18]: TextButton_upvr (readonly)
			[19]: var26_upvw (read and write)
			[20]: arg2 (readonly)
		]]
		task.defer(function() -- Line 191
			--[[ Upvalues[20]:
				[1]: arg1 (copied, readonly)
				[2]: TextLabel_upvr (copied, readonly)
				[3]: ImageLabel_upvr (copied, readonly)
				[4]: Frame_upvr_8 (copied, readonly)
				[5]: Frame_upvr_4 (copied, readonly)
				[6]: Frame_upvr_2 (copied, readonly)
				[7]: Frame_upvr_3 (copied, readonly)
				[8]: Frame_upvr (copied, readonly)
				[9]: UIListLayout_upvr (copied, readonly)
				[10]: Frame_upvr_6 (copied, readonly)
				[11]: Frame_upvr_7 (copied, readonly)
				[12]: var22_upvr (copied, readonly)
				[13]: var9_upvr (copied, readonly)
				[14]: Frame_upvr_5 (copied, readonly)
				[15]: MenuUIListLayout_upvr (copied, readonly)
				[16]: MenuGap_upvr (copied, readonly)
				[17]: TweenService_upvr (copied, readonly)
				[18]: TextButton_upvr (copied, readonly)
				[19]: var26_upvw (copied, read and write)
				[20]: arg2 (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local indicator = arg1.indicator
			local var49 = indicator
			if var49 then
				var49 = indicator.Visible
			end
			local var50 = var49
			if not var50 then
				if TextLabel_upvr.Text == "" then
					var50 = false
				else
					var50 = true
				end
			end
			local var51 = false
			if ImageLabel_upvr.Image ~= "" then
				if ImageLabel_upvr.Image == nil then
					var51 = false
				else
					var51 = true
				end
			end
			if var51 and not var50 then
				Frame_upvr_8.Visible = false
				ImageLabel_upvr.Visible = true
				Frame_upvr_4.Visible = false
				Frame_upvr_2.Visible = false
				Frame_upvr_3.Visible = false
				local var52
				-- KONSTANTWARNING: GOTO [106] #81
			end
			if not var51 and var50 then
				Frame_upvr_8.Visible = true
				ImageLabel_upvr.Visible = false
				Frame_upvr_4.Visible = true
				Frame_upvr_2.Visible = false
				Frame_upvr_3.Visible = true
			elseif var51 and var50 then
				Frame_upvr_8.Visible = true
				ImageLabel_upvr.Visible = true
				Frame_upvr_4.Visible = true
				Frame_upvr_2.Visible = not var49
				Frame_upvr_3.Visible = not var49
			end
			Frame_upvr.Size = UDim2.fromScale(1, 1)
			local function _(arg1_3) -- Line 221, Named "getItemWidth"
				local TargetWidth_2 = arg1_3:GetAttribute("TargetWidth")
				if not TargetWidth_2 then
					TargetWidth_2 = arg1_3.AbsoluteSize.X
				end
				return TargetWidth_2
			end
			var52 = UIListLayout_upvr.Padding
			local Offset = var52.Offset
			var52 = Offset
			Frame_upvr_8.Size = UDim2.new(0, TextLabel_upvr.TextBounds.X, TextLabel_upvr.Size.Y.Scale, 0)
			for _, v in pairs(Frame_upvr_6:GetChildren()) do
				if v:IsA("GuiObject") and v.Visible == true then
					if not v:GetAttribute("TargetWidth") then
					end
					var52 += v.AbsoluteSize.X + Offset
				end
			end
			local MinimumWidth = Frame_upvr_7:GetAttribute("MinimumWidth")
			local MinimumHeight = Frame_upvr_7:GetAttribute("MinimumHeight")
			local BorderSize = Frame_upvr_7:GetAttribute("BorderSize")
			if 0 >= #arg1.menuIcons then
			else
			end
			if true then
				local isSelected = arg1.isSelected
				local var62
			end
			if isSelected then
				for i_2, v_2 in pairs(var9_upvr:GetChildren()) do
					if v_2 ~= Frame_upvr_5 and v_2:IsA("GuiObject") and v_2.Visible then
						local TargetWidth_3 = v_2:GetAttribute("TargetWidth")
						if not TargetWidth_3 then
							TargetWidth_3 = v_2.AbsoluteSize.X
						end
						var62 += TargetWidth_3 + MenuUIListLayout_upvr.Padding.Offset
					end
				end
				if not Frame_upvr_5.Visible then
					i_2 = Frame_upvr_5
					v_2 = i_2:GetAttribute("TargetWidth")
					if not v_2 then
						v_2 = i_2.AbsoluteSize.X
					end
					v_2 = MenuUIListLayout_upvr.Padding.Offset
					i_2 = v_2 * 2
				end
				var62 -= BorderSize * 0.5
			end
			if isSelected then
			end
			MenuGap_upvr.Visible = Frame_upvr_5.Visible
			local DesiredWidth = Frame_upvr_7:GetAttribute("DesiredWidth")
			if DesiredWidth and ((math.clamp(var52, MinimumWidth, var22_upvr)) - (v_2 + i_2 + BorderSize)) + (var62 - BorderSize * 0.75) < DesiredWidth then
				local var68 = DesiredWidth
			end
			arg1.updateMenu:Fire()
			local var69 = math.max(var68 - var62, MinimumWidth) - BorderSize * 2
			local MenuWidth = var9_upvr:GetAttribute("MenuWidth")
			local var71 = MenuWidth
			if var71 then
				var71 = MenuWidth + var69 + MenuUIListLayout_upvr.Padding.Offset + 10
			end
			if var71 then
				local MaxWidth = var9_upvr:GetAttribute("MaxWidth")
				if MaxWidth then
					var71 = math.max(MaxWidth, MinimumWidth)
				end
				var9_upvr:SetAttribute("MenuCanvasWidth", var68)
				if var71 < var68 then
					local var73 = var71
				end
			end
			local Quint = Enum.EasingStyle.Quint
			local Out = Enum.EasingDirection.Out
			local var76 = Frame_upvr_5
			local TargetWidth = var76:GetAttribute("TargetWidth")
			if not TargetWidth then
				TargetWidth = var76.AbsoluteSize.X
			end
			local var78 = Frame_upvr_7
			local TargetWidth_4 = var78:GetAttribute("TargetWidth")
			if not TargetWidth_4 then
				TargetWidth_4 = var78.AbsoluteSize.X
			end
			local TweenInfo_new_result1 = TweenInfo.new(math.max(var69, TargetWidth, Frame_upvr_5.AbsoluteSize.X) / 750, Quint, Out)
			local TweenInfo_new_result1_2 = TweenInfo.new(math.max(var73, TargetWidth_4, Frame_upvr_7.AbsoluteSize.X) / 750, Quint, Out)
			TweenService_upvr:Create(Frame_upvr_5, TweenInfo_new_result1, {
				Position = UDim2.new(0, BorderSize, 0.5, 0);
				Size = UDim2.new(0, var69, 1, -BorderSize * 2);
			}):Play()
			TweenService_upvr:Create(TextButton_upvr, TweenInfo_new_result1, {
				Size = UDim2.new(0, var69, 1, 0);
			}):Play()
			local var84 = var73
			local udim2 = UDim2.fromOffset(var84, MinimumHeight)
			if Frame_upvr_7.Size.Y.Offset == MinimumHeight then
				var84 = false
			else
				var84 = true
			end
			if var84 then
				Frame_upvr_7.Size = udim2
			end
			Frame_upvr_7:SetAttribute("TargetWidth", udim2.X.Offset)
			TweenService_upvr:Create(Frame_upvr_7, TweenInfo_new_result1_2, {
				Size = udim2;
			}):Play()
			var26_upvw += 1
			for i_3 = 1, TweenInfo_new_result1_2.Time * 100 do
				task.delay(i_3 / 100, function() -- Line 303
					--[[ Upvalues[2]:
						[1]: arg2 (copied, readonly)
						[2]: arg1 (copied, readonly)
					]]
					arg2.iconChanged:Fire(arg1)
				end)
			end
			task.delay(TweenInfo_new_result1_2.Time - 0.2, function() -- Line 307
				--[[ Upvalues[2]:
					[1]: var26_upvw (copied, read and write)
					[2]: arg1 (copied, readonly)
				]]
				var26_upvw -= 1
				task.defer(function() -- Line 309
					--[[ Upvalues[2]:
						[1]: var26_upvw (copied, read and write)
						[2]: arg1 (copied, readonly)
					]]
					if var26_upvw == 0 then
						arg1.resizingComplete:Fire()
					end
				end)
			end)
			arg1:updateParent()
		end)
	end)
	arg1:setBehaviour("IconLabel", "Text", any_createStagger_result1_upvr)
	local var92_upvw = true
	arg1:setBehaviour("IconLabel", "FontFace", function(arg1_4) -- Line 322
		--[[ Upvalues[3]:
			[1]: TextLabel_upvr (readonly)
			[2]: any_createStagger_result1_upvr (readonly)
			[3]: var92_upvw (read and write)
		]]
		if TextLabel_upvr.FontFace == arg1_4 then
		else
			task.spawn(function() -- Line 327
				--[[ Upvalues[2]:
					[1]: any_createStagger_result1_upvr (copied, readonly)
					[2]: var92_upvw (copied, read and write)
				]]
				any_createStagger_result1_upvr()
				if var92_upvw then
					var92_upvw = false
					for _ = 1, 10 do
						task.wait(1)
						any_createStagger_result1_upvr()
					end
				end
			end)
		end
	end)
	local function updateBorderSize() -- Line 350
		--[[ Upvalues[7]:
			[1]: Frame_upvr_7 (readonly)
			[2]: arg1 (readonly)
			[3]: Frame_upvr_5 (readonly)
			[4]: var9_upvr (readonly)
			[5]: MenuGap_upvr (readonly)
			[6]: MenuUIListLayout_upvr (readonly)
			[7]: any_createStagger_result1_upvr (readonly)
		]]
		task.defer(function() -- Line 351
			--[[ Upvalues[7]:
				[1]: Frame_upvr_7 (copied, readonly)
				[2]: arg1 (copied, readonly)
				[3]: Frame_upvr_5 (copied, readonly)
				[4]: var9_upvr (copied, readonly)
				[5]: MenuGap_upvr (copied, readonly)
				[6]: MenuUIListLayout_upvr (copied, readonly)
				[7]: any_createStagger_result1_upvr (copied, readonly)
			]]
			local BorderSize_3 = Frame_upvr_7:GetAttribute("BorderSize")
			local var97 = arg1
			if Frame_upvr_5.Visible == false then
				var97 = 0
			else
				local function INLINED() -- Internal function, doesn't exist in bytecode
					var97 = -BorderSize_3
					return var97
				end
				if var97.alignment ~= "Right" or not INLINED() then
					var97 = BorderSize_3
				end
			end
			var9_upvr.Position = UDim2.new(0, var97, 0, 0)
			MenuGap_upvr.Size = UDim2.fromOffset(BorderSize_3, 0)
			MenuUIListLayout_upvr.Padding = UDim.new(0, 0)
			any_createStagger_result1_upvr()
		end)
	end
	arg1:setBehaviour("Widget", "BorderSize", updateBorderSize)
	arg1:setBehaviour("IconSpot", "Visible", updateBorderSize)
	arg1.startMenuUpdate:Connect(any_createStagger_result1_upvr)
	arg1.updateSize:Connect(any_createStagger_result1_upvr)
	arg1:setBehaviour("ContentsList", "HorizontalAlignment", any_createStagger_result1_upvr)
	arg1:setBehaviour("Widget", "Visible", any_createStagger_result1_upvr)
	arg1:setBehaviour("Widget", "DesiredWidth", any_createStagger_result1_upvr)
	arg1:setBehaviour("Widget", "MinimumWidth", any_createStagger_result1_upvr)
	arg1:setBehaviour("Widget", "MinimumHeight", any_createStagger_result1_upvr)
	arg1:setBehaviour("Indicator", "Visible", any_createStagger_result1_upvr)
	arg1:setBehaviour("IconImageRatio", "AspectRatio", any_createStagger_result1_upvr)
	arg1:setBehaviour("IconImage", "Image", function(arg1_5) -- Line 372
		--[[ Upvalues[2]:
			[1]: ImageLabel_upvr (readonly)
			[2]: any_createStagger_result1_upvr (readonly)
		]]
		local var99
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var99 = "http://www.roblox.com/asset/?id="..arg1_5
			return var99
		end
		if not tonumber(arg1_5) or not INLINED_2() then
			var99 = arg1_5
			if not var99 then
				var99 = ""
			end
		end
		if ImageLabel_upvr.Image ~= var99 then
			any_createStagger_result1_upvr()
		end
		return var99
	end)
	arg1.alignmentChanged:Connect(function(arg1_6) -- Line 379
		--[[ Upvalues[7]:
			[1]: MenuUIListLayout_upvr (readonly)
			[2]: Frame_upvr_7 (readonly)
			[3]: arg1 (readonly)
			[4]: Frame_upvr_5 (readonly)
			[5]: var9_upvr (readonly)
			[6]: MenuGap_upvr (readonly)
			[7]: any_createStagger_result1_upvr (readonly)
		]]
		if arg1_6 == "Center" then
		end
		MenuUIListLayout_upvr.HorizontalAlignment = Enum.HorizontalAlignment.Left
		task.defer(function() -- Line 351
			--[[ Upvalues[7]:
				[1]: Frame_upvr_7 (copied, readonly)
				[2]: arg1 (copied, readonly)
				[3]: Frame_upvr_5 (copied, readonly)
				[4]: var9_upvr (copied, readonly)
				[5]: MenuGap_upvr (copied, readonly)
				[6]: MenuUIListLayout_upvr (copied, readonly)
				[7]: any_createStagger_result1_upvr (copied, readonly)
			]]
			local BorderSize_2 = Frame_upvr_7:GetAttribute("BorderSize")
			local var103 = arg1
			if Frame_upvr_5.Visible == false then
				var103 = 0
			else
				local function INLINED_3() -- Internal function, doesn't exist in bytecode
					var103 = -BorderSize_2
					return var103
				end
				if var103.alignment ~= "Right" or not INLINED_3() then
					var103 = BorderSize_2
				end
			end
			var9_upvr.Position = UDim2.new(0, var103, 0, 0)
			MenuGap_upvr.Size = UDim2.fromOffset(BorderSize_2, 0)
			MenuUIListLayout_upvr.Padding = UDim.new(0, 0)
			any_createStagger_result1_upvr()
		end)
	end)
	local NumberValue_upvr = Instance.new("NumberValue")
	NumberValue_upvr.Name = "IconImageScale"
	NumberValue_upvr.Parent = ImageLabel_upvr
	NumberValue_upvr:GetPropertyChangedSignal("Value"):Connect(function() -- Line 390
		--[[ Upvalues[2]:
			[1]: ImageLabel_upvr (readonly)
			[2]: NumberValue_upvr (readonly)
		]]
		ImageLabel_upvr.Size = UDim2.new(NumberValue_upvr.Value, 0, NumberValue_upvr.Value, 0)
	end)
	local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")
	UIAspectRatioConstraint.Name = "IconImageRatio"
	UIAspectRatioConstraint.AspectType = Enum.AspectType.FitWithinMaxSize
	UIAspectRatioConstraint.DominantAxis = Enum.DominantAxis.Height
	UIAspectRatioConstraint.Parent = ImageLabel_upvr
	local UIGradient = Instance.new("UIGradient")
	UIGradient.Name = "IconGradient"
	UIGradient.Enabled = true
	UIGradient.Parent = Frame_upvr
	local UIGradient_2 = Instance.new("UIGradient")
	UIGradient_2.Name = "IconSpotGradient"
	UIGradient_2.Enabled = true
	UIGradient_2.Parent = Frame_upvr_5
	return Frame_upvr_7
end

Script name: Notice
  - Script: 


return function(arg1, arg2) -- Line 1
	local Frame_upvr = Instance.new("Frame")
	Frame_upvr.Name = "Notice"
	Frame_upvr.ZIndex = 25
	Frame_upvr.AutomaticSize = Enum.AutomaticSize.X
	Frame_upvr.BorderColor3 = Color3.fromRGB(0, 0, 0)
	Frame_upvr.BorderSizePixel = 0
	Frame_upvr.BackgroundTransparency = 0.1
	Frame_upvr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Frame_upvr.Visible = false
	Frame_upvr.Parent = arg1.widget
	local UICorner = Instance.new("UICorner")
	UICorner.CornerRadius = UDim.new(1, 0)
	UICorner.Parent = Frame_upvr
	Instance.new("UIStroke").Parent = Frame_upvr
	local TextLabel_upvr = Instance.new("TextLabel")
	TextLabel_upvr.Name = "NoticeLabel"
	TextLabel_upvr.ZIndex = 26
	TextLabel_upvr.AnchorPoint = Vector2.new(0.5, 0.5)
	TextLabel_upvr.AutomaticSize = Enum.AutomaticSize.X
	TextLabel_upvr.Size = UDim2.new(1, 0, 1, 0)
	TextLabel_upvr.BackgroundTransparency = 1
	TextLabel_upvr.Position = UDim2.new(0.5, 0, 0.515, 0)
	TextLabel_upvr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel_upvr.FontSize = Enum.FontSize.Size14
	TextLabel_upvr.TextColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel_upvr.Text = '1'
	TextLabel_upvr.TextWrapped = true
	TextLabel_upvr.TextWrap = true
	TextLabel_upvr.Font = Enum.Font.Arial
	TextLabel_upvr.Parent = Frame_upvr
	local Parent = script.Parent.Parent
	local Packages = Parent.Packages
	local Utility_upvr = require(Parent.Utility)
	arg1.noticeChanged:Connect(function(arg1_2) -- Line 43
		--[[ Upvalues[5]:
			[1]: TextLabel_upvr (readonly)
			[2]: arg2 (readonly)
			[3]: arg1 (readonly)
			[4]: Utility_upvr (readonly)
			[5]: Frame_upvr (readonly)
		]]
		if not arg1_2 then
		else
			if 99 >= arg1_2 then
				local _ = false
				-- KONSTANTWARNING: Skipped task `defvar` above
			else
			end
			if true then
			else
			end
			TextLabel_upvr.Text = arg1_2
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if true then
				TextLabel_upvr.TextSize = 11
			end
			if arg1_2 < 1 then
			end
			local any_getIconByUID_result1 = arg2.getIconByUID(arg1.parentIconUID)
			local var11 = true
			if 0 >= #arg1.dropdownIcons then
				if 0 >= #arg1.menuIcons then
					var11 = false
				else
					var11 = true
				end
			end
			local var12
			if arg1.isSelected and var11 then
				var12 = false
			elseif any_getIconByUID_result1 and not any_getIconByUID_result1.isSelected then
				var12 = false
			end
			Utility_upvr.setVisible(Frame_upvr, var12, "NoticeHandler")
		end
	end)
	local Janitor_upvr = require(Packages.Janitor)
	local GoodSignal_upvr = require(Packages.GoodSignal)
	arg1.noticeStarted:Connect(function(arg1_3, arg2_2) -- Line 71
		--[[ Upvalues[5]:
			[1]: arg1 (readonly)
			[2]: arg2 (readonly)
			[3]: Janitor_upvr (readonly)
			[4]: GoodSignal_upvr (readonly)
			[5]: Utility_upvr (readonly)
		]]
		if not arg1_3 then
			local deselected = arg1.deselected
		end
		local any_getIconByUID_result1_2 = arg2.getIconByUID(arg1.parentIconUID)
		if any_getIconByUID_result1_2 then
			any_getIconByUID_result1_2:notify(deselected)
		end
		local any_add_result1_upvr = arg1.janitor:add(Janitor_upvr.new())
		local any_add_result1_upvr_2 = any_add_result1_upvr:add(GoodSignal_upvr.new())
		any_add_result1_upvr:add(arg1.endNotices:Connect(function() -- Line 83
			--[[ Upvalues[1]:
				[1]: any_add_result1_upvr_2 (readonly)
			]]
			any_add_result1_upvr_2:Fire()
		end))
		any_add_result1_upvr:add(deselected:Connect(function() -- Line 86
			--[[ Upvalues[1]:
				[1]: any_add_result1_upvr_2 (readonly)
			]]
			any_add_result1_upvr_2:Fire()
		end))
		local var22 = arg2_2
		if not var22 then
			var22 = Utility_upvr.generateUID()
		end
		local var23_upvw = var22
		arg1.notices[var23_upvw] = {
			completeSignal = any_add_result1_upvr_2;
			clearNoticeEvent = deselected;
		}
		local function _() -- Line 95, Named "updateNotice"
			--[[ Upvalues[1]:
				[1]: arg1 (copied, readonly)
			]]
			arg1.noticeChanged:Fire(arg1.totalNotices)
		end
		arg1.notified:Fire(var23_upvw)
		local var25 = arg1
		var25.totalNotices += 1
		arg1.noticeChanged:Fire(arg1.totalNotices)
		any_add_result1_upvr_2:Once(function() -- Line 101
			--[[ Upvalues[3]:
				[1]: any_add_result1_upvr (readonly)
				[2]: arg1 (copied, readonly)
				[3]: var23_upvw (read and write)
			]]
			any_add_result1_upvr:destroy()
			local var27 = arg1
			var27.totalNotices -= 1
			arg1.notices[var23_upvw] = nil
			arg1.noticeChanged:Fire(arg1.totalNotices)
		end)
	end)
	Frame_upvr:SetAttribute("ClipToJoinedParent", true)
	arg1:clipOutside(Frame_upvr)
	return Frame_upvr
end

Script name: Gamepad
  - Script: 


local GamepadService_upvr = game:GetService("GamepadService")
local UserInputService_upvr = game:GetService("UserInputService")
local GuiService_upvr = game:GetService("GuiService")
local module_upvr = {}
local var5_upvw
function module_upvr.start(arg1) -- Line 24
	--[[ Upvalues[5]:
		[1]: var5_upvw (read and write)
		[2]: GuiService_upvr (readonly)
		[3]: UserInputService_upvr (readonly)
		[4]: module_upvr (readonly)
		[5]: GamepadService_upvr (readonly)
	]]
	var5_upvw = arg1
	var5_upvw.highlightKey = Enum.KeyCode.DPadUp
	var5_upvw.highlightIcon = false
	task.delay(1, function() -- Line 33
		--[[ Upvalues[5]:
			[1]: var5_upvw (copied, read and write)
			[2]: GuiService_upvr (copied, readonly)
			[3]: UserInputService_upvr (copied, readonly)
			[4]: module_upvr (copied, readonly)
			[5]: GamepadService_upvr (copied, readonly)
		]]
		local iconsDictionary_upvr = var5_upvw.iconsDictionary
		local function _() -- Line 36, Named "getIconFromSelectedObject"
			--[[ Upvalues[2]:
				[1]: GuiService_upvr (copied, readonly)
				[2]: iconsDictionary_upvr (readonly)
			]]
			local var9 = GuiService_upvr.SelectedObject
			if var9 then
				var9 = GuiService_upvr.SelectedObject:GetAttribute("CorrespondingIconUID")
			end
			local var10 = var9
			if var10 then
				var10 = iconsDictionary_upvr[var9]
			end
			return var10
		end
		local var11_upvw = false
		local var12_upvw = false
		local Selection_upvr = require(script.Parent.Parent.Elements.Selection)
		local var14_upvw
		local function updateSelectedObject_upvr() -- Line 50, Named "updateSelectedObject"
			--[[ Upvalues[9]:
				[1]: GuiService_upvr (copied, readonly)
				[2]: iconsDictionary_upvr (readonly)
				[3]: UserInputService_upvr (copied, readonly)
				[4]: Selection_upvr (readonly)
				[5]: var5_upvw (copied, read and write)
				[6]: var14_upvw (read and write)
				[7]: var12_upvw (read and write)
				[8]: var11_upvw (read and write)
				[9]: module_upvr (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			local var16 = GuiService_upvr.SelectedObject
			if var16 then
				var16 = GuiService_upvr.SelectedObject:GetAttribute("CorrespondingIconUID")
			end
			local var17 = var16
			if var17 then
				var17 = iconsDictionary_upvr[var16]
			end
			local var18 = var17
			local GamepadEnabled = UserInputService_upvr.GamepadEnabled
			if var18 then
				if GamepadEnabled then
					if not var18.selection then
						local any_add_result1 = var18.janitor:add(Selection_upvr(var5_upvw))
						any_add_result1:SetAttribute("IgnoreVisibilityUpdater", true)
						any_add_result1.Parent = var18.widget
						var18.selection = any_add_result1
						var18:refreshAppearance(any_add_result1)
					end
					var18:getInstance("ClickRegion").SelectionImageObject = any_add_result1.Selection
				end
				if var14_upvw and var14_upvw ~= var18 then
					var14_upvw:setIndicator()
					local var21
				end
				if GamepadEnabled and not var12_upvw and not var18.parentIconUID then
					var21 = Enum.KeyCode.ButtonB
				else
					var21 = nil
				end
				var14_upvw = var18
				var5_upvw.lastHighlightedIcon = var18
				var18:setIndicator(var21)
				do
					return
				end
				local var22
			end
			if GamepadEnabled and not var11_upvw then
				var22 = var5_upvw.highlightKey
			else
				var22 = nil
			end
			if not var14_upvw then
				var14_upvw = module_upvr.getIconToHighlight()
			end
			if var22 == var5_upvw.highlightKey then
				var11_upvw = true
			end
			if var14_upvw then
				var14_upvw:setIndicator(var22)
			end
		end
		GuiService_upvr:GetPropertyChangedSignal("SelectedObject"):Connect(updateSelectedObject_upvr)
		UserInputService_upvr:GetPropertyChangedSignal("GamepadEnabled"):Connect(function() -- Line 93, Named "checkGamepadEnabled"
			--[[ Upvalues[4]:
				[1]: UserInputService_upvr (copied, readonly)
				[2]: var11_upvw (read and write)
				[3]: var12_upvw (read and write)
				[4]: updateSelectedObject_upvr (readonly)
			]]
			if not UserInputService_upvr.GamepadEnabled then
				var11_upvw = false
				var12_upvw = false
			end
			updateSelectedObject_upvr()
		end)
		if not UserInputService_upvr.GamepadEnabled then
			var11_upvw = false
			var12_upvw = false
		end
		updateSelectedObject_upvr()
		UserInputService_upvr.InputBegan:Connect(function(arg1_2, arg2) -- Line 107
			--[[ Upvalues[5]:
				[1]: GuiService_upvr (copied, readonly)
				[2]: iconsDictionary_upvr (readonly)
				[3]: var5_upvw (copied, read and write)
				[4]: module_upvr (copied, readonly)
				[5]: GamepadService_upvr (copied, readonly)
			]]
			local var24
			if arg1_2.UserInputType == Enum.UserInputType.MouseButton1 then
				var24 = GuiService_upvr
				var24 = var24.SelectedObject
				if var24 then
					var24 = var24.SelectedObject:GetAttribute("CorrespondingIconUID")
				end
				local var26 = var24
				if var26 then
					var26 = iconsDictionary_upvr[var24]
				end
				if var26 then
					GuiService_upvr.SelectedObject = nil
				end
			else
				if arg1_2.KeyCode ~= var5_upvw.highlightKey then return end
				local any_getIconToHighlight_result1 = module_upvr.getIconToHighlight()
				if any_getIconToHighlight_result1 then
					if GamepadService_upvr.GamepadCursorEnabled then
						task.wait(0.2)
						GamepadService_upvr:DisableGamepadCursor()
					end
					GuiService_upvr.SelectedObject = any_getIconToHighlight_result1:getInstance("ClickRegion")
				end
			end
		end)
	end)
end
function module_upvr.getIconToHighlight() -- Line 134
	--[[ Upvalues[1]:
		[1]: var5_upvw (read and write)
	]]
	local var34
	if not var34 then
		var34 = var5_upvw.lastHighlightedIcon
	end
	if not var34 then
		local var35
		for _, v in pairs(var5_upvw.iconsDictionary) do
			if not v.parentIconUID and (not var35 or v.widget.AbsolutePosition.X < var35) then
				var34 = v
			end
		end
	end
	return var34
end
function module_upvr.registerButton(arg1) -- Line 156
	--[[ Upvalues[3]:
		[1]: UserInputService_upvr (readonly)
		[2]: GamepadService_upvr (readonly)
		[3]: GuiService_upvr (readonly)
	]]
	local var39_upvw = false
	arg1.InputBegan:Connect(function(arg1_3) -- Line 162
		--[[ Upvalues[1]:
			[1]: var39_upvw (read and write)
		]]
		var39_upvw = true
		task.wait()
		task.wait()
		var39_upvw = false
	end)
	local any_Connect_result1_upvr = UserInputService_upvr.InputBegan:Connect(function(arg1_4) -- Line 171
		--[[ Upvalues[4]:
			[1]: var39_upvw (read and write)
			[2]: GamepadService_upvr (copied, readonly)
			[3]: GuiService_upvr (copied, readonly)
			[4]: arg1 (readonly)
		]]
		task.wait()
		local var45
		if var45 == Enum.KeyCode.ButtonA then
			var45 = var39_upvw
			if var45 then
				var45 = task.wait
				var45(0.2)
				var45 = GamepadService_upvr:DisableGamepadCursor
				var45()
				var45 = GuiService_upvr
				var45.SelectedObject = arg1
				return
			end
		end
		if GuiService_upvr.SelectedObject ~= arg1 then
			var45 = false
		else
			var45 = true
		end
		local Name = arg1_4.KeyCode.Name
		if table.find({"ButtonB", "ButtonSelect"}, Name) and var45 and (Name ~= "ButtonSelect" or GamepadService_upvr.GamepadCursorEnabled) then
			GuiService_upvr.SelectedObject = nil
		end
	end)
	arg1.Destroying:Once(function() -- Line 192
		--[[ Upvalues[1]:
			[1]: any_Connect_result1_upvr (readonly)
		]]
		any_Connect_result1_upvr:Disconnect()
	end)
end
return module_upvr

Script name: Overflow
  - Script: 


local module_3_upvr = {}
local tbl_upvr_2 = {}
local tbl_upvr_3 = {}
local var4_upvw
local tbl_upvr_4 = {}
local Utility_upvr = require(script.Parent.Parent.Utility)
local var7_upvw
local CurrentCamera_upvr = workspace.CurrentCamera
function module_3_upvr.start(arg1) -- Line 23
	--[[ Upvalues[6]:
		[1]: var7_upvw (read and write)
		[2]: var4_upvw (read and write)
		[3]: tbl_upvr_2 (readonly)
		[4]: Utility_upvr (readonly)
		[5]: module_3_upvr (readonly)
		[6]: CurrentCamera_upvr (readonly)
	]]
	var7_upvw = arg1
	var4_upvw = var7_upvw.iconsDictionary
	local var20
	for _, v in pairs(var7_upvw.container) do
		if var20 == nil and v.ScreenInsets == Enum.ScreenInsets.TopbarSafeInsets then
			var20 = v
		end
		for _, v_2 in pairs(v.Holders:GetChildren()) do
			if v_2:GetAttribute("IsAHolder") then
				tbl_upvr_2[v_2.Name] = v_2
			end
		end
	end
	local var24_upvw = false
	local any_createStagger_result1_upvr = Utility_upvr.createStagger(0.1, function(arg1_2) -- Line 41
		--[[ Upvalues[2]:
			[1]: var24_upvw (read and write)
			[2]: module_3_upvr (copied, readonly)
		]]
		if not var24_upvw then
		else
			if not arg1_2 then
				module_3_upvr.updateAvailableIcons("Center")
			end
			module_3_upvr.updateBoundary("Left")
			module_3_upvr.updateBoundary("Right")
		end
	end)
	task.delay(1, function() -- Line 51
		--[[ Upvalues[2]:
			[1]: var24_upvw (read and write)
			[2]: any_createStagger_result1_upvr (readonly)
		]]
		var24_upvw = true
		any_createStagger_result1_upvr()
	end)
	var7_upvw.iconAdded:Connect(any_createStagger_result1_upvr)
	var7_upvw.iconRemoved:Connect(any_createStagger_result1_upvr)
	var7_upvw.iconChanged:Connect(any_createStagger_result1_upvr)
	CurrentCamera_upvr:GetPropertyChangedSignal("ViewportSize"):Connect(function() -- Line 61
		--[[ Upvalues[1]:
			[1]: any_createStagger_result1_upvr (readonly)
		]]
		any_createStagger_result1_upvr(true)
	end)
	var20:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() -- Line 64
		--[[ Upvalues[1]:
			[1]: any_createStagger_result1_upvr (readonly)
		]]
		any_createStagger_result1_upvr(true)
	end)
end
function module_3_upvr.getWidth(arg1, arg2) -- Line 69
	local widget = arg1.widget
	local TargetWidth = widget:GetAttribute("TargetWidth")
	if not TargetWidth then
		TargetWidth = widget.AbsoluteSize.X
	end
	return TargetWidth
end
function module_3_upvr.getAvailableIcons(arg1) -- Line 74
	--[[ Upvalues[2]:
		[1]: tbl_upvr_3 (readonly)
		[2]: module_3_upvr (readonly)
	]]
	local var32 = tbl_upvr_3[arg1]
	if not var32 then
		var32 = module_3_upvr.updateAvailableIcons(arg1)
	end
	return var32
end
function module_3_upvr.updateAvailableIcons(arg1) -- Line 82
	--[[ Upvalues[4]:
		[1]: tbl_upvr_2 (readonly)
		[2]: var4_upvw (read and write)
		[3]: tbl_upvr_4 (readonly)
		[4]: tbl_upvr_3 (readonly)
	]]
	local module = {}
	local var41
	for _, v_3 in pairs(var4_upvw) do
		local var43
		if not var43 then
			var43 = tbl_upvr_4[v_3.parentIconUID]
		end
		if var43 and v_3.alignment == arg1 and not tbl_upvr_4[v_3.UID] then
			table.insert(module, v_3)
			var41 += 1
		end
	end
	if var41 <= 0 then
		return {}
	end
	table.sort(module, function(arg1_3, arg2) -- Line 106
		local LayoutOrder_2 = arg1_3.widget.LayoutOrder
		local LayoutOrder = arg2.widget.LayoutOrder
		local parentIconUID_2 = arg1_3.parentIconUID
		local parentIconUID = arg2.parentIconUID
		local var49
		if parentIconUID_2 == parentIconUID then
			if LayoutOrder_2 < LayoutOrder then
				var49 = true
				return var49
			end
			if LayoutOrder < LayoutOrder_2 then
				var49 = false
				return var49
			end
			if arg1_3.widget.AbsolutePosition.X >= arg2.widget.AbsolutePosition.X then
				var49 = false
			else
				var49 = true
			end
			return var49
		end
		if parentIconUID then
			var49 = false
			return var49
		end
		if parentIconUID_2 then
			var49 = true
			return var49
		end
	end)
	tbl_upvr_3[arg1] = module
	return module
end
function module_3_upvr.getRealXPositions(arg1, arg2) -- Line 132
	--[[ Upvalues[3]:
		[1]: tbl_upvr_2 (readonly)
		[2]: Utility_upvr (readonly)
		[3]: module_3_upvr (readonly)
	]]
	if arg1 ~= "Left" then
		local _ = false
		-- KONSTANTWARNING: Skipped task `defvar` above
	else
	end
	local var53 = tbl_upvr_2[arg1]
	local Offset_4 = var53.UIListLayout.Padding.Offset
	if not true or not var53.AbsolutePosition.X then
	end
	local module_2 = {}
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if true then
		Utility_upvr.reverseTable(arg2)
	end
	for i_4 = #arg2, 1, -1 do
		local var57 = arg2[i_4]
		local any_getWidth_result1 = module_3_upvr.getWidth(var57)
		local var59
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if not true then
			var59 -= any_getWidth_result1
		end
		module_2[var57.UID] = var59
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if true then
			var59 += any_getWidth_result1
		end
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if not true or not Offset_4 then
		end
		var59 += -Offset_4
	end
	return module_2
end
local tbl_upvr = {}
function module_3_upvr.updateBoundary(arg1) -- Line 162
	--[[ Upvalues[6]:
		[1]: tbl_upvr_2 (readonly)
		[2]: module_3_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: var7_upvw (read and write)
		[5]: tbl_upvr_4 (readonly)
		[6]: Utility_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var128 = tbl_upvr_2[arg1]
	local UIListLayout = var128.UIListLayout
	local X_2 = var128.AbsolutePosition.X
	local X_4 = var128.AbsoluteSize.X
	local Offset_3 = UIListLayout.Padding.Offset
	local Offset_2 = UIListLayout.Padding.Offset
	local any_updateAvailableIcons_result1 = module_3_upvr.updateAvailableIcons(arg1)
	local var135 = 0
	local var136 = 0
	for i_5, v_4 in pairs(any_updateAvailableIcons_result1) do
		var135 += module_3_upvr.getWidth(v_4) + Offset_2
		var136 += 1
	end
	if var136 <= 0 then
		do
			return
		end
		local var140
	end
	if arg1 ~= "Central" then
	else
	end
	if arg1 ~= "Left" then
		var140 = false
	else
		var140 = true
	end
	local var141 = not var140
	v_4 = tbl_upvr
	i_5 = v_4[arg1]
	if not i_5 and not true then
		v_4 = #any_updateAvailableIcons_result1
		if 0 < v_4 then
			if var140 then
				v_4 = -9999999
			else
				v_4 = 9999999
			end
			i_5 = var7_upvw.new()
			i_5:setImage(6069276526, "Deselected")
			i_5:setName("Overflow"..arg1)
			i_5:setOrder(v_4)
			i_5:setAlignment(arg1)
			i_5:autoDeselect(false)
			i_5.isAnOverflow = true
			i_5:select("OverflowStart", i_5)
			i_5:setEnabled(false)
			tbl_upvr[arg1] = i_5
			tbl_upvr_4[i_5.UID] = true
		end
	end
	if arg1 == "Left" then
		v_4 = "Right"
	else
		v_4 = "Left"
	end
	local any_updateAvailableIcons_result1_4 = module_3_upvr.updateAvailableIcons(v_4)
	if not var140 or not any_updateAvailableIcons_result1_4[1] or var141 then
		local var143 = any_updateAvailableIcons_result1_4[#any_updateAvailableIcons_result1_4]
	end
	local var144 = tbl_upvr[v_4]
	if not var140 or not (X_2 + X_4) then
		local var145
	end
	if var143 then
		local var146 = module_3_upvr.getRealXPositions(v_4, any_updateAvailableIcons_result1_4)[var143.UID]
		var145 = module_3_upvr
		var145 = var143
		local function INLINED_8() -- Internal function, doesn't exist in bytecode
			var145 = var146 - Offset_3
			return var145
		end
		if not var140 or not INLINED_8() then
			var145 = var146 + var145.getWidth(var145) + Offset_3
		end
		local var147 = var145
	end
	local var148 = "Center"
	local any_getAvailableIcons_result1_2 = module_3_upvr.getAvailableIcons(var148)
	if var140 then
		var148 = 1
	else
		var148 = #any_getAvailableIcons_result1_2
	end
	local var150 = any_getAvailableIcons_result1_2[var148]
	if var150 then
		local var151
		if not var151 then
			local function INLINED_9() -- Internal function, doesn't exist in bytecode
				var151 = any_updateAvailableIcons_result1[var145]
				var145 = #any_updateAvailableIcons_result1
				return var151
			end
			local function INLINED_10() -- Internal function, doesn't exist in bytecode
				var151 = var141
				return var151
			end
			if not var140 or not INLINED_9() or INLINED_10() then
				var151 = any_updateAvailableIcons_result1[1]
			end
			var145 = var150.widget.AbsolutePosition.X
			local X_5 = var151.widget.AbsolutePosition.X
			if not var140 or not (var145 - Offset_3) then
			end
			if not var140 or not (X_5 + module_3_upvr.getWidth(var151)) then
			end
			if var140 then
				if var145 + module_3_upvr.getWidth(var150) + Offset_3 < X_5 then
					var150:align("Left")
					var150.hasRelocatedInOverflow = true
					-- KONSTANTWARNING: GOTO [233] #185
				end
			elseif var141 then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
				if X_5 < var145 + module_3_upvr.getWidth(var150) + Offset_3 then
					var150:align("Right")
					var150.hasRelocatedInOverflow = true
				end
			end
		end
	end
	if i_5 then
		var151 = var147
		var145 = i_5:getInstance("Menu")
		local var153
		local var154
		if var145 and var144 then
			local X = var144.widget.AbsolutePosition.X
			if not var140 or not (X - Offset_3) then
			end
			var154 = var145.AbsoluteCanvasSize
			var154 = var144:getInstance("Menu").AbsoluteCanvasSize.X
			if var154 > var154.X then
			else
			end
			var154 = X_4 / 2
			local var156 = X_2 + var154
			local function INLINED_11() -- Internal function, doesn't exist in bytecode
				var154 = var156 - Offset_3 / 2
				return var154
			end
			if not var140 or not INLINED_11() then
				var154 = var156 + Offset_3 / 2
			end
			var151 = var154
			if true then
				var151 = X + module_3_upvr.getWidth(var144) + Offset_3
			end
			if not var140 or not (var151 - X_2) then
			end
			var153 = X_2 + X_4 - var151
		end
		if var145 then
		end
		var153 = Utility_upvr.round(var153)
		if var145 and var145:GetAttribute("MaxWidth") ~= var153 then
			var145:SetAttribute("MaxWidth", var153)
		end
	end
	for i_6 = #any_updateAvailableIcons_result1, 1, -1 do
		local var157 = any_updateAvailableIcons_result1[i_6]
		local var158 = module_3_upvr.getRealXPositions(arg1, any_updateAvailableIcons_result1)[var157.UID]
		if var140 and var147 <= var158 + module_3_upvr.getWidth(var157) or var141 and var158 <= var147 then
			local var159 = true
		end
	end
	for i_7 = #any_updateAvailableIcons_result1, 1, -1 do
		local var160 = any_updateAvailableIcons_result1[i_7]
		if not tbl_upvr_4[var160.UID] then
			if var159 and not var160.parentIconUID then
				var160:joinMenu(i_5)
			elseif not var159 and var160.parentIconUID then
				var160:leave()
			end
		end
	end
	if i_5.isEnabled ~= var159 then
		i_7 = var159
		i_5:setEnabled(i_7)
	end
	if i_5.isEnabled and not i_5.overflowAlreadyOpened then
		i_5.overflowAlreadyOpened = true
		i_5:select()
	end
end
return module_3_upvr

Script name: Themes
  - Script: 


local module_upvr = {}
local Utility_upvr = require(script.Parent.Parent.Utility)
function module_upvr.getThemeValue(arg1, arg2, arg3, arg4) -- Line 16
	if arg1 then
		for _, v in pairs(arg1) do
			local unpack_result1, unpack_result2, unpack_result3 = unpack(v)
			if arg2 == unpack_result1 and arg3 == unpack_result2 then
				return unpack_result3
			end
		end
	end
end
function module_upvr.getInstanceValue(arg1, arg2) -- Line 27
	local pcall_result1, pcall_result2 = pcall(function() -- Line 28
		--[[ Upvalues[2]:
			[1]: arg1 (readonly)
			[2]: arg2 (readonly)
		]]
		return arg1[arg2]
	end)
	if not pcall_result1 then
		pcall_result2 = arg1:GetAttribute(arg2)
	end
	return pcall_result2
end
function module_upvr.getRealInstance(arg1) -- Line 37
	if not arg1:GetAttribute("IsAClippedClone") then return end
	local OriginalInstance = arg1:FindFirstChild("OriginalInstance")
	if not OriginalInstance then return end
	return OriginalInstance.Value
end
function module_upvr.getClippedClone(arg1) -- Line 48
	if not arg1:GetAttribute("HasAClippedClone") then return end
	local ClippedClone = arg1:FindFirstChild("ClippedClone")
	if not ClippedClone then return end
	return ClippedClone.Value
end
function module_upvr.refresh(arg1, arg2, arg3) -- Line 59
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if arg3 then
		local any_getThemeValue_result1 = module_upvr.getThemeValue(arg1:getStateGroup(), arg2.Name, arg3)
		if not any_getThemeValue_result1 then
			any_getThemeValue_result1 = module_upvr.getInstanceValue(arg2, arg3)
		end
		module_upvr.apply(arg1, arg2, arg3, any_getThemeValue_result1, true)
	else
		local any_getStateGroup_result1 = arg1:getStateGroup()
		if not any_getStateGroup_result1 then return end
		local tbl = {}
		tbl[arg2.Name] = arg2
		for _, v_10 in pairs(arg2:GetDescendants()) do
			local Collective = v_10:GetAttribute("Collective")
			if Collective then
				tbl[Collective] = v_10
			end
			tbl[v_10.Name] = v_10
		end
		for _, v_11 in pairs(any_getStateGroup_result1) do
			local unpack_result1_2, unpack_result2_2, unpack_result3_2 = unpack(v_11)
			local var37 = tbl[unpack_result1_2]
			if var37 then
				module_upvr.apply(arg1, var37.Name, unpack_result2_2, unpack_result3_2, true)
			end
		end
	end
end
function module_upvr.apply(arg1, arg2, arg3, arg4, arg5) -- Line 92
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var84
	if var84 then
	else
		var84 = nil
		local var85 = arg2
		if typeof(arg2) == "Instance" then
			local tbl_4 = {}
			tbl_4[1] = arg2
			var84 = tbl_4
			var85 = arg2.Name
		else
			var84 = arg1:getInstanceOrCollective(arg2)
		end
		local var87 = arg1.customBehaviours[var85..'-'..arg3]
		for _, v_12 in pairs(var84) do
			local any_getClippedClone_result1_2 = module_upvr.getClippedClone(v_12)
			if any_getClippedClone_result1_2 then
				table.insert(var84, any_getClippedClone_result1_2)
			end
		end
		for _, v_13_upvr in pairs(var84) do
			if arg3 == "Position" and module_upvr.getClippedClone(v_13_upvr) then
				local var95
			elseif arg3 ~= "Size" or not module_upvr.getRealInstance(v_13_upvr) or arg5 or var95 ~= module_upvr.getInstanceValue(v_13_upvr, arg3) then
				if var87 then
					local var87_result1 = var87(var95, v_13_upvr, arg3)
					if var87_result1 ~= nil then
						var95 = var87_result1
						local var97_upvw = var95
					end
				end
				if not pcall(function() -- Line 138
					--[[ Upvalues[3]:
						[1]: v_13_upvr (readonly)
						[2]: arg3 (readonly)
						[3]: var97_upvw (read and write)
					]]
					v_13_upvr[arg3] = var97_upvw
				end) then
					v_13_upvr:SetAttribute(arg3, var97_upvw)
				end
			end
		end
	end
end
function module_upvr.getModifications(arg1) -- Line 152
	local var99
	if typeof(arg1[1]) ~= "table" then
		var99 = {var99}
	end
	return var99
end
function module_upvr.merge(arg1, arg2, arg3) -- Line 161
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local unpacked_value_1_3, unpacked_value_2, unpacked_value_3, unpacked_value_4_2 = table.unpack(arg2)
	local unpacked_value_1, unpacked_value_2_2, _, unpacked_value_4 = table.unpack(arg1)
	if unpacked_value_1_3 == unpacked_value_1 and unpacked_value_2 == unpacked_value_2_2 and module_upvr.statesMatch(unpacked_value_4_2, unpacked_value_4) then
		arg1[3] = unpacked_value_3
		if arg3 then
			arg3(arg1)
		end
		return true
	end
	return false
end
function module_upvr.modify(arg1, arg2, arg3) -- Line 174
	--[[ Upvalues[2]:
		[1]: Utility_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	task.spawn(function() -- Line 182
		--[[ Upvalues[5]:
			[1]: arg3 (read and write)
			[2]: Utility_upvr (copied, readonly)
			[3]: arg2 (read and write)
			[4]: module_upvr (copied, readonly)
			[5]: arg1 (readonly)
		]]
		local var114 = arg3
		if not var114 then
			var114 = Utility_upvr.generateUID()
		end
		arg3 = var114
		arg2 = module_upvr.getModifications(arg2)
		for _, v_2_upvr in pairs(arg2) do
			local unpacked_value_1_2_upvr, unpacked_value_2_3_upvr, unpacked_value_3_upvr, unpacked_value_4_3 = table.unpack(v_2_upvr)
			if unpacked_value_4_3 == nil then
				module_upvr.modify(arg1, {unpacked_value_1_2_upvr, unpacked_value_2_3_upvr, unpacked_value_3_upvr, "Selected"}, arg3)
				module_upvr.modify(arg1, {unpacked_value_1_2_upvr, unpacked_value_2_3_upvr, unpacked_value_3_upvr, "Viewing"}, arg3)
			end
			local any_formatStateName_result1_upvr = Utility_upvr.formatStateName(unpacked_value_4_3 or "Deselected")
			local function _() -- Line 194, Named "nowSetIt"
				--[[ Upvalues[6]:
					[1]: any_formatStateName_result1_upvr (readonly)
					[2]: arg1 (copied, readonly)
					[3]: module_upvr (copied, readonly)
					[4]: unpacked_value_1_2_upvr (readonly)
					[5]: unpacked_value_2_3_upvr (readonly)
					[6]: unpacked_value_3_upvr (readonly)
				]]
				if any_formatStateName_result1_upvr == arg1.activeState then
					module_upvr.apply(arg1, unpacked_value_1_2_upvr, unpacked_value_2_3_upvr, unpacked_value_3_upvr)
				end
			end
			local any_getStateGroup_result1_2_upvr = arg1:getStateGroup(any_formatStateName_result1_upvr)
			;(function() -- Line 199, Named "updateRecord"
				--[[ Upvalues[9]:
					[1]: any_getStateGroup_result1_2_upvr (readonly)
					[2]: module_upvr (copied, readonly)
					[3]: v_2_upvr (readonly)
					[4]: arg3 (copied, read and write)
					[5]: any_formatStateName_result1_upvr (readonly)
					[6]: arg1 (copied, readonly)
					[7]: unpacked_value_1_2_upvr (readonly)
					[8]: unpacked_value_2_3_upvr (readonly)
					[9]: unpacked_value_3_upvr (readonly)
				]]
				for _, v_3 in pairs(any_getStateGroup_result1_2_upvr) do
					if module_upvr.merge(v_3, v_2_upvr, function(arg1_2) -- Line 201
						--[[ Upvalues[7]:
							[1]: arg3 (copied, read and write)
							[2]: any_formatStateName_result1_upvr (copied, readonly)
							[3]: arg1 (copied, readonly)
							[4]: module_upvr (copied, readonly)
							[5]: unpacked_value_1_2_upvr (copied, readonly)
							[6]: unpacked_value_2_3_upvr (copied, readonly)
							[7]: unpacked_value_3_upvr (copied, readonly)
						]]
						arg1_2[5] = arg3
						if any_formatStateName_result1_upvr == arg1.activeState then
							module_upvr.apply(arg1, unpacked_value_1_2_upvr, unpacked_value_2_3_upvr, unpacked_value_3_upvr)
						end
					end) then return end
				end
				local tbl_5 = {unpacked_value_1_2_upvr, unpacked_value_2_3_upvr, unpacked_value_3_upvr, any_formatStateName_result1_upvr}
				tbl_5[5] = arg3
				table.insert(any_getStateGroup_result1_2_upvr, tbl_5)
				if any_formatStateName_result1_upvr == arg1.activeState then
					module_upvr.apply(arg1, unpacked_value_1_2_upvr, unpacked_value_2_3_upvr, unpacked_value_3_upvr)
				end
			end)()
		end
	end)
	return arg3
end
function module_upvr.remove(arg1, arg2) -- Line 219
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	for _, v_4 in pairs(arg1.appearance) do
		for i_5 = #v_4, 1, -1 do
			if v_4[i_5][5] == arg2 then
				table.remove(v_4, i_5)
			end
		end
	end
	module_upvr.rebuild(arg1)
end
function module_upvr.removeWith(arg1, arg2, arg3, arg4) -- Line 232
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	for i_6, v_5 in pairs(arg1.appearance) do
		if arg4 == i_6 or not arg4 then
			for i_7 = #v_5, 1, -1 do
				local var145 = v_5[i_7]
				if var145[1] == arg2 and var145[2] == arg3 then
					table.remove(v_5, i_7)
				end
			end
		end
	end
	module_upvr.rebuild(arg1)
end
function module_upvr.change(arg1) -- Line 248
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	for _, v_6 in pairs(arg1:getStateGroup()) do
		local unpack_result1_3, unpack_result2_3, unpack_result3_3 = unpack(v_6)
		module_upvr.apply(arg1, unpack_result1_3, unpack_result2_3, unpack_result3_3)
	end
end
function module_upvr.set(arg1, arg2) -- Line 258
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local themesJanitor = arg1.themesJanitor
	themesJanitor:clean()
	themesJanitor:add(arg1.stateChanged:Connect(function() -- Line 264
		--[[ Upvalues[2]:
			[1]: module_upvr (copied, readonly)
			[2]: arg1 (readonly)
		]]
		module_upvr.change(arg1)
	end))
	local var156
	if typeof(arg2) == "Instance" and var156:IsA("ModuleScript") then
		var156 = require(var156)
	end
	arg1.appliedTheme = var156
	module_upvr.rebuild(arg1)
end
function module_upvr.statesMatch(arg1, arg2) -- Line 274
	local var159 = arg1
	if var159 then
		var159 = string.lower(arg1)
	end
	local var160 = arg2
	if var160 then
		var160 = string.lower(arg2)
	end
	local var161 = true
	if var159 ~= var160 then
		var161 = not arg1
		if not var161 then
			var161 = not arg2
		end
	end
	return var161
end
local Default_upvr = require(script.Default)
function module_upvr.rebuild(arg1) -- Line 281
	--[[ Upvalues[3]:
		[1]: module_upvr (readonly)
		[2]: Utility_upvr (readonly)
		[3]: Default_upvr (readonly)
	]]
	local tbl_6_upvr = {"Deselected", "Selected", "Viewing"}
	local appliedTheme_upvr = arg1.appliedTheme
	;(function() -- Line 288, Named "generateTheme"
		--[[ Upvalues[6]:
			[1]: tbl_6_upvr (readonly)
			[2]: module_upvr (copied, readonly)
			[3]: Utility_upvr (copied, readonly)
			[4]: Default_upvr (copied, readonly)
			[5]: appliedTheme_upvr (readonly)
			[6]: arg1 (readonly)
		]]
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		for _, v_7 in pairs(tbl_6_upvr) do
			local tbl_2_upvr = {}
			local function updateDetails(arg1_3, arg2) -- Line 294
				--[[ Upvalues[3]:
					[1]: module_upvr (copied, readonly)
					[2]: Utility_upvr (copied, readonly)
					[3]: tbl_2_upvr (readonly)
				]]
				if not arg1_3 then
				else
					for _, v_14 in pairs(arg1_3) do
						if module_upvr.statesMatch(arg2, v_14[4]) then
							local any_copyTable_result1 = Utility_upvr.copyTable(v_14)
							any_copyTable_result1[5] = v_14[5]
							tbl_2_upvr[v_14[1]..'-'..v_14[2]] = any_copyTable_result1
						end
					end
				end
			end
			if v_7 == "Selected" then
				updateDetails(Default_upvr, "Deselected")
			end
			updateDetails(Default_upvr, "Empty")
			updateDetails(Default_upvr, v_7)
			if appliedTheme_upvr ~= Default_upvr then
				if v_7 == "Selected" then
					updateDetails(appliedTheme_upvr, "Deselected")
				end
				updateDetails(Default_upvr, "Empty")
				updateDetails(appliedTheme_upvr, v_7)
			end
			local var199 = arg1.appearance[v_7]
			if var199 then
				for _, v_8 in pairs(var199) do
					local _5 = v_8[5]
					if _5 ~= nil then
						table.insert({}, {v_8[1], v_8[2], v_8[3], v_7, _5})
					end
				end
			end
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			updateDetails({}, v_7)
			for _, v_9 in pairs(tbl_2_upvr) do
				table.insert({}, v_9)
				local var209
			end
			arg1.appearance[v_7] = var209
		end
		module_upvr.change(arg1)
	end)()
end
return module_upvr

Script name: Classic
  - Script: 


return {{"Selection", "Size", UDim2.new(1, -6, 1, -5)}, {"Selection", "Position", UDim2.new(0, 3, 0, 3)}, {"Widget", "MinimumWidth", 32, "Deselected"}, {"Widget", "MinimumHeight", 32, "Deselected"}, {"Widget", "BorderSize", 0, "Deselected"}, {"IconCorners", "CornerRadius", UDim.new(0, 9), "Deselected"}, {"IconButton", "BackgroundTransparency", 0.5, "Deselected"}, {"IconLabel", "TextSize", 14, "Deselected"}, {"Dropdown", "BackgroundTransparency", 0.5, "Deselected"}, {"Notice", "Position", UDim2.new(1, -12, 0, -3), "Deselected"}, {"Notice", "Size", UDim2.new(0, 15, 0, 15), "Deselected"}, {"NoticeLabel", "TextSize", 11, "Deselected"}, {"IconSpot", "BackgroundColor3", Color3.fromRGB(0, 0, 0), "Selected"}, {"IconSpot", "BackgroundTransparency", 0.702, "Selected"}, {"IconSpotGradient", "Enabled", false, "Selected"}, {"IconOverlay", "BackgroundTransparency", 0.97, "Selected"}}

Script name: Default
  - Script: 


return {{"IconCorners", "CornerRadius", UDim.new(1, 0)}, {"Selection", "RotationSpeed", 1}, {"Selection", "Size", UDim2.new(1, 0, 1, 1)}, {"Selection", "Position", UDim2.new(0, 0, 0, 0)}, {"SelectionGradient", "Color", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(86, 86, 86))})}, {"IconImage", "Image", "", "Deselected"}, {"IconLabel", "Text", "", "Deselected"}, {"IconLabel", "Position", UDim2.fromOffset(0, 0), "Deselected"}, {"Widget", "MinimumWidth", 44, "Deselected"}, {"Widget", "MinimumHeight", 44, "Deselected"}, {"Widget", "BorderSize", 4, "Deselected"}, {"IconButton", "BackgroundColor3", Color3.fromRGB(0, 0, 0), "Deselected"}, {"IconButton", "BackgroundTransparency", 0.3, "Deselected"}, {"IconImageScale", "Value", 0.5, "Deselected"}, {"IconImageCorner", "CornerRadius", UDim.new(0, 0), "Deselected"}, {"IconImage", "ImageColor3", Color3.fromRGB(255, 255, 255), "Deselected"}, {"IconImage", "ImageTransparency", 0, "Deselected"}, {"IconLabel", "FontFace", Font.new("rbxasset://fonts/families/GothamSSm.json", Enum.FontWeight.Medium, Enum.FontStyle.Normal), "Deselected"}, {"IconLabel", "TextSize", 16, "Deselected"}, {"IconSpot", "BackgroundTransparency", 1, "Deselected"}, {"IconOverlay", "BackgroundTransparency", 0.925, "Deselected"}, {"IconSpotGradient", "Enabled", false, "Deselected"}, {"IconGradient", "Enabled", false, "Deselected"}, {"ClickRegion", "Active", true, "Deselected"}, {"Menu", "Active", false, "Deselected"}, {"ContentsList", "HorizontalAlignment", Enum.HorizontalAlignment.Center, "Deselected"}, {"Dropdown", "BackgroundColor3", Color3.fromRGB(0, 0, 0), "Deselected"}, {"Dropdown", "BackgroundTransparency", 0.3, "Deselected"}, {"Dropdown", "MaxIcons", 4, "Deselected"}, {"Menu", "MaxIcons", 4, "Deselected"}, {"Notice", "Position", UDim2.new(1, -12, 0, -1), "Deselected"}, {"Notice", "Size", UDim2.new(0, 20, 0, 20), "Deselected"}, {"NoticeLabel", "TextSize", 13, "Deselected"}, {"PaddingLeft", "Size", UDim2.new(0, 9, 1, 0), "Deselected"}, {"PaddingRight", "Size", UDim2.new(0, 11, 1, 0), "Deselected"}, {"IconSpot", "BackgroundTransparency", 0.7, "Selected"}, {"IconSpot", "BackgroundColor3", Color3.fromRGB(255, 255, 255), "Selected"}, {"IconSpotGradient", "Enabled", true, "Selected"}, {"IconSpotGradient", "Rotation", 45, "Selected"}, {"IconSpotGradient", "Color", ColorSequence.new(Color3.fromRGB(96, 98, 100), Color3.fromRGB(77, 78, 80)), "Selected"}}

Script name: GoodSignal
  - Script: 


local var1_upvw
local function acquireRunnerThreadAndCallEventHandler_upvr(arg1, ...) -- Line 34, Named "acquireRunnerThreadAndCallEventHandler"
	--[[ Upvalues[1]:
		[1]: var1_upvw (read and write)
	]]
	var1_upvw = nil
	arg1(...)
	var1_upvw = var1_upvw
end
local function runEventHandlerInFreeThread_upvr() -- Line 45, Named "runEventHandlerInFreeThread"
	--[[ Upvalues[1]:
		[1]: acquireRunnerThreadAndCallEventHandler_upvr (readonly)
	]]
	while true do
		acquireRunnerThreadAndCallEventHandler_upvr(coroutine.yield())
	end
end
local tbl_upvr = {}
tbl_upvr.__index = tbl_upvr
local function new(arg1, arg2) -- Line 60
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local module = {
		_connected = true;
	}
	module._signal = arg1
	module._fn = arg2
	module._next = false
	return setmetatable(module, tbl_upvr)
end
tbl_upvr.new = new
function tbl_upvr.Disconnect(arg1) -- Line 69
	arg1._connected = false
	local var4
	if var4 == arg1 then
		var4 = arg1._signal
		var4._handlerListHead = arg1._next
	else
		var4 = arg1._signal._handlerListHead
		while var4 and var4._next ~= arg1 do
			var4 = var4._next
		end
		if var4 then
			var4._next = arg1._next
		end
	end
end
tbl_upvr.Destroy = tbl_upvr.Disconnect
local tbl = {}
local function __index(arg1, arg2) -- Line 92
	error("Attempt to get Connection::%s (not a valid member)":format(tostring(arg2)), 2)
end
tbl.__index = __index
local function __newindex(arg1, arg2, arg3) -- Line 95
	error("Attempt to set Connection::%s (not a valid member)":format(tostring(arg2)), 2)
end
tbl.__newindex = __newindex
setmetatable(tbl_upvr, tbl)
local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new() -- Line 104
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	return setmetatable({
		_handlerListHead = false;
	}, module_2_upvr)
end
function module_2_upvr.Connect(arg1, arg2) -- Line 110
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local any_new_result1 = tbl_upvr.new(arg1, arg2)
	if arg1._handlerListHead then
		any_new_result1._next = arg1._handlerListHead
		arg1._handlerListHead = any_new_result1
		return any_new_result1
	end
	arg1._handlerListHead = any_new_result1
	return any_new_result1
end
function module_2_upvr.DisconnectAll(arg1) -- Line 123
	arg1._handlerListHead = false
end
module_2_upvr.Destroy = module_2_upvr.DisconnectAll
function module_2_upvr.Fire(arg1, ...) -- Line 132
	--[[ Upvalues[2]:
		[1]: var1_upvw (read and write)
		[2]: runEventHandlerInFreeThread_upvr (readonly)
	]]
	local _handlerListHead = arg1._handlerListHead
	while _handlerListHead do
		if _handlerListHead._connected then
			if not var1_upvw then
				var1_upvw = coroutine.create(runEventHandlerInFreeThread_upvr)
				coroutine.resume(var1_upvw)
			end
			task.spawn(var1_upvw, _handlerListHead._fn, ...)
		end
	end
end
function module_2_upvr.Wait(arg1) -- Line 149
	local var11_upvw
	local current_thread_upvr = coroutine.running()
	var11_upvw = arg1:Connect(function(...) -- Line 152
		--[[ Upvalues[2]:
			[1]: var11_upvw (read and write)
			[2]: current_thread_upvr (readonly)
		]]
		var11_upvw:Disconnect()
		task.spawn(current_thread_upvr, ...)
	end)
	return coroutine.yield()
end
function module_2_upvr.Once(arg1, arg2) -- Line 161
	local var14_upvw
	var14_upvw = arg1:Connect(function(...) -- Line 163
		--[[ Upvalues[2]:
			[1]: var14_upvw (read and write)
			[2]: arg2 (readonly)
		]]
		if var14_upvw._connected then
			var14_upvw:Disconnect()
		end
		arg2(...)
	end)
	return var14_upvw
end
setmetatable(module_2_upvr, {
	__index = function(arg1, arg2) -- Line 174, Named "__index"
		error("Attempt to get Signal::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
	__newindex = function(arg1, arg2, arg3) -- Line 177, Named "__newindex"
		error("Attempt to set Signal::%s (not a valid member)":format(tostring(arg2)), 2)
	end;
})
return module_2_upvr

Script name: Janitor
  - Script: 


local RunService_upvr = game:GetService("RunService")
local function _() -- Line 25, Named "getPromiseReference"
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsRunning() then
		return require(game:GetService("ReplicatedStorage").Framework).modules.Promise
	end
end
local newproxy_result1_2_upvr = newproxy(true)
getmetatable(newproxy_result1_2_upvr).__tostring = function() -- Line 33
	return "IndicesReference"
end
local newproxy_result1_3_upvr = newproxy(true)
getmetatable(newproxy_result1_3_upvr).__tostring = function() -- Line 38
	return "LinkToInstanceIndex"
end
local module_upvr = {
	IGNORE_MEMORY_DEBUG = true;
	ClassName = "Janitor";
	__index = {
		CurrentlyCleaning = true;
		[newproxy_result1_2_upvr] = nil;
	};
}
local tbl_3_upvr = {
	["function"] = true;
	Promise = "cancel";
	RBXScriptConnection = "Disconnect";
}
function module_upvr.new() -- Line 64
	--[[ Upvalues[2]:
		[1]: newproxy_result1_2_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	return setmetatable({
		CurrentlyCleaning = false;
		[newproxy_result1_2_upvr] = nil;
	}, module_upvr)
end
function module_upvr.Is(arg1) -- Line 76
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local var14 = false
	if type(arg1) == "table" then
		if getmetatable(arg1) ~= module_upvr then
			var14 = false
		else
			var14 = true
		end
	end
	return var14
end
module_upvr.is = module_upvr.Is
module_upvr.__index.Add = function(arg1, arg2, arg3, arg4) -- Line 89, Named "Add"
	--[[ Upvalues[2]:
		[1]: newproxy_result1_2_upvr (readonly)
		[2]: tbl_3_upvr (readonly)
	]]
	if arg4 then
		arg1:Remove(arg4)
		local var20 = arg1[newproxy_result1_2_upvr]
		if not var20 then
			var20 = {}
			arg1[newproxy_result1_2_upvr] = var20
		end
		var20[arg4] = arg2
	end
	local var21
	if var21 == "table" and string.match(tostring(arg2), "Promise") then
		var21 = "Promise"
	end
	local var22 = arg3
	if not var22 then
		var22 = tbl_3_upvr[var21]
		if not var22 then
			var22 = "Destroy"
		end
	end
	local var23 = var22
	if type(arg2) ~= "function" then
		if not arg2[var23] then
			warn(string.format("Object %s doesn't have method %s, are you sure you want to add it? Traceback: %s", tostring(arg2), tostring(var23), debug.traceback(nil, 2)))
		end
	end
	arg1[arg2] = {var23, debug.traceback("")}
	return arg2
end
module_upvr.__index.Give = module_upvr.__index.Add
module_upvr.__index.AddPromise = function(arg1, arg2) -- Line 126, Named "AddPromise"
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local var25
	if RunService_upvr:IsRunning() then
		var25 = require(game:GetService("ReplicatedStorage").Framework).modules.Promise
	else
		var25 = nil
	end
	if var25 then
		if not var25.is(arg2) then
			error(string.format("Invalid argument #1 to 'Janitor:AddPromise' (Promise expected, got %s (%s))", typeof(arg2), tostring(arg2)))
		end
		if arg2:getStatus() == var25.Status.Started then
			local newproxy_result1 = newproxy(false)
			local any_Add_result1 = arg1:Add(var25.new(function(arg1_2, arg2_2, arg3) -- Line 134
				--[[ Upvalues[1]:
					[1]: arg2 (readonly)
				]]
				if arg3(function() -- Line 135
					--[[ Upvalues[1]:
						[1]: arg2 (copied, readonly)
					]]
					arg2:cancel()
				end) then
				else
					arg1_2(arg2)
				end
			end), "cancel", newproxy_result1)
			any_Add_result1:finallyCall(arg1.Remove, arg1, newproxy_result1)
			return any_Add_result1
		end
		return arg2
	end
	return arg2
end
module_upvr.__index.GivePromise = module_upvr.__index.AddPromise
module_upvr.__index.AddObject = function(arg1, arg2) -- Line 156, Named "AddObject"
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local newproxy_result1_4 = newproxy(false)
	local var31
	if RunService_upvr:IsRunning() then
		var31 = require(game:GetService("ReplicatedStorage").Framework).modules.Promise
	else
		var31 = nil
	end
	if var31 and var31.is(arg2) then
		if arg2:getStatus() == var31.Status.Started then
			local any_Add_result1_2 = arg1:Add(var31.resolve(arg2), "cancel", newproxy_result1_4)
			any_Add_result1_2:finallyCall(arg1.Remove, arg1, newproxy_result1_4)
			return any_Add_result1_2, newproxy_result1_4
		end
		return arg2
	end
	return arg1:Add(arg2, false, newproxy_result1_4), newproxy_result1_4
end
module_upvr.__index.GiveObject = module_upvr.__index.AddObject
module_upvr.__index.Remove = function(arg1, arg2) -- Line 179, Named "Remove"
	--[[ Upvalues[1]:
		[1]: newproxy_result1_2_upvr (readonly)
	]]
	local var38 = arg1[newproxy_result1_2_upvr]
	if var38 then
		local var39 = var38[arg2]
		local var40
		if var39 then
			local var41 = arg1[var39]
			var40 = var41
			if var40 then
				var40 = var41[1]
			end
			if var40 then
				if var40 == true then
					var39()
				else
					local var42 = var39[var40]
					if var42 then
						var42(var39)
					end
				end
				arg1[var39] = nil
			end
			var38[arg2] = nil
		end
	end
	return arg1
end
module_upvr.__index.Get = function(arg1, arg2) -- Line 213, Named "Get"
	--[[ Upvalues[1]:
		[1]: newproxy_result1_2_upvr (readonly)
	]]
	local var43 = arg1[newproxy_result1_2_upvr]
	if var43 then
		return var43[arg2]
	end
end
module_upvr.__index.Cleanup = function(arg1) -- Line 224, Named "Cleanup"
	--[[ Upvalues[1]:
		[1]: newproxy_result1_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [105] 86. Error Block 37 start (CF ANALYSIS FAILED)
	local var46 = arg1[newproxy_result1_2_upvr]
	if var46 then
		for i in next, var46 do
			var46[i] = nil
			local _
		end
		arg1[newproxy_result1_2_upvr] = {}
	end
	arg1.CurrentlyCleaning = false
	-- KONSTANTERROR: [105] 86. Error Block 37 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [124] 101. Error Block 28 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [124] 101. Error Block 28 end (CF ANALYSIS FAILED)
end
module_upvr.__index.Clean = module_upvr.__index.Cleanup
module_upvr.__index.Destroy = function(arg1) -- Line 284, Named "Destroy"
	arg1:Cleanup()
end
module_upvr.__call = module_upvr.__index.Cleanup
local tbl_2_upvr = {
	Connected = true;
}
tbl_2_upvr.__index = tbl_2_upvr
function tbl_2_upvr.Disconnect(arg1) -- Line 298
	if arg1.Connected then
		arg1.Connected = false
		arg1.Connection:Disconnect()
	end
end
function tbl_2_upvr.__tostring(arg1) -- Line 305
	return "Disconnect<"..tostring(arg1.Connected)..'>'
end
local Heartbeat_upvr = RunService_upvr.Heartbeat
module_upvr.__index.LinkToInstance = function(arg1, arg2, arg3) -- Line 315, Named "LinkToInstance"
	--[[ Upvalues[3]:
		[1]: newproxy_result1_3_upvr (readonly)
		[2]: tbl_2_upvr (readonly)
		[3]: Heartbeat_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var50_upvw
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var50_upvw = false
		return newproxy(var50_upvw)
	end
	if not arg3 or not INLINED() then
	end
	if arg2.Parent ~= nil then
		var50_upvw = false
	else
		var50_upvw = true
	end
	local setmetatable_result1_upvr = setmetatable({}, tbl_2_upvr)
	local var52_upvw
	var52_upvw = arg2.AncestryChanged:Connect(function(arg1_3, arg2_3) -- Line 321, Named "ChangedFunction"
		--[[ Upvalues[5]:
			[1]: setmetatable_result1_upvr (readonly)
			[2]: var50_upvw (read and write)
			[3]: Heartbeat_upvr (copied, readonly)
			[4]: var52_upvw (read and write)
			[5]: arg1 (readonly)
		]]
		local Connected = setmetatable_result1_upvr.Connected
		if Connected then
			if arg2_3 ~= nil then
				Connected = false
			else
				Connected = true
			end
			var50_upvw = Connected
			Connected = var50_upvw
			if Connected then
				Connected = coroutine.wrap
				Connected = Connected(function() -- Line 327
					--[[ Upvalues[5]:
						[1]: Heartbeat_upvr (copied, readonly)
						[2]: setmetatable_result1_upvr (copied, readonly)
						[3]: var52_upvw (copied, read and write)
						[4]: arg1 (copied, readonly)
						[5]: var50_upvw (copied, read and write)
					]]
					Heartbeat_upvr:Wait()
					if not setmetatable_result1_upvr.Connected then
					else
						if not var52_upvw.Connected then
							arg1:Cleanup()
							return
						end
						while var50_upvw and var52_upvw.Connected and setmetatable_result1_upvr.Connected do
							Heartbeat_upvr:Wait()
						end
						if setmetatable_result1_upvr.Connected and var50_upvw then
							arg1:Cleanup()
						end
					end
				end)
				Connected()
			end
		end
	end)
	local var55_upvw = var52_upvw
	setmetatable_result1_upvr.Connection = var55_upvw
	if var50_upvw and setmetatable_result1_upvr.Connected then
		if arg2.Parent ~= nil then
			var50_upvw = false
		else
			var50_upvw = true
		end
		if var50_upvw then
			coroutine.wrap(function() -- Line 327
				--[[ Upvalues[5]:
					[1]: Heartbeat_upvr (copied, readonly)
					[2]: setmetatable_result1_upvr (readonly)
					[3]: var55_upvw (read and write)
					[4]: arg1 (readonly)
					[5]: var50_upvw (read and write)
				]]
				Heartbeat_upvr:Wait()
				if not setmetatable_result1_upvr.Connected then
				else
					if not var55_upvw.Connected then
						arg1:Cleanup()
						return
					end
					while var50_upvw and var55_upvw.Connected and setmetatable_result1_upvr.Connected do
						Heartbeat_upvr:Wait()
					end
					if setmetatable_result1_upvr.Connected and var50_upvw then
						arg1:Cleanup()
					end
				end
			end)()
		end
	end
	return arg1:Add(setmetatable_result1_upvr, "Disconnect", newproxy_result1_3_upvr)
end
module_upvr.__index.LinkToInstances = function(arg1, ...) -- Line 363, Named "LinkToInstances"
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local any_new_result1 = module_upvr.new()
	for _, v in ipairs({...}) do
		any_new_result1:Add(arg1:LinkToInstance(v, true), "Disconnect")
	end
	return any_new_result1
end
for i_3, v_2 in next, module_upvr.__index do
	module_upvr.__index[string.sub(string.lower(i_3), 1, 1)..string.sub(i_3, 2)] = v_2
end
return module_upvr

Script name: READ_ME
  - Script: 

-- Failed to get script bytecode, error:

--[[
StarterPlayer.StarterPlayerScripts.PlayerModule.ControlModule.VRNavigation:1300: invalid 'ClassName' for 'Instance' #1 to 'getscriptbytecode' (LocalScript or ModuleScript expected, got 'Script') 
--]]

Script name: DataCompress
  - Script: 


-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
local module_2 = {}
local tbl_upvr = {}
local var11 = 0
for i = 32, 127 do
	if i ~= 34 and i ~= 92 then
		local string_char_result1_2 = string.char(i)
		tbl_upvr[string_char_result1_2] = var11
		tbl_upvr[var11] = string_char_result1_2
	end
end
local tbl = {}
for i_2 = 1, 34 do
	local var14 = i_2
	local var16 = ({34, 92, 127})[var14 - 31] or var14
	local string_char_result1_3 = string.char(var16)
	local string_char_result1 = string.char(var16 + 31)
	tbl[string_char_result1_3] = string_char_result1
	tbl[string_char_result1] = string_char_result1_3
	local var19_upvr
end
local function _(arg1) -- Line 25, Named "escape"
	--[[ Upvalues[1]:
		[1]: var19_upvr (readonly)
	]]
	return arg1:gsub("[%c\"\\]", function(arg1_2) -- Line 26
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return '\x7F'..var19_upvr[arg1_2]
	end)
end
local function _(arg1) -- Line 31, Named "unescape"
	--[[ Upvalues[1]:
		[1]: var19_upvr (readonly)
	]]
	return arg1:gsub("\x7F(.)", function(arg1_3) -- Line 32
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return var19_upvr[arg1_3]
	end)
end
local function _(arg1) -- Line 37, Named "copy"
	local module = {}
	for i_3, v in pairs(arg1) do
		module[i_3] = v
	end
	return module
end
local function _(arg1) -- Line 45, Named "tobase93"
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var30
	repeat
		local var31 = arg1 % 93
		var30 = tbl_upvr[var31]..var30
	until (arg1 - var31) / 93 == 0
	return var30
end
local function tobase10_upvr(arg1) -- Line 55, Named "tobase10"
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	local var34 = 0
	for i_4 = 1, #arg1 do
		var34 += 93 ^ (i_4 - 1) * tbl_upvr[arg1:sub(-i_4, -i_4)]
	end
	return var34
end
function module_2.Compress(arg1) -- Line 63
	--[[ Upvalues[2]:
		[1]: tbl_upvr (readonly)
		[2]: var19_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 35 start (CF ANALYSIS FAILED)
	local tbl_4 = {}
	local pairs_result1_3, _, pairs_result3 = pairs(tbl_upvr)
	local var47_upvw
	for i_5, v_2 in pairs_result1_3, var47_upvw, pairs_result3 do
		tbl_4[i_5] = v_2
	end
	local var48_upvr = tbl_4
	local tbl_upvr_2 = {}
	var47_upvw = 1
	local tbl_3_upvr = {}
	local var51_upvw = 0
	local function _(arg1_4) -- Line 70, Named "listkey"
		--[[ Upvalues[6]:
			[1]: var48_upvr (readonly)
			[2]: tbl_upvr (copied, readonly)
			[3]: var47_upvw (read and write)
			[4]: var51_upvw (read and write)
			[5]: tbl_3_upvr (readonly)
			[6]: tbl_upvr_2 (readonly)
		]]
		local var52 = var48_upvr[arg1_4]
		local var53
		repeat
			local var54 = var52 % 93
			var53 = tbl_upvr[var54]..var53
		until (var52 - var54) / 93 == 0
		local var55 = var53
		var53 = var47_upvw
		if var53 < #var55 then
			var53 = var47_upvw
			var47_upvw = #var55
			var51_upvw = 0
			tbl_3_upvr[var53] = var51_upvw
		end
		var53 = #tbl_upvr_2 + 1
		tbl_upvr_2[var53] = ' ':rep(var47_upvw - #var55)..var55
		var53 = var51_upvw
		var51_upvw = var53 + 1
	end
	local function var57(arg1_5) -- Line 26
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return '\x7F'..var19_upvr[arg1_5]
	end
	local _ = 1
	-- KONSTANTERROR: [0] 1. Error Block 35 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [65] 58. Error Block 33 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [65.18]
	local var60
	if var47_upvw < #var60 then
		tbl_3_upvr[var47_upvw] = var51_upvw
		var47_upvw = #var60
		var51_upvw = 0
	end
	tbl_upvr_2[#tbl_upvr_2 + 1] = ' ':rep(var47_upvw - #var60)..var60
	var51_upvw += 1
	local var61 = #var48_upvr + 1
	var48_upvr[var57] = var61
	var48_upvr[var61] = var57
	if 10000 <= 0 + 1 then
		wait()
	end
	-- KONSTANTERROR: [65] 58. Error Block 33 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [40] 35. Error Block 39 start (CF ANALYSIS FAILED)
	if wait() then
		-- KONSTANTWARNING: GOTO [91] #82
	end
	-- KONSTANTERROR: [40] 35. Error Block 39 end (CF ANALYSIS FAILED)
end
function module_2.Decompress(arg1) -- Line 104
	--[[ Upvalues[3]:
		[1]: tbl_upvr (readonly)
		[2]: tobase10_upvr (readonly)
		[3]: var19_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local tbl_5 = {}
	for i_6, v_3 in pairs(tbl_upvr) do
		tbl_5[i_6] = v_3
	end
	local var86 = tbl_5
	local module_3 = {}
	local any_match_result1, any_match_result2 = arg1:match("(.-)|(.*)")
	local tbl_2 = {}
	local var91 = 1
	for i_7 in any_match_result1:gmatch("%d+") do
		local var95 = #tbl_2 + 1
		tbl_2[var95] = any_match_result2:sub(var91, var91 + i_7 * var95 - 1)
		local var96
	end
	local var97
	for i_8 = 1, #var96 do
		for i_9 in var96[i_8]:gmatch('.':rep(i_8)) do
			if var97 then
				if var86[tobase10_upvr(i_9)] then
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					module_3[#module_3 + 1] = var86[tobase10_upvr(i_9)]
					var86[#var86 + 1] = var97..var86[tobase10_upvr(i_9)]:sub(1, 1)
				else
					local var101 = var97..var97:sub(1, 1)
					module_3[#module_3 + 1] = var101
					var86[#var86 + 1] = var101
				end
			else
				module_3[1] = var101
			end
		end
	end
	return table.concat(module_3):gsub("\x7F(.)", function(arg1_6) -- Line 32
		--[[ Upvalues[1]:
			[1]: var19_upvr (copied, readonly)
		]]
		return var19_upvr[arg1_6]
	end)
end
return module_2

Script name: CoreUtil
  - Script: 


local module = {}
module.__index = module
local var9
for _, v in pairs(script:GetDescendants()) do
	if v:IsA("ModuleScript") then
		local v_2 = require(v)
		v_2.__index = v_2
		if not var9 then
			var9 = v_2
		else
			var9 = setmetatable(v_2, var9)
			var9 = v_2
		end
	end
end
return setmetatable(module, var9)

Script name: CommonVariables
  - Script: 


return {
	Directions = {
		Up = Vector3.new(0, 1, 0);
		Down = Vector3.new(0, -1, 0);
		Forward = Vector3.new(1, 0, 0);
		Back = Vector3.new(-1, 0, 0);
		Left = Vector3.new(0, 0, 1);
		Right = Vector3.new(0, 0, -1);
	};
	PreferredId = {
		OakTreeE = "Oak Tree";
		OakTreeD = "Oak Tree";
		OakTreeC = "Oak Tree";
		OakTreeB = "Oak Tree";
		OakTreeA = "Oak Tree";
		MahoganyTreeB = "Mahogany Tree";
		MahoganyTreeA = "Mahogany Tree";
		AshTreeB = "Ash Tree";
		AshTreeA = "Ash Tree";
		CherryTreeB = "Cherry Tree";
		CherryTreeA = "Cherry Tree";
		DarkHollowTreeE = "Dark Hollow Tree";
		DarkHollowTreeD = "Dark Hollow Tree";
		DarkHollowTreeC = "Dark Hollow Tree";
		DarkHollowTreeB = "Dark Hollow Tree";
		DarkHollowTreeA = "Dark Hollow Tree";
		WebTreeC = "Web Wood Tree";
		WebTreeB = "Web Wood Tree";
		WebTreeA = "Web Wood Tree";
	};
	Badges = {725497835714812, 4254753589823055, 4246293575429864, 3379157258755019, 1291643517476504, 2045076234781931, 4460677254887057, 89488805301833, 2842197254378018, 1553423802563029, 4205149178611816, 2532931131676682, 3552037880169685, 2184198202663641, 1437872626639825, 231119644614158, 4139755977933519, 229625477066452, 1642478039352243, 2070520117153328, 3058954510847229, 1231964068369981, 3170936748963907, 4481010433767182, 2588229707231261, 107461536650824, 2273905913694336, 586162765289105, 82114763758870, 4448519138604339, 1695156608904630, 1256138218552038, 3740527418650051, 1501823280676268, 238001175359110, 818578563135996, 2369181975052906, 3525405320966087, 3825050943307425, 3841208665170085, 2549792420814050, 4010316642131092, 3355874897735542, 4178549153941061, 2511301835509779, 11555724866813};
	DefaultIsland = {"0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,73|!  A 6 7 1 4 0 , S t o n e   B l o c k 1 , 3 5 8!)!+!-!/!1!3!5 D i r t!5!*!,!.!0!2 k 2!6 5 6 , G r a s s 5!M 7 , O a k   L e a v e s!L 1!& 0 2 7!!", "0,162|!  A 1 4 1 3 0 , S t o n e   B l o c k 1 , 3 5 7!)!+!-!/!1!3 5 , D i r t!5!7 3!:!,!.!0!2!4!A!C t 2!I!<!L!3!5!B!D!H!G , G r a s s 8!6 5 6!S!K!> k 4!d 9 , O a k   L e a v e s!5 1 2 7 4 3!H!*!J!=!M!Z!e!g#$!?!d!k#!!T!i!W!P!5#-!h!M!@!X!E!d!R#7!R#3#) k!f#7!F 5!5!^!`!b!O!D#D!_!a#B!@#=!U k!H#A#(#P#B!9!o!q!s!u!w#2!;#4!V!6 6 7 1 5!!", "0,138|!  A 9 0 3 5 8 , S t o n e   B l o c k 3 ,!& 6!)!+!-!/!1!3 1!6!9!,!.!0!2 k 2!6 5!5!*!B!<!E 7 , D i r t!?!&!?!Q!S!G!K!;!D!3!O!X!T!H 0!P!R t!G!?![!C!=!F ,!i!:!k!E!?!o!L!^!m!a!U 4 9 , G r a s s!{!a!G!}#  s!U 5!d#'#!   W e e d!? 4!A!]!l!s!e!Y#6!q!>!H!8!j!M!3!5!&!{#A!v!? 8!$ 0 4!!", "0,279|!  A 3 7 3 4 9 , S t o n e   B l o c k 2 , 3 5 7!)!+!-!/!1!3 5!6 5 4!:!,!.!0!2 k 1 ,!@!*!E!=!H!J!7!J D i r t!J!M!<!G!3 8 ,!T!V!Q 5 0!_!U!W ,!9!Y!F!>!4!e!a!6 2 6!D!Z!l!5 2!d!` t!5!^!j!O!3!S!f!Q 2!L!;!k!H!C 1!( G r a s s#!!o!5#-#/ s!r#2!z!p!C C o b b l e s#'!J O a k   L e a v#B!J 2#4#.#0 3 ,!C#F#H#J#L#N!s#(#  ,#5#S!A!(!}![!I , 1!q!7#T#e!l!b!|#'!~ k#T!7#&!N#f!9!7!5#m!P!h#]#r!b!d#|!3!5!i#q#f#$#v!t!H!v!5!y!X$)#n ,#p#w$4$1!p#{$3!H#8!(!y!5#d$<#_$@$:$ #f!^ 1!r#a#1!n!g!@$L#T$0!f#Q#6#$!J#=#?#A#C!E$U#0$;$7#}$L!J#+#`#R#7!6$g#6!C 3 2#T#W#I#K#M$M$Y#@#B#'!5#i 4 4 7!!", "0,233|!  A 1 1 3 5 8 0 , S t o n e   B l o c k 1 ,!& 8!*!,!.!0!2!4 3!7 5 6!:!-!/!1!3 k 5!A!@!+!E!=!H 9!A!)!M!<!G!4 2 ,!9!T!F!>!5!7 2 4!D!U!^!@ 2!6![!O!W ,!Q!i!V!_ 3 2!L!;!]!H!J 2!) D i r t!h!t!j!_!m# !o!6!z!|!6 3 1#$!N!o!J!~#.!e , 1 7 ,#( t!@ 1!S#%!^!X#8#*#, , C o b b l e s!t#1!d!H!@#8!X!n!^!b 1!J G r a s s#'!{ t!X!C#W#Y#[ ,!J#@ ,#b#Z#A!9#D#F#H#J!E!@#i s!C#5#h#X#Z!9!6#s!C!q!) O a k   L e a v#I!6#m#G#I!t!X$!$$$&$($*#4#w#c   W e e d#*!X#s$9$;$=!`$0$#$%$'$) s#` 4 7 3 9!!", "0,217|!  A 6 0 5 7 0 , S t o n e   B l o c k 1 , 3 5 8!)!+!-!/!1!3 3!6!&!:!,!.!0!2 k 4!A!I!*!D!=!G!9!7!(!L!<!F!? , 5!C!T!> k!@ 3 2!@!S!E![!@!`!Y!c!G!5 9!g!N!3!5!_ 2!l!U k 7 , 1!k!b!m k!q!x!;!h!n!6 2!5!y!s!q!K!~!z!@ 1!u D i r t#%#*!s!5 1!R#4![!q 3!w!r!d ,#)!M#5!v#>!i!v 6 ,#/#1!q 1#3#B#:#I#0#2!6#-#E!V#H#&![!I 1!@ G r a s s!5#J t#L!@#e!5#_#a#c#T!u#Y!G#^#`#b#X#9!G#L!X#k#b 1#H#<!k C o b b l e s!~!@ O a k   L e a v$'!o!B$+$-$/$1$3!v#- 3 9 1!!", "0,376|!  A 7 9 1 9 , S t o n e   B l o c k 2 , 3 5 7!(!*!,!.!0!2 5!5 5!?!)!+!-!/!1 k 6!@!4!C!;!F!2 1 0!5 2 4!9!D!<!G 3 , 2!K!:!E!=!3 ,!I!L!_!X!R!]!V!N!H!Z!Q!d!W!O ,!P!U!M!` 1!R!v!n!j!' 1!8!y!`!4!r!~!G!4 3!&!s!e!2!4!}!^!o!a 1!? D i r t!x#.!j!v 1#7!i#  ,#3#5!v#'#-#=!G#:#)#/!v 8#H#9!q!T#@ t!Y 1!h!t#F#?#4 t#&#1#L#>#O#X!v!T#$!2#R!v G r a s s!4#P#R!Y#P#f#h#j#B 1!c#8!`!T C o b b l e s!^!4#g#i s!Y#z#|#~$!!D#q$&#<#U#+!q!Y$%#s!8#'#K$)#}$ $#!q 2 5 6 7$0#* k!Y!6#v#E!>!@#b#w!G!T$C#/#&$?#]!G!?![$T!2!' 3 2!Y#c k!8 2!m$M$2$H$1$E!g$X k!v!B$d#0#D$g#!$c$I!a#'!'$_!4$f$D#R$z$Q!5#W#A!b$j#Z$w$n!v%'$t#:$m%+ ,#2#` ,#K$_#t$p$D#:$s$g#:#_%#%4%/%!#6%2$j!v#p!5#[$x!q!Q$:$+!^$P!j#!%D#X!T%<%A!'%E#'%-$g!I%K$<$- ,$5#k ,%]$,!,$.#s%C%`#r s%N!`!Y#T%7%$%>%a 1!T$$%k$F!A%j$&!4 4 0 7 6 4!!", "0,270|!  A 8 4 8 6 8 , S t o n e   B l o c k 3 , 3 5 6!)!+!-!/!1!3 5!6 2 7!:!,!.!0!2!4 , 2!@!*!E!=!H!9 3!K!D!<!G!3 1!6!T!F!>!I 2 2!Z!O!3!(!R!`!M!U!]!` 4!a!V!I 1!(!g![!H!5!9!q!b!I!R 0!l!i ,!C!v!m!` 1!u!;!r!3##!z# !]!X!y!{!H!`#%!N!m!5#$#/#(!J , D i r t!5!L#&!w!` 3!o#7 k!` 9#F##!k#+!H!X!k#;#=!5!~#A!m#-#6#M!3#5#*#U#, , 1!5#Q t!X#Y k#O#:#<#>!}#i#=#C 1#@#3#_ 1!X C o b b l e s#&#e#^!s#9#f!X!C#c#~#r#N#m t#C$+#S$+!X G r a s s#W#q!h!P ,#v#x#z#|!E$1$3$5!`$<#y#{#} ,$2$4 s!f$ !W$;#w$F$?!-$A$K$($9$O$W#'!I$8$[!5$J$5#t$0!Y$a$6!6 1!C$E$>$H 3!C$f!k 9 3 4#a!!", "0,441|!  A 3 2 2 1 8 , S t o n e   B l o c k 3 , 3 3 0!)!+!-!/!1!3 1 , 2 5!:!,!.!0!2 k!C!$ 7!D!<!G!3!C 2!5!*!E!=!H 6!6!B!M!F!> k!@!C!T!N!^!@!%![!V!3!L!$!S!;!]!H!`!g!O!4 , 1 9!q!^!5 4!w!H!z!$!9!b!n!? ,!(#!!h k 2!t!L#'!r#*!v#-!d!6!u!{!3!5!X#1!|!t!a!m#(#*!5 D i r t!@#8#=!r!@#A#C!@ 3!'#5!_!t!@#9#$ 1!z#S#P!C#J#D ,#,#G#2#M#^!U#.#Q#O!z 1# #_!H#*#Y#B#[#b!c!o ,#Z#L 1#F#c#2 1#*#W!C#0#j#$#Z#*!z#t#%#s#n!@ G r a s s#u#<#x!W , C o b b l e s!m$*$,$.#&$ #) ,#~$2#6 ,$+$- s!v!C$H$.#u!L$5$7$9$;!E#?$L$> s!C#h 7!( O a k   L e a v$:$V!L$_$a$c$e$:!5 3 5$i$`$b$d$f s#*#z 3 8!7#O#L#M#O#*!Z#W$x$}!Y#p## k!z%$$A!} 2#w#q!3#?%!!A#{$A!X!k#O!y%;!A#i$E k!v!~%5%)#(!5#N%%$'#W#u$D%2!s%1%*%G%E#d%M%*#? 1%S!^$x#R$A!@ 1$1%N$x%?%N#I$)#3%Y#k#e%I 1#@#n%G%f#K%h%'#z#f!t%d%*$=$I%q t%[$(%r$M$/#3%P#(!X$Q$8$:$<$G$X$@%@%_%7&0&-%{!9%n%r#M!(&)$S!m!5$W$I   W e e d!e!v&#!z 7%X ,$j$t$m&$$p!v&M$l$v$o 5!X&S$u$:!J 5!C&Y&O#g 4 6 6 3!!", "0,294|!  A 1 0 9 8 5 9 , S t o n e   B l o c k 3 , 2 7!*!,!.!0!2!4 2 , 3!8!:!-!/!1!3 k 5!7 4!D!<!G!4!J!B!J!+!E!=!H!9 2!@!T!N!> k 8!A!Y!M!F!^!@!S!;!d!H!6 2 0!c!V!? ,!g!U!O!5!A 1!)![!i!4!6!6!y!o k 1!7!n!t!6 1!`!~#& , 6#%!^!|#(#.!H##!x!h# !@ 1!9#*!e ,#)#6#+ 3#9#2!p#5!s#< 1#- D i r t!@!)#J#L!Z#?!^###A#:#S#3 ,!$#C!u 1!L#;#Y G r a s s###P t#4 ,#c#e#g ,#i!@#V#]#- C o b b l e s!h###m#f!9#v#x#z#|!E## 1!J$  s!`!6#q!v!)$$#y#{!h!L 2#-$,   W e e d##$+#d#f!Q 2## O a k   L e a v#{#U#-$G$I W o o$?!A!( ,$R$;$U$W 3 5!9$[$K$M#{!@$[$T$V$F$H$J$L$N s#r 5!J$c$n$f$Z$l$i$W$t$e$p$X$s$l$d$o!L$`$b%!$u$} 6 6 9 5 4!!", "0,277|!  A 5 7 5 6 9 , S t o n e   B l o c k 3 , 3!&!)!+!-!/!1!3 6 , 2 5!9!,!.!0!2 k 4!6 2!5!*!D!<!G!( 2 2!C!;!F!3!S!S!M!U!=!H!J 1!T!E!]!Q!`!Z!b!G!` D i r t!e!:!g!3!`!L!o!O!3!I 3 1!(!f!u k!S!?!{!V!}!@!i!k!m , G r a s s!`!I!j!l!`!n!N##!S!x!z!t#6 , 7!a!|!5 1#=#1 t!Y#:!]!`!B#C#E#5!]!5!x#=#!#G ,#4![!h ,!B#Q!G!I#A#)#+#-!S#C!`!?#C!I#Y!q!6 1 8#>##!B#*#,#.#l!]!S#o#-#T!p!^#]#u s!?#&!l#f#F#V#8 , C o b b l e s!o!? 2#k#g k!`#{!?$%$'$)$+$-!D!5 O a k   L e a v$,!r#t#_ s   W e e d$G!I$8$*$,!o!`$>$@$B$D$F!6 9!B$W$A$C$E s!w 5$_$?$a$Z s!B!7$g$X$b$,$l!$ ,$`$Y$c#3!y 6 0 4!!", "0,315|!  A 5 6 3 7 , S t o n e   B l o c k!' 2 5!(!*!,!.!0!2 4 , 3 2!=!)!+!-!/!1!3 ,!@!7!C!:!F 6!> 2 2!J!9!E!2!Q!A!8!D!; k!Q 2 3 , D i r t 1!R!Y!F!_!a!c!_!?!Q!B!S!Z!V!f!L!U!H!Q!j t!Q!i!b t!_!o!g!u 3 1 9!s!T![ ,!'# !t k!_ 1!' G r a s s!w!|!z!`!|!e#2#4 s!e!x!e#,#(!z 2 0#'!Z!=#=#5!n!X#-#<#3#5#B#N#D!H#G#K s!6#A ,#@#;#H!F!e!?!e C o b b l e s!X!6 2 8#`!2!_#X!l!P ,#e#g#i#k!C!_ O a k   L e a v#j#b#G#}$ $#$%$'!O!6#w#h#j!X!Q$*$!$$$&#?!> 9!6$6$,$9#b 5#o$>$8#j!l$B ,$D$-$: 1!5 9 6#M!K#(!6 3 5!W$R!Z!N!5#p k!=!?$W!p!F!r#C!Z!e!I!x!'!m$]!l$]!]#P#>#7!c!Q#X#^!c#J#Q$:$k$e!h ,#s!H$x$q$]$p#5$_!^#v#f$2#z!,#m!'$J$@$l!O!=$1#y!X!e%1#j!z$)#~$7$K!V 4 4$B!!", "0,110|!  A 8 3 3 0 9 , S t o n e   B l o c k 2 , 3 5 7!)!+!-!/!1!3 4 , 2 6 , D i r t 3!6!B!:!,!.!0!2 k!C 2!I G r a s s 8!J!I C o b b l e s!; e 1!L!<!O!?!A!9 O a k   L e a v!c!g!*!M!=!P!5 3!K!^!`!b!d!M!g!n!p!r!t!v , 9 7 5 0 0!!", "0,52|!  A 3 1 0 1 9 , S t o n e   B l o c k 1 , 3 5!(!*!,!.!0!2 k 2!6 5 8 , O a k   L e a v e s!@ 1 5 0!Q 9!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!", "0,9|!  A 1 8 2 2 5 0!!"};
	MiddleIsland = {"0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!", "0,8|!  A 3 2 7 6 8!!"};
}

Script name: CommonSettings
  - Script: 


local module = {}
local UserInputService = game:GetService("UserInputService")
module.DefultSwingAnimationId = "rbxassetid://16923391391"
module.DefultHoldingAnimationId = "rbxassetid://16913220551"
module.PlacementRange = 15
module.TicksPerSecond = 60
module.MaxCraftingYield = 1000
module.MaxEconomyYield = 1000
module.AttackRadius = 6
module.IslandMaxSize = {
	X = 360;
	Y = 360;
	Z = 360;
}
module.Version = "9.1.0"
module.DailyRewards = {{
	itemName = "Coins";
	index = 1;
	itemType = "Coins";
	amount = 50;
}, {
	itemName = "Coin Boost Potion I";
	index = 2;
	itemType = "Potion";
	amount = 1;
}, {
	itemName = "Carrot Seed";
	index = 3;
	itemType = "Block";
	subCategory = "Crops";
	amount = 5;
}, {
	itemName = "Spring";
	index = 4;
	itemType = "Item";
	amount = 1;
}, {
	itemName = "Mystic Iron Fragment";
	index = 5;
	itemType = "Item";
	amount = 2;
}, {
	itemName = "Hay Bale";
	index = 6;
	itemType = "Coins";
	amount = 1;
}, {
	itemName = "XP Boost Potion I";
	index = 7;
	itemType = "Potion";
	amount = 1;
}, {
	itemName = "Coins";
	index = 8;
	itemType = "Coins";
	amount = 500;
}, {
	itemName = "Mystic Gold Fragment";
	index = 9;
	itemType = "Item";
	amount = 1;
}, {
	itemName = "Flame";
	index = 10;
	itemType = "Item";
	amount = 4;
}, {
	itemName = "Cloth";
	index = 11;
	itemType = "Item";
	amount = 8;
}, {
	itemName = "Cog";
	index = 12;
	itemType = "Item";
	amount = 2;
}, {
	itemName = "Rainbow Poppy Flower";
	index = 13;
	itemType = "Block";
	subCategory = "Blocks";
	thirdCategory = "Flowers";
	amount = 1;
}, {
	itemName = "Rage Essence";
	index = 14;
	itemType = "Item";
	amount = 1;
}, {
	itemName = "Coins";
	index = 15;
	itemType = "Coins";
	amount = 500;
}, {
	itemName = "Mystic Diamond Fragment";
	index = 16;
	itemType = "Item";
	amount = 1;
}, {
	itemName = "Healing Potion I";
	index = 17;
	itemType = "Potion";
	amount = 1;
}, {
	itemName = "White Mushroom Seed";
	index = 18;
	itemType = "Block";
	subCategory = "Crops";
	amount = 5;
}, {
	itemName = "Skeleton Key";
	index = 19;
	itemType = "Item";
	amount = 2;
}, {
	itemName = "Void Shard";
	index = 20;
	itemType = "Item";
	amount = 1;
}, {
	itemName = "Treasure Chest";
	index = 21;
	itemType = "Tool";
	subCategory = "Misc";
	amount = 1;
}, {
	itemName = "Coins";
	index = 22;
	itemType = "Coins";
	amount = 1000;
}, {
	itemName = "XP Boost Potion I";
	index = 23;
	itemType = "Potion";
	amount = 1;
}, {
	itemName = "Watermelon Seed";
	index = 24;
	itemType = "Block";
	subCategory = "Crops";
	amount = 5;
}, {
	itemName = "Arachnella Fang";
	index = 25;
	itemType = "Item";
	amount = 5;
}, {
	itemName = "Light Source";
	index = 26;
	itemType = "Item";
	amount = 4;
}, {
	itemName = "Watermelon Block";
	index = 27;
	itemType = "Block";
	subCategory = "Blocks";
	amount = 1;
}, {
	itemName = "Twilight Essence";
	index = 28;
	itemType = "Item";
	amount = 1;
}, {
	itemName = "Luck Potion I";
	index = 29;
	itemType = "Potion";
	amount = 1;
}, {
	itemName = "Moola's Scythe";
	index = 30;
	itemType = "Tool";
	subCategory = "Scythe";
	amount = 1;
}}
module.CollectionRewards = {
	Tools = {{
		collectionName = "Axe Collection I";
		collectionItems = {{
			itemName = "Wood Axe";
			itemType = "Tool";
		}, {
			itemName = "Stone Axe";
			itemType = "Tool";
		}, {
			itemName = "Copper Axe";
			itemType = "Tool";
		}, {
			itemName = "Iron Axe";
			itemType = "Tool";
		}, {
			itemName = "Cobalt Axe";
			itemType = "Tool";
		}, {
			itemName = "Gold Axe";
			itemType = "Tool";
		}, {
			itemName = "Diamond Axe";
			itemType = "Tool";
		}};
		collectionRewards = {{
			itemName = "Pixel Axe";
			itemType = "Tool";
			amount = 1;
		}};
	}, {
		collectionName = "Pickaxe Collection I";
		collectionItems = {{
			itemName = "Wood Pickaxe";
			itemType = "Tool";
		}, {
			itemName = "Stone Pickaxe";
			itemType = "Tool";
		}, {
			itemName = "Copper Pickaxe";
			itemType = "Tool";
		}, {
			itemName = "Iron Pickaxe";
			itemType = "Tool";
		}, {
			itemName = "Cobalt Pickaxe";
			itemType = "Tool";
		}, {
			itemName = "Gold Pickaxe";
			itemType = "Tool";
		}, {
			itemName = "Diamond Pickaxe";
			itemType = "Tool";
		}};
		collectionRewards = {{
			itemName = "Pixel Pickaxe";
			itemType = "Tool";
			amount = 1;
		}};
	}, {
		collectionName = "Sword Collection I";
		collectionItems = {{
			itemName = "Wood Sword";
			itemType = "Tool";
		}, {
			itemName = "Stone Sword";
			itemType = "Tool";
		}, {
			itemName = "Copper Sword";
			itemType = "Tool";
		}, {
			itemName = "Iron Sword";
			itemType = "Tool";
		}, {
			itemName = "Cobalt Sword";
			itemType = "Tool";
		}, {
			itemName = "Gold Sword";
			itemType = "Tool";
		}, {
			itemName = "Diamond Sword";
			itemType = "Tool";
		}};
		collectionRewards = {{
			itemName = "Pixel Sword";
			itemType = "Tool";
			amount = 1;
		}};
	}, {
		collectionName = "Sword Collection II";
		collectionItems = {{
			itemName = "Clockwork Sword";
			itemType = "Tool";
		}, {
			itemName = "Inferno Sword";
			itemType = "Tool";
		}, {
			itemName = "Slime Sword";
			itemType = "Tool";
		}, {
			itemName = "Bone Sword";
			itemType = "Tool";
		}, {
			itemName = "Twilight Sword";
			itemType = "Tool";
		}, {
			itemName = "Jellyblade";
			itemType = "Tool";
		}};
		collectionRewards = {{
			itemName = "Enchantment Rune";
			itemType = "Item";
			amount = 10;
		}};
	}};
	Mobs = {{
		collectionName = "Mob Collection I";
		collectionItems = {{
			itemName = "Rattles Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Green Slime Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Gizmo Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Slimegore Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Pink Slime Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}};
		collectionRewards = {{
			itemName = "Giant Ancient Slime Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
			amount = 1;
		}};
	}, {
		collectionName = "Mob Collection II";
		collectionItems = {{
			itemName = "Muncher Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Blue Flamelet Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Flamelet Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "GrimThorn Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Darkfang Spider Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}, {
			itemName = "Arachnella Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
		}};
		collectionRewards = {{
			itemName = "Giant GrimThorn Mob Block";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Mob";
			amount = 1;
		}};
	}};
	Ores = {{
		collectionName = "Metal Collection I";
		collectionItems = {{
			itemName = "Copper";
			itemType = "Item";
		}, {
			itemName = "Iron";
			itemType = "Item";
		}, {
			itemName = "Cobalt";
			itemType = "Item";
		}, {
			itemName = "Silver";
			itemType = "Item";
		}, {
			itemName = "Gold";
			itemType = "Item";
		}, {
			itemName = "Rhodium";
			itemType = "Item";
		}, {
			itemName = "Mystic Iron Fragment";
			itemType = "Item";
		}, {
			itemName = "Mystic Gold Fragment";
			itemType = "Item";
		}};
		collectionRewards = {{
			itemName = "Enchantment Rune";
			itemType = "Item";
			amount = 1;
		}};
	}, {
		collectionName = "Metal Collection II";
		collectionItems = {{
			itemName = "Copper Ingot";
			itemType = "Item";
		}, {
			itemName = "Iron Ingot";
			itemType = "Item";
		}, {
			itemName = "Cobalt Ingot";
			itemType = "Item";
		}, {
			itemName = "Silver Ingot";
			itemType = "Item";
		}, {
			itemName = "Gold Ingot";
			itemType = "Item";
		}, {
			itemName = "Rhodium Ingot";
			itemType = "Item";
		}};
		collectionRewards = {{
			itemName = "Amplifier";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Metal Collection III";
		collectionItems = {{
			itemName = "Copper Block";
			itemType = "Block";
		}, {
			itemName = "Iron Block";
			itemType = "Block";
		}, {
			itemName = "Cobalt Block";
			itemType = "Block";
		}, {
			itemName = "Silver Block";
			itemType = "Block";
		}, {
			itemName = "Gold Block";
			itemType = "Block";
		}, {
			itemName = "Rhodium Block";
			itemType = "Block";
		}};
		collectionRewards = {{
			itemName = "Amplifier";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Mining Collection I";
		collectionItems = {{
			itemName = "Stone";
			itemType = "Item";
		}, {
			itemName = "Coal";
			itemType = "Item";
		}, {
			itemName = "Clay";
			itemType = "Item";
		}, {
			itemName = "Basalt";
			itemType = "Item";
		}, {
			itemName = "Marble";
			itemType = "Item";
		}, {
			itemName = "Granite";
			itemType = "Item";
		}, {
			itemName = "Limestone";
			itemType = "Item";
		}, {
			itemName = "Diamond";
			itemType = "Item";
		}, {
			itemName = "Mystic Diamond Fragment";
			itemType = "Item";
		}};
		collectionRewards = {{
			itemName = "Enchantment Rune";
			itemType = "Item";
			amount = 1;
		}};
	}, {
		collectionName = "Mining Collection II";
		collectionItems = {{
			itemName = "Stone Block";
			itemType = "Block";
		}, {
			itemName = "Coal Block";
			itemType = "Block";
		}, {
			itemName = "Clay Block";
			itemType = "Block";
		}, {
			itemName = "Basalt Block";
			itemType = "Block";
		}, {
			itemName = "Marble Block";
			itemType = "Block";
		}, {
			itemName = "Granite Block";
			itemType = "Block";
		}, {
			itemName = "Limestone Block";
			itemType = "Block";
		}, {
			itemName = "Diamond Block";
			itemType = "Block";
		}};
		collectionRewards = {{
			itemName = "Accelerator";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}};
	Blocks = {{
		collectionName = "Neon Collection I";
		collectionItems = {{
			itemName = "Neon White";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Black";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Yellow";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Cyan";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Red";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Purple";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Green";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Lime";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Orange";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Blue";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Light Blue";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}, {
			itemName = "Neon Pink";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Neon";
		}};
		collectionRewards = {{
			itemName = "Coins";
			itemType = "Coins";
			amount = 10000;
		}};
	}, {
		collectionName = "Wood Collection I";
		collectionItems = {{
			itemName = "Oak Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Mahogany Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Cherry Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Ash Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Dark Hollow Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Web Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Oak Leaves";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Leaves";
		}, {
			itemName = "Mahogany Leaves";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Leaves";
		}, {
			itemName = "Cherry Leaves";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Leaves";
		}, {
			itemName = "Ash Leaves";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Leaves";
		}, {
			itemName = "Dark Hollow Leaves";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Leaves";
		}, {
			itemName = "Web Leaves";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Leaves";
		}};
		collectionRewards = {{
			itemName = "Accelerator";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Wood Collection II";
		collectionItems = {{
			itemName = "Petrified Oak Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Petrified Mahogany Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Petrified Cherry Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Petrified Ash Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Petrified Dark Hollow Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Petrified Web Wood";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Wood";
		}, {
			itemName = "Acorn";
			itemType = "Item";
		}, {
			itemName = "Griffin Feather";
			itemType = "Item";
		}};
		collectionRewards = {{
			itemName = "Pulverizer";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Workbench Collection I";
		collectionItems = {{
			itemName = "Workbench";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}, {
			itemName = "Crafting Bench";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}, {
			itemName = "Sawmill";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}, {
			itemName = "Cooking Station";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}, {
			itemName = "Cauldron";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}, {
			itemName = "Forge";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}, {
			itemName = "Furnace";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}, {
			itemName = "Campfire";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Furniture";
		}};
		collectionRewards = {{
			itemName = "Coins";
			itemType = "Coins";
			amount = 10000;
		}};
	}};
	Foods = {{
		collectionName = "Food Collection I";
		collectionItems = {{
			itemName = "Fries";
			itemType = "Food";
		}, {
			itemName = "Baked Potato";
			itemType = "Food";
		}, {
			itemName = "Popcorn";
			itemType = "Food";
		}, {
			itemName = "Bread";
			itemType = "Food";
		}, {
			itemName = "Pumpkin Bread";
			itemType = "Food";
		}, {
			itemName = "Mashed Potatoes";
			itemType = "Food";
		}, {
			itemName = "Frozen Fries";
			itemType = "Food";
		}, {
			itemName = "Cornbread";
			itemType = "Food";
		}, {
			itemName = "Dough";
			itemType = "Food";
		}, {
			itemName = "Corn on the Cob";
			itemType = "Food";
		}};
		collectionRewards = {{
			itemName = "Plentifier Unit";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Food Collection II";
		collectionItems = {{
			itemName = "Mushroom Risotto";
			itemType = "Food";
		}, {
			itemName = "Strawberry Pie";
			itemType = "Food";
		}, {
			itemName = "Shrimp Scampi";
			itemType = "Food";
		}, {
			itemName = "Spaghetti";
			itemType = "Food";
		}, {
			itemName = "Pumpkin Pie";
			itemType = "Food";
		}, {
			itemName = "Watermelon Slices";
			itemType = "Food";
		}, {
			itemName = "Grilled Tilapia";
			itemType = "Food";
		}, {
			itemName = "Shark Steak";
			itemType = "Food";
		}, {
			itemName = "Candy Cane";
			itemType = "Food";
		}};
		collectionRewards = {{
			itemName = "Plentifier Unit";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Seed Collection I";
		collectionItems = {{
			itemName = "Wheat Seed";
			itemType = "Block";
		}, {
			itemName = "Carrot Seed";
			itemType = "Block";
		}, {
			itemName = "Corn Seed";
			itemType = "Block";
		}, {
			itemName = "Tomato Seed";
			itemType = "Block";
		}, {
			itemName = "Strawberry Seed";
			itemType = "Block";
		}, {
			itemName = "Red Potato Seed";
			itemType = "Block";
		}, {
			itemName = "White Mushroom Seed";
			itemType = "Block";
		}, {
			itemName = "Watermelon Seed";
			itemType = "Block";
		}, {
			itemName = "Pumpkin Seed";
			itemType = "Block";
		}, {
			itemName = "Nightshade Berry Bush Seed";
			itemType = "Block";
		}};
		collectionRewards = {{
			itemName = "Quickstrike";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}};
	Fishing = {{
		collectionName = "Fish Collection I";
		collectionItems = {{
			itemName = "Jingle Shell";
			itemType = "Blocks";
		}, {
			itemName = "Red Coral";
			itemType = "Blocks";
		}, {
			itemName = "Blue Coral";
			itemType = "Blocks";
		}, {
			itemName = "Orange Coral";
			itemType = "Blocks";
		}, {
			itemName = "Nautilus Shell";
			itemType = "Blocks";
		}, {
			itemName = "Starfish Shell";
			itemType = "Blocks";
		}, {
			itemName = "Scallop Shell";
			itemType = "Blocks";
		}};
		collectionRewards = {{
			itemName = "Tiger Shark";
			itemType = "Food";
			subCategory = "Fish";
			amount = 3;
		}};
	}, {
		collectionName = "Fish Collection II";
		collectionItems = {{
			itemName = "Seaweed";
			itemType = "Blocks";
		}, {
			itemName = "Tiger Shark";
			itemType = "Blocks";
		}, {
			itemName = "King Salmon";
			itemType = "Blocks";
		}, {
			itemName = "Carp";
			itemType = "Blocks";
		}, {
			itemName = "Marlin";
			itemType = "Blocks";
		}, {
			itemName = "Shrimp";
			itemType = "Blocks";
		}, {
			itemName = "Tilapia";
			itemType = "Blocks";
		}};
		collectionRewards = {{
			itemName = "Treasure Chest";
			itemType = "Tool";
			subCategory = "Misc";
			amount = 3;
		}};
	}};
	Underlings = {{
		collectionName = "Farm Underling Collection I";
		collectionItems = {{
			itemName = "Wheat Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Carrot Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Tomato Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Corn Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Strawberry Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Red Potato Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "White Mushroom Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Watermelon Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Pumpkin Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}};
		collectionRewards = {{
			itemName = "Book of Wisdom";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Forestry Underling Collection I";
		collectionItems = {{
			itemName = "Oak Wood Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Mahogany Wood Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Cherry Wood Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Ash Wood Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Web Wood Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Dark Hollow Wood Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}};
		collectionRewards = {{
			itemName = "Book of Wisdom";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Mining Underling Collection I";
		collectionItems = {{
			itemName = "Stone Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Coal Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Clay Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Basalt Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Granite Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Marble Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Limestone Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Copper Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Iron Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Cobalt Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Silver Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}, {
			itemName = "Gold Underling Anchor";
			itemType = "Block";
			subCategory = "Underling Anchors";
		}};
		collectionRewards = {{
			itemName = "Book of Wisdom";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}};
	Items = {{
		collectionName = "Essence Collection I";
		collectionItems = {{
			itemName = "Necrotic Essence";
			itemType = "Item";
		}, {
			itemName = "Elastic Essence";
			itemType = "Item";
		}, {
			itemName = "Twilight Essence";
			itemType = "Item";
		}, {
			itemName = "Rage Essence";
			itemType = "Item";
		}, {
			itemName = "Inferno Essence";
			itemType = "Item";
		}};
		collectionRewards = {{
			itemName = "Pulverizer";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}, {
		collectionName = "Slime Collection I";
		collectionItems = {{
			itemName = "Slime Block";
			itemType = "Block";
			subCategory = "Blocks";
		}, {
			itemName = "Pink Slime Block";
			itemType = "Block";
			subCategory = "Blocks";
		}, {
			itemName = "Pink Goo";
			itemType = "Block";
			subCategory = "Blocks";
		}, {
			itemName = "Pink Slime Core";
			itemType = "Block";
			subCategory = "Blocks";
		}, {
			itemName = "Green Goo";
			itemType = "Block";
			subCategory = "Blocks";
		}, {
			itemName = "Ancient Slime Core";
			itemType = "Block";
			subCategory = "Blocks";
		}, {
			itemName = "Green Slime Core";
			itemType = "Block";
			subCategory = "Blocks";
		}, {
			itemName = "Pink Sapphire";
			itemType = "Block";
			subCategory = "Blocks";
		}};
		collectionRewards = {{
			itemName = "Slime Trophy";
			itemType = "Block";
			subCategory = "Blocks";
			thirdCategory = "Trophies";
			amount = 1;
		}};
	}};
	Potions = {{
		collectionName = "Potion Collection I";
		collectionItems = {{
			itemName = "Coin Boost Potion I";
			itemType = "Potion";
		}, {
			itemName = "Healing Potion I";
			itemType = "Potion";
		}, {
			itemName = "Jump Power Potion I";
			itemType = "Potion";
		}, {
			itemName = "Luck Potion I";
			itemType = "Potion";
		}, {
			itemName = "Damage Boost Potion I";
			itemType = "Potion";
		}, {
			itemName = "XP Boost Potion I";
			itemType = "Potion";
		}, {
			itemName = "Mining Potion I";
			itemType = "Potion";
		}};
		collectionRewards = {{
			itemName = "Coin Boost Potion III";
			itemType = "Potion";
			amount = 1;
		}};
	}, {
		collectionName = "Potion Collection II";
		collectionItems = {{
			itemName = "Coin Boost Potion II";
			itemType = "Potion";
		}, {
			itemName = "Healing Potion II";
			itemType = "Potion";
		}, {
			itemName = "Jump Power Potion II";
			itemType = "Potion";
		}, {
			itemName = "Luck Potion II";
			itemType = "Potion";
		}, {
			itemName = "Damage Boost Potion II";
			itemType = "Potion";
		}, {
			itemName = "XP Boost Potion II";
			itemType = "Potion";
		}, {
			itemName = "Mining Potion II";
			itemType = "Potion";
		}};
		collectionRewards = {{
			itemName = "Luck Potion III";
			itemType = "Potion";
			amount = 1;
		}};
	}, {
		collectionName = "Potion Collection III";
		collectionItems = {{
			itemName = "Coin Boost Potion III";
			itemType = "Potion";
		}, {
			itemName = "Healing Potion III";
			itemType = "Potion";
		}, {
			itemName = "Jump Power Potion III";
			itemType = "Potion";
		}, {
			itemName = "Luck Potion III";
			itemType = "Potion";
		}, {
			itemName = "Damage Boost Potion III";
			itemType = "Potion";
		}, {
			itemName = "XP Boost Potion III";
			itemType = "Potion";
		}, {
			itemName = "Mining Potion III";
			itemType = "Potion";
		}};
		collectionRewards = {{
			itemName = "Haste Boots";
			itemType = "Item";
			subCategory = "Underling";
			thirdCategory = "Functional";
			amount = 1;
		}};
	}};
}
module.UnderlingEquippables = {
	Hat = {};
	Hair = {};
	Shirt = {};
	Pants = {};
	Boots = {};
	Aura = {};
	Accelerator = {"Accelerator"};
	Amplifier = {"Amplifier"};
	["Auto Seller"] = {"Auto Seller"};
	["Book of Wisdom"] = {"Book of Wisdom"};
	["Haste Boots"] = {"Haste Boots"};
	["Plentifier Unit"] = {"Plentifier Unit"};
	Pulverizer = {"Pulverizer"};
	Quickstrike = {"Quickstrike"};
}
module.EnchantedBlocks = {"OakTreeA", "OakTreeB", "OakTreeC", "OakTreeD", "OakTreeE", "AshTreeA", "AshTreeB", "CherryTreeA", "CherryTreeB", "MahoganyTreeA", "MahoganyTreeB", "WebTreeA", "WebTreeB", "WebTreeC", "DarkHollowTreeA", "DarkHollowTreeB", "DarkHollowTreeC", "DarkHollowTreeD", "DarkHollowTreeE", "Copper Ore Block", "Iron Ore Block", "Diamond Ore Block", "Gold Ore Block", "Cobalt Ore Block", "Silver Ore Block", "Rhodium Ore Block"}
module.EnchantmentInfo = {
	Mystic = {
		Color = Color3.fromRGB(255, 0, 255);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.005;
	};
	["Pirate's"] = {
		Color = Color3.fromRGB(180, 180, 0);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.0175;
	};
	Instant = {
		Color = Color3.fromRGB(153, 255, 0);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.0175;
	};
	Selective = {
		Color = Color3.fromRGB(0, 255, 179);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.017;
	};
	Burning = {
		Color = Color3.fromRGB(255, 77, 17);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.0175;
	};
	Poisonous = {
		Color = Color3.fromRGB(0, 85, 0);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.0175;
	};
	Looting = {
		Color = Color3.fromRGB(255, 255, 0);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.0175;
	};
	Fortunate = {
		Color = Color3.fromRGB(85, 255, 0);
		Rarity = "Legendary";
		Quality = "Good";
		Weight = 0.0175;
	};
	Quickcatch = {
		Color = Color3.fromRGB(47, 158, 255);
		Rarity = "Epic";
		Quality = "Good";
		Weight = 0.057;
	};
	Lucky = {
		Color = Color3.fromRGB(85, 255, 127);
		Rarity = "Epic";
		Quality = "Good";
		Weight = 0.148;
	};
	Rapid = {
		Color = Color3.fromRGB(255, 0, 127);
		Rarity = "Epic";
		Quality = "Good";
		Weight = 0.057;
	};
	Freezing = {
		Color = Color3.fromRGB(29, 236, 255);
		Rarity = "Epic";
		Quality = "Good";
		Weight = 0.057;
	};
	Giant = {
		Color = Color3.fromRGB(85, 85, 255);
		Rarity = "Epic";
		Quality = "Good";
		Weight = 0.057;
	};
	Sharp = {
		Color = Color3.fromRGB(170, 255, 127);
		Rarity = "Epic";
		Quality = "Good";
		Weight = 0.057;
	};
	Insightful = {
		Color = Color3.fromRGB(0, 0, 255);
		Rarity = "Epic";
		Quality = "Good";
		Weight = 0.057;
	};
	Pointy = {
		Color = Color3.fromRGB(255, 170, 127);
		Rarity = "Rare";
		Quality = "Good";
		Weight = 0.133;
	};
	Pescatarian = {
		Color = Color3.fromRGB(73, 23, 181);
		Rarity = "Rare";
		Quality = "Good";
		Weight = 0.133;
	};
	Light = {
		Color = Color3.fromRGB(255, 190, 229);
		Rarity = "Rare";
		Quality = "Good";
		Weight = 0.133;
	};
	Heavy = {
		Color = Color3.fromRGB(148, 148, 73);
		Rarity = "Uncommon";
		Quality = "Bad";
		Weight = 0.05;
	};
	Dopey = {
		Color = Color3.fromRGB(139, 121, 108);
		Rarity = "Common";
		Quality = "Bad";
		Weight = 0.025;
	};
	Tiny = {
		Color = Color3.fromRGB(118, 129, 100);
		Rarity = "Common";
		Quality = "Bad";
		Weight = 0.025;
	};
	Dull = {
		Color = Color3.fromRGB(186, 160, 152);
		Rarity = "Uncommon";
		Quality = "Bad";
		Weight = 0.05;
	};
	Junker = {
		Color = Color3.fromRGB(181, 128, 104);
		Rarity = "Uncommon";
		Quality = "Bad";
		Weight = 0.05;
	};
	Dredging = {
		Color = Color3.fromRGB(133, 138, 103);
		Rarity = "Uncommon";
		Quality = "Bad";
		Weight = 0.05;
	};
	Lazy = {
		Color = Color3.fromRGB(70, 70, 88);
		Rarity = "Common";
		Quality = "Bad";
		Weight = 0.025;
	};
}
module.ItemEnchantments = {
	Weapon = {
		Burning = "Deals Burning I effect to mobs";
		Poisonous = "Deals Poison I effect to mobs";
		Mystic = "Mobs now have a chance to drop Enchantment Runes";
		Giant = "Increased Size and Range by 33%";
		Pointy = "Increased Damage by 10%";
		Sharp = "Increased Damage by 20%";
		Insightful = "Increased XP earned by 10%";
		Light = "Increased Swing Speed by 8%";
		Rapid = "Increased Swing Speed by 16%";
		Lucky = "Increased luck by 20%";
		Fortunate = "Increased luck by 40%";
		Looting = "Has 50% chance to drop extra loot";
		Selective = "Reduces the chance of the most common item by 0.1%";
		Heavy = "Reduced Swing Speed by 10%";
		Dopey = "Reduced XP earned by 10%";
		Tiny = "Reduced Size and Range by 33%";
		Dull = "Reduced Damage by 10%";
	};
	Pickaxe = {
		Mystic = "10% chance to drop an extra rune from enchanted resources";
		Giant = "Increased Size and Range by 33%";
		Tiny = "Reduced Size and Range by 33%";
		Rapid = "Increased Swing Speed by 16%";
		Heavy = "Reduced Swing Speed by 10%";
		Light = "Increased Swing Speed by 8%";
		Insightful = "Increased XP earned by 10%";
		Dopey = "Reduced XP earned by 10%";
		Pointy = "Increased Damage by 10%";
		Sharp = "Increased Damage by 20%";
		Dull = "Reduced Damage by 10%";
		Lucky = "Increased luck by 20%";
		Fortunate = "Increased luck by 40%";
		Looting = "Has 50% chance to drop extra loot";
		Selective = "Reduces the chance of the most common item by 0.1%";
	};
	Axe = {
		Mystic = "10% chance to drop an extra rune from enchanted resources";
		Giant = "Increased Size and Range by 33%";
		Tiny = "Reduced Size and Range by 33%";
		Rapid = "Increased Swing Speed by 16%";
		Heavy = "Reduced Swing Speed by 10%";
		Light = "Increased Swing Speed by 8n%";
		Insightful = "Increased XP earned by 10%";
		Dopey = "Reduced XP earned by 10%";
		Pointy = "Increased Damage by 10%";
		Sharp = "Increased Damage by 20%";
		Dull = "Reduced Damage by 10%";
		Lucky = "Increased luck by 20%";
		Fortunate = "Increased luck by 40%";
		Looting = "Has 50% chance to drop extra loot";
		Selective = "Reduces the chance of the most common item by 0.1%";
	};
	["Fishing Rod"] = {
		Mystic = "Ability to fish out Enchantment Runes";
		["Pirate's"] = "Increased chance to catch Treasure items";
		Junker = "Increased chance to catch Junk items";
		Pescatarian = "Increased chance to catch Fish items";
		Insightful = "Increased XP earned by 10%";
		Giant = "Increased Size and Range by 33%";
		Instant = "Increased rod catch speed by 50%";
		Quickcatch = "Increased rod catch speed by 20%";
		Lucky = "Increased luck by 10%";
		Fortunate = "Increased luck by 20%";
		Looting = "Has 50% chance to drop extra loot";
		Selective = "Reduces the chance of the most common item by 0.1%";
		Dopey = "Reduced XP earned by 10%";
		Tiny = "Reduced Size and Range by 33%";
		Dredging = "Increased chance to catch coral items";
		Lazy = "Reduced rod catch speed by 20%";
	};
}
module.ItemRaritys = {{
	Name = "Uncommon";
	MinimumChance = 0.1;
}, {
	Name = "Rare";
	MinimumChance = 0.05;
}, {
	Name = "Epic";
	MinimumChance = 0.01;
}, {
	Name = "Legendary";
	MinimumChance = 0.001;
}}
module.RespawnCoolDown = 15
module.DashCoolDown = 1
module.ExpansionIslandSize = 400000
module.DefultIslandSize = 120000
local TouchEnabled = UserInputService.TouchEnabled
if TouchEnabled then
	TouchEnabled = not UserInputService.KeyboardEnabled
	if TouchEnabled then
		TouchEnabled = not UserInputService.MouseEnabled
	end
end
module.OnMobile = TouchEnabled
module.OnConsole = game:GetService("GuiService"):IsTenFootInterface()
module.LiveGameId = 6312076081
module.DevGameId = 5479094235
local function INLINED_2() -- Internal function, doesn't exist in bytecode
	tbl_283.Marketplace = 83915549266732
	tbl_283.Maze = 128489371529852
	tbl_283.DarkRealm = 108354558820454
	tbl_283.Forest = 18713199560
	tbl_283.Mines = 18713201144
	tbl_283.Citadel = 16337574675
	tbl_283.Island = 15844572582
	local tbl_283 = {}
	return tbl_283
end
if game.GameId ~= module.DevGameId or not INLINED_2() then
end
module.PlaceIds = {
	Island = 18629143858;
	Citadel = 18629157045;
	Mines = 18840340290;
	Forest = 18840343072;
	DarkRealm = 134503130417770;
	Maze = 104329009049158;
	Marketplace = 106263002016945;
}
module.BadgeTitleColors = {-- : First try: runluau:11745: attempt to index nil with 't'

module.BadgeRarityGradients = {
	Common = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(180, 154, 128)), ColorSequenceKeypoint.new(1, Color3.fromRGB(175, 149, 124))});
	Uncommon = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(244, 252, 167)), ColorSequenceKeypoint.new(1, Color3.fromRGB(254, 144, 99))});
	Rare = ColorSequence.new(Color3.fromRGB(89, 159, 254), Color3.fromRGB(89, 103, 254));
	Epic = ColorSequence.new(Color3.fromRGB(191, 149, 196), Color3.fromRGB(252, 94, 95));
	Legendary = ColorSequence.new(Color3.fromRGB(255, 177, 15), Color3.fromRGB(249, 51, 124));
	Mythic = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.1666, Color3.fromRGB(255, 0, 127)), ColorSequenceKeypoint.new(0.33333333332, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.49999999998, Color3.fromRGB(85, 255, 255)), ColorSequenceKeypoint.new(0.66666666664, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.8333333333, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))});
}
module.MasteryLayoutOrder = {
	Forestry = {
		Overall = 0;
		["Oak Wood"] = 1;
		["Mahogany Wood"] = 2;
		["Cherry Wood"] = 3;
		["Ash Wood"] = 4;
		["Dark Hollow Wood"] = 5;
		["Web Wood"] = 6;
	};
	Combat = {
		Overall = 0;
		GreenSlime = 1;
		PinkSlime = 2;
		Gizmo = 3;
		Rattles = 4;
		Muncher = 5;
		Flamelet = 6;
		["Darkfang Spider"] = 7;
		GrimThorn = 8;
		Arachnella = 9;
	};
	Farming = {
		Overall = 0;
		Wheat = 10;
		Carrot = 20;
		Tomato = 30;
		Corn = 40;
		Strawberry = 50;
		["Red Potato"] = 60;
		["White Mushroom"] = 70;
		["Nightshade Berry"] = 80;
		Watermelon = 90;
		Pumpkin = 100;
	};
	Mining = {
		Overall = 0;
		["Stone Rock"] = 10;
		["Clay Mud"] = 20;
		["Basalt Rock"] = 30;
		["Coal Ore"] = 40;
		["Copper Ore"] = 50;
		["Iron Ore"] = 60;
		["Marble Rock"] = 70;
		["Limestone Ore"] = 70;
		["Granite Ore"] = 80;
		["Cobalt Ore"] = 90;
		["Silver Ore"] = 100;
		["Gold Ore"] = 110;
		["Diamond Ore"] = 120;
		["Rhodium Ore"] = 130;
		["Amber Ore"] = 130;
	};
	Foraging = {
		Overall = 0;
		Fishing = 10;
	};
}
module.CraftingLayoutOrder = {
	All = 0;
	Tools = 1;
	Weapons = 2;
	Blocks = 3;
	Furniture = 4;
	Lights = 5;
	Storage = 6;
	Evolved = 7;
	Potions = 8;
	Other = 9;
}
module.CollectionsLayoutOrder = {
	Tools = 0;
	Mobs = 1;
	Ores = 2;
	Blocks = 3;
	Foods = 4;
	Fishing = 5;
	Underlings = 6;
	Items = 7;
	Potions = 8;
}
module.InventoryLayoutOrder = {
	All = 0;
	Tool = 1;
	Item = 2;
	Block = 3;
	Food = 4;
}
module.InventoryTabsImages = {
	All = "rbxassetid://137637967119020";
	Tool = "rbxassetid://98461185437799";
	Item = "rbxassetid://117099751885199";
	Block = "rbxassetid://109143717660557";
	Food = "rbxassetid://93068957382418";
}
module.TeleportUITips = {"\"The sky calls to us.\" - Carl Sagan", "Underlings can help auto farm, mine and cut wood on your island", "Underlings be upgraded with equippables", "Level up your combat, forestry, farming and mining masteries to unlock new items", "Use chests to store and organize items for easy access", "You can change your portal and sky skins from Island settings", "Eating certain crops and food can restore your health", "Farming crops is a great way to earn coins", "Use a Scythe to harvest crops faster", "Level up your mining and forestry mastery to unlock better tools", "Underlings can be unlocked from leveling your masteries", "You can join your friend's island using the command /join <username>", "You can craft colored clay using color dyes and clay", "On PC you can press the E key to open your inventory", "\"Not all those who wander are lost.\" - J.R.R. Tolkien", "“The sky is not the limit, it’s just the beginning.” – Chuck Yeager", "“The sky is home to the dreamers of the earth.” – Leonardo da Vinci ", "You can rotate blocks using the R and T key on PC", "Feeling lonely? Your friends can join you using /join <youruser>", "Mobs have a chance to drop rare items used for crafting", "Gather wood from the Forest or place an underling to auto cut wood", "Complete collections for item rewards", "Upgrading your sword can help you kill mobs faster", "Use Enchantment Runes to upgrade your weapons and tools", "\"Those who visit the GrimThorn are never seen again...\" - Villager", "High Realms is currently in Beta, you may experience issues", "You can teleport easily to areas using /mines, /forest, /citadel and /home", "Collecting Farlight Crystals hidden around the world adds extra HP"}
module.ScytheRanges = {
	["Iron Scythe"] = 1;
	["Gold Scythe"] = 2;
	["Moola's Scythe"] = 1;
}
module.DamageIncreaseWeapons = {
	["Clockwork Sword"] = {
		Mobs = {"Gizmo", "Muncher"};
		DamageMultiplier = 2;
	};
	["Inferno Sword"] = {
		Mobs = {"Flamelet", "Blue Flamelet"};
		DamageMultiplier = 2;
	};
	["Slime Sword"] = {
		Mobs = {"Green Slime", "Slimegore", "Ancient Slime", "Pink Slime"};
		DamageMultiplier = 2;
	};
	["Twilight Sword"] = {
		Mobs = {"GrimThorn"};
		DamageMultiplier = 2;
	};
	["Bone Sword"] = {
		Mobs = {"Rattles"};
		DamageMultiplier = 2;
	};
	Jellyblade = {
		Mobs = {"Green Slime", "Slimegore", "Ancient Slime", "Pink Slime"};
		DamageMultiplier = 2;
	};
}
module.StoreOrder = {"Pink Island", "Theme Pack", "Pro Backpack", "Island Expansion", "Dragon Storage Chest Product", "Small Coins Pack", "Medium Coins Pack", "Large Coins Pack"}
module.RegenChances = {
	Citadel = {{{
		BlockId = "OakTreeE";
		Weight = 1;
	}, {
		BlockId = "OakTreeD";
		Weight = 2;
	}, {
		BlockId = "OakTreeC";
		Weight = 3;
	}, {
		BlockId = "OakTreeB";
		Weight = 4;
	}, {
		BlockId = "OakTreeA";
		Weight = 5;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.5;
	}}, {{
		BlockId = "Coal Ore Block";
		Weight = 0.5;
	}}};
	Mines = {{{
		BlockId = "Stone Rock Block";
		Weight = 0.6;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Basalt Rock Block";
		Weight = 0.15;
	}, {
		BlockId = "Coal Ore Block";
		Weight = 0.15;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.2;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Basalt Rock Block";
		Weight = 0.35;
	}, {
		BlockId = "Coal Ore Block";
		Weight = 0.35;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.6;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Copper Ore Block";
		Weight = 0.3;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.5;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Iron Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Marble Rock Block";
		Weight = 0.2;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.5;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Iron Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Marble Rock Block";
		Weight = 0.2;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.6;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Cobalt Ore Block";
		Weight = 0.3;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.549;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Silver Ore Block";
		Weight = 0.05;
	}, {
		BlockId = "Gold Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Gold Block";
		Weight = 0.001;
	}, {
		BlockId = "Coal Block";
		Weight = 0.1;
	}}, {{
		BlockId = "Clay Mud Block";
		Weight = 1;
	}}, {{
		BlockId = "Black Poppy Flower";
		Weight = 0.142;
	}, {
		BlockId = "Blue Poppy Flower";
		Weight = 0.142;
	}, {
		BlockId = "Green Poppy Flower";
		Weight = 0.142;
	}, {
		BlockId = "White Poppy Flower";
		Weight = 0.142;
	}, {
		BlockId = "Yellow Poppy Flower";
		Weight = 0.142;
	}, {
		BlockId = "Red Poppy Flower";
		Weight = 0.1467;
	}, {
		BlockId = "Mushroom";
		Weight = 0.142;
	}, {
		BlockId = "Rainbow Poppy Flower";
		Weight = 0.0013;
	}}, {{
		BlockId = "Gold Ore Block";
		Weight = 0.3;
	}, {
		BlockId = "Marble Block";
		Weight = 0.1;
	}, {
		BlockId = "Cobblestone";
		Weight = 0.1;
	}, {
		BlockId = "Rhodium Ore Block";
		Weight = 0.2;
	}, {
		BlockId = "Coal Block";
		Weight = 0.1;
	}, {
		BlockId = "Diamond Ore Block";
		Weight = 0.3;
	}}, {{
		BlockId = "Grass Weed";
		Weight = 0.75;
	}, {
		BlockId = "Mushroom";
		Weight = 0.2486;
	}, {
		BlockId = "Hay Bale";
		Weight = 0.001;
	}, {
		BlockId = "Pumpkin Block";
		Weight = 0.0002;
	}, {
		BlockId = "Watermelon Block";
		Weight = 0.0002;
	}}, {{
		BlockId = "Limestone Ore Block";
		Weight = 0.4999;
	}, {
		BlockId = "Granite Ore Block";
		Weight = 0.4999;
	}, {
		BlockId = "Glowstone Block";
		Weight = 0.0002;
	}}, {{
		BlockId = "Toxic Sludge";
		Weight = 0.33;
	}, {
		BlockId = "Mire Lotus";
		Weight = 0.33;
	}, {
		BlockId = "Lichen";
		Weight = 0.33;
	}, {
		BlockId = "Peat Moss Block";
		Weight = 0.05;
	}}, {{
		BlockId = "Stone Rock Block";
		Weight = 0.5;
	}, {
		BlockId = "Amber Ore Block";
		Weight = 0.5;
	}}};
	Woods = {{{
		BlockId = "OakTreeE";
		Weight = 1;
	}, {
		BlockId = "OakTreeD";
		Weight = 2;
	}, {
		BlockId = "OakTreeC";
		Weight = 3;
	}, {
		BlockId = "OakTreeB";
		Weight = 4;
	}, {
		BlockId = "OakTreeA";
		Weight = 5;
	}}, {{
		BlockId = "MahoganyTreeB";
		Weight = 3;
	}, {
		BlockId = "MahoganyTreeA";
		Weight = 1;
	}}, {{
		BlockId = "AshTreeB";
		Weight = 3;
	}, {
		BlockId = "AshTreeA";
		Weight = 1;
	}}, {{
		BlockId = "CherryTreeB";
		Weight = 3;
	}, {
		BlockId = "CherryTreeA";
		Weight = 1;
	}}, {{
		BlockId = "DarkHollowTreeE";
		Weight = 5;
	}, {
		BlockId = "DarkHollowTreeD";
		Weight = 4;
	}, {
		BlockId = "DarkHollowTreeC";
		Weight = 3;
	}, {
		BlockId = "DarkHollowTreeB";
		Weight = 2;
	}, {
		BlockId = "DarkHollowTreeB";
		Weight = 1;
	}}, {{
		BlockId = "WebTreeC";
		Weight = 3;
	}, {
		BlockId = "WebTreeB";
		Weight = 2;
	}, {
		BlockId = "WebTreeA";
		Weight = 1;
	}}};
	Mire = {{{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}, {{
		BlockId = "Bamboo Plant";
		Weight = 1;
	}}};
}
module.XPRewards = {
	Combat = {
		Overall = {};
	};
	Mining = {
		Overall = {};
	};
	Farming = {
		Overall = {};
	};
	Forestry = {
		Overall = {};
	};
	Foraging = {
		Overall = {};
	};
}
module.PlayerFromXP = {10, 25, 40, 75, 100, 150, 200, 300, 450, 700, 1000, 1750, 2500, 3000, 4500, 7500, 12000, 16000, 23000, 32000, 50000, 70000, 110000, 150000, 200000, 250000, 350000, 450000, 600000, 750000, 925000, 1250000, 1500000, 1750000, 2000000, 2500000, 3000000, 3500000, 4000000, 4500000, 5000000, 5500000, 6000000, 6500000, 7000000, 7500000, 8000000, 8500000, 9000000, 9500000, 10000000, 10500000, 11000000, 12000000, 13000000, 14000000, 15000000, 16000000, 17000000, 18000000, 19000000, 20000000, 22000000, 24000000, 26000000, 28000000, 30000000, 32000000, 34000000, 36000000, 38000000, 40000000, 50000000, 60000000, 70000000, 80000000, 90000000, 100000000, 110000000, 120000000, 130000000, 140000000, 150000000, 160000000, 170000000, 180000000, 190000000, 200000000, 210000000, 220000000, 230000000, 240000000, 250000000, 260000000, 270000000, 280000000, 290000000, 300000000}
module.MasteryFromXP = {5, 15, 25, 50, 65, 80, 100, 150, 200, 250, 350, 475, 650, 800, 1000, 1300, 2000, 2750, 3900, 5000, 6500, 9000, 11000, 15000, 20000, 30000, 42500, 55000, 75000, 110000}
module.SubMasteryFromXP = {1, 3, 4, 5, 7, 10, 13, 18, 25, 33, 45, 60, 81, 110, 148, 200, 270, 365, 493, 665, 898, 1213, 1637, 2210, 2984, 4028, 5438, 7342, 9911, 13380}
return module

Script name: Tasks
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
return {
	GetTaskType = function(arg1, arg2) -- Line 6, Named "GetTaskType"
		--[[ Upvalues[1]:
			[1]: ReplicatedStorage_upvr (readonly)
		]]
		return require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetDefinitions().Task[arg2]
	end;
}

Script name: BlockIndexs
  - Script: 


return {
	BlockIndexs = {"Grass", "Dirt", "Tilled Dirt", "Stone Block", "Cobblestone", "Oak Wood", "Oak Plank", "Oak Stair", "Watermelon Seed", "Neon Yellow", "Web Wood", "DevNote Block", "Slime Block", "Tiki Head Block", "Gold Block", "Carpet Black", "Cherry Stair", "Carpet Blue", "Yellow Bed", "Cherry Wood", "Copper Ore Block", "Neon White", "Brown Bed", "Neon Pink", "Web Grass Block", "Mahogany Leaves", "Hanging Lantern", "Carpet Purple", "Diamond Ore Block", "Dark Hollow Trap Door", "Clay Green", "Glass Red", "Sisterguard Block", "Glass Green", "Cherry Wood Underling Anchor", "Pink Potted Flower", "Bookcase", "Copper Underling Anchor", "Ash Stair", "Carpet Pink", "Blue Potted Flower", "Ash Wood Underling Anchor", "ChunkySeal Block", "Stone Brick Block", "Lantern Block", "Clay Yellow", "Pink Stone Brick Block", "Oak Door", "Torch", "Rainbow Poppy Flower", "Oak Trap Door", "Yellow Lightcube", "Teal Table Lamp", "Red Bed", "Mushroom", "DarkHollow Fence", "Granite Ore Block", "Carpet Light Blue", "Pink Stone Brick Stair", "DarkHollowTallTreeA", "Grave Headstone", "OakTreeA", "Wood Chair", "Glass Black", "Spiked Floor Trap", "Glass Purple", "Ash Door", "Iron Ore Block", "Ash Fence", "Carpet Red", "Cherry Slab", "Red Potted Flower", "Neon Cyan", "Red Potato Underling Anchor", "Large Chest", "Sofa Section", "Blue Lightcube", "Nightstand", "Coal Ore Block", "Clay Vase", "Ash Vertical Slab", "Dragonstone Chest", "Wheat Seed", "Basalt Rock Block", "Small Chest", "Red Table Lamp", "Wall Torch", "Ash Plank", "Cherry Plank", "Silver Underling Anchor", "Candelabra", "Stone Fence", "Granite Underling Anchor", "Marble Brick Vertical Slab", "Cyan Bed", "Dark Hollow Slab", "Pink Grass", "DarkHollowTreeE", "Wild Goat Block", "Clay Light Blue", "Red Brick Slab", "DarkHollowTreeA", "Fire Block", "Coffin Bed", "White Potted Flower", "Silver Ore Block", "Clay Lime", "Cherry Trap Door", "OakTreeB", "Neon Red", "Mahogany Door", "Fog FX Block", "Stone Stair", "Jack O Lantern", "Blue Torch", "Spotlight", "Cherry Door", "Neon Lime", "Glowstone Block", "Web Plank", "Carpet Brown", "Mahogany Plank", "Bedrock", "Marble Rock Block", "AshTreeA", "Carpet Cyan", "Hay Bale", "Mire Lotus", "Sofa Section Corner", "Copper Block", "Orange Lightcube", "Cherry Vertical Slab", "Dark Hollow Vertical Slab", "Cherry Fence", "Neon Green", "Orange Bed", "Blue Poppy Flower", "Workbench", "WebTreeC", "Wood Table", "Mahogany Slab", "Wood Stool", "Carpet Grey", "Campfire", "Oak Vertical Slab", "Glass Blue", "Tiki Pole Block", "Clay Mud Block", "Tomato Underling Anchor", "Sofa Section Basic", "Cyan Potted Flower", "DarkHollowTreeD", "Teal Luxury Sofa", "Sword Throne", "Gold Ore Block", "Neon Orange", "Glass Cyan", "Limestone Ore Block", "Ash Leaves", "Clay Purple", "Chain", "DarkHollowTreeC", "Tumbler", "Clay Orange", "WebTreeA", "Dark Hollow Wood", "Spawn Block", "Dark Hollow Leaves", "Hoopie Block", "Finish Line Block", "Glass Orange", "Checkpoint Block", "Disappear Block", "Kill Block", "Strawberry Underling Anchor", "Marble Underling Anchor", "Carpet White", "Neon Light Blue", "Dark Hollow Wood Underling Anchor", "Watermelon Underling Anchor", "Mahogany Vertical Slab", "Basalt Vertical Slab", "DarkHollowTallTreeB", "Stone Underling Anchor", "Clay Block", "Dark Hollow Stair", "Rattles Mob Block", "Wheat Underling Anchor", "Oak Wood Underling Anchor", "Red Brick Vertical Slab", "Large Umbrella", "Carpet Yellow", "Pumpkin Underling Anchor", "White Mushroom Underling Anchor", "Limestone Underling Anchor", "Cobalt Block", "Muncher Mob Block", "Bone Fence", "Ladder", "Web Wood Underling Anchor", "Mahogany Wood Underling Anchor", "Iron Underling Anchor", "Larand Block", "Cobalt Underling Anchor", "Coal Underling Anchor", "Neon Purple", "WebTreeB", "Basalt Underling Anchor", "Carrot Underling Anchor", "Rainbow Block", "DarkHollowTreeB", "Jungle Moss Block", "DarkHollowTallTreeE", "StoneBrick Fence", "DarkHollowTallTreeC", "Clay Underling Anchor", "Jessetc Block", "Cobalt Ore Block", "MahoganyTreeB", "Basalt Stair", "OakTreeE", "CherryTreeB", "AshTreeB", "OakTreeC", "MahoganyTreeA", "CherryTreeA", "Nightshade Berry Bush Seed", "Stone Slab", "Pumpkin Seed", "Stone Brick Stair", "Tomato Seed", "Corn Seed", "Red Potato Seed", "Carpet Orange", "Clay Pink", "Silver Block", "Strawberry Seed", "Carrot Seed", "Web Fence", "Glass Light Blue", "Flower Underling Anchor", "Web Grass Path Block", "Lichen", "LalaFlowergirl Block", "Basalt Slab", "Glass Yellow", "Stone Brick Vertical Slab", "Yellow Poppy Flower", "SpiderWeb", "Wooden Crate", "Blue Bed", "Cursed Relic", "Yellow Potted Flower", "Limestone Block", "Clay Red", "Green Bed", "Mud Block", "Watermelon Block", "Black Bed", "Arachnella Mob Block", "Darkfang Spider Mob Block", "Slimegore Mob Block", "Gizmo Mob Block", "Purple Lightcube", "Flamelet Mob Block", "Clay Brown", "Green Slime Mob Block", "Blue Flamelet Mob Block", "Jumpscare Block", "GrimThorn Mob Block", "Diamond Block", "Red Lightcube", "Green Lightcube", "Pink Stone Brick Vertical Slab", "Pink Bed", "Technoblade Trophy", "Diamond Chest", "Red Royal Bed", "Black Poppy Flower", "Glass Pink", "Pink Stone Brick Slab", "Mushroom Block", "CosmicCometsInc Block", "Stone Brick Slab", "Coal Block", "Carpet Green", "Granite Block", "Red Brick Block", "Grey Table Lamp", "Corn Underling Anchor", "Oak Slab", "Purple Potted Flower", "Gargoyle Statue", "Oak Fence", "Ashlanne Block", "Web Leaves", "Mahogany Wood", "Cherry Leaves", "Marble Pillar Base", "DarkHollowTallTreeD", "Mahogany Stair", "Bamboo Plant", "Web Stair", "Glass", "Mahogany Fence", "Danger Sign", "Clay Blue", "Crimson Grass Block", "Gold Underling Anchor", "Dark Hollow Door", "Vines", "Log", "Marble Brick Block", "White Poppy Flower", "Oak Leaves", "Beefy Block", "Marble Brick Stair", "TanqR Block", "Toxic Sludge", "Web Slab", "Gravycatman Block", "OakTreeD", "Dark Hollow Plank", "Blue Wall Torch", "Carpet Lime", "Pumpkin Block", "Green Poppy Flower", "Gold Table Lamp", "Metal Grate", "Glass White", "Stone Rock Block", "Crimson Moss Block", "Plate Set", "Tall Lamp", "Basalt Block", "Iron Block", "Mug", "Clay Cyan", "Peat Moss Block", "Candles", "Neon Blue", "DV Block", "Red Brick Stair", "Marble Brick Slab", "Ghost FX Block", "Light Blue Bed", "Neon Black", "Halloween Trophy", "Purple Bed", "Ash Trap Door", "Red Poppy Flower", "Ash Slab", "Crimson Ornate Block", "Jungle Grass Block", "Witchycatlady Block", "Jungle Vines", "Rain FX Block", "Electric FX Block", "Lime Bed", "Wood Barrel", "Glass Lime", "Marble Block", "Glass Brown", "Stone Vertical Slab", "Clay White", "Swamp Block", "Mahogany Trap Door", "Ash Wood", "Marble Pillar", "Grass Weed", "White Mushroom Seed", "Clay Black", "Water", "Blue Coral", "Branch Coral", "Orange Coral", "Purple Coral", "Red Coral", "Starfish Shell", "Jingle Shell", "Nautilus Shell", "Scallop Shell", "Spider Portrait", "Ship Anchor", "Ship Wheel", "Deep Seaweed", "Seaweed", "Bubble FX Block", "Waterfall FX Block", "No Fishing Sign", "No Swimming Sign", "Furnace", "Forge", "Sawmill", "Cooking Station", "Crafting Bench", "Cauldron", "Christmas Lights", "Jsquire07 Block", "Coffee Bean Plant Seed", "FVShadow Block", "Chill Moola", "Chill Slime", "Chill Flamelet", "Chill Gizmo", "Chill Muncher", "Snowman Hat", "Snowman Head", "Snowman Base", "Packed Ice Block", "Ice Block", "Peppermint Block", "Snow Grass", "Snow Block", "Snowglobe", "Icicle Block", "Red Ribbon", "Christmas Wreath", "Jolly Bell", "Candy Cane Decoration", "Northstar", "Snow FX Block", "Christmas Lights Corner", "Peppermint Seed", "Christmas Tree", "Frosted Christmas Tree", "Gift Box", "Big Gift Box", "Small Gift Box", "Nutcracker Base", "Nutcracker Head", "Gingerbread Block", "Eggman Block", "Nutcracker Hat", "Glazed Gingerbread Block", "Sansy Nooby's Painting", "Silent Shoe's Painting", "Rope", "Pink Slime Block", "Amber Ore Block", "Amber Block", "Rhodium Block", "Rhodium Ore Block", "Petrified Ash Wood", "Petrified Dark Hollow Wood", "Petrified Oak Wood", "Compressed Coal", "Petrified Cherry Wood", "Petrified Mahogany Wood", "Petrified Web Wood", "Pink Slime Mob Block", "Slime Trophy", "Giant Ancient Slime Mob Block", "Giant GrimThorn Mob Block", "Cherry Blossom Potted Flowers", "Lunar Fireworks FX", "Lunar Folding Screen", "Lunar Gong", "Lunar Hanging Lantern Small", "Lunar Hanging Lantern Tall", "Lunar Garden Light", "Lunar Wall Light", "Lunar Wood Snake Trophy", "Lunar Wall Fan", "Lunar Chair", "Lunar Zhuo Table", "Cherry Blossom Flowers", "Lunar Bed", "Lunar Snake Throne", "Lunar End Table", "Tea Cups", "Tea Kettle", "White Heart Block", "Red Heart Block", "Pink Heart Block"};
	BlockIds = {
		["Arachnella Mob Block"] = 260;
		["Ash Door"] = 67;
		["Ash Fence"] = 69;
		["Ash Leaves"] = 159;
		["Ash Plank"] = 88;
		["Ash Slab"] = 352;
		["Ash Stair"] = 39;
		["Ash Trap Door"] = 350;
		["Ash Vertical Slab"] = 81;
		["Ash Wood Underling Anchor"] = 42;
		["Ash Wood"] = 368;
		AshTreeA = 125;
		AshTreeB = 223;
		["Ashlanne Block"] = 295;
		["Bamboo Plant"] = 302;
		["Basalt Block"] = 335;
		["Basalt Rock Block"] = 84;
		["Basalt Slab"] = 245;
		["Basalt Stair"] = 220;
		["Basalt Underling Anchor"] = 208;
		["Basalt Vertical Slab"] = 182;
		Bedrock = 123;
		["Beefy Block"] = 316;
		["Black Bed"] = 259;
		["Black Poppy Flower"] = 279;
		["Blue Bed"] = 251;
		["Blue Flamelet Mob Block"] = 268;
		["Blue Lightcube"] = 77;
		["Blue Poppy Flower"] = 137;
		["Blue Potted Flower"] = 41;
		["Blue Torch"] = 115;
		["Blue Wall Torch"] = 324;
		["Bone Fence"] = 198;
		Bookcase = 37;
		["Brown Bed"] = 23;
		Campfire = 144;
		Candelabra = 91;
		Candles = 340;
		["Carpet Black"] = 16;
		["Carpet Blue"] = 18;
		["Carpet Brown"] = 121;
		["Carpet Cyan"] = 126;
		["Carpet Green"] = 286;
		["Carpet Grey"] = 143;
		["Carpet Light Blue"] = 58;
		["Carpet Lime"] = 325;
		["Carpet Orange"] = 234;
		["Carpet Pink"] = 40;
		["Carpet Purple"] = 28;
		["Carpet Red"] = 70;
		["Carpet White"] = 177;
		["Carpet Yellow"] = 192;
		["Carrot Seed"] = 238;
		["Carrot Underling Anchor"] = 209;
		Chain = 161;
		["Checkpoint Block"] = 172;
		["Cherry Door"] = 117;
		["Cherry Fence"] = 134;
		["Cherry Leaves"] = 298;
		["Cherry Plank"] = 89;
		["Cherry Slab"] = 71;
		["Cherry Stair"] = 17;
		["Cherry Trap Door"] = 108;
		["Cherry Vertical Slab"] = 132;
		["Cherry Wood Underling Anchor"] = 35;
		["Cherry Wood"] = 20;
		CherryTreeA = 226;
		CherryTreeB = 222;
		["ChunkySeal Block"] = 43;
		["Clay Block"] = 185;
		["Clay Blue"] = 307;
		["Clay Brown"] = 266;
		["Clay Cyan"] = 338;
		["Clay Green"] = 31;
		["Clay Light Blue"] = 100;
		["Clay Lime"] = 107;
		["Clay Mud Block"] = 148;
		["Clay Orange"] = 164;
		["Clay Pink"] = 235;
		["Clay Purple"] = 160;
		["Clay Red"] = 255;
		["Clay Underling Anchor"] = 216;
		["Clay Vase"] = 80;
		["Clay White"] = 365;
		["Clay Yellow"] = 46;
		["Coal Block"] = 285;
		["Coal Ore Block"] = 79;
		["Coal Underling Anchor"] = 205;
		["Cobalt Block"] = 196;
		["Cobalt Ore Block"] = 218;
		["Cobalt Underling Anchor"] = 204;
		Cobblestone = 5;
		["Coffin Bed"] = 104;
		["Copper Block"] = 130;
		["Copper Ore Block"] = 21;
		["Copper Underling Anchor"] = 38;
		["Corn Seed"] = 232;
		["Corn Underling Anchor"] = 290;
		["CosmicCometsInc Block"] = 283;
		["Crimson Grass Block"] = 308;
		["Crimson Moss Block"] = 332;
		["Crimson Ornate Block"] = 353;
		["Cursed Relic"] = 252;
		["Cyan Bed"] = 95;
		["Cyan Potted Flower"] = 151;
		["DV Block"] = 342;
		["Danger Sign"] = 306;
		["Dark Hollow Door"] = 310;
		["Dark Hollow Leaves"] = 168;
		["Dark Hollow Plank"] = 323;
		["Dark Hollow Slab"] = 96;
		["Dark Hollow Stair"] = 186;
		["Dark Hollow Trap Door"] = 30;
		["Dark Hollow Vertical Slab"] = 133;
		["Dark Hollow Wood Underling Anchor"] = 179;
		["Dark Hollow Wood"] = 166;
		["DarkHollow Fence"] = 56;
		DarkHollowTallTreeA = 60;
		DarkHollowTallTreeB = 183;
		DarkHollowTallTreeC = 215;
		DarkHollowTallTreeD = 300;
		DarkHollowTallTreeE = 213;
		DarkHollowTreeA = 102;
		DarkHollowTreeB = 211;
		DarkHollowTreeC = 162;
		DarkHollowTreeD = 152;
		DarkHollowTreeE = 98;
		["Darkfang Spider Mob Block"] = 261;
		["DevNote Block"] = 12;
		["Diamond Block"] = 271;
		["Diamond Chest"] = 277;
		["Diamond Ore Block"] = 29;
		Dirt = 2;
		["Disappear Block"] = 173;
		["Dragonstone Chest"] = 82;
		["Electric FX Block"] = 358;
		["Finish Line Block"] = 170;
		["Fire Block"] = 103;
		["Flamelet Mob Block"] = 265;
		["Flower Underling Anchor"] = 241;
		["Fog FX Block"] = 112;
		["Gargoyle Statue"] = 293;
		["Ghost FX Block"] = 345;
		["Gizmo Mob Block"] = 263;
		["Glass Black"] = 64;
		["Glass Blue"] = 146;
		["Glass Brown"] = 363;
		["Glass Cyan"] = 157;
		["Glass Green"] = 34;
		["Glass Light Blue"] = 240;
		["Glass Lime"] = 361;
		["Glass Orange"] = 171;
		["Glass Pink"] = 280;
		["Glass Purple"] = 66;
		["Glass Red"] = 32;
		["Glass White"] = 330;
		["Glass Yellow"] = 246;
		Glass = 304;
		["Glowstone Block"] = 119;
		["Gold Block"] = 15;
		["Gold Ore Block"] = 155;
		["Gold Table Lamp"] = 328;
		["Gold Underling Anchor"] = 309;
		["Granite Block"] = 287;
		["Granite Ore Block"] = 57;
		["Granite Underling Anchor"] = 93;
		["Grass Weed"] = 370;
		Grass = 1;
		["Grave Headstone"] = 61;
		["Gravycatman Block"] = 321;
		["Green Bed"] = 256;
		["Green Lightcube"] = 273;
		["Green Poppy Flower"] = 327;
		["Green Slime Mob Block"] = 267;
		["Grey Table Lamp"] = 289;
		["GrimThorn Mob Block"] = 270;
		["Halloween Trophy"] = 348;
		["Hanging Lantern"] = 27;
		["Hay Bale"] = 127;
		["Hoopie Block"] = 169;
		["Iron Block"] = 336;
		["Iron Ore Block"] = 68;
		["Iron Underling Anchor"] = 202;
		["Jack O Lantern"] = 114;
		["Jessetc Block"] = 217;
		["Jumpscare Block"] = 269;
		["Jungle Grass Block"] = 354;
		["Jungle Moss Block"] = 212;
		["Jungle Vines"] = 356;
		["Kill Block"] = 174;
		Ladder = 199;
		["LalaFlowergirl Block"] = 244;
		["Lantern Block"] = 45;
		["Larand Block"] = 203;
		["Large Chest"] = 75;
		["Large Umbrella"] = 191;
		Lichen = 243;
		["Light Blue Bed"] = 346;
		["Lime Bed"] = 359;
		["Limestone Block"] = 254;
		["Limestone Ore Block"] = 158;
		["Limestone Underling Anchor"] = 195;
		["Mahogany Door"] = 111;
		["Mahogany Fence"] = 305;
		["Mahogany Leaves"] = 26;
		["Mahogany Plank"] = 122;
		["Mahogany Slab"] = 141;
		["Mahogany Stair"] = 301;
		["Mahogany Trap Door"] = 367;
		["Mahogany Vertical Slab"] = 181;
		["Mahogany Wood Underling Anchor"] = 201;
		["Mahogany Wood"] = 297;
		MahoganyTreeA = 225;
		MahoganyTreeB = 219;
		["Marble Block"] = 362;
		["Marble Brick Block"] = 313;
		["Marble Brick Slab"] = 344;
		["Marble Brick Stair"] = 317;
		["Marble Brick Vertical Slab"] = 94;
		["Marble Rock Block"] = 124;
		["Marble Underling Anchor"] = 176;
		["Metal Grate"] = 329;
		["Mire Lotus"] = 128;
		["Mud Block"] = 257;
		Mug = 337;
		["Muncher Mob Block"] = 197;
		["Mushroom Block"] = 282;
		Mushroom = 55;
		["Neon Black"] = 347;
		["Neon Blue"] = 341;
		["Neon Cyan"] = 73;
		["Neon Green"] = 135;
		["Neon Light Blue"] = 178;
		["Neon Lime"] = 118;
		["Neon Orange"] = 156;
		["Neon Pink"] = 24;
		["Neon Purple"] = 206;
		["Neon Red"] = 110;
		["Neon White"] = 22;
		["Neon Yellow"] = 10;
		["Nightshade Berry Bush Seed"] = 227;
		Nightstand = 78;
		["Oak Door"] = 48;
		["Oak Fence"] = 294;
		["Oak Leaves"] = 315;
		["Oak Plank"] = 7;
		["Oak Slab"] = 291;
		["Oak Stair"] = 8;
		["Oak Trap Door"] = 51;
		["Oak Vertical Slab"] = 145;
		["Oak Wood Underling Anchor"] = 189;
		["Oak Wood"] = 6;
		OakTreeA = 62;
		OakTreeB = 109;
		OakTreeC = 224;
		OakTreeD = 322;
		OakTreeE = 221;
		["Orange Bed"] = 136;
		["Orange Lightcube"] = 131;
		["Peat Moss Block"] = 339;
		["Pink Bed"] = 275;
		["Pink Grass"] = 97;
		["Pink Potted Flower"] = 36;
		["Pink Stone Brick Block"] = 47;
		["Pink Stone Brick Slab"] = 281;
		["Pink Stone Brick Stair"] = 59;
		["Pink Stone Brick Vertical Slab"] = 274;
		["Plate Set"] = 333;
		["Pumpkin Block"] = 326;
		["Pumpkin Seed"] = 229;
		["Pumpkin Underling Anchor"] = 193;
		["Purple Bed"] = 349;
		["Purple Lightcube"] = 264;
		["Purple Potted Flower"] = 292;
		["Rain FX Block"] = 357;
		["Rainbow Block"] = 210;
		["Rainbow Poppy Flower"] = 50;
		["Rattles Mob Block"] = 187;
		["Red Bed"] = 54;
		["Red Brick Block"] = 288;
		["Red Brick Slab"] = 101;
		["Red Brick Stair"] = 343;
		["Red Brick Vertical Slab"] = 190;
		["Red Lightcube"] = 272;
		["Red Poppy Flower"] = 351;
		["Red Potato Seed"] = 233;
		["Red Potato Underling Anchor"] = 74;
		["Red Potted Flower"] = 72;
		["Red Royal Bed"] = 278;
		["Red Table Lamp"] = 86;
		["Silver Block"] = 236;
		["Silver Ore Block"] = 106;
		["Silver Underling Anchor"] = 90;
		["Sisterguard Block"] = 33;
		["Slime Block"] = 13;
		["Slimegore Mob Block"] = 262;
		["Small Chest"] = 85;
		["Sofa Section Basic"] = 150;
		["Sofa Section Corner"] = 129;
		["Sofa Section"] = 76;
		["Spawn Block"] = 167;
		SpiderWeb = 249;
		["Spiked Floor Trap"] = 65;
		Spotlight = 116;
		["Stone Block"] = 4;
		["Stone Brick Block"] = 44;
		["Stone Brick Slab"] = 284;
		["Stone Brick Stair"] = 230;
		["Stone Brick Vertical Slab"] = 247;
		["Stone Fence"] = 92;
		["Stone Rock Block"] = 331;
		["Stone Slab"] = 228;
		["Stone Stair"] = 113;
		["Stone Underling Anchor"] = 184;
		["Stone Vertical Slab"] = 364;
		["StoneBrick Fence"] = 214;
		["Strawberry Seed"] = 237;
		["Strawberry Underling Anchor"] = 175;
		["Swamp Block"] = 366;
		["Sword Throne"] = 154;
		["Tall Lamp"] = 334;
		["TanqR Block"] = 318;
		["Teal Luxury Sofa"] = 153;
		["Teal Table Lamp"] = 53;
		["Technoblade Trophy"] = 276;
		["Tiki Head Block"] = 14;
		["Tiki Pole Block"] = 147;
		["Tilled Dirt"] = 3;
		["Tomato Seed"] = 231;
		["Tomato Underling Anchor"] = 149;
		Torch = 49;
		["Toxic Sludge"] = 319;
		Tumbler = 163;
		Vines = 311;
		["Wall Torch"] = 87;
		["Watermelon Block"] = 258;
		["Watermelon Seed"] = 9;
		["Watermelon Underling Anchor"] = 180;
		["Web Fence"] = 239;
		["Web Grass Block"] = 25;
		["Web Grass Path Block"] = 242;
		["Web Leaves"] = 296;
		["Web Plank"] = 120;
		["Web Slab"] = 320;
		["Web Stair"] = 303;
		Log = 312;
		["Marble Pillar"] = 369;
		["Marble Pillar Base"] = 299;
		["Web Wood Underling Anchor"] = 200;
		["Web Wood"] = 11;
		WebTreeA = 165;
		WebTreeB = 207;
		WebTreeC = 139;
		["Wheat Seed"] = 83;
		["Wheat Underling Anchor"] = 188;
		["White Mushroom Seed"] = 371;
		["White Mushroom Underling Anchor"] = 194;
		["White Poppy Flower"] = 314;
		["White Potted Flower"] = 105;
		["Wild Goat Block"] = 99;
		["Witchycatlady Block"] = 355;
		["Wood Barrel"] = 360;
		["Wood Chair"] = 63;
		["Wood Stool"] = 142;
		["Wood Table"] = 140;
		["Wooden Crate"] = 250;
		Workbench = 138;
		["Yellow Bed"] = 19;
		["Yellow Lightcube"] = 52;
		["Yellow Poppy Flower"] = 248;
		["Yellow Potted Flower"] = 253;
		["Clay Black"] = 372;
		Water = 373;
		["Blue Coral"] = 374;
		["Branch Coral"] = 375;
		["Orange Coral"] = 376;
		["Purple Coral"] = 377;
		["Red Coral"] = 378;
		["Starfish Shell"] = 379;
		["Jingle Shell"] = 380;
		["Nautilus Shell"] = 381;
		["Scallop Shell"] = 382;
		["Spider Portrait"] = 383;
		["Ship Anchor"] = 384;
		["Ship Wheel"] = 385;
		["Deep Seaweed"] = 386;
		Seaweed = 387;
		["Bubble FX Block"] = 388;
		["Waterfall FX Block"] = 389;
		["No Fishing Sign"] = 390;
		["No Swimming Sign"] = 391;
		Furnace = 392;
		Forge = 393;
		Sawmill = 394;
		["Cooking Station"] = 395;
		["Crafting Bench"] = 396;
		Cauldron = 397;
		["Christmas Lights"] = 398;
		["Jsquire07 Block"] = 399;
		["Coffee Bean Plant Seed"] = 400;
		["FVShadow Block"] = 401;
		["Chill Moola"] = 402;
		["Chill Slime"] = 403;
		["Chill Flamelet"] = 404;
		["Chill Gizmo"] = 405;
		["Chill Muncher"] = 406;
		["Snowman Hat"] = 407;
		["Snowman Head"] = 408;
		["Snowman Base"] = 409;
		["Packed Ice Block"] = 410;
		["Ice Block"] = 411;
		["Peppermint Block"] = 412;
		["Snow Grass"] = 413;
		["Snow Block"] = 414;
		Snowglobe = 415;
		["Icicle Block"] = 416;
		["Red Ribbon"] = 417;
		["Christmas Wreath"] = 418;
		["Jolly Bell"] = 419;
		["Candy Cane Decoration"] = 420;
		Northstar = 421;
		["Snow FX Block"] = 422;
		["Christmas Lights Corner"] = 423;
		["Peppermint Seed"] = 424;
		["Christmas Tree"] = 425;
		["Frosted Christmas Tree"] = 426;
		["Gift Box"] = 427;
		["Big Gift Box"] = 428;
		["Small Gift Box"] = 429;
		["Nutcracker Base"] = 430;
		["Nutcracker Head"] = 431;
		["Gingerbread Block"] = 432;
		["Eggman Block"] = 433;
		["Nutcracker Hat"] = 434;
		["Glazed Gingerbread Block"] = 435;
		["Sansy Nooby's Painting"] = 436;
		["Silent Shoe's Painting"] = 437;
		Rope = 438;
		["Pink Slime Block"] = 439;
		["Amber Ore Block"] = 440;
		["Amber Block"] = 441;
		["Rhodium Block"] = 442;
		["Rhodium Ore Block"] = 443;
		["Petrified Ash Wood"] = 444;
		["Petrified Dark Hollow Wood"] = 445;
		["Petrified Oak Wood"] = 446;
		["Compressed Coal"] = 447;
		["Petrified Cherry Wood"] = 448;
		["Petrified Mahogany Wood"] = 449;
		["Petrified Web Wood"] = 450;
		["Pink Slime Mob Block"] = 451;
		["Slime Trophy"] = 452;
		["Giant Ancient Slime Mob Block"] = 453;
		["Giant GrimThorn Mob Block"] = 454;
		["Cherry Blossom Potted Flowers"] = 455;
		["Lunar Fireworks FX"] = 456;
		["Lunar Folding Screen"] = 457;
		["Lunar Gong"] = 458;
		["Lunar Hanging Lantern Small"] = 459;
		["Lunar Hanging Lantern Tall"] = 460;
		["Lunar Garden Light"] = 461;
		["Lunar Wall Light"] = 462;
		["Lunar Wood Snake Trophy"] = 463;
		["Lunar Wall Fan"] = 464;
		["Lunar Chair"] = 465;
		["Lunar Zhuo Table"] = 466;
		["Cherry Blossom Flowers"] = 467;
		["Lunar Bed"] = 468;
		["Lunar Snake Throne"] = 469;
		["Lunar End Table"] = 470;
		["Tea Cups"] = 471;
		["Tea Kettle"] = 472;
		["White Heart Block"] = 473;
		["Red Heart Block"] = 474;
		["Pink Heart Block"] = 475;
	};
}

Script name: StorageData
  - Script: 


return {
	IndexFilters = {
		Chest = {};
		Underling = {{
			Index = 1;
			Type = "Whitelist";
			Ids = {"Amplifier", "Haste Boots", "Pulverizer", "Plentifier Unit", "Quickstrike", "Accelerator", "Book of Wisdom", "Auto Seller"};
			Id = "Equippable";
			PlayerPerms = "Both";
			RequiredForProcess = false;
		}, {
			Index = 2;
			Type = "Whitelist";
			Ids = {"Amplifier", "Haste Boots", "Pulverizer", "Plentifier Unit", "Quickstrike", "Accelerator", "Book of Wisdom", "Auto Seller"};
			Id = "Equippable";
			PlayerPerms = "Both";
			RequiredForProcess = false;
		}, {
			Index = 3;
			Type = "Whitelist";
			Ids = {"Amplifier", "Haste Boots", "Pulverizer", "Plentifier Unit", "Quickstrike", "Accelerator", "Book of Wisdom", "Auto Seller"};
			Id = "Equippable";
			PlayerPerms = "Both";
			RequiredForProcess = false;
		}, {
			Index = 4;
			Type = "Whitelist";
			Ids = {"Amplifier", "Haste Boots", "Pulverizer", "Plentifier Unit", "Quickstrike", "Accelerator", "Book of Wisdom", "Auto Seller"};
			Id = "Equippable";
			PlayerPerms = "Both";
			RequiredForProcess = false;
		}};
		Furnace = {{
			Index = 1;
			Type = "Whitelist";
			Ids = {"Iron", "Cobalt", "Copper", "Silver", "Gold", "Rhodium"};
			Id = "Ingredient";
			PlayerPerms = "Both";
			RequiredForProcess = true;
		}, {
			Index = 2;
			Type = "Whitelist";
			Ids = {"Coal", "Flame", "Molten Core", "Oak Wood", "Oak Plank", "Oak Stair", "Oak Slab", "Mahogany Wood", "Mahogany Plank", "Mahogany Stair", "Mahogany Slab", "Ash Wood", "Ash Plank", "Ash Stair", "Ash Slab", "Cherry Wood", "Cherry Plank", "Cherry Stair", "Cherry Slab", "Dark Hollow Wood", "Dark Hollow Plank", "Dark Hollow Stair", "Dark Hollow Slab", "Web Wood", "Web Plank", "Web Stair", "Web Slab", "Compressed Coal"};
			Id = "Fuel";
			PlayerPerms = "Both";
			RequiredForProcess = true;
		}, {
			Index = 3;
			Type = "Blacklist";
			Id = "Output";
			Ids = {};
			PlayerPerms = "Withdraw";
		}};
		Campfire = {{
			Index = 1;
			Type = "Whitelist";
			Ids = {"Carrot", "Corn", "White Mushroom", "Red Potato", "Tomato", "Strawberry", "Watermelon", "Wheat", "Pumpkin", "Nightshade Berry", "Tiger Shark", "Crayfish", "King Salmon", "Carp", "Marlin", "Mudskipper", "Shrimp", "Tilapia", "Leech", "Fries", "Baked Potato", "Popcorn", "Bread", "Strawberry Pie", "Pumpkin Bread", "Mashed Potatoes", "Shrimp Scampi", "Spaghetti", "Frozen Fries", "Cornbread", "Pumpkin Pie", "Dough", "Mushroom Risotto", "Watermelon Slices", "Corn on the Cob"};
			Id = "Ingredient";
			PlayerPerms = "Both";
		}, {
			Index = 2;
			Type = "Whitelist";
			Ids = {"Coal", "Flame", "Molten Core", "Oak Wood", "Oak Plank", "Oak Stair", "Oak Slab", "Mahogany Wood", "Mahogany Plank", "Mahogany Stair", "Mahogany Slab", "Ash Wood", "Ash Plank", "Ash Stair", "Ash Slab", "Cherry Wood", "Cherry Plank", "Cherry Stair", "Cherry Slab", "Dark Hollow Wood", "Dark Hollow Plank", "Dark Hollow Stair", "Dark Hollow Slab", "Web Wood", "Web Plank", "Web Stair", "Web Slab", "Compressed Coal"};
			Id = "Fuel";
			PlayerPerms = "Both";
			RequiredForProcess = true;
		}, {
			Index = 3;
			Type = "Blacklist";
			Id = "Output";
			Ids = {};
			PlayerPerms = "Withdraw";
		}};
	};
}

Script name: AnalyticData
  - Script: 


return {
	TaskFunnel = {
		Greenhorn = {1, 2, 3};
		["Block by Block"] = {4, 5};
		["The adventure begins"] = {6, 7};
		["Rising entrepreneur"] = {8};
		["Woodland Harvest"] = {9, 10};
		["Upgrades people Upgrades"] = {11, 12, 13, 14, 15, 16, 17, 18};
		["Slime Slayer"] = {19, 20, 21};
		["Island Evolution"] = {22, 23, 24, 25, 26};
		["Carrot Patch"] = {27, 28, 29};
		["Copper Forge I"] = {30, 31, 32};
		["Copper Forge II"] = {33, 34, 35};
		["Copper Forge III"] = {36, 37, 38, 39, 40};
	};
}

Script name: BlockUtil
  - Script: 


local RunService_upvr = game:GetService("RunService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module_upvr = {
	Resources = {
		Crop = {"Carrot Seed", "Corn Seed", "White Mushroom Seed", "Red Potato Seed", "Strawberry Seed", "Tomato Seed", "Watermelon Seed"};
		Ore = {"Angelite Ore Block", "Basalt Rock Block", "Clay Mud Block", "Coal Ore Block", "Cobalt Ore Block", "Copper Ore Block", "Diamond Ore Block", "Dragonstone Ore Block", "Emerald Ore Block", "Gold Ore Block", "Iron Ore Block", "Marble Rock Block", "Onyx Ore Block", "Rhodium Ore Block", "Ruby Ore Block", "Silver Ore Block", "Stone Rock Block"};
	};
}
function module_upvr.IsBlockResource(arg1, arg2, arg3) -- Line 42
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1, pairs_result2_4, pairs_result3 = pairs(module_upvr.Resources)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 41. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 41. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [18] 13. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [18] 13. Error Block 2 end (CF ANALYSIS FAILED)
end
function module_upvr.TableToVector3(arg1, arg2) -- Line 64
	return Vector3.new(arg2.X, arg2.Y, arg2.Z)
end
function module_upvr.Vector3ToTable(arg1, arg2) -- Line 68
	return {
		X = arg2.X;
		Y = arg2.Y;
		Z = arg2.Z;
	}
end
function module_upvr.RotationCompresser(arg1, arg2, arg3, arg4) -- Line 72
	if arg2 then
		return "RX"..tostring(arg4.Rotation.X)..'Y'..tostring(arg4.Rotation.Y)..'Z'..tostring(arg4.Rotation.Z).."PX"..tostring(arg4.Position.X)..'Y'..tostring(arg4.Position.Y)..'Z'..tostring(arg4.Position.Z)
	end
	local any_split_result1 = arg3:split('P')
	local function extractNumbers(arg1_2) -- Line 83
		local module_2 = {}
		local var16
		for i = 1, #arg1_2 do
			local any_sub_result1 = arg1_2:sub(i, i)
			if tonumber(any_sub_result1) then
				var16 = var16..any_sub_result1
			elseif var16 ~= "" then
				table.insert(module_2, tonumber(var16))
				var16 = ""
			end
		end
		if var16 ~= "" then
			i = tonumber(var16)
			table.insert(module_2, i)
		end
		return module_2
	end
	local extractNumbers_result1 = extractNumbers(any_split_result1[2])
	local extractNumbers_result1_2 = extractNumbers(any_split_result1[1]:split('R')[2])
	return {
		Rotation = {
			X = extractNumbers_result1_2[1];
			Y = extractNumbers_result1_2[2];
			Z = extractNumbers_result1_2[3];
		};
		Position = {
			X = extractNumbers_result1[1];
			Y = extractNumbers_result1[2];
			Z = extractNumbers_result1[3];
		};
	}
end
function module_upvr.ExpandGrid(arg1, arg2, arg3, arg4) -- Line 123
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local tbl_3 = {}
	for i_5 = 1, arg4.X do
		tbl_3[i_5] = {}
		for i_6 = 1, arg4.Y do
			tbl_3[i_5][i_6] = {}
			for i_7 = 1, arg4.Z do
				tbl_3[i_5][i_6][i_7] = '0'
			end
		end
	end
	for i_8 = 1, arg3.X do
		for i_9 = 1, arg3.Y do
			for i_10 = 1, arg3.Z do
				local var92 = (function(arg1_3) -- Line 126, Named "DecodeCompressedString"
					--[[ Upvalues[1]:
						[1]: arg2 (readonly)
					]]
					-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
					local var71
					local function INLINED() -- Internal function, doesn't exist in bytecode
						var71 = arg2:split(',')
						return var71
					end
					if not arg2 or arg2 == "" or not INLINED() then
						var71 = {}
					end
					for _, v_upvr in pairs(var71) do
						local var75
						local var76
						local pcall_result1, _ = pcall(function() -- Line 136
							--[[ Upvalues[1]:
								[1]: v_upvr (readonly)
							]]
							v_upvr:gsub("%([)([^%]]+)%)", "")
						end)
						local var81
						if pcall_result1 then
							if v_upvr:match("%(([^%]]+)%)") then
								var81 = tonumber(v_upvr:match("%(([^%]]+)%)"))
								var81 = type(var81)
								if var81 ~= "number" then
								end
								var81 = v_upvr:split('(')
								var75 = var81[1]
								var81 = v_upvr:split(')')
								var76 = var81[2]
							else
								var81 = v_upvr:match("([^%d]+)(%d+)")
								local any_match_result1, any_match_result2 = v_upvr:match("([^%d]+)(%d+)")
								var75 = any_match_result1
								var76 = any_match_result2
							end
							local function INLINED_2() -- Internal function, doesn't exist in bytecode
								any_match_result1 = tonumber(var76)
								return any_match_result1
							end
							if not var76 or not INLINED_2() then
								any_match_result1 = tonumber(v_upvr)
							end
							var76 = any_match_result1
							var75 = var75 or ""
							any_match_result1 = var76
							for _ = 1, any_match_result1 do
								table.insert({}, var75)
								local var84
							end
						end
					end
					return var84
				end)(arg2)[(i_8 - 1) * arg3.Y * arg3.Z + (i_9 - 1) * arg3.Z + i_10]
				local var93 = tbl_3[i_8]
				if var92 == "" then
					var93 = '0'
				else
					var93 = var92
				end
				var93[i_9][i_10] = var93
			end
		end
	end
	for i_11 = 1, arg4.X do
		for i_12 = 1, arg4.Y do
			for i_13 = 1, arg4.Z do
				table.insert({}, tbl_3[i_11][i_12][i_13])
				local var94
			end
		end
	end
	return (function(arg1_4) -- Line 164, Named "EncodeCompressedString"
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local module_3 = {}
		local var90
		for i_4 = 1, #arg1_4 do
			if arg1_4[i_4] == var90 then
			else
				if var90 == '0' then
					table.insert(module_3, tostring(0 + 1))
				else
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					table.insert(module_3, var90..(0 + 1))
				end
				var90 = arg1_4[i_4]
			end
		end
		if var90 == '0' then
			i_4 = tostring(1)
			table.insert(module_3, i_4)
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			i_4 = var90..1
			table.insert(module_3, i_4)
		end
		return table.concat(module_3, ',')
	end)(var94)
end
function module_upvr.GetPositionFromModel(arg1, arg2) -- Line 241
	if not arg2 then return end
	local var95
	if arg2:IsA("Model") then
		var95 = arg2.PrimaryPart.Position
	else
		var95 = arg2.Position
	end
	return arg1:ToDataPos(arg1:Vector3ToTable(var95))
end
function module_upvr.SetPosition(arg1, arg2, arg3) -- Line 258
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local any_TableToVector3_result1_3 = module_upvr:TableToVector3(arg3)
	if arg2:IsA("Model") then
		arg2:PivotTo(CFrame.new(any_TableToVector3_result1_3, any_TableToVector3_result1_3 + arg2.PrimaryPart.CFrame.LookVector))
	else
		arg2.Position = any_TableToVector3_result1_3
	end
end
function module_upvr.SetRotation(arg1, arg2, arg3) -- Line 271
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local any_TableToVector3_result1_2 = module_upvr:TableToVector3(arg3)
	if arg2:IsA("Model") then
		arg2:PivotTo(CFrame.new(arg2.PrimaryPart.CFrame.Position) * CFrame.Angles(math.rad(any_TableToVector3_result1_2.x), math.rad(any_TableToVector3_result1_2.y), math.rad(any_TableToVector3_result1_2.z)))
	else
		arg2.Orientation = any_TableToVector3_result1_2
	end
end
function module_upvr.CreateBlockModel(arg1, arg2, arg3, arg4, arg5) -- Line 285
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local var98
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		var98 = ReplicatedStorage_upvr.Prefabs.Block:FindFirstChild(arg2):Clone()
		return var98
	end
	if type(arg2) ~= "string" or not INLINED_3() then
		var98 = arg2:Clone()
	end
	module_upvr:SetPosition(var98, arg3)
	module_upvr:SetRotation(var98, arg4 or Vector3.new(0, 0, 0))
	var98.Parent = arg5
	return var98
end
function module_upvr.UpdateBlockTextures(arg1, arg2, arg3) -- Line 298
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if arg2:IsA("Model") then
	else
		for _, v_8 in pairs(arg2:GetDescendants()) do
			if v_8:IsA("Texture") then
				v_8.Transparency = 0
			end
		end
		local any_TableToVector3_result1 = module_upvr:TableToVector3(module_upvr:ToDataPos(arg2.Position))
		for _, v_9 in pairs(arg3) do
			for _, v_10 in pairs(arg2:GetDescendants()) do
				if v_10:IsA("Texture") then
					if Vector3.new(v_9.X, v_9.Y, v_9.Z) == any_TableToVector3_result1 + arg2.CFrame.LookVector and v_10.Face == Enum.NormalId.Front then
						v_10.Transparency = 1
					elseif Vector3.new(v_9.X, v_9.Y, v_9.Z) == any_TableToVector3_result1 - arg2.CFrame.LookVector and v_10.Face == Enum.NormalId.Back then
						v_10.Transparency = 1
					elseif Vector3.new(v_9.X, v_9.Y, v_9.Z) == any_TableToVector3_result1 + arg2.CFrame.RightVector and v_10.Face == Enum.NormalId.Right then
						v_10.Transparency = 1
					elseif Vector3.new(v_9.X, v_9.Y, v_9.Z) == any_TableToVector3_result1 - arg2.CFrame.RightVector and v_10.Face == Enum.NormalId.Left then
						v_10.Transparency = 1
					elseif Vector3.new(v_9.X, v_9.Y, v_9.Z) == any_TableToVector3_result1 + arg2.CFrame.UpVector and v_10.Face == Enum.NormalId.Top then
						v_10.Transparency = 1
					elseif Vector3.new(v_9.X, v_9.Y, v_9.Z) == any_TableToVector3_result1 - arg2.CFrame.UpVector and v_10.Face == Enum.NormalId.Bottom then
						v_10.Transparency = 1
					end
				end
			end
		end
	end
end
local TableUtil_upvr = require(game.ReplicatedStorage.Packages.TableUtil)
function module_upvr.GetAdjacentPositions(arg1, arg2) -- Line 340
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: TableUtil_upvr (readonly)
	]]
	arg2 = module_upvr:Vector3ToTable(arg2)
	local var120 = arg2
	local module = {}
	for _, v_2 in pairs(require(ReplicatedStorage_upvr.CommonModules.CoreUtil).Directions) do
		local any_Copy_result1 = TableUtil_upvr.Copy(var120, true)
		any_Copy_result1.X += v_2.X
		any_Copy_result1.Y += v_2.Y
		any_Copy_result1.Z += v_2.Z
		table.insert(module, any_Copy_result1)
	end
	return module
end
function module_upvr.GetValueAtPosition(arg1, arg2, arg3) -- Line 363
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 21 start (CF ANALYSIS FAILED)
	local var126
	if RunService_upvr:IsServer() then
		var126 = Knit_upvr.GetService("BlockService")
	else
		var126 = Knit_upvr.GetController("BlockController")
	end
	-- KONSTANTERROR: [0] 1. Error Block 21 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [43] 34. Error Block 9 start (CF ANALYSIS FAILED)
	do
		return arg2[arg3.World][arg3.Level][arg3.Index].BlockObj
	end
	do
		return
	end
	-- KONSTANTERROR: [43] 34. Error Block 9 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [56] 43. Error Block 19 start (CF ANALYSIS FAILED)
	if arg2[arg3.X] and arg2[arg3.X][arg3.Y] then
		if arg2[arg3.X][arg3.Y][arg3.Z] == 0 then return end
		return arg2[arg3.X][arg3.Y][arg3.Z]
	end
	-- KONSTANTERROR: [56] 43. Error Block 19 end (CF ANALYSIS FAILED)
end
function module_upvr.PositionToString(arg1, arg2) -- Line 385
	return tostring(arg2.X..':'..arg2.Y..':'..arg2.Z)
end
function module_upvr.GetBlockPositionsFromOrigin(arg1, arg2, arg3) -- Line 389
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if game.PlaceId ~= require(ReplicatedStorage_upvr.CommonModules.CoreUtil).PlaceIds.Island then
		return {}
	end
	if not arg3.Rotation then
		local tbl_2 = {
			X = 0;
			Y = 0;
			Z = 0;
		}
	end
	arg3.Rotation = tbl_2
	tbl_2 = arg3
	local var142 = tbl_2
	if var142 then
		var142 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Block)[arg3.Id]
	end
	if not var142 then
		return {}, {}
	end
	if not var142.Size then
		local tbl = {
			X = 1;
			Y = 1;
			Z = 1;
		}
	end
	local function _(arg1_5) -- Line 404, Named "NormaliseVector"
		return Vector3.new(math.floor(arg1_5.X + 0.5), math.floor(arg1_5.Y + 0.5), math.floor(arg1_5.Z + 0.5))
	end
	local function _(arg1_6) -- Line 408, Named "GetDominantValue"
		if arg1_6.X ~= 0 and arg1_6.X ~= -0 then
			return arg1_6.X
		end
		if arg1_6.Y ~= 0 and arg1_6.Y ~= -0 then
			return arg1_6.Y
		end
		return arg1_6.Z
	end
	local tbl_6 = {}
	local var145 = CFrame.new(arg3.Position.X, arg3.Position.Y, arg3.Position.Z) * CFrame.Angles(math.rad(arg3.Rotation.X), math.rad(arg3.Rotation.Y), math.rad(arg3.Rotation.Z))
	for _, v_3 in ipairs({'X', 'Y', 'Z'}) do
		for i_16, v_4 in pairs({var145.LookVector, var145.RightVector, var145.UpVector}) do
			local var154 = Vector3.new(math.floor(v_4.X + 0.5), math.floor(v_4.Y + 0.5), math.floor(v_4.Z + 0.5))[v_3]
			if var154 ~= 0 and var154 ~= -0 then
				tbl_6[v_3] = var154
			end
		end
	end
	for i_17 = tbl_6.X, tbl.X * tbl_6.X, tbl_6.X do
		for i_18 = tbl_6.Y, tbl.Y * tbl_6.Y, tbl_6.Y do
			i_16 = tbl_6.Z
			v_4 = tbl.Z
			for i_19 = i_16, v_4 * tbl_6.Z, tbl_6.Z do
				v_4 = {}
				v_4.X = arg3.Position.X + tbl_6.X * -1 + i_17
				v_4.Y = arg3.Position.Y + tbl_6.Y * -1 + i_18
				v_4.Z = arg3.Position.Z + tbl_6.Z * -1 + i_19
				local any_GetValueAtPosition_result1 = module_upvr:GetValueAtPosition(arg2, v_4)
				if any_GetValueAtPosition_result1 and any_GetValueAtPosition_result1 ~= 0 then
					table.insert({}, any_GetValueAtPosition_result1)
				end
				table.insert({}, v_4)
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	return {}, {}
end
function module_upvr.BlockValidation(arg1, arg2, arg3, arg4, arg5) -- Line 456
	--[[ Upvalues[4]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 59 start (CF ANALYSIS FAILED)
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local Block = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Block)
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	if not BlockService_2.IsMainHub then
		if arg4.X <= 0 or CoreUtil.IslandMaxSize.X < arg4.X then return end
		if arg4.Y <= 0 or CoreUtil.IslandMaxSize.Y < arg4.Y then return end
		if arg4.Z <= 0 or CoreUtil.IslandMaxSize.Z < arg4.Z then return end
	end
	if RunService_upvr:IsServer() then
		local var166
		if not BlockService_2.IsMainHub then
			if arg2 and BlockService_2.IslandOwner and BlockService_2.IslandOwner ~= arg2 then return end
			local any_GetData_result1 = CoreUtil:GetData(BlockService_2.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
			if not any_GetData_result1 then return end
			local function INLINED_5() -- Internal function, doesn't exist in bytecode
				var166 = CoreUtil.ExpansionIslandSize
				return var166
			end
			if not table.find(any_GetData_result1.OwnedPasses, "Island Expansion") or not INLINED_5() then
				var166 = CoreUtil.DefultIslandSize
			end
			if var166 < any_GetData_result1.BlockCount + 1 then
				Knit_upvr.GetService("PlayerService").Client.Warn:Fire(BlockService_2.IslandOwner, "Island placement limit reached")
				return
			end
		end
		-- KONSTANTWARNING: GOTO [152] #100
	end
	-- KONSTANTERROR: [0] 1. Error Block 59 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [145] 95. Error Block 50 start (CF ANALYSIS FAILED)
	local var168
	if Block[arg3] and Block[arg3].BehaviourData then
		var168 = Block[arg3].BehaviourData
		var168 = arg3
		if not require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours)[var168.Id]:Validate(var168, arg4, arg5) then return end
	end
	local tbl_4 = {}
	tbl_4.Position = arg4
	tbl_4.Rotation = arg5
	tbl_4.Id = arg3
	if #module_upvr:GetBlockPositionsFromOrigin(Knit_upvr.GetController("BlockController").Blocks, tbl_4) ~= 0 then
		var168 = false
	else
		var168 = true
	end
	do
		return var168
	end
	-- KONSTANTERROR: [145] 95. Error Block 50 end (CF ANALYSIS FAILED)
end
function module_upvr.ToDataPos(arg1, arg2) -- Line 522
	return {
		X = arg2.X / 3 + 1;
		Y = arg2.Y / 3 + 1;
		Z = arg2.Z / 3 + 1;
	}
end
function module_upvr.ToWorldPos(arg1, arg2) -- Line 526
	return {
		X = (arg2.X - 1) * 3;
		Y = (arg2.Y - 1) * 3;
		Z = (arg2.Z - 1) * 3;
	}
end
function module_upvr.IteratePositionTable(arg1, arg2, arg3) -- Line 530
	for i_20, v_5 in pairs(arg2) do
		for i_21, v_6 in pairs(v_5) do
			for i_22, v_7 in pairs(v_6) do
				arg3(v_7, {
					X = i_20;
					Y = i_21;
					Z = i_22;
				})
			end
		end
	end
end
function module_upvr.SetValueAtPosition(arg1, arg2, arg3, arg4) -- Line 546
	if arg2[arg3.X] and arg2[arg3.X][arg3.Y] then
		arg2[arg3.X][arg3.Y][arg3.Z] = arg4
	else
		warn("Invalid position")
	end
end
function module_upvr.RoundPosToGridPos(arg1, arg2) -- Line 554
	return Vector3.new(math.floor((arg2.x + 1.5) / 3) * 3, math.floor((arg2.y + 1.5) / 3) * 3, math.floor((arg2.z + 1.5) / 3) * 3)
end
function module_upvr.GenerateBlockIndex(arg1) -- Line 561
	return game:GetService("HttpService"):GenerateGUID(false)
end
return module_upvr

Script name: CommonUtil
  - Script: 


local RunService_upvr = game:GetService("RunService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module_2_upvr = {
	FormatWithCommas = function(arg1, arg2) -- Line 13, Named "FormatWithCommas"
		local any_reverse_result1 = tostring(arg2):reverse():gsub("(%d%d%d)", "%1,"):reverse()
		if any_reverse_result1:sub(1, 1) == ',' then
			any_reverse_result1 = any_reverse_result1:sub(2)
		end
		return any_reverse_result1
	end;
	AbbreviateNumber = function(arg1, arg2) -- Line 25, Named "AbbreviateNumber"
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local module_3 = {"", 'k', 'm', 'b', 't', 'q'}
		local const_number = 1
		local var8
		while 1000 <= var8 and const_number < #module_3 do
			var8 /= 1000
		end
		if var8 % 1 ~= 0 or not string.format("%.0f", var8) then
		end
		return string.format("%.1f", var8)..module_3[const_number + 1]
	end;
	FormatTime = function(arg1, arg2) -- Line 41, Named "FormatTime"
		local var9 = (arg2 - arg2 % 60) / 60
		local var10 = arg2 - var9 * 60
		local var11 = (var9 - var9 % 60) / 60
		local var12 = var9 - var11 * 60
		if 0 < var11 then
			return string.format("%02i", var11)..':'..string.format("%02i", var12)..':'..string.format("%02i", var10)
		end
		if 0 < var12 then
			return string.format("%02i", var12)..':'..string.format("%02i", var10)
		end
		return var10
	end;
}
local TableUtil_upvr = require(game.ReplicatedStorage.Packages.TableUtil)
function module_2_upvr.SameValues(arg1, arg2, arg3) -- Line 58
	--[[ Upvalues[1]:
		[1]: TableUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if not arg2 and not arg3 then
		return true
	end
	if type(arg2) ~= "table" or type(arg3) ~= "table" then
		return false
	end
	if #TableUtil_upvr.Keys(arg2) ~= #TableUtil_upvr.Keys(arg3) then
		return false
	end
	local tbl = {}
	for i, v in pairs(arg2) do
		table.insert({}, arg2[i])
		table.insert(tbl, arg3[i])
		local var31
	end
	table.sort(var31)
	table.sort(tbl)
	for i_2 = 1, #var31 do
		i = var31[i_2]
		v = tbl[i_2]
		if i ~= v then
			i = false
			return i
		end
	end
	return true
end
function module_2_upvr.TableMatch(arg1, arg2, arg3) -- Line 87
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 33 start (CF ANALYSIS FAILED)
	local var36
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var36 = type(arg3)
		return var36 ~= "table"
	end
	if var36 ~= "table" or INLINED() then
		var36 = false
		return var36
	end
	var36 = 0
	for _ in pairs(arg2) do
		var36 += 1
	end
	for _ in pairs(arg3) do
		local var43
	end
	if var36 ~= var43 then
		return false
	end
	local pairs_result1_7, pairs_result2_5, pairs_result3 = pairs(arg2)
	-- KONSTANTERROR: [0] 1. Error Block 33 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [88] 68. Error Block 21 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [88] 68. Error Block 21 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [51] 39. Error Block 37 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [88.11]
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [88.13]
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [88.12]
		return nil ~= nil
	end
	if nil == nil or INLINED_2() then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if nil == "table" then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if not nil then
			-- KONSTANTWARNING: GOTO [88] #68
		end
	else
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [88.10]
		if nil ~= nil then
		end
	end
	-- KONSTANTERROR: [51] 39. Error Block 37 end (CF ANALYSIS FAILED)
end
function module_2_upvr.MaybeYield(arg1, arg2, arg3) -- Line 136
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local tick_result1_upvr = tick()
	local function _() -- Line 140, Named "ResetTimer"
		--[[ Upvalues[3]:
			[1]: arg2 (read and write)
			[2]: tick_result1_upvr (readonly)
			[3]: arg3 (readonly)
		]]
		arg2 = tick_result1_upvr + arg3
	end
	if arg2 <= tick_result1_upvr then
		RunService_upvr.Heartbeat:Wait()
		arg2 = tick_result1_upvr + arg3
	end
	return arg2, tick() - tick_result1_upvr
end
function module_2_upvr.ProgressTextDecode(arg1, arg2, arg3, arg4) -- Line 155
	local string_split_result1 = string.split(arg2 or "", '&')
	for i_5 = 1, #string_split_result1 do
		if i_5 % 2 == 0 then
			local var51 = ""
			if string_split_result1[i_5]:split(':')[1] == "Progress" then
				var51 = tostring(arg3.Progress[arg4][string_split_result1[i_5]:split(':')[2]])
			elseif string_split_result1[i_5]:split(':')[1] == "Goal" then
				var51 = tostring(arg3.Def.TaskParams[arg4][string_split_result1[i_5]:split(':')[2]])
			end
			table.insert({}, var51)
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			table.insert({}, string_split_result1[i_5])
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return table.concat({}, "")
end
local MessagingService_upvr = game:GetService("MessagingService")
local HttpService_upvr = game:GetService("HttpService")
function module_2_upvr.SendGlobalMessage(arg1, arg2, arg3) -- Line 185
	--[[ Upvalues[2]:
		[1]: MessagingService_upvr (readonly)
		[2]: HttpService_upvr (readonly)
	]]
	for i_6 = 1, 5 do
		local pcall_result1_2, pcall_result2_2 = pcall(function() -- Line 190
			--[[ Upvalues[4]:
				[1]: MessagingService_upvr (copied, readonly)
				[2]: arg2 (readonly)
				[3]: HttpService_upvr (copied, readonly)
				[4]: arg3 (readonly)
			]]
			MessagingService_upvr:PublishAsync(arg2, HttpService_upvr:JSONEncode(arg3))
		end)
		if pcall_result1_2 then
			return true
		end
		warn("Failed to publish message: "..pcall_result2_2)
		if i_6 < 5 then
			wait(2)
		end
	end
	return false
end
function module_2_upvr.GetArmourMitigation(arg1, arg2) -- Line 207
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local CoreUtil_3 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetData_result1 = CoreUtil_3:GetData(arg2, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 then
		return 0
	end
	return CoreUtil_3:PlayerLevelFromXP(any_GetData_result1.Masteries.Overall) * 0.007
end
function module_2_upvr.GetHealthFromLevel(arg1, arg2) -- Line 221
	return 50 + arg2 * 2
end
function module_2_upvr.GetCatagorysFromLevelReq(arg1, arg2) -- Line 225
	local next_result1 = next(arg2)
	if not next_result1 then return end
	local next_result1_3, _ = next(arg2[next_result1])
	if not next_result1_3 then return end
	return next_result1, next_result1_3
end
function module_2_upvr.IsMasterySucceeded(arg1, arg2, arg3) -- Line 237
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	if not arg3 then return end
	local next_result1_4 = next(arg3)
	if not next_result1_4 then return end
	local next_result1_2, next_result2 = next(arg3[next_result1_4])
	if not next_result1_2 then return end
	local var66
	if next_result1_2 == "Overall" then
		var66 = module_2_upvr:MasteryLevelFromXP(arg2[next_result1_4][next_result1_2])
	else
		var66 = module_2_upvr:SubMasteryLevelFromXP(arg2[next_result1_4][next_result1_2])
	end
	if next_result2 > var66 then
	else
	end
	return true, var66, next_result2
end
function module_2_upvr.RequireDefinitions(arg1) -- Line 259
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	for _, v_2 in pairs(ReplicatedStorage_upvr.CommonModules.DefinitionModules:GetChildren()) do
		if v_2:IsA("ModuleScript") then
			({})[v_2.Name] = require(v_2)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module_2_upvr.GetDefinitionFromId(arg1, arg2) -- Line 274
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	for _, v_3 in pairs(module_2_upvr:RequireDefinitions()) do
		for i_9, v_4 in pairs(v_3) do
			if i_9 == arg2 then
				return v_4
			end
		end
	end
end
function module_2_upvr.GetLevelReqDefs(arg1) -- Line 283
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	for _, v_5 in pairs(module_2_upvr:RequireDefinitions()) do
		for _, v_6 in pairs(v_5) do
			if v_6.LevelReq then
				for i_12, v_7 in pairs(v_6.LevelReq) do
					if not module[i_12] then
						module[i_12] = {}
					end
					for i_13, v_8 in pairs(v_7) do
						if not module[i_12][i_13] then
							module[i_12][i_13] = {}
						end
						if not module[i_12][i_13][v_8] then
							module[i_12][i_13][v_8] = {
								UnlockedItems = {};
							}
						end
						table.insert(module[i_12][i_13][v_8].UnlockedItems, {
							Catagory = v_6.Catagory;
							ItemId = v_6.Id;
						})
					end
				end
			end
		end
	end
	return module
end
function module_2_upvr.PlayerLevelFromXP(arg1, arg2) -- Line 307
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2 then
		return 0, 0
	end
	local CoreUtil_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	for i_14, v_9 in pairs(CoreUtil_2.PlayerFromXP) do
		if arg2 < v_9 then
			return i_14 - 1, v_9 - arg2 / v_9
		end
	end
	return #CoreUtil_2.PlayerFromXP, 1
end
function module_2_upvr.MasteryLevelFromXP(arg1, arg2) -- Line 320
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2 then
		return 0, 0
	end
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	for i_15, v_10 in pairs(CoreUtil.MasteryFromXP) do
		if arg2 < v_10 then
			return i_15 - 1, v_10 - arg2 / v_10
		end
	end
	return #CoreUtil.MasteryFromXP, 1
end
function module_2_upvr.SubMasteryLevelFromXP(arg1, arg2) -- Line 333
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2 then
		return 0, 0
	end
	local CoreUtil_4 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	for i_16, v_11 in pairs(CoreUtil_4.SubMasteryFromXP) do
		if arg2 < v_11 then
			return i_16 - 1, v_11 - arg2 / v_11
		end
	end
	return #CoreUtil_4.SubMasteryFromXP, 1
end
function module_2_upvr.GenerateRandomFromWeight(arg1, arg2) -- Line 348
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local type_result1 = type(arg2[1])
	local var151
	for _, v_12 in pairs(arg2) do
		local function INLINED_3() -- Internal function, doesn't exist in bytecode
			var151 = v_12.Weight
			return var151
		end
		if type_result1 ~= "table" or not INLINED_3() then
			var151 = v_12
		end
		local var152 = 0 + var151
	end
	local var156
	for i_18, v_13 in pairs(arg2) do
		local function INLINED_4() -- Internal function, doesn't exist in bytecode
			var156 = v_13.Weight
			return var156
		end
		if type_result1 ~= "table" or not INLINED_4() then
			var156 = v_13
		end
		if math.random() * var152 <= 0 + var156 then
			if type_result1 ~= "table" or not v_13 then
			end
			for _, v_14 in pairs(require(ReplicatedStorage_upvr.CommonModules.CoreUtil).ItemRaritys) do
				if var156 / var152 <= v_14.MinimumChance then
				end
			end
			return i_18, v_14.Name
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x2)
	return i_18, v_14.Name
end
function module_2_upvr.ValidateHumanoid(arg1, arg2) -- Line 385
	if not arg2 or not arg2.Parent then return end
	if not arg2.PrimaryPart then return end
	if not arg2:FindFirstChild("HumanoidRootPart") then return end
	if not arg2:FindFirstChild("Humanoid") then return end
	if arg2.Humanoid.Health == 0 then return end
	return true
end
function module_2_upvr.RecurseTable(arg1, arg2, arg3) -- Line 397
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	for i_20, v_15 in pairs(arg2) do
		if type(v_15) == "table" then
			module_2_upvr:RecurseTable(v_15, arg3)
		else
			arg3(arg2, i_20, v_15)
		end
	end
end
function module_2_upvr.CustomYeild(arg1, arg2, ...) -- Line 430
	local tbl_upvr = {}
	local BindableEvent_upvr = Instance.new("BindableEvent")
	local pairs_result1_10, pairs_result2_8, pairs_result3_6 = pairs({...})
	for _, v_16 in pairs_result1_10, pairs_result2_8, pairs_result3_6 do
		table.insert(tbl_upvr, v_16:Connect(function(...) -- Line 437
			--[[ Upvalues[1]:
				[1]: BindableEvent_upvr (readonly)
			]]
			BindableEvent_upvr:Fire(...)
		end))
	end
	pairs_result1_10 = arg2
	local var176_upvr = pairs_result1_10
	if var176_upvr then
		var176_upvr = task.delay
		var176_upvr = var176_upvr(arg2, function() -- Line 442
			--[[ Upvalues[1]:
				[1]: BindableEvent_upvr (readonly)
			]]
			BindableEvent_upvr:Fire()
		end)
	end
	local var179_upvw
	var179_upvw = BindableEvent_upvr.Event:Connect(function() -- Line 447
		--[[ Upvalues[4]:
			[1]: var179_upvw (read and write)
			[2]: BindableEvent_upvr (readonly)
			[3]: var176_upvr (readonly)
			[4]: tbl_upvr (readonly)
		]]
		task.wait()
		var179_upvw:Disconnect()
		BindableEvent_upvr:Destroy()
		if var176_upvr then
			task.cancel(var176_upvr)
		end
		for _, v_17 in pairs(tbl_upvr) do
			v_17:Disconnect()
		end
	end)
	return BindableEvent_upvr.Event:Wait()
end
function module_2_upvr.LoadAnimation(arg1, arg2, arg3) -- Line 460
	local Animation = Instance.new("Animation", arg2)
	Animation.AnimationId = arg3
	return arg2:LoadAnimation(Animation)
end
function module_2_upvr.GetModelFromDef(arg1, arg2) -- Line 466
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not arg2.Catagory or not ReplicatedStorage_upvr.Prefabs:FindFirstChild(arg2.Catagory) then return end
	local SOME = ReplicatedStorage_upvr.Prefabs[arg2.Catagory]:FindFirstChild(arg2.Id)
	if not SOME then return end
	return SOME
end
function module_2_upvr.GetObjectFromIndex(arg1, arg2, arg3) -- Line 473
	for i_23, v_18 in pairs(arg2) do
		if arg3 == v_18.Index then
			return v_18, i_23
		end
	end
end
function module_2_upvr.WeldToPart(arg1, arg2, arg3) -- Line 481
	-- KONSTANTERROR: [0] 1. Error Block 12 start (CF ANALYSIS FAILED)
	local var192
	if arg2:IsA("Model") then
		var192 = var192.PrimaryPart
		-- KONSTANTWARNING: GOTO [15] #13
	end
	-- KONSTANTERROR: [0] 1. Error Block 12 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [8] 7. Error Block 13 start (CF ANALYSIS FAILED)
	if var192:IsA("BasePart") then
	else
		return
	end
	local Weld = Instance.new("Weld")
	Weld.Part0 = var192
	Weld.Part1 = arg3
	Weld.C0 = var192.CFrame:inverse()
	Weld.C1 = arg3.CFrame:inverse()
	Weld.Parent = var192
	do
		return Weld
	end
	-- KONSTANTERROR: [8] 7. Error Block 13 end (CF ANALYSIS FAILED)
end
local Promise_upvr = require(game.ReplicatedStorage.Packages.Promise)
function module_2_upvr.GetData(arg1, arg2, arg3) -- Line 503
	--[[ Upvalues[1]:
		[1]: Promise_upvr (readonly)
	]]
	local var195
	if not var195 then return end
	if Promise_upvr.is(var195) then
		local _, any_await_result2 = var195:await()
		var195 = any_await_result2
	end
	return var195
end
local BadgeService_upvr = game:GetService("BadgeService")
function module_2_upvr.AwardBadge(arg1, arg2, arg3) -- Line 520
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: BadgeService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 17 start (CF ANALYSIS FAILED)
	if not arg2 or not arg3 or RunService_upvr:IsClient() then return end
	local pcall_result1, pcall_result2 = pcall(function() -- Line 527
		--[[ Upvalues[2]:
			[1]: BadgeService_upvr (copied, readonly)
			[2]: arg3 (readonly)
		]]
		return BadgeService_upvr:GetBadgeInfoAsync(arg3)
	end)
	-- KONSTANTERROR: [0] 1. Error Block 17 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [57] 49. Error Block 13 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [57] 49. Error Block 13 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [60] 52. Error Block 14 start (CF ANALYSIS FAILED)
	warn("Error while fetching badge info: "..pcall_result2)
	-- KONSTANTERROR: [60] 52. Error Block 14 end (CF ANALYSIS FAILED)
end
return module_2_upvr

Script name: InventoryUtil
  - Script: 


local RunService_upvr = game:GetService("RunService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local module_upvr = {
	ItemHasEnchantment = function(arg1, arg2, arg3) -- Line 10, Named "ItemHasEnchantment"
		local var4_upvw = false
		local function CheckTable_upvr(arg1_2) -- Line 14, Named "CheckTable"
			--[[ Upvalues[3]:
				[1]: CheckTable_upvr (readonly)
				[2]: arg3 (readonly)
				[3]: var4_upvw (read and write)
			]]
			for i, v in pairs(arg1_2) do
				if type(v) == "table" then
					CheckTable_upvr(v)
				elseif i == arg3 then
					var4_upvw = true
				end
			end
		end
		if arg2.Enchantments then
			CheckTable_upvr(arg2.Enchantments)
			return var4_upvw
		end
	end;
}
function module_upvr.GetSameItemInInventory(arg1, arg2, arg3) -- Line 31
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	for _, v_2 in pairs(module_upvr:GetItemsInInventory(arg2, arg3.Id)) do
		if module_upvr:SameItem(arg3, v_2) then
			return v_2
		end
	end
end
function module_upvr.SameItem(arg1, arg2, arg3) -- Line 40
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	if arg2.Id == arg3.Id then
		for i_3, v_3 in pairs(CoreUtil.UnderlingEquippables) do
			for _, v_4 in pairs(v_3) do
				if arg2.Id == v_4 then
					return false
				end
			end
		end
		if not arg2.Enchantments and not arg3.Enchantments then
			return true
		end
		if arg2.Enchantments and arg3.Enchantments then
			i_3 = arg2.Enchantments
			v_3 = arg3.Enchantments
			i_3 = v_3.SetEnchantments
			v_3 = arg2.Enchantments
			i_3 = v_3.RolledEnchantments
			v_3 = arg3.Enchantments.RolledEnchantments
			return CoreUtil:SameValues(i_3.SetEnchantments, i_3) and CoreUtil:SameValues(i_3, v_3)
		end
		return false
	end
end
function module_upvr.EquipTool(arg1, arg2, arg3, arg4) -- Line 68
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 98 start (CF ANALYSIS FAILED)
	local clone = arg4:Clone()
	local var27
	if RunService_upvr:IsClient() then
		var27 = "ClientTool"
	else
		var27 = "ServerTool"
	end
	clone.Name = var27
	var27 = clone:IsA("Model")
	-- KONSTANTERROR: [0] 1. Error Block 98 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [279] 192. Error Block 58 start (CF ANALYSIS FAILED)
	local clone_2 = ReplicatedStorage_upvr.Prefabs.Gliders:FindFirstChild(arg3.Id):Clone()
	clone_2:SetPrimaryPartCFrame(arg2:WaitForChild("UpperTorso").CFrame)
	clone_2.Name = "Glider"
	local Weld = Instance.new("Weld")
	Weld.Part0 = clone_2.PrimaryPart
	Weld.Part1 = arg2.UpperTorso
	Weld.C0 = clone_2.PrimaryPart.CFrame:inverse()
	Weld.C1 = arg2.UpperTorso.CFrame:inverse()
	Weld.Parent = clone_2.PrimaryPart
	clone_2.Parent = clone
	do
		return clone
	end
	-- KONSTANTERROR: [279] 192. Error Block 58 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [341] 229. Error Block 101 start (CF ANALYSIS FAILED)
	var27 = arg3.Catagory
	if var27 == "Block" then
		var27 = false
		clone.CanCollide = var27
		var27 = false
		clone.Anchored = var27
		var27 = clone.Size
		var27 /= 2
		clone.Size = var27
	end
	var27 = clone
	if var27:IsA("Model") then
		var27:SetPrimaryPartCFrame(arg2.RightHand.CFrame)
		var27 = var27.PrimaryPart
	elseif var27:IsA("BasePart") then
		var27.CFrame = arg2.RightHand.CFrame
	end
	require(ReplicatedStorage_upvr.CommonModules.CoreUtil):WeldToPart(clone, arg2.RightHand)
	clone.Parent = arg2
	-- KONSTANTERROR: [341] 229. Error Block 101 end (CF ANALYSIS FAILED)
end
function module_upvr.GetItemsInInventory(arg1, arg2, arg3) -- Line 197
	for _, v_5 in pairs(arg2) do
		if v_5.Id == arg3 then
			table.insert({}, v_5)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
function module_upvr.GetSlotFromIndex(arg1, arg2, arg3) -- Line 207
	for i_6, v_6 in pairs(arg2) do
		if v_6.Index == arg3 then
			return v_6, i_6
		end
	end
end
function module_upvr.IndexFilter(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 216
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local pairs_result1_3, pairs_result2, pairs_result3_5 = pairs(arg3)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [12] 10. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [12] 10. Error Block 4 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 6. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [12.12]
	-- KONSTANTERROR: [6] 6. Error Block 2 end (CF ANALYSIS FAILED)
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function module_upvr.SwapInventorySlots(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 241
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: Knit_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local CoreUtil_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local var93
	if arg3 then
		local any_GetSlotFromIndex_result1_3, any_GetSlotFromIndex_result2_2 = CoreUtil_2:GetSlotFromIndex(arg3.Storage, arg5)
		local var96 = any_GetSlotFromIndex_result1_3
		local var97 = any_GetSlotFromIndex_result2_2
	end
	if arg4 then
		local any_GetSlotFromIndex_result1_2, any_GetSlotFromIndex_result2_4 = CoreUtil_2:GetSlotFromIndex(arg4.Storage, arg6)
		var93 = any_GetSlotFromIndex_result1_2
		local var100 = any_GetSlotFromIndex_result2_4
		local var101
	end
	if arg3 then
		var101 = arg3.BehaviourId
		if var101 then
			var101 = CoreUtil_2.IndexFilters[arg3.BehaviourId]
		end
		if var101 then
			if var93 and not module_upvr:IndexFilter("Adding", var101, var93, arg5, arg7) then return end
			if var96 and not module_upvr:IndexFilter("Removing", var101, var96, var96.Index, arg7) then return end
		end
	end
	if arg4 then
		if arg4.BehaviourId then
		end
		if CoreUtil_2.IndexFilters[arg4.BehaviourId] then
			if var96 then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				if not module_upvr:IndexFilter("Adding", CoreUtil_2.IndexFilters[arg4.BehaviourId], var96, arg6, arg7) then return end
			end
			if var93 then
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				if not module_upvr:IndexFilter("Removing", CoreUtil_2.IndexFilters[arg4.BehaviourId], var93, var93.Index, arg7) then return end
			end
		end
	end
	if not arg2 and var96 and var93 and module_upvr:SameItem(var96, var93) then
		if var93.Gifted and not var96.Gifted then
			var93.Gifted = false
		end
		var93.Stack += var96.Stack
		table.remove(arg3.Storage, var97)
		return true
	end
	if var96 then
		var96.Index = arg6
		if not arg2 then
			for _, v_7 in pairs(arg4.Storage) do
				if module_upvr:SameItem(v_7, var96) then
					v_7.Stack += var96.Stack
				end
			end
			if not true then
				table.insert(arg4.Storage, var96)
			end
		end
	end
	if var93 then
		var93.Index = arg5
		if not arg2 then
			for _, v_8 in pairs(arg3.Storage) do
				if module_upvr:SameItem(v_8, var93) then
					v_8.Stack += var93.Stack
				end
			end
			if not true then
				table.insert(arg3.Storage, var93)
			end
		end
	end
	if not arg2 then
		if var93 and var96 then
			if var97 < var100 then
				table.remove(arg3.Storage, var97)
				table.remove(arg4.Storage, var100)
			else
				table.remove(arg4.Storage, var100)
				table.remove(arg3.Storage, var97)
			end
		else
			if var93 then
				table.remove(arg4.Storage, var100)
			end
			if var96 then
				table.remove(arg3.Storage, var97)
			end
		end
	end
	if RunService_upvr:IsServer() then
		Knit_upvr.GetService("InventoryService"):ToggleChestIndestructibilitys()
	end
	return true
end
function module_upvr.GetFirstFreeInventorySpace(arg1, arg2, arg3, arg4) -- Line 358
	-- KONSTANTERROR: [0] 1. Error Block 14 start (CF ANALYSIS FAILED)
	if not arg4 then
		local tbl = {
			Min = 1;
		}
		tbl.Max = arg2
	end
	local _ = tbl
	-- KONSTANTERROR: [0] 1. Error Block 14 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [15] 12. Error Block 4 start (CF ANALYSIS FAILED)
	local _, _, _ = pairs(arg3)
	-- KONSTANTERROR: [15] 12. Error Block 4 end (CF ANALYSIS FAILED)
end
function module_upvr.RemoveFullStacks(arg1, arg2, arg3) -- Line 370
	for i_9, v_9 in pairs(arg2) do
		if arg3 and v_9.Stack + arg3 <= 64 then
			({})[i_9] = v_9
		elseif not arg3 and v_9.Stack ~= 64 then
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			;({})[i_9] = v_9
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return {}
end
return module_upvr

Script name: MobUtil
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module_upvr = {
	GetEquippableTypeFromId = function(arg1, arg2) -- Line 11, Named "GetEquippableTypeFromId"
		--[[ Upvalues[1]:
			[1]: ReplicatedStorage_upvr (readonly)
		]]
		for i, v in pairs(require(ReplicatedStorage_upvr.CommonModules.CoreUtil).UnderlingEquippables) do
			for _, v_2 in pairs(v) do
				if v_2 == arg2 then
					return i
				end
			end
		end
	end;
	UnderlingHasEquipped = function(arg1, arg2, arg3) -- Line 20, Named "UnderlingHasEquipped"
		for _, v_3 in pairs(arg2) do
			if v_3.Id == arg3 then
				return true
			end
		end
	end;
	ValidateTargetResource = function(arg1, arg2) -- Line 29, Named "ValidateTargetResource"
		--[[ Upvalues[2]:
			[1]: Knit_upvr (readonly)
			[2]: ReplicatedStorage_upvr (readonly)
		]]
		if not arg2 or not arg2.TargetResource then return end
		local any_GetValueAtPosition_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(Knit_upvr.GetService("BlockService").Blocks, arg2.TargetResource.Position)
		if not any_GetValueAtPosition_result1 or not any_GetValueAtPosition_result1.Part or not any_GetValueAtPosition_result1.Part.Parent then return end
		for _, v_4 in pairs(Knit_upvr.GetService("MobService").Anchors) do
			if v_4.Underling and arg2.Index ~= v_4.Underling.Index and v_4.Underling.TargetResource and v_4.Underling.TargetResource.Index == any_GetValueAtPosition_result1.Index then return end
		end
		return true
	end;
	ValidateTargetPlayer = function(arg1, arg2) -- Line 51, Named "ValidateTargetPlayer"
		--[[ Upvalues[1]:
			[1]: ReplicatedStorage_upvr (readonly)
		]]
		if arg2.TargetPlayer and game.Players:FindFirstChild(arg2.TargetPlayer.Name) then
			return require(ReplicatedStorage_upvr.CommonModules.CoreUtil):ValidateHumanoid(arg2.TargetPlayer.Character)
		end
	end;
}
function module_upvr.GetDistanceFromTargetPlayer(arg1, arg2) -- Line 58
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if module_upvr:ValidateTargetPlayer(arg2) and require(ReplicatedStorage_upvr.CommonModules.CoreUtil):ValidateHumanoid(arg2.Model) then
		return (arg2.TargetPlayer.Character.HumanoidRootPart.Position - arg2.Model.PrimaryPart.Position).magnitude
	end
	return math.huge
end
function module_upvr.CreateHitbox(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 76
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	if not require(ReplicatedStorage_upvr.CommonModules.CoreUtil):ValidateHumanoid(arg2) then return end
	local Part = Instance.new("Part")
	Part.Name = "Hitbox"
	Part.Size = Vector3.new(arg3, arg4, arg5)
	Part.Anchored = true
	Part.CanCollide = false
	Part.Transparency = 1
	Part.BrickColor = BrickColor.new("Bright red")
	Part.CFrame = arg2.HumanoidRootPart.CFrame + arg2.HumanoidRootPart.CFrame.LookVector * (arg5 / 2 + arg6)
	Part.Parent = workspace
	return Part
end
local RunService_upvr = game:GetService("RunService")
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function module_upvr.GetRandomSpawnPosition(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 101
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: TableUtil_upvr (readonly)
	]]
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local var39
	if RunService_upvr:IsServer() then
		var39 = Knit_upvr.GetService("BlockService").Blocks
	else
		var39 = Knit_upvr.GetController("BlockController").Blocks
	end
	local vector3 = Vector3.new(arg3, arg3, arg3)
	local var41 = arg2 - 0.5 * vector3
	local var42 = arg2 + 0.5 * vector3
	local var43 = arg7 or 3
	local any_ReadVoxels_result1, any_ReadVoxels_result2 = game.Workspace.Terrain:ReadVoxels(Region3.new(var41, var42):ExpandToGrid(4), 4)
	local Size = any_ReadVoxels_result1.Size
	for i_5 = 1, Size.X, var43 do
		for i_6 = 1, Size.Y, var43 do
			for i_7 = 1, Size.Z, var43 do
				if any_ReadVoxels_result2[i_5][i_6][i_7] == 0 then
					table.insert({}, Vector3.new(i_5, i_6, i_7))
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	for _, v_5 in pairs(TableUtil_upvr.Shuffle({})) do
		i_6 = v_5 / Size
		local RaycastParams_new_result1 = RaycastParams.new()
		RaycastParams_new_result1.CollisionGroup = "Mob"
		local workspace_Raycast_result1 = workspace:Raycast(var41 + i_6 * (var42 - var41), Vector3.new(0, -10, 0), RaycastParams_new_result1)
		local function INLINED() -- Internal function, doesn't exist in bytecode
			local var52 = workspace_Raycast_result1.Position + Vector3.new(0, arg4, 0)
			return arg6
		end
		if workspace_Raycast_result1 and workspace_Raycast_result1.Distance >= arg4 and (not INLINED() or arg6 >= (arg2 - var52).magnitude) then
			if not CoreUtil:GetValueAtPosition(var39, CoreUtil:Vector3ToTable(CoreUtil:ToDataPos(CoreUtil:RoundPosToGridPos(var52)))) and #workspace:GetPartBoundsInBox(CFrame.new(var52), Vector3.new(arg4, arg4, arg4)) == 0 then
				return var52
			end
		end
	end
end
function module_upvr.IsMobMiningResource(arg1, arg2) -- Line 178
	--[[ Upvalues[1]:
		[1]: Knit_upvr (readonly)
	]]
	for _, v_6 in pairs(Knit_upvr.GetService("MobService").Anchors) do
		if v_6.Underling and v_6.Underling.TargetBlockObject and v_6.Underling.TargetBlockObject.Index == arg2 then
			return true
		end
	end
	return false
end
function module_upvr.GetUnderlingFromIndex(arg1, arg2) -- Line 192
	--[[ Upvalues[1]:
		[1]: Knit_upvr (readonly)
	]]
	for _, v_7 in pairs(Knit_upvr.GetService("MobService").Anchors) do
		if v_7.Underling and v_7.Underling.Index == arg2 then
			return v_7.Underling, v_7
		end
	end
end
return module_upvr

Script name: ValidationUtil
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local module_upvr = {}
function module_upvr.ValidateItemSlot(arg1, arg2) -- Line 11
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	local any_CleanItemSlot_result1 = module_upvr:CleanItemSlot(arg2)
	local any_GetDefinitionFromId_result1_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetDefinitionFromId(any_CleanItemSlot_result1.Id)
	if not any_GetDefinitionFromId_result1_2 then return end
	if any_CleanItemSlot_result1.Catagory ~= any_GetDefinitionFromId_result1_2.Catagory then return end
	if not module_upvr:ValidateInteger(any_CleanItemSlot_result1.Index) or any_CleanItemSlot_result1.Index <= 0 then return end
	return true
end
function module_upvr.CleanItemSlot(arg1, arg2) -- Line 28
	return {
		Id = arg2.Id;
		Stack = arg2.Stack;
		Enchantments = arg2.Enchantments;
		Index = arg2.Index;
		Catagory = arg2.Catagory;
	}
end
function module_upvr.ValidateDeveloperProductId(arg1, arg2) -- Line 41
	return arg1:ValidateInteger(arg2)
end
function module_upvr.ValidateCraft(arg1, arg2, arg3, arg4) -- Line 45
	local Parent_2 = require(script.Parent.Parent)
	for i, v in pairs(arg3.CraftIngredients) do
		local function INLINED() -- Internal function, doesn't exist in bytecode
			local any_GetSameItemInInventory_result1 = Parent_2:GetSameItemInInventory(arg2, tbl)
			tbl.Catagory = any_GetDefinitionFromId_result1_4.Catagory
			tbl.Id = any_GetDefinitionFromId_result1_4.Id
			local tbl = {}
			local any_GetDefinitionFromId_result1_4 = Parent_2:GetDefinitionFromId(i)
			return any_GetSameItemInInventory_result1
		end
		if i ~= "BenchType" and i ~= "Output" and (not INLINED() or any_GetSameItemInInventory_result1.Stack < v * (arg4 or 1)) then
			return false
		end
	end
	return true
end
function module_upvr.ValidatePlayerIsIslandOwner(arg1, arg2) -- Line 57
	--[[ Upvalues[1]:
		[1]: Knit_upvr (readonly)
	]]
	if arg2 == Knit_upvr.GetService("BlockService").IslandOwner then
		return true
	end
end
function module_upvr.ValidateString(arg1, arg2) -- Line 62
	if type(arg2) == "string" then
		return true
	end
end
function module_upvr.ValidatePlayerJoin(arg1, arg2) -- Line 66
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	local BlockService_3 = Knit_upvr.GetService("BlockService")
	if game.PlaceId ~= require(ReplicatedStorage_upvr.CommonModules.CoreUtil).PlaceIds.Island then
		return true
	end
	if BlockService_3.ServerShutDown then
		print("Server Shut Down is true", arg2.UserId)
		return false
	end
	if not BlockService_3.IslandOwner and #game.Players:GetPlayers() == 1 then
		return true
	end
	if BlockService_3.IslandOwner == arg2 then
		return true
	end
	if table.find(Knit_upvr.GetService("PlayerService").PlayerAcceptanceList, arg2.Name) then
		print("Player is on acceptance list", arg2.UserId)
		return true
	end
	print("Shutdown")
end
function module_upvr.ValidatePlayerDistance(arg1, arg2, arg3) -- Line 100
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local Parent_3 = require(script.Parent.Parent)
	local var18
	if not Parent_3:ValidateHumanoid(arg2.Character) then
		warn("NO CHARACTER")
	else
		if not module_upvr:ValidatePosition(var18) then
			warn("NO POSITION")
			return
		end
		if game.PlaceId ~= Parent_3.PlaceIds.Island then
			var18 = workspace.Nodes[var18.World][var18.Level][var18.Index].Position
		else
			var18 = Parent_3:TableToVector3(Parent_3:ToWorldPos(var18))
		end
		if (arg2.Character.HumanoidRootPart.Position - var18).Magnitude <= Parent_3.PlacementRange * 2 then
			return true
		end
	end
end
function module_upvr.ValidateMobIds(arg1, arg2, arg3) -- Line 119
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if type(arg3) ~= "table" then return end
	for i_2, v_2 in pairs(arg3) do
		if type(i_2) ~= "number" or 0 + 1 ~= i_2 then return end
		if not module_upvr:ValidateString(v_2) then return end
	end
	return true
end
function module_upvr.ValidateEquippedTool(arg1, arg2, arg3) -- Line 134
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: module_upvr (readonly)
	]]
	if not module_upvr:ValidateString(arg3) then
	else
		local any_GetData_result1_2 = require(script.Parent.Parent):GetData(arg2, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1_2 then return end
		if any_GetData_result1_2.EquippedItemId == arg3 then
			return true
		end
	end
end
function module_upvr.ValidateDamage(arg1, arg2, arg3, arg4) -- Line 151
	--[[ Upvalues[1]:
		[1]: Knit_upvr (readonly)
	]]
	local Parent = require(script.Parent.Parent)
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local any_GetData_result1 = Parent:GetData(arg2, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 or not any_GetData_result1.EquippedItemIndex or not BlockService_2.IsMainHub and not any_GetData_result1.IslandSettings.CollaborativeBuilding and arg2 ~= BlockService_2.IslandOwner then
		warn("no data or no island owner")
	else
		if type(arg3) ~= "number" then
			warn("not number")
			return
		end
		local var47 = arg4
		if not var47 then
			var47 = Parent:GetSlotFromIndex(any_GetData_result1.Inventory, any_GetData_result1.EquippedItemIndex)
		end
		if not var47 then return end
		local any_GetDefinitionFromId_result1_3 = Parent:GetDefinitionFromId(var47.Id)
		if not any_GetDefinitionFromId_result1_3 or any_GetDefinitionFromId_result1_3.Catagory ~= "Tool" then return end
		local var49 = Parent:RequireDefinitions().Tool[any_GetDefinitionFromId_result1_3.Id]
		if not var49 or not var49.DamageTable then return end
		for _, v_4 in pairs(var49.DamageTable) do
			if any_GetData_result1.Effects["Mining Boost"] then
				local any_GetCurrentTier_result1 = Parent:GetCurrentTier(any_GetData_result1.Effects["Mining Boost"])
				if any_GetCurrentTier_result1 then
					v_4 *= 1 + (10 * any_GetCurrentTier_result1.Tier ^ 2 - 20 * any_GetCurrentTier_result1.Tier + 20) / 100
				end
			end
			if Parent:ItemHasEnchantment(var47, "Pointy") then
				v_4 *= 1.1
			end
			if Parent:ItemHasEnchantment(var47, "Sharp") then
				v_4 *= 1.2
			end
			if Parent:ItemHasEnchantment(var47, "Dull") then
				v_4 *= 0.9
			end
			if v_4 == arg3 then
				return true
			end
		end
		warn("no tool does this damage")
	end
end
function module_upvr.ValidatePosition(arg1, arg2) -- Line 206
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [16] 11. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [16] 11. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [23] 16. Error Block 3 start (CF ANALYSIS FAILED)
	warn("var typew wrong")
	do
		return
	end
	-- KONSTANTERROR: [23] 16. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [28] 20. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [28] 20. Error Block 4 end (CF ANALYSIS FAILED)
end
function module_upvr.ValidateRotation(arg1, arg2) -- Line 232
	local tbl_2 = {0, 90, 180, 270, 360}
	if type(arg2) ~= "table" and type(arg2) ~= "vector" then
		warn("var typew wrong")
	else
		if not arg2.X or not arg2.Y or not arg2.Z then
			warn("structure wrong")
			return
		end
		if type(arg2.X) ~= "number" or math.floor(arg2.X) ~= arg2.X or arg2.X < 0 then
			warn("not int")
			return
		end
		if type(arg2.Y) ~= "number" or math.floor(arg2.Y) ~= arg2.Y or arg2.Y < 0 then
			warn("not int")
			return
		end
		if type(arg2.Z) ~= "number" or math.floor(arg2.Z) ~= arg2.Z or arg2.Z < 0 then
			warn("not int")
			return
		end
		if table.find(tbl_2, arg2.X) and table.find(tbl_2, arg2.Y) and table.find(tbl_2, arg2.Z) then
			return true
		end
	end
end
function module_upvr.ValidateInteger(arg1, arg2) -- Line 247
	if type(arg2) == "number" and math.floor(arg2) == arg2 then
		return true
	end
end
function module_upvr.ValidateStorageId(arg1, arg2) -- Line 251
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if not module_upvr:ValidateString(arg2) then return end
	local any_split_result1_2 = arg2:split('/')
	if #any_split_result1_2 ~= 3 then return end
	for _, v_3 in pairs(any_split_result1_2) do
		local tonumber_result1 = tonumber(v_3)
		if not tonumber_result1 or math.floor(tonumber_result1) ~= tonumber_result1 or tonumber_result1 < 0 then
			warn("not int")
			return
		end
	end
	return true
end
function module_upvr.ValidateInventoryType(arg1, arg2) -- Line 262
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if not module_upvr:ValidateString(arg2) then
	else
		if arg2 == "Inventory" then
			return true
		end
		local any_split_result1 = arg2:split('&')
		if any_split_result1[1] == "Underling" or any_split_result1[1] == "Storage" then
			if not any_split_result1[2] or not module_upvr:ValidateString(any_split_result1[2]) then return end
			return true
		end
	end
end
function module_upvr.ValidateDef(arg1, arg2) -- Line 272
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	if type(arg2) ~= "table" or not arg2.Id or not module_upvr:ValidateString(arg2.Id) then
	else
		local any_GetDefinitionFromId_result1_5 = require(script.Parent.Parent):GetDefinitionFromId(arg2.Id)
		if any_GetDefinitionFromId_result1_5 then
			return any_GetDefinitionFromId_result1_5
		end
	end
end
return module_upvr

Script name: TaskUtil
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local module_upvr = {
	TutorialQuestIds = {"Greenhorn", "Block by Block", "The adventure begins", "Rising entrepreneur", "Woodland Harvest", "Upgrades people Upgrades", "Slime Slayer", "Island Evolution", "Carrot Patch", "Level Up", "Craft the Crafter", "Place Bench", "Quest1", "Quest2"};
}
local _ = {
	Combat = Color3.fromRGB(255, 0, 0);
	Mining = Color3.fromRGB(0, 170, 255);
	Farm = Color3.fromRGB(170, 85, 0);
	Build = Color3.fromRGB(255, 255, 0);
	Tutorial = Color3.fromRGB(255, 170, 0);
	Grass = Color3.fromRGB(85, 255, 0);
}
module_upvr.TutorialDialogPaths = {
	Greenhorn = {{
		Text = "Hey newcomer! Welcome to High Realms! High Realms is a Skyblock game where you start on with basic tools & items.\n\t\t\t| Your goal is to <font color=\"rgb(255, 0, 0)\">FIGHT</font>, <font color=\"rgb(255, 170, 0)\">FARM</font>, <font color=\"rgb(85, 255, 0)\">TRADE</font> and <font color=\"rgb(0, 170, 255)\">GATHER RESOURCES</font> to build your island.\n\t\t\t| Let's plant some wheat! Start by <font color=\"rgb(255, 170, 0)\">EQUIPPING</font> your <font color=\"rgb(255, 170, 0)\">WOOD HOE</font> to plow. Use it on a <font color=\"rgb(85, 255, 0)\">GRASS BLOCK</font> by holding the Mouse Button/Tap while aiming at the grass. \n\t\t\t| Here, I've highlighted the Wood Hoe tool on the bottom toolbar.\n\t\t\t";
		Place = "Island";
	}, {
		Text = "Next we need to plant our seeds! <font color=\"rgb(255, 170, 0)\">EQUIP</font> your <font color=\"rgb(255, 170, 0)\">WHEAT SEEDS</font> from the toolbar and plant them on the newly plowed dirt.";
		Place = "Island";
	}, {
		Text = "You're a natural! You've just planted your first <font color=\"rgb(255, 170, 0)\">CROP!</font> \n\t\t| Once a crop has grown, You can harvest it with your an <font color=\"rgb(255, 170, 0)\">AXE</font> or <font color=\"rgb(255, 170, 0)\">SWORD</font> by breaking it. \n\t\t| I will speed up the growth for you so you don't have to wait.\n\t\t";
		Place = "Island";
	}};
	["Block by Block"] = {{
		Text = "By the way this ENTIRE island is your very own private island!  \n\t\t| That means you can do whatever you want here, like maybe building a castle! \n\t\t| But first let's learn how to  <font color=\"rgb(255, 0, 0)\">BREAK</font> and <font color=\"rgb(0, 170, 255)\">PLACE</font> blocks. \n\t\t| Use your PICKAXE tool to <font color=\"rgb(255, 170, 0)\">BREAK 5 GRASS BLOCKS</font>. \n\t\t";
		Place = "Island";
	}, {
		Text = "Nice we got some DIRT blocks. Now let's <font color=\"rgb(255, 170, 0)\">BUILD A BRIDGE</font> to that portal over there with them. \n\t\t| I've <font color=\"rgb(255, 170, 0)\">HIGHLIGHTED THE POSITIONS</font> you'll need to <font color=\"rgb(0, 170, 255)\">PLACE</font> the blocks. \n\t\t| Select the blocks from the bottom toolbar and place the blocks.\n\t\t";
		Place = "Island";
	}};
	["The adventure begins"] = {{
		Text = "Now for the real adventure! \n\t\t| Entering the portal over there will take you to the citadel. That's where all the <font color=\"rgb(0, 255, 0)\">BUYING</font> and <font color=\"rgb(255, 0, 0)\">SELLING</font> takes place. \n\t\t| Enter the portal and lets go sell some <font color=\"rgb(255, 170, 0)\">WHEAT</font>!\n\t\t";
		Place = "Island";
	}};
	["Rising entrepreneur"] = {{
		Text = "We're here! This my friend is the <font color=\"rgb(255, 0, 255)\">CITADEL</font>. \n\t\t| Here we can trade with NPC's to <font color=\"rgb(0,255,0)\">BUY</font> items and <font color=\"rgb(255, 0, 0)\">SELL</font> for <font color=\"rgb(255, 255, 0)\">COINS</font>. \n\t\t| Let's visit MOOLA the cow over there. \n\t\t| She will buy the <font color=\"rgb(255, 170, 0)\">WHEAT</font> you harvested for <font color=\"rgb(255, 255, 0)\">COINS</font>! \n\t\t| Go talk to Moola, <font color=\"rgb(255, 0, 0)\">SWITCH TO SELL</font>, then sell the <font color=\"rgb(255, 170, 0)\">WHEAT</font> for coins!\n\t\t";
		Place = "Citadel";
	}};
	["Woodland Harvest"] = {{
		Text = "<font color=\"rgb(255, 170, 0)\">CROPS</font> are a great way to earn coins. \n\t\t| There are currently 4 main NPC shops in the citadel: Moola (crops), Gideon (blocks), Oberon (underlings) and Maya (weapons and tools).\n\t\t| Let's head over to the <font color=\"rgb(85, 170, 0)\">FOREST PORTAL</font> and mine it's surrounding trees. You can use Q to dash and SHIFT to sprint to get there quicker. \n\t\t";
		Place = "Citadel";
	}, {
		Text = "This portal leads to the forest where there are more Trees and more Monsters! \n\t\t| But for now all we need is Oak Wood which can be found around us.\n\t\t| Let's gather 16 Oak Wood by chopping down these Oak Trees.\n\t\t";
		Place = "Citadel";
	}};
	["Upgrades people Upgrades"] = {{
		Text = "<font color=\"rgb(255, 170, 0)\">WOOD</font> is one of the most used resources for crafting tools. So it's good to have it on hand. \n\t\t| Let's head over to the Mines Portal to to gather some <font color=\"rgb(125, 125, 125)\">STONE</font> so we can craft a better <font color=\"rgb(255, 170, 0)\">PICKAXE</font>. \n\t\t";
		Place = "Citadel";
	}, {
		Text = "The Mines Portal leads to the Mines where you can find more <font color=\"rgb(255, 0, 255)\">RARE ORES</font> and <font color=\"rgb(255, 0, 0)\">MONSTERS</font>. \n\t\t| But for now all we need is <font color=\"rgb(125, 125, 125)\">STONE</font>. \n\t\t| Use your <font color=\"rgb(255, 170, 0)\">WOOD PICKAXE</font> to mine <font color=\"rgb(125, 125, 125)\">8 STONE</font> to <font color=\"rgb(255, 170, 0)\">CRAFT</font> a <font color=\"rgb(255, 170, 0)\">STONE PICKAXE</font>.\n\t\t";
		Place = "Citadel";
	}, {
		Text = "Great! Now that we have <font color=\"rgb(125, 125, 125)\">8 STONE</font> we can <font color=\"rgb(255, 170, 0)\">CRAFT</font> a <font color=\"rgb(255, 170, 0)\">STONE PICKAXE</font>. \n\t\t| Click or Tap the <font color=\"rgb(255, 170, 0)\">CRAFTING TAB</font> at the bottom of your screen, then select the <font color=\"rgb(85, 170, 255)\">STONE PICKAXE</font>. \n\t\t| Then press the <font color=\"rgb(0,255,0)\">CRAFT BUTTON</font> to craft it.\n\t\t";
		Place = "Citadel";
	}, {
		Text = "Woah nice upgrade! This should make mining alot easier. \n\t\t| Use your <font color=\"rgb(255, 170, 0)\">STONE PICKAXE</font> to mine <font color=\"rgb(125, 125, 125)\">32</font> more Stone to <font color=\"rgb(255, 170, 0)\">CRAFT</font> some <font color=\"rgb(255, 170, 0)\">STONE TOOLS</font>. \n\t\t";
		Place = "Citadel";
	}, {
		Text = "We almost have enough to get our new tools!\n\t\t| Use your <font color=\"rgb(255, 170, 0)\">STONE PICKAXE</font> to mine <font color=\"rgb(125, 125, 125)\">24</font> Coal to <font color=\"rgb(255, 170, 0)\">CRAFT</font> some <font color=\"rgb(255, 170, 0)\">STONE TOOLS</font>. \n\t\t";
		Place = "Citadel";
	}, {
		Text = "That was alot of work! Now that we have all of our materials we can <font color=\"rgb(255, 170, 0)\">CRAFT</font> a <font color=\"rgb(255, 170, 0)\">STONE AXE</font>. \n\t\t";
		Place = "Citadel";
	}, {
		Text = "I mean while we are upgrading... Let's also <font color=\"rgb(255, 170, 0)\">CRAFT</font> a <font color=\"rgb(255, 170, 0)\">STONE SWORD</font>. \n\t\t";
		Place = "Citadel";
	}, {
		Text = "Now we are all suited up to take on the world! Or what's left of it...\n\t\t| Oh almost forgot! If we want to be able to make further upgrades we will need to <font color=\"rgb(255, 170, 0)\">CRAFT</font> a <font color=\"rgb(255, 170, 0)\">CRAFTING BENCH</font>. \n\t\t";
		Place = "Citadel";
	}};
	["Slime Slayer"] = {{
		Text = "You just crafted a <font color=\"rgb(255, 170, 0)\">CRAFTING BENCH!</font>! Place this on your private island to UNLOCK more CRAFTABLES]\n\t\t|I think you are ready to take on The Mines! and what evil lies within it... \n\t\t|Well maybe not EVIL. Slimes are more like pests. \n\t\t|Let's head over to the <font color=\"rgb(85, 170, 0)\">MINES PORTAL</font> and travel to THE MINES! \n\t\t";
		Place = "Citadel";
	}, {
		Text = "Welcome to the Mines! \n\t\t|Just below that bridge are some slimes...\n\t\t|Exterminate 6 Green Slimes to make the mines a safer place.\n\t\t";
		Place = "Mines";
	}, {
		Text = "I knew you could do it Champ! \n\t\t| Woah they dropped alot of slime... VALUABLE SLIME.\n\t\t| Lets gather some more of this slime then take it to the Citadel to sell! <font color=\"rgb(255, 170, 0)\">5</font> Should do it.\n\t\t";
		Place = "Mines";
	}};
	["Island Evolution"] = {{
		Text = "Woah, Dis alot-o-dough!\n\t\t|Let's spend it! Keep that economy circulating.\n\t\t|Buy 1 Wheat seed from Moola \n\t\t";
		Place = "Citadel";
	}, {
		Text = "You just made a purchase!\n\t\t|Don't stop now lets see what the other venders have.\n\t\t|Buy 16 Dirt from Gideon\n\t\t";
		Place = "Citadel";
	}, {
		Text = "Okay that's enough spending. Don't wanna go broke! \n\t\t|Or keep going. I'm not your mom. Your old enough now where you can make your own decisions.\n\t\t|But then lets meet back at home base if and when your done.\n\t\t|Your Island that is...\n\t\t";
		Place = "Citadel";
	}, {
		Text = "Has your island always been this boring? \n\t\t|You need to build a house or something. Where do you even sleep? on the grass!?\n\t\t|Before you start building anything cool though. Lets make our Island a little larger\n\t\t|Expand your Island by placing down all 16 Dirt blocks.\n\t\t";
		Place = "Island";
	}, {
		Text = "Expand your canvas, expand your possibilities.\n\t\t|One possibility is a bigger farm\n\t\t|Plant and Harvest 8 Wheat on your island. Then we can sell it at the Citadel.\n\t\t";
		Place = "Island";
	}};
	["Carrot Patch"] = {{
		Text = "Congratulations! You've completed the tutorial.\n\t\t|You seem like you know what your doing so I'm going to let you get on with it. \n\t\t|But be warned... There are enemies lurking everywhere. Make sure to keep your sword handy at all times.\n\t\t|There are many secrets to be uncovered. I wonder if you can get inside that castle?\n\t\t|(You can keep following the tasks if you want to keep learning. But feel free to do you!)\n\t\t";
		Place = "Citadel";
	}};
	["Level Up"] = {{
		Text = "You just <font color=\"rgb(255, 0, 255)\">LEVELED UP</font>! \n\t\t| MINING, FARMING and FIGHTING will earn you <font color=\"rgb(255, 0, 255)\">XP</font> in their respected <font color=\"rgb(255, 0, 255)\">CATEGORY</font>\n\t\t| Chopping OAK TREE'S will give you <font color=\"rgb(255, 0, 255)\">OAK WOOD XP</font>\n\t\t| Leveling up your OAK WOOD will unlock more items you can <font color=\"rgb(255, 255, 0)\">CRAFT</font> or <font color=\"rgb(0,255,0)\">BUY</font> \n\t\t| Leveling your <font color=\"rgb(170, 0, 255)\">OVERALL PLAYER LEVEL</font> will give you extra <font color=\"rgb(255,0,0)\">HP (HEALTH)</font> and grants <font color=\"rgb(0,255,0)\">ACCESS</font> to new areas.\n\t\t";
		OnComplete = true;
	}, {
		Text = "You've just unlocked your first <font color=\"rgb(0, 0, 255)\">UNDERLING</font>! \n\t\t| Underlings will work on your island gathering resources. \n\t\t| You can purchase underlings at <font color=\"rgb(29, 29, 29)\">OBERON'S SHOP</font> in the <font color=\"rgb(255, 0, 255)\">CITADEL</font>. \n\t\t";
		OnComplete = true;
	}};
	["Place Bench"] = {{
		Text = "Place down your crafting bench to see your new craftables!";
		OnComplete = true;
	}};
}
function module_upvr.IsTutorialQuest(arg1, arg2) -- Line 230
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	return table.find(module_upvr.TutorialQuestIds, arg2.Id)
end
function module_upvr.HasCompletedQuest(arg1, arg2, arg3) -- Line 234
	for _, v in pairs(arg2.CompletedTasks) do
		if v.Id == arg3 then
			return true
		end
	end
end
function module_upvr.DialogueDecode(arg1, arg2) -- Line 242
	local string_split_result1 = string.split(arg2 or "", '&')
	local var54
	for i_2 = 1, #string_split_result1 do
		if i_2 % 2 == 0 then
			if string_split_result1[i_2]:split(':')[1] == "QuestStatus" then
			end
			table.insert({}, "")
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			table.insert({}, string_split_result1[i_2])
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	return table.concat({}, ""), nil
end
function module_upvr.GetCurrentTaskFromStructured(arg1, arg2) -- Line 269
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	local _ = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local var63
	for i_3, v_2 in pairs(arg2.Progress) do
		var63 = i_3
		local TaskParams = arg2.Def.TaskParams
		if arg2.InstaComplete then
			TaskParams = true
		else
			TaskParams = _:RequireDefinitions().TaskType[_:GetDefinitionFromId(arg2.Id).TaskIds[i_3]].IsCompleted(game.Players.LocalPlayer, v_2, TaskParams[i_3])
		end
		if not TaskParams then
			return var63
		end
	end
	return var63
end
function module_upvr.GetHealthFromQuests(arg1, arg2) -- Line 295
	local var81 = 0
	for _, v_3 in pairs(arg2.Tasks) do
		if v_3.Id == "Farlight Crystals" or v_3.Id == "Farlight Crystals Mire" then
			for _, v_4 in pairs(v_3.Progress) do
				var81 += v_4.NumberCollected
			end
		end
	end
	for _, v_5 in pairs(arg2.CompletedTasks) do
		if v_5.Id == "Farlight Crystals" or v_5.Id == "Farlight Crystals Mire" then
			for _, v_6 in pairs(v_5.Progress) do
				var81 += v_6.NumberCollected
			end
		end
	end
	return var81
end
return module_upvr

Script name: EffectUtil
  - Script: 


local Knit_upvr = require(game:GetService("ReplicatedStorage").Packages.Knit)
return {
	RomanNumerals = {'I', "II", "III", "IV", 'V', "VI", "VII", "VIII", "IX", 'X'};
	RemoveTierData = function(arg1, arg2, arg3) -- Line 23, Named "RemoveTierData"
		--[[ Upvalues[1]:
			[1]: Knit_upvr (readonly)
		]]
		for i, v in pairs(arg2.Tiers) do
			if v.Tier == arg3 then
				table.remove(arg2.Tiers, i)
				return
			end
		end
		Knit_upvr.GetService("EffectService").EffectUpdated:Fire(arg2.Index)
	end;
	StackTierData = function(arg1, arg2, arg3) -- Line 35, Named "StackTierData"
		--[[ Upvalues[1]:
			[1]: Knit_upvr (readonly)
		]]
		for _, v_2 in pairs(arg2.Tiers) do
			if v_2.Tier == arg3.Tier then
				v_2.Time += arg3.Time
				return
			end
		end
		table.insert(arg2.Tiers, arg3)
		Knit_upvr.GetService("EffectService").EffectUpdated:Fire(arg2.Index)
	end;
	SetTierData = function(arg1, arg2, arg3) -- Line 47, Named "SetTierData"
		--[[ Upvalues[1]:
			[1]: Knit_upvr (readonly)
		]]
		for i_3, v_3 in pairs(arg2.Tiers) do
			if v_3.Tier == arg3.Tier then
				arg2.Tiers[i_3] = arg3
				return
			end
		end
		table.insert(arg2.Tiers, arg3)
		Knit_upvr.GetService("EffectService").EffectUpdated:Fire(arg2.Index)
	end;
	GetTotalEffectTime = function(arg1, arg2) -- Line 59, Named "GetTotalEffectTime"
		-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
		local var31
		for _, v_4 in pairs(arg2.Tiers) do
			var31 += v_4.Time or 0
			if v_4.Active then
			end
		end
		return var31, true
	end;
	GetCurrentTier = function(arg1, arg2) -- Line 69, Named "GetCurrentTier"
		local var39
		for _, v_5 in pairs(arg2.Tiers) do
			if not var39 or var39.Tier < v_5.Tier then
				var39 = v_5
			end
		end
		return var39
	end;
	TweenBezier = function(arg1, arg2, arg3, arg4, arg5, arg6) -- Line 80, Named "TweenBezier"
		local var41_upvw
		local tick_result1_upvr = tick()
		var41_upvw = game:GetService("RunService").RenderStepped:Connect(function() -- Line 84
			--[[ Upvalues[7]:
				[1]: arg5 (readonly)
				[2]: var41_upvw (read and write)
				[3]: tick_result1_upvr (readonly)
				[4]: arg6 (readonly)
				[5]: arg3 (readonly)
				[6]: arg4 (readonly)
				[7]: arg2 (readonly)
			]]
			if not arg5.Parent then
				var41_upvw:Disconnect()
			else
				local clamped = math.clamp((tick() - tick_result1_upvr) / arg6, 0, 1)
				arg2.Position = (1 - clamped) ^ 2 * arg3 + (1 - clamped) * 2 * clamped * arg4 + clamped ^ 2 * arg5.Position
				if 1 <= clamped then
					var41_upvw:Disconnect()
				end
			end
		end)
	end;
}

Script name: Block
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: BlockDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Block"
	module.Health = arg2
	module.DamageCatagory = arg3
	module.BehaviourData = arg4
	module.Size = arg5
	module.CanBeMined = arg6
	module.CanBePlaced = arg7
	module.CanBeRotated = arg8
	module.SeeThrough = arg9
	module.AccentColor = arg10
	module.LootData = arg11
	module.CraftIngredients = arg12
	module.SearchTags = arg13
	module.EconomyInfo = arg14
	module.LevelReq = arg15
	module.DisplayImage = arg16
	module.SoundData = arg17
	module.Description = arg18
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: Grass
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Farmland", {
	Id = "Grass Behaviour";
}, nil, true, true, false, false, Color3.fromRGB(142, 74, 38), {
	SetItems = {{
		Id = "Dirt";
		Catagory = "Block";
	}};
}, nil, {"Blocks"}, nil, nil, "rbxassetid://17450179681", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, nil)

Script name: Dirt
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Farmland", {
	Id = "Dirt Behaviour";
	TickCount = {
		Defult = 10;
	};
	Morph = "Grass";
}, nil, true, true, false, false, Color3.fromRGB(169, 89, 50), nil, nil, {"Dirt", "Blocks"}, {
	BuyPrice = 10;
	SellPrice = 1;
}, nil, "rbxassetid://17450131787", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Turns into grass. Can be tilled using hoe for planting crops.")

Script name: Stone Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 12, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(177, 179, 179), nil, {
	Stone = 1;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	BuyPrice = 10;
	SellPrice = 2;
}, nil, "rbxassetid://17450254568", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Marble Brick Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 180, 180), nil, {
	Marble = 10;
	Clay = 1;
	BenchType = "Workbench";
}, {"Marble", "Brick", "Blocks"}, {
	SellPrice = 52;
}, nil, "rbxassetid://18523677719", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Silver Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(212, 218, 218), nil, {
	["Silver Ingot"] = 16;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 450;
}, nil, "rbxassetid://17450256320", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Made of silver")

Script name: Bedrock
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, nil, nil, nil, nil, true, true, false, false, Color3.fromRGB(49, 49, 52), nil, nil, {"Other"}, nil, nil, "rbxassetid://17449960534", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Unbreakable")

Script name: Basalt Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(91, 95, 97), nil, {
	Basalt = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 200;
	SellPrice = 20;
}, nil, "rbxassetid://17449961632", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Can be crafted using Basalt")

Script name: Cobblestone
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 12, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 181, 181), nil, {
	Stone = 1;
	BenchType = "Crafting Bench";
}, {"Blocks", "Stone"}, {
	BuyPrice = 20;
	SellPrice = 2;
}, nil, "rbxassetid://17449980684", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Marble Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(221, 224, 224), nil, {
	Marble = 10;
	BenchType = "Workbench";
}, {"Marble", "Blocks"}, {
	BuyPrice = 500;
	SellPrice = 50;
}, nil, "rbxassetid://17450209897", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Pink Grass
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 109, 140), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242974", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Cannot be tilled")

Script name: Lantern Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	BenchType = "Workbench";
}, {"Lights", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://17450218528", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Lighting block")

Script name: Gargoyle Statue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(167, 167, 167), nil, nil, {"Blocks"}, {
	SellPrice = 40000;
}, nil, "rbxassetid://99294043187194", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Limited from Halloween 2024")

Script name: Slime Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Slime Behaviour";
}, nil, true, true, false, false, Color3.fromRGB(204, 228, 178), nil, {
	["Green Goo"] = 16;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 40;
}, {
	Combat = {
		GreenSlime = 6;
	};
}, "rbxassetid://17450292990", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Bouncy bouncy")

Script name: Ladder
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Plank"] = 5;
	BenchType = "Sawmill";
}, {"Ladder", "Other"}, {
	SellPrice = 20;
}, {
	Forestry = {
		["Mahogany Wood"] = 3;
	};
}, "rbxassetid://17450218677", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Climbable ladder")

Script name: Tilled Dirt
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Farmland", nil, nil, true, true, false, false, Color3.fromRGB(142, 74, 38), {
	SetItems = {{
		Id = "Dirt";
		Catagory = "Block";
	}};
}, nil, {"Blocks"}, {
	SellPrice = 0;
}, nil, "rbxassetid://17450131787", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Plant crops on")

Script name: Blue Torch
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(12, 111, 154), nil, {
	["Blue Flame"] = 1;
	["Ash Wood"] = 1;
	BenchType = "Sawmill";
}, {"Torch", "Lights"}, {
	SellPrice = 95;
}, nil, "rbxassetid://86147698054583", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "It's blue!")

Script name: Pink Stone Brick Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(214, 176, 235), nil, nil, {"Stone", "Brick", "Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149243202", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Coal Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(72, 74, 72), nil, {
	Coal = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 400;
	SellPrice = 44;
}, nil, "rbxassetid://17449982597", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Cobalt Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(21, 186, 229), nil, {
	["Cobalt Ingot"] = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 3000;
	SellPrice = 300;
}, nil, "rbxassetid://17449981893", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Copper Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(203, 168, 73), nil, {
	["Copper Ingot"] = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 800;
	SellPrice = 80;
}, nil, "rbxassetid://17449980052", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Grass Weed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(56, 110, 12), nil, {
	Dirt = 1;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17450179860", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Decorative grass weeds")

Script name: Fire Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(76, 72, 64), nil, {
	Flame = 8;
	Coal = 8;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 225;
}, {
	Combat = {
		Flamelet = 2;
	};
}, "rbxassetid://17450162937", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Fire effect block")

Script name: Rhodium Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(227, 212, 35), nil, {
	["Rhodium Ingot"] = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 2100;
}, {
	Mining = {
		["Rhodium Ore"] = 5;
	};
}, "rbxassetid://103725075069134", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Iron Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(216, 216, 216), nil, {
	["Iron Ingot"] = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 1500;
	SellPrice = 150;
}, nil, "rbxassetid://17450200035", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Gold Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(227, 212, 35), {
	MultiItemDropWeights = {1};
	RareItemsOverride = {
		["Gold Block"] = "Epic";
	};
	SetItems = {{
		Id = "Gold Block";
		Catagory = "Block";
	}};
}, {
	["Gold Ingot"] = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 5500;
	SellPrice = 550;
}, nil, "rbxassetid://17450180936", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Vines
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Leaves"] = 8;
	BenchType = "Crafting Bench";
}, {"Ladder", "Vine", "Furniture"}, {
	SellPrice = 24;
}, {
	Forestry = {
		["Mahogany Wood"] = 6;
	};
}, "rbxassetid://17747129789", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Climbable wall vines")

Script name: Wood Table
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Plank"] = 4;
	BenchType = "Sawmill";
}, {"Ladder", "Furniture"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 4;
	};
}, "rbxassetid://18538539885", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Built to last")

Script name: Wooden Crate
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Oak Plank"] = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 8;
}, {
	Forestry = {
		["Oak Wood"] = 7;
	};
}, "rbxassetid://18523679531", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Decorative crate")

Script name: Blue Wall Torch
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(12, 111, 154), nil, {
	["Blue Flame"] = 1;
	["Ash Wood"] = 1;
	BenchType = "Sawmill";
}, {"Torch", "Lights"}, {
	SellPrice = 95;
}, nil, "rbxassetid://92317079075109", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "It's like a wall torch but...blue!")

Script name: No Fishing Sign
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(231, 191, 0), nil, nil, {"Furniture"}, {
	SellPrice = 20;
}, nil, "rbxassetid://123768533344548", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Limited sign.")

Script name: Electric FX Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(85, 170, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149244540", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Electric FX. Break invisible block to remove.")

Script name: Snow FX Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	SellPrice = 550;
}, nil, "rbxassetid://131023725954697", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Generates snow FX. Break block to remove.")

Script name: Rain FX Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149245057", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Rain FX. Invisible block can be broken.")

Script name: Swamp Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 85, 84), nil, {
	["Toxic Sludge"] = 2;
	Dirt = 1;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 102;
}, nil, "rbxassetid://125397837408411", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Ew swamp water")

Script name: Crimson Moss Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(169, 8, 40), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149246922", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Jungle Vines
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(60, 162, 34), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149247150", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Climbable vine rope")

Script name: Sword Throne
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(159, 109, 140), nil, nil, {"Furniture"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149245735", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Thrones are won with swords, not quills. Limited.")

Script name: Jungle Grass Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(0, 88, 15), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149247523", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Jungle Moss Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(0, 89, 13), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149247891", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Crimson Grass Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(170, 4, 44), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149246217", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Cannot be tilled")

Script name: Tiki Head Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 109, 140), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149248228", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Tiki tiki tiki")

Script name: Tiki Pole Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 109, 140), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149248579", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Base for Tiki Head")

Script name: Red Brick Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523676370", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Legacy block")

Script name: Stone Brick Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 180, 180), nil, {
	Stone = 1;
	Clay = 1;
	BenchType = "Crafting Bench";
}, {"Stone", "Brick", "Blocks"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450254407", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Basalt Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, nil, {"Basalt", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523675319", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Legacy")

Script name: Wood Chair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Mahogany Plank"] = 4;
	BenchType = "Sawmill";
}, {"Ladder", "Furniture"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 4;
	};
}, "rbxassetid://18113235353", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "What? It's a chair.")

Script name: Hay Bale
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(221, 224, 224), nil, {
	Wheat = 256;
	BenchType = "Crafting Bench";
}, {"Wheat", "Block", "Evolved"}, {
	SellPrice = 1152;
}, {
	Farming = {
		Wheat = 30;
	};
}, "rbxassetid://18523677992", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Now that's a lot of wheat!")

Script name: Hanging Lantern
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(76, 72, 64), nil, {
	["Scrap Metal"] = 10;
	Coal = 1;
	Glass = 1;
	BenchType = "Crafting Bench";
}, {"Lights"}, {
	SellPrice = 64;
}, {
	Combat = {
		Gizmo = 4;
	};
}, "rbxassetid://18523678879", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Lighting")

Script name: Wood Barrel
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Cherry Wood"] = 4;
	["Iron Ingot"] = 2;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 70;
}, {
	Forestry = {
		["Cherry Wood"] = 5;
	};
}, "rbxassetid://18523680240", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Decoration")

Script name: Candles
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(76, 72, 64), nil, {
	Flame = 1;
	Coal = 1;
	BenchType = "Workbench";
}, {"Furniture", "Lights"}, {
	SellPrice = 28;
}, {
	Combat = {
		Flamelet = 1;
	};
}, "rbxassetid://18523679728", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Lighting")

Script name: Basalt Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, {
	Basalt = 1;
	Output = 2;
	BenchType = "Workbench";
}, {"Basalt", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523675047", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Red Brick Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 180, 180), nil, {
	Stone = 1;
	Clay = 1;
	BenchType = "Workbench";
}, {"Stone", "Brick", "Blocks"}, {
	SellPrice = 4;
}, nil, "rbxassetid://18523676216", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Red Brick Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, {
	Stone = 1;
	Clay = 1;
	Output = 2;
	BenchType = "Workbench";
}, {"Stone", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523676827", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Spotlight
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 3;
	};
}, "rbxassetid://18523678168", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Ranged light source")

Script name: Mushroom Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(159, 21, 23), nil, {
	Mushroom = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 200;
}, nil, "rbxassetid://133023260754761", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Now that's a lot of mushrooms!")

Script name: Rainbow Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Rainbow Behaviour";
	GlowingPartName = {"HB"};
}, nil, true, true, false, false, Color3.fromRGB(91, 95, 97), nil, {
	["Rainbow Dye"] = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 50000;
}, nil, "rbxassetid://85552498770796", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "It's like a dance party")

Script name: Green Lightcube
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Green Dye"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://113952519511996", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Colored lighting")

Script name: Red Lightcube
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://98571776132336", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Colored lighting")

Script name: Mushroom
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(159, 21, 23), nil, nil, {"Other"}, {
	SellPrice = 20;
}, nil, "rbxassetid://127784338367397", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Collected from the forest")

Script name: Orange Lightcube
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://105881719260846", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Colored lighting")

Script name: Blue Lightcube
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(12, 111, 154), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Blue Dye"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://89073236860634", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Colored lighting")

Script name: Chain
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(91, 95, 97), nil, {
	["Iron Ingot"] = 10;
	BenchType = "Workbench";
}, {"Furniture"}, {
	SellPrice = 150;
}, {
	Mining = {
		["Iron Ore"] = 4;
	};
}, "rbxassetid://85863489674290", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative chain")

Script name: Torch
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(154, 58, 27), nil, {
	Coal = 1;
	["Oak Wood"] = 1;
	BenchType = "Sawmill";
}, {"Torch", "Lights"}, {
	BuyPrice = 30;
	SellPrice = 3;
}, {
	Forestry = {
		["Oak Wood"] = 6;
	};
}, "rbxassetid://17450296179", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Starter lighting")

Script name: Wall Torch
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(154, 58, 27), nil, {
	Coal = 1;
	["Oak Wood"] = 1;
	BenchType = "Sawmill";
}, {"Torch", "Lights"}, {
	BuyPrice = 30;
	SellPrice = 3;
}, {
	Forestry = {
		["Oak Wood"] = 8;
	};
}, "rbxassetid://18113390286", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Fancy fancy")

Script name: Purple Lightcube
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Red Dye"] = 1;
	["Blue Dye"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://90785513649149", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Colored lighting")

Script name: Yellow Lightcube
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(255, 255, 255), nil, {
	["Light Source"] = 1;
	Glass = 5;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 4;
	};
}, "rbxassetid://100899279712885", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Colored lighting")

Script name: Jumpscare Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Jumpscare Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(207, 207, 207), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://126183930360684", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Step on the block for a jumpscare")

Script name: Spawn Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Spawn Block Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(207, 207, 207), nil, nil, {"Blocks"}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, nil, "rbxassetid://86215362123421", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Overrides default spawn location")

Script name: Jack O Lantern
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(72, 74, 72), nil, nil, {"Blocks"}, {
	SellPrice = 150;
}, nil, "rbxassetid://128610826910395", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Halloween 2024")

Script name: Pumpkin Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(72, 74, 72), nil, {
	Pumpkin = 256;
	BenchType = "Workbench";
}, {"Evolved"}, {
	SellPrice = 36000;
}, {
	Farming = {
		Pumpkin = 30;
	};
}, "rbxassetid://131706608674992", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Now that's a lot of pumpkins!")

Script name: Watermelon Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(72, 74, 72), nil, {
	Watermelon = 256;
	BenchType = "Workbench";
}, {"Evolved"}, {
	SellPrice = 35600;
}, {
	Farming = {
		Watermelon = 30;
	};
}, "rbxassetid://139768145776010", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "That's a lot of watermelons.")

Script name: Coffin Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, {
	X = 3;
	Y = 1;
	Z = 3;
}, true, true, true, true, Color3.fromRGB(72, 74, 72), nil, nil, {"Blocks"}, {
	SellPrice = 30000;
}, nil, "rbxassetid://137748570240152", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited bed from Halloween 2024")

Script name: Mud Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(178, 180, 180), nil, {
	Dirt = 1;
	Clay = 1;
	BenchType = "Crafting Bench";
}, {"Mud", "Blocks"}, {
	SellPrice = 3;
}, nil, "rbxassetid://96648376749013", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Lunar Fireworks FX
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Blocks"}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, nil, "rbxassetid://104217808437217", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Limited FX Block from Lunar New Year 2025")

Script name: Peat Moss Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(85, 170, 255), nil, nil, {"Blocks"}, {
	SellPrice = 50;
}, nil, "rbxassetid://104106171371748", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, nil)

Script name: Cursed Relic
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(85, 170, 255), nil, nil, {"Blocks"}, {
	SellPrice = 950000;
}, nil, "rbxassetid://82651731449864", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "This relic has mysterious magical properties.")

Script name: SpiderWeb
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "SpiderWeb Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(167, 167, 167), nil, {
	["Spider Silk"] = 10;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 220;
}, nil, "rbxassetid://17450255129", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Slows players")

Script name: Limestone Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(167, 167, 167), nil, {
	Limestone = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 50;
}, nil, "rbxassetid://119155366965511", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, nil)

Script name: Granite Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(167, 167, 167), nil, {
	Granite = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 50;
}, nil, "rbxassetid://99983497250183", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, nil)

Script name: Lichen
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(167, 167, 167), nil, nil, {"Blocks"}, {
	SellPrice = 50;
}, nil, "rbxassetid://136494662564305", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Found in Darkfang Mire")

Script name: Web Grass Path Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(129, 82, 60), nil, {
	Dirt = 1;
	["Spider Silk"] = 1;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 23;
}, nil, "rbxassetid://137929009921564", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Path block")

Script name: Toxic Sludge
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(227, 212, 35), nil, nil, {"Blocks"}, {
	SellPrice = 60;
}, nil, "rbxassetid://139841210936595", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Found in the Darkfang Mire")

Script name: Glowstone Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 240, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(0, 174, 255), {
	MultiItemDropWeights = {1};
	RareItemsOverride = {
		["Glowstone Block"] = "Epic";
	};
	SetItems = {{
		Id = "Glowstone Block";
		Catagory = "Block";
	}};
}, nil, {"Blocks"}, {
	SellPrice = 650;
}, nil, "rbxassetid://86622816981482", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Rare decorative ore found in Darkfang Mire caves")

Script name: Crimson Ornate Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 85, 84), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149246586", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Gingerbread Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 375;
}, nil, "rbxassetid://120548382652136", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Candelabra
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://128212865295967", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Halloween 2024")

Script name: Web Grass Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(129, 82, 60), nil, {
	["Spider Silk"] = 1;
	Dirt = 1;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 23;
}, nil, "rbxassetid://80968697965054", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Cannot be tilled")

Script name: Log
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 103, 90), nil, {
	["Cherry Wood"] = 10;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 100;
}, {
	Forestry = {
		["Cherry Wood"] = 6;
	};
}, "rbxassetid://129448354528168", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Decorative log")

Script name: Marble Pillar
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(221, 224, 224), nil, {
	Marble = 15;
	BenchType = "Workbench";
}, {"Marble", "Blocks"}, {
	SellPrice = 75;
}, {
	Mining = {
		["Marble Rock"] = 5;
	};
}, "rbxassetid://118089957037854", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Marble Pillar Base
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(221, 224, 224), nil, {
	Marble = 15;
	BenchType = "Workbench";
}, {"Marble", "Blocks"}, {
	SellPrice = 75;
}, {
	Mining = {
		["Marble Rock"] = 6;
	};
}, "rbxassetid://118025274683480", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Water
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, nil, "Mining", {
	Id = "Water Behaviour";
	PlacementTool = "Water Bucket";
}, nil, true, true, false, true, Color3.fromRGB(78, 179, 216), nil, nil, {}, nil, nil, "rbxassetid://17450200035", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Water")

Script name: Bubble FX Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://80068722543597", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Bubble FX maker")

Script name: Waterfall FX Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://81550310414350", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "FX block, can be stacked.")

Script name: Spider Portrait
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20000;
}, nil, "rbxassetid://113954252076232", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Arachnophobia badge reward")

Script name: Danger Sign
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(231, 191, 0), nil, nil, {"Furniture"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149245335", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Limited sign")

Script name: No Swimming Sign
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(231, 191, 0), nil, nil, {"Furniture"}, {
	SellPrice = 20;
}, nil, "rbxassetid://79414778240507", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Limited sign.")

Script name: Christmas Lights Corner
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "RandomColor Behaviour";
	GlowingPartName = {"C1", "C2", "C3", "C4", "C5", "C6", "C7"};
}, nil, true, true, true, true, Color3.fromRGB(91, 95, 97), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://77911267312779", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Blinky blinky! Limited from Christmas 2024")

Script name: Fog FX Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149244829", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Generates fog FX. Break block to remove.")

Script name: Northstar
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 550;
}, nil, "rbxassetid://83902396979894", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Candy Cane Decoration
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 350;
}, nil, "rbxassetid://106600000183376", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited decoration from Christmas 2024")

Script name: Jolly Bell
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 500;
}, nil, "rbxassetid://94420777227517", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Christmas Wreath
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 500;
}, nil, "rbxassetid://89423194537790", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Red Ribbon
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://131409244597488", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Snowglobe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 5000;
}, nil, "rbxassetid://92987438841990", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Icicle Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://80478476762870", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Snow Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://118352716068384", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Snowwwwww. Non-limited.")

Script name: Snow Grass
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 7;
}, nil, "rbxassetid://126994909130190", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Non-limited.")

Script name: Peppermint Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, {
	Peppermint = 256;
	BenchType = "Cooking Station";
}, {"Blocks"}, {
	SellPrice = 5068;
}, nil, "rbxassetid://102678351403857", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Minty! Made from Peppermint")

Script name: Packed Ice Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 250;
}, nil, "rbxassetid://120422834666344", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Glacier-like ice. Non-limited.")

Script name: Ice Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 25;
}, nil, "rbxassetid://121919707213555", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Ice ice ba-. Non-limited.")

Script name: Christmas Lights
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "RandomColor Behaviour";
	GlowingPartName = {"C1", "C2", "C3", "C4", "C5", "C6", "C7"};
}, nil, true, true, true, true, Color3.fromRGB(91, 95, 97), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://78782525332192", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Blinky blinky! Limited from Christmas 2024")

Script name: Nutcracker Head
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 575;
}, nil, "rbxassetid://105436665137900", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Nutcracker Base
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 575;
}, nil, "rbxassetid://134490433949092", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Chill Moola
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, nil, nil, "rbxassetid://106759569845126", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "A limited gift given out by High Realms moderator")

Script name: Nutcracker Hat
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 575;
}, nil, "rbxassetid://94876572482491", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Chill Muncher
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 3000;
}, nil, "rbxassetid://82099198790733", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited mob drop from Christmas 2024")

Script name: Chill Gizmo
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 2750;
}, nil, "rbxassetid://108768167600980", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited mob drop from Christmas 2024")

Script name: Chill Flamelet
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 15000;
}, nil, "rbxassetid://76533808520263", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited mob drop from Christmas 2024")

Script name: Chill Slime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 2000;
}, nil, "rbxassetid://122905332529478", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited mob drop from Christmas 2024")

Script name: Snowman Base
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 750;
}, nil, "rbxassetid://113740803766435", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Snowman Hat
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 750;
}, nil, "rbxassetid://117408350713749", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Snowman Head
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 750;
}, nil, "rbxassetid://136502191319688", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Gift Box
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://137169069088421", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited decoration from Christmas 2024")

Script name: Big Gift Box
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://114427864162595", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited decoration from Christmas 2024")

Script name: Small Gift Box
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://87293628739207", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited decoration from Christmas 2024")

Script name: Frosted Christmas Tree
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 2500;
}, nil, "rbxassetid://97004091413776", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Christmas Tree
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 600;
}, nil, "rbxassetid://90415720791352", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Grave Headstone
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 15000;
}, nil, "rbxassetid://106367796806333", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Halloween 2024")

Script name: Glazed Gingerbread Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 216, 216), nil, nil, {"Blocks"}, {
	SellPrice = 400;
}, nil, "rbxassetid://101853556594787", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Christmas 2024")

Script name: Silent Shoe's Painting
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	BuyPrice = 20000;
	SellPrice = 2000;
}, nil, "rbxassetid://77789891330638", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Winner of the High Realms Merry & Bright Art Challenge. Limited Painting.")

Script name: Sansy Nooby's Painting
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(255, 255, 255), nil, nil, {"Blocks"}, {
	BuyPrice = 20000;
	SellPrice = 2000;
}, nil, "rbxassetid://123514399439980", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Winner of the High Realms Merry & Bright Art Challenge. Limited Painting.")

Script name: Diamond Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(227, 212, 35), nil, {
	Diamond = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 20000;
	SellPrice = 2000;
}, nil, "rbxassetid://102146858790501", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Rope
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(227, 212, 35), nil, {
	Cloth = 3;
	BenchType = "Workbench";
}, {"Blocks"}, {
	SellPrice = 30;
}, nil, "rbxassetid://71266581334940", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Made from cloth for climbing")

Script name: Pink Slime Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Slime Behaviour";
}, nil, true, true, false, false, Color3.fromRGB(204, 228, 178), nil, {
	["Pink Goo"] = 16;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 192;
}, {
	Combat = {
		PinkSlime = 6;
	};
}, "rbxassetid://78137876795334", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Bouncy bouncy")

Script name: Compressed Coal
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(66, 66, 66), nil, {
	Coal = 256;
	BenchType = "Workbench";
}, {"Blocks", "Evolved"}, {
	SellPrice = 1075;
}, {
	Mining = {
		["Coal Ore"] = 20;
	};
}, "rbxassetid://125720383416044", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Made from Coal")

Script name: Amber Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(227, 212, 35), nil, {
	Amber = 10;
	BenchType = "Workbench";
}, {"Blocks"}, {
	BuyPrice = 1000;
	SellPrice = 110;
}, {
	Mining = {
		["Amber Ore"] = 5;
	};
}, "rbxassetid://76197806230796", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Ghost FX Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(85, 170, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://133633973345318", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Limited FX Block from Halloween 2024")

Script name: White Heart Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 86, 89), nil, nil, {"Blocks"}, {
	SellPrice = 250;
}, nil, "rbxassetid://74081730283249", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited Valentines 2025 Reward")

Script name: Pink Heart Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 86, 89), nil, nil, {"Blocks"}, {
	SellPrice = 250;
}, nil, "rbxassetid://130494894293180", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited Valentines 2025 Reward")

Script name: Red Heart Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(216, 86, 89), nil, nil, {"Blocks"}, {
	SellPrice = 250;
}, nil, "rbxassetid://98227004068153", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited Valentines 2025 Reward")

Script name: Clay Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(63, 145, 221), nil, {
	Clay = 1;
	["Blue Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985569", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Brown
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(131, 96, 53), nil, {
	Clay = 1;
	["Red Dye"] = 1;
	["Green Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985425", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Cyan
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(29, 225, 230), nil, {
	Clay = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985231", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Green
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(70, 166, 25), nil, {
	Clay = 1;
	["Green Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985121", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Light Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(125, 216, 229), nil, {
	Clay = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984978", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Lime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(179, 228, 93), nil, {
	Clay = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984746", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Orange
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(223, 169, 68), nil, {
	Clay = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984450", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Pink
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(226, 103, 229), nil, {
	Clay = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984249", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Purple
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(182, 99, 229), nil, {
	Clay = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449984038", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Red
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(229, 96, 93), nil, {
	Clay = 1;
	["Red Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983792", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay White
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(230, 230, 230), nil, {
	Clay = 1;
	["White Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983460", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Yellow
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(229, 218, 97), nil, {
	Clay = 1;
	["Yellow Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983272", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Clay Vase
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(171, 171, 171), nil, {
	Clay = 10;
	BenchType = "Workbench";
}, {"Clay", "Furniture"}, {
	SellPrice = 50;
}, {
	Mining = {
		["Clay Mud"] = 5;
	};
}, "rbxassetid://18523679966", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Decoration")

Script name: Clay Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(171, 171, 171), nil, {
	Clay = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449983040", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Basic clay block")

Script name: Clay Black
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	Clay = 1;
	["Black Dye"] = 1;
	BenchType = "Crafting Bench";
}, {"Clay", "Blocks"}, {
	BuyPrice = 50;
	SellPrice = 5;
}, nil, "rbxassetid://17449985779", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Colored clay block")

Script name: Ash Plank
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(213, 199, 170), nil, {
	["Ash Wood"] = 1;
	Output = 4;
	BenchType = "Sawmill";
}, {"Plank", "Ash", "Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17449948311", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Cherry Plank
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(209, 189, 179), nil, {
	["Cherry Wood"] = 1;
	Output = 4;
	BenchType = "Sawmill";
}, {"Cherry", "Plank", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449986617", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Dark Hollow Plank
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(161, 157, 181), nil, {
	["Dark Hollow Wood"] = 1;
	Output = 4;
	BenchType = "Sawmill";
}, {"Dark Hollow", "Plank", "Blocks"}, {
	SellPrice = 10;
}, nil, "rbxassetid://17450133827", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Mahogany Plank
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(180, 124, 113), nil, {
	["Mahogany Wood"] = 1;
	Output = 4;
	BenchType = "Sawmill";
}, {"Mahogany", "Plank", "Blocks"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450210787", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Oak Plank
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(205, 182, 119), nil, {
	["Oak Wood"] = 1;
	Output = 4;
	BenchType = "Sawmill";
}, {"Oak", "Plank", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523720888", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Ash Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, nil, {"Other"}, {
	SellPrice = 20;
}, nil, "rbxassetid://17449947767", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "From Ash Wood Trees in Forest")

Script name: Cherry Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(209, 190, 181), nil, nil, {"Other"}, {
	SellPrice = 10;
}, nil, "rbxassetid://17449985946", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "From Cherry Wood Trees in Forest")

Script name: Dark Hollow Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(144, 146, 170), nil, nil, {"Other"}, {
	SellPrice = 40;
}, nil, "rbxassetid://17450133333", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "From Dark Hollow Wood Trees in Forest")

Script name: Mahogany Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(154, 84, 74), nil, nil, {"Other"}, {
	SellPrice = 16;
}, nil, "rbxassetid://17450210062", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "From Mahogany Wood Trees in Forest")

Script name: Oak Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(210, 190, 133), nil, nil, {"Other"}, {
	SellPrice = 8;
}, nil, "rbxassetid://18523720764", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "From Oak Wood Trees in Forest")

Script name: Web Plank
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, false, Color3.fromRGB(108, 108, 108), nil, {
	["Web Wood"] = 1;
	Output = 4;
	BenchType = "Sawmill";
}, {"Web", "Plank", "Blocks"}, {
	SellPrice = 10;
}, nil, "rbxassetid://128898629338142", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Web Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(210, 190, 133), nil, nil, {"Other"}, {
	SellPrice = 40;
}, nil, "rbxassetid://122997387087911", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "From Web Wood Trees in Darkfang Mire")

Script name: Petrified Web Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, {
	["Web Wood"] = 256;
	BenchType = "Sawmill";
}, {"Other", "Evolved"}, {
	SellPrice = 10760;
}, {
	Forestry = {
		["Web Wood"] = 21;
	};
}, "rbxassetid://86682572527132", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Created from Web Wood")

Script name: Petrified Ash Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, {
	["Ash Wood"] = 256;
	BenchType = "Sawmill";
}, {"Other", "Evolved"}, {
	SellPrice = 5380;
}, {
	Forestry = {
		["Ash Wood"] = 21;
	};
}, "rbxassetid://118656913397931", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Created from Ash Wood")

Script name: Petrified Dark Hollow Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, {
	["Dark Hollow Wood"] = 256;
	BenchType = "Sawmill";
}, {"Other", "Evolved"}, {
	SellPrice = 10760;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 21;
	};
}, "rbxassetid://75828395943310", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Created from Dark Hollow Wood")

Script name: Petrified Oak Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, {
	["Oak Wood"] = 256;
	BenchType = "Sawmill";
}, {"Other", "Evolved"}, {
	SellPrice = 2150;
}, {
	Forestry = {
		["Oak Wood"] = 21;
	};
}, "rbxassetid://131903741934132", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Created from Oak Wood")

Script name: Petrified Cherry Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, {
	["Cherry Wood"] = 256;
	BenchType = "Sawmill";
}, {"Other", "Evolved"}, {
	SellPrice = 2690;
}, {
	Forestry = {
		["Cherry Wood"] = 21;
	};
}, "rbxassetid://77405853510640", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Created from Cherry Wood")

Script name: Petrified Mahogany Wood
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, false, Color3.fromRGB(206, 186, 153), nil, {
	["Mahogany Wood"] = 256;
	BenchType = "Sawmill";
}, {"Other", "Evolved"}, {
	SellPrice = 4300;
}, {
	Forestry = {
		["Mahogany Wood"] = 21;
	};
}, "rbxassetid://77015605833614", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Created from Mahogany Wood")

Script name: Cherry Leaves
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(52, 143, 95), nil, nil, {"Other"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449986933", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Drops from Cherry Wood Trees")

Script name: Dark Hollow Leaves
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(47, 175, 201), nil, nil, {"Other"}, {
	SellPrice = 8;
}, nil, "rbxassetid://17450133982", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Drops from Dark Hollow Wood Trees")

Script name: Mahogany Leaves
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(79, 150, 49), nil, nil, {"Other"}, {
	SellPrice = 3;
}, nil, "rbxassetid://17450211025", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Drops from Mahogany Wood Trees")

Script name: Oak Leaves
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(102, 128, 56), nil, nil, {"Other"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523760151", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Drops from Oak Wood Trees")

Script name: Ash Leaves
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(114, 186, 60), nil, nil, {"Other"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17449948482", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Drops from Ash Wood Trees")

Script name: Web Leaves
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, false, true, Color3.fromRGB(108, 108, 108), nil, nil, {"Other"}, {
	SellPrice = 8;
}, nil, "rbxassetid://76893648829251", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Drops from Web Wood Trees")

Script name: Glass White
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(163, 161, 162), nil, {
	Glass = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450181630", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Black
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(26, 26, 29), nil, {
	Glass = 1;
	["Black Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450183992", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(58, 55, 97), nil, {
	Glass = 1;
	["Blue Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450183565", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Cyan
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(49, 101, 100), nil, {
	Glass = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182957", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Brown
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(69, 55, 46), nil, {
	Glass = 1;
	["Red Dye"] = 1;
	["Green Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450183120", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(106, 106, 116), nil, {
	Coal = 2;
	BenchType = "Crafting Bench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 60;
	SellPrice = 2;
}, nil, "rbxassetid://17450181282", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
})

Script name: Glass Green
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(47, 74, 37), nil, {
	Glass = 1;
	["Green Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182759", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Light Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(19, 83, 108), nil, {
	Glass = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182566", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Lime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(19, 108, 30), nil, {
	Glass = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182428", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Orange
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(143, 73, 11), nil, {
	Glass = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182271", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Pink
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(159, 117, 147), nil, {
	Glass = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450182108", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Purple
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(77, 16, 91), nil, {
	Glass = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450181985", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Red
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(97, 27, 26), nil, {
	Glass = 1;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 80;
	SellPrice = 8;
}, nil, "rbxassetid://17450181819", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Glass Yellow
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(102, 117, 85), nil, {
	Glass = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Glass", "Blocks"}, {
	BuyPrice = 60;
	SellPrice = 6;
}, nil, "rbxassetid://17450181435", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, "Colored Glass")

Script name: Ash Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(207, 187, 154), nil, {
	["Ash Plank"] = 1;
	Output = 2;
	BenchType = "Sawmill";
}, {"Ash", "Slab", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449948150", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Cherry Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(212, 194, 186), nil, nil, {"Cherry", "Slab", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17746718139", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Legacy")

Script name: Dark Hollow Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(163, 159, 182), nil, nil, {"Dark Hollow", "Slab", "Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17746718480", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Legacy")

Script name: Mahogany Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(161, 94, 79), nil, {
	["Mahogany Plank"] = 1;
	Output = 2;
	BenchType = "Sawmill";
}, {"Slab", "Mahogany", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450210467", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Oak Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(204, 179, 111), nil, {
	["Oak Plank"] = 1;
	Output = 2;
	BenchType = "Sawmill";
}, {"Plank", "Oak", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523720589", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Marble Brick Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, {
	Marble = 1;
	Clay = 1;
	Output = 2;
	BenchType = "Workbench";
}, {"Marble", "Blocks"}, {
	SellPrice = 3;
}, nil, "rbxassetid://18523677229", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Stone Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, {
	Stone = 1;
	Output = 2;
	BenchType = "Crafting Bench";
}, {"Stone", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17450252971", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Marble Brick Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Marble", "Blocks"}, {
	SellPrice = 3;
}, nil, "rbxassetid://18523677607", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Legacy")

Script name: Pink Stone Brick Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone", "Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242061", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Ash Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(207, 187, 154), nil, nil, {"Ash", "Slab", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17746718251", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Legacy")

Script name: Cherry Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(212, 194, 186), nil, {
	["Cherry Plank"] = 1;
	Output = 2;
	BenchType = "Sawmill";
}, {"Cherry", "Slab", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17449986503", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Dark Hollow Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(163, 159, 182), nil, {
	["Dark Hollow Plank"] = 1;
	Output = 2;
	BenchType = "Sawmill";
}, {"Dark Hollow", "Slab", "Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17450133653", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Mahogany Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(161, 94, 79), nil, nil, {"Slab", "Mahogany", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17746718755", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Legacy")

Script name: Oak Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(204, 179, 111), nil, nil, {"Plank", "Oak", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://18523721258", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Stone Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(183, 186, 186), nil, nil, {"Stone", "Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://17746719710", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Legacy")

Script name: Pink Stone Brick Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone", "Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242506", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Legacy")

Script name: Stone Brick Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, {
	Stone = 1;
	Clay = 1;
	Output = 2;
	BenchType = "Crafting Bench";
}, {"Stone", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450254176", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Stone Brick Vertical Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(180, 183, 183), nil, nil, {"Stone", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17746719428", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Legacy")

Script name: Web Slab
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", nil, nil, true, true, true, true, Color3.fromRGB(108, 108, 108), nil, {
	["Web Plank"] = 1;
	Output = 2;
	BenchType = "Sawmill";
}, {"Web", "Slab", "Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://116239231559083", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Black Poppy Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449960289", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found in the Forest")

Script name: Blue Poppy Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(7, 7, 186), nil, nil, {"Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449960127", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found in the Forest")

Script name: Green Poppy Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(10, 44, 5), nil, nil, {"Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450179091", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found in the Forest")

Script name: Red Poppy Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(162, 0, 0), nil, nil, {"Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450240377", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found in the Forest")

Script name: White Poppy Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(179, 179, 179), nil, nil, {"Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450306546", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found in the Forest")

Script name: Yellow Poppy Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(130, 77, 0), nil, nil, {"Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450305112", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found in the Forest")

Script name: White Potted Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["White Poppy Flower"] = 3;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 8;
}, nil, "rbxassetid://123943904337534", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant")

Script name: Purple Potted Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Red Poppy Flower"] = 1;
	["Blue Poppy Flower"] = 2;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 8;
}, nil, "rbxassetid://89235393248987", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant")

Script name: Pink Potted Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Red Poppy Flower"] = 1;
	["White Poppy Flower"] = 2;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 8;
}, nil, "rbxassetid://132170209309891", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant")

Script name: Blue Potted Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Blue Poppy Flower"] = 3;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 8;
}, nil, "rbxassetid://110309318204022", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant")

Script name: Yellow Potted Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Yellow Poppy Flower"] = 3;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 8;
}, nil, "rbxassetid://117307818692068", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant")

Script name: Cyan Potted Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Green Poppy Flower"] = 1;
	["Blue Poppy Flower"] = 1;
	["White Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 8;
}, nil, "rbxassetid://109191003336891", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant")

Script name: Red Potted Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 1;
	["Red Poppy Flower"] = 3;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 8;
}, nil, "rbxassetid://123687799250902", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant")

Script name: Rainbow Poppy Flower
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Rainbow Behaviour";
	GlowingPartName = {"Flower"};
}, nil, true, true, true, true, Color3.fromRGB(85, 0, 204), {
	MultiItemDropWeights = {1};
	RareItemsOverride = {
		["Rainbow Poppy Flower"] = "Epic";
	};
	SetItems = {{
		Id = "Rainbow Poppy Flower";
		Catagory = "Block";
	}};
}, nil, {"Blocks"}, {
	SellPrice = 5000;
}, nil, "rbxassetid://112376192089402", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Very rare flower found in the Forest")

Script name: Mire Lotus
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 20, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(91, 255, 88), nil, nil, {"Blocks"}, {
	SellPrice = 85;
}, nil, "rbxassetid://87369856454130", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Found in Darkfang Mire")

Script name: Jingle Shell
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://99237485519084", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Red Coral
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://89584809408324", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Blue Coral
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://133355448325522", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Orange Coral
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://80747859568926", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Purple Coral
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://100325297959984", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Deep Seaweed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 300;
}, nil, "rbxassetid://116491642412482", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Seaweed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 4;
}, nil, "rbxassetid://78462743742901", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Branch Coral
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://104391616803915", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Nautilus Shell
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 7;
}, nil, "rbxassetid://133696011645973", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Starfish Shell
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 30;
}, nil, "rbxassetid://80794652061587", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Scallop Shell
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(1, 1, 1), nil, nil, {"Blocks"}, {
	SellPrice = 6;
}, nil, "rbxassetid://107858813060771", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found from fishing")

Script name: Cherry Blossom Potted Flowers
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, {
	Clay = 1;
	["Cherry Blossom Flowers"] = 3;
	BenchType = "Crafting Bench";
}, {"Blocks"}, {
	SellPrice = 9;
}, nil, "rbxassetid://104489365121674", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Plant. Lunar New Year 2025 limited")

Script name: Cherry Blossom Flowers
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Blocks"}, {
	SellPrice = 3;
}, nil, "rbxassetid://123985618881656", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Found in the Forest during Lunar New Year 2025")

Script name: Ash Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(170, 151, 116), nil, {
	["Ash Plank"] = 8;
	["Iron Ingot"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 55;
}, {
	Forestry = {
		["Ash Wood"] = 2;
	};
}, "rbxassetid://17449948775", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Cherry Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(133, 106, 96), nil, {
	["Cherry Plank"] = 8;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 22;
}, {
	Forestry = {
		["Cherry Wood"] = 2;
	};
}, "rbxassetid://17449987159", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Mahogany Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(114, 57, 47), nil, {
	["Mahogany Plank"] = 8;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 32;
}, {
	Forestry = {
		["Mahogany Wood"] = 2;
	};
}, "rbxassetid://17450211238", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Oak Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Oak Plank"] = 8;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 10;
}, {
	Forestry = {
		["Oak Wood"] = 2;
	};
}, "rbxassetid://18523721119", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Oak Trap Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Oak Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 5;
}, {
	Forestry = {
		["Oak Wood"] = 3;
	};
}, "rbxassetid://18523720158", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Ash Trap Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Ash Plank"] = 4;
	["Iron Ingot"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 25;
}, {
	Forestry = {
		["Ash Wood"] = 3;
	};
}, "rbxassetid://18523675807", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Mahogany Trap Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Mahogany Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 3;
	};
}, "rbxassetid://18523675652", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Cherry Trap Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Cherry Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 11;
}, {
	Forestry = {
		["Cherry Wood"] = 3;
	};
}, "rbxassetid://18523675180", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Dark Hollow Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Door Behaviour";
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(93, 94, 118), nil, {
	["Dark Hollow Plank"] = 8;
	["Iron Ingot"] = 2;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 110;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 2;
	};
}, "rbxassetid://17450134187", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Dark Hollow Trap Door
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Forestry", {
	Id = "Trap Door Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(158, 128, 63), nil, {
	["Dark Hollow Plank"] = 4;
	["Iron Ingot"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Doors", "Other"}, {
	SellPrice = 55;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 3;
	};
}, "rbxassetid://18523675490", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Can open and close.")

Script name: Basalt Rock Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 176, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(104, 107, 110), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Basalt Rock"] = {
				Min = 2.8;
				Max = 2.8;
			};
		};
	};
	SetItems = {{
		Id = "Basalt";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Basalt", "Ore", "Blocks"}, nil, nil, "rbxassetid://17449961289", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Clay Mud Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 108, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Clay Mud"] = {
				Min = 2.8;
				Max = 2.8;
			};
		};
	};
	SetItems = {{
		Id = "Clay";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Clay", "Ore", "Blocks"}, nil, nil, "rbxassetid://17449984589", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Marble Rock Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 380, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(227, 228, 230), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Marble Rock"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		Id = "Marble";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Marble", "Ore", "Blocks"}, nil, nil, "rbxassetid://17450209800", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Stone Rock Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 128, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Stone Rock"] = {
				Min = 2.877;
				Max = 2.877;
			};
		};
	};
	SetItems = {{
		Id = "Stone";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Stone", "Ore", "Blocks"}, nil, nil, "rbxassetid://17450338474", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Coal Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 176, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(134, 136, 138), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Coal Ore"] = {
				Min = 2.877;
				Max = 2.87;
			};
		};
	};
	SetItems = {{
		Id = "Coal";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Coal", "Ore", "Blocks"}, nil, nil, "rbxassetid://17449982324", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Cobalt Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1500, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Cobalt Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	RandItems = {{
		Id = "Cobalt";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Cobalt", "Ore", "Blocks"}, nil, nil, "rbxassetid://17449981582", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Copper Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 380, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Copper Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		Id = "Copper";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Copper", "Ore", "Blocks"}, nil, nil, "rbxassetid://17449979813", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Rhodium Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10500, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.99, 0.01};
	XP = {
		Mining = {
			["Rhodium Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		Id = "Rhodium";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Rhodium", "Ore", "Blocks"}, nil, nil, "rbxassetid://115884273167992", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Gold Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2400, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Gold Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	RandItems = {{
		Id = "Gold";
		Catagory = "Item";
		Weight = 0.9934;
	}, {
		Id = "Mystic Gold Fragment";
		Catagory = "Item";
		Weight = 0.0066;
	}};
}, nil, {"Gold", "Ore", "Blocks"}, nil, nil, "rbxassetid://17450180720", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Granite Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 240, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(104, 107, 110), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Granite Ore"] = {
				Min = 2.8;
				Max = 2.8;
			};
		};
	};
	SetItems = {{
		Id = "Granite";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Granite", "Ore", "Blocks"}, nil, nil, "rbxassetid://117887903711836", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Iron Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 720, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Iron Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	LevelCatagoryPath = {
		Mining = {"Iron Ore Block"};
	};
	RandItems = {{
		Id = "Iron";
		Catagory = "Item";
		Weight = 0.9994;
	}, {
		Id = "Mystic Iron Fragment";
		Catagory = "Item";
		Weight = 0.006;
	}};
}, nil, {"Iron", "Ore", "Blocks"}, nil, nil, "rbxassetid://17450199694", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Limestone Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 240, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(104, 107, 110), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Limestone Ore"] = {
				Min = 2.8;
				Max = 2.8;
			};
		};
	};
	SetItems = {{
		Id = "Limestone";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Limestone", "Ore", "Blocks"}, nil, nil, "rbxassetid://109235278455334", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Silver Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1800, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.9, 0.1};
	XP = {
		Mining = {
			["Silver Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	RandItems = {{
		Id = "Silver";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Silver", "Ore", "Blocks"}, nil, nil, "rbxassetid://17450256213", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Diamond Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 9600, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.99, 0.01};
	XP = {
		Mining = {
			["Diamond Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	RandItems = {{
		Id = "Diamond";
		Catagory = "Item";
		Weight = 0.9945;
	}, {
		Id = "Mystic Diamond Fragment";
		Catagory = "Item";
		Weight = 0.005;
	}, {
		Id = "Diamond Knife";
		Catagory = "Tool";
		Weight = 0.0005;
	}};
}, nil, {"Diamond", "Ore", "Blocks"}, nil, nil, "rbxassetid://73869871521037", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Amber Ore Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 400, "Mining", nil, nil, true, false, false, false, Color3.fromRGB(90, 90, 90), {
	MultiItemDropWeights = {0, 0.99, 0.01};
	XP = {
		Mining = {
			["Amber Ore"] = {
				Min = 1;
				Max = 1;
			};
		};
	};
	SetItems = {{
		Id = "Amber";
		Catagory = "Item";
		Weight = 1;
	}};
}, nil, {"Amber", "Ore", "Blocks"}, nil, nil, "rbxassetid://136920995352799", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Oak Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(208, 187, 127), nil, {
	["Oak Plank"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Stairs", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523720382", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Mahogany Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(144, 80, 67), nil, {
	["Mahogany Plank"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Stairs", "Blocks"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450210295", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Cherry Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(212, 194, 186), nil, {
	["Cherry Plank"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Stairs", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17449986270", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Ash Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(206, 186, 153), nil, {
	["Ash Plank"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Stairs", "Blocks"}, {
	SellPrice = 5;
}, nil, "rbxassetid://17449947997", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Stone Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(162, 165, 165), nil, {
	Stone = 1;
	BenchType = "Crafting Bench";
}, {"Stone", "Stairs", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://17450252876", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Marble Brick Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, {
	Marble = 1;
	Clay = 1;
	BenchType = "Workbench";
}, {"Marble", "Stairs", "Blocks"}, {
	SellPrice = 6;
}, nil, "rbxassetid://18523677465", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Pink Stone Brick Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, nil, {"Stone", "Stairs", "Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://18149242303", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Stone Brick Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, {
	Stone = 1;
	Clay = 1;
	BenchType = "Crafting Bench";
}, {"Stone", "Stairs", "Blocks"}, {
	SellPrice = 4;
}, nil, "rbxassetid://17450253960", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Red Brick Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(172, 175, 175), nil, {
	Stone = 1;
	Clay = 1;
	BenchType = "Workbench";
}, {"Stone", "Stairs", "Blocks"}, {
	SellPrice = 4;
}, nil, "rbxassetid://18523676573", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Basalt Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(162, 165, 165), nil, {
	Basalt = 1;
	BenchType = "Workbench";
}, {"Basalt", "Stairs", "Blocks"}, {
	SellPrice = 2;
}, nil, "rbxassetid://18523680401", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, nil)

Script name: Web Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(108, 108, 108), nil, {
	["Web Plank"] = 1;
	BenchType = "Sawmill";
}, {"Wood", "Stairs", "Blocks"}, {
	SellPrice = 10;
}, nil, "rbxassetid://120481633541334", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Dark Hollow Stair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Forestry", {
	Id = "Stair Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(149, 150, 173), nil, {
	["Dark Hollow Plank"] = 1;
	Output = 1;
	BenchType = "Sawmill";
}, {"Wood", "Stairs", "Blocks"}, {
	SellPrice = 10;
}, nil, "rbxassetid://17450133483", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, nil)

Script name: Neon Yellow
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237209", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon White
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238843", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Cyan
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238383", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Green
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Green Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238175", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237982", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Purple
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138236363", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Red
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138236972", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Lime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237813", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Black
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Black Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138238612", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Orange
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237487", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Light Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138237644", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Neon Pink
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, false, false, Color3.fromRGB(45, 45, 45), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Neon", "Blocks"}, {
	BuyPrice = 2500;
	SellPrice = 1250;
}, nil, "rbxassetid://18138236716", {
	Placing = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436841835", "rbxassetid://17436841633", "rbxassetid://17436841451", "rbxassetid://17436841287", "rbxassetid://17436841170", "rbxassetid://17436841010"};
}, nil)

Script name: Carpet Yellow
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138242027", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet White
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241865", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Red
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241697", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Purple
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Blue Dye"] = 1;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241524", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Pink
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241342", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Orange
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138241153", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Lime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Green Dye"] = 1;
	["Yellow Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138240942", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Light Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138240717", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Green
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Green Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138240267", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Brown
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Red Dye"] = 1;
	["Green Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239677", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Blue
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Blue Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239463", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Black
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Black Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239217", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Grey
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Black Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18292259119", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Carpet Cyan
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, {
	Cloth = 1;
	["Green Dye"] = 1;
	["Blue Dye"] = 1;
	["White Dye"] = 1;
	BenchType = "Workbench";
}, {"Cloth", "Blocks"}, {
	BuyPrice = 120;
	SellPrice = 12;
}, nil, "rbxassetid://18138239950", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
	Mining = {"rbxassetid://17436883971", "rbxassetid://17436884092", "rbxassetid://17436883701", "rbxassetid://17436883322 "};
}, "Colored floor tile")

Script name: Cooking Station
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Workbench Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(57, 57, 57), nil, {
	["Cherry Wood"] = 16;
}, {"Storage"}, {
	BuyPrice = 1500;
	SellPrice = 160;
}, {
	Farming = {
		Overall = 13;
	};
}, "rbxassetid://100947300361203", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Used to craft a variety of foods.")

Script name: Workbench
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Workbench Behaviour";
}, {
	X = 2;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(90, 0, 1), nil, {
	["Oak Wood"] = 10;
	["Copper Ingot"] = 8;
}, {"Furniture"}, {
	BuyPrice = 1200;
	SellPrice = 144;
}, {
	Mining = {
		["Copper Ore"] = 10;
	};
}, "rbxassetid://128010283759302", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Advanced workbench used to craft more items")

Script name: Crafting Bench
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Workbench Behaviour";
}, {
	X = 2;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(90, 0, 1), nil, {
	Stone = 5;
	Coal = 5;
}, {"Furniture"}, {
	BuyPrice = 200;
	SellPrice = 20;
}, nil, "rbxassetid://140341273150096", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Used for crafting items and blocks")

Script name: Sawmill
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Workbench Behaviour";
}, {
	X = 2;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(90, 0, 1), nil, {
	["Scrap Metal"] = 4;
	["Oak Wood"] = 8;
}, {"Furniture"}, {
	BuyPrice = 750;
	SellPrice = 88;
}, {
	Forestry = {
		Overall = 4;
	};
}, "rbxassetid://71389216260920", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Used to craft wood items")

Script name: Furnace
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Proccessor Behaviour";
	ChestSize = 3;
	TickCount = {
		Min = 3;
		Max = 3;
	};
	CraftableItems = {
		["Iron Ingot"] = {"Iron"};
		["Cobalt Ingot"] = {"Cobalt"};
		["Copper Ingot"] = {"Copper"};
		["Gold Ingot"] = {"Gold"};
		["Silver Ingot"] = {"Silver"};
		["Rhodium Ingot"] = {"Rhodium"};
	};
	UI = "Furnace";
	VFX = {
		On = {
			LavaBlock = {
				Color = Color3.fromRGB(165, 105, 1);
			};
			ParticleEmitter = {
				Enabled = true;
			};
			PointLight = {
				Enabled = true;
			};
		};
		Off = {
			LavaBlock = {
				Color = Color3.fromRGB(44, 28, 0);
			};
			ParticleEmitter = {
				Enabled = false;
			};
			PointLight = {
				Enabled = false;
			};
		};
	};
}, nil, true, true, true, true, Color3.fromRGB(57, 57, 57), nil, {
	Copper = 2;
	Coal = 8;
}, {"Storage"}, {
	BuyPrice = 400;
	SellPrice = 46;
}, {
	Mining = {
		["Copper Ore"] = 5;
	};
}, "rbxassetid://124644192620503", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Used to smelt ores into ingots")

Script name: Forge
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Workbench Behaviour";
}, {
	X = 2;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(90, 0, 1), nil, {
	["Copper Ingot"] = 4;
	Coal = 8;
}, {"Furniture"}, {
	BuyPrice = 500;
	SellPrice = 64;
}, {
	Mining = {
		["Copper Ore"] = 3;
	};
}, "rbxassetid://126109899817033", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Used to craft weapons and tools")

Script name: Cauldron
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Workbench Behaviour";
}, {
	X = 2;
	Y = 2;
	Z = 1;
}, true, true, true, true, Color3.fromRGB(90, 0, 1), nil, {
	["Iron Ingot"] = 8;
	["Oak Wood"] = 8;
}, {"Furniture"}, {
	BuyPrice = 1000;
	SellPrice = 185;
}, {
	Mining = {
		["Iron Ore"] = 10;
	};
}, "rbxassetid://116020247436075", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Used to craft potions")

Script name: Grey Table Lamp
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	["Iron Ingot"] = 3;
	BenchType = "Workbench";
}, {"Lights"}, {
	SellPrice = 1250;
}, nil, "rbxassetid://137266675231307", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Lighting")

Script name: Bookcase
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 64;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	BuyPrice = 8000;
	SellPrice = 1024;
}, {
	Forestry = {
		["Mahogany Wood"] = 13;
	};
}, "rbxassetid://72444683872808", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Yellow Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Yellow Dye"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://95356583713945", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Red Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://128701112153035", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Purple Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["Blue Dye"] = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://140334581331937", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Pink Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["White Dye"] = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://110113908660978", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Lime Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Green Dye"] = 4;
	["Yellow Dye"] = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://94749016214075", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Light Blue Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Blue Dye"] = 4;
	["White Dye"] = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://124787850669920", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Green Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Green Dye"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://118349050074839", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Cyan Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["White Dye"] = 2;
	["Blue Dye"] = 3;
	["Green Dye"] = 3;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://122471000769183", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Brown Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["Green Dye"] = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://96922813859553", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Blue Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Blue Dye"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://124787850669920", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Ship Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, nil, {"Furniture"}, {
	SellPrice = 6500;
}, nil, "rbxassetid://99393523910948", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decoration from Treasure Chests")

Script name: Orange Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Red Dye"] = 4;
	["Yellow Dye"] = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://119571246499821", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Sofa Section
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 8;
	Cloth = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 200;
}, {
	Forestry = {
		["Mahogany Wood"] = 12;
	};
}, "rbxassetid://95658767672808", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Nightstand
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 12;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 192;
}, {
	Forestry = {
		["Mahogany Wood"] = 14;
	};
}, "rbxassetid://135954876637027", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Sofa Section Corner
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 8;
	Cloth = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 200;
}, {
	Forestry = {
		["Mahogany Wood"] = 12;
	};
}, "rbxassetid://84041874646395", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Wood Stool
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 16;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	BuyPrice = 500;
	SellPrice = 128;
}, {
	Forestry = {
		["Oak Wood"] = 4;
	};
}, "rbxassetid://95076402124243", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "It's a chair, now sit in it.")

Script name: Red Table Lamp
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	["Red Dye"] = 2;
	Glass = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	SellPrice = 1250;
}, nil, "rbxassetid://96336224703055", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Lighting")

Script name: Gold Table Lamp
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	["Gold Ingot"] = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	SellPrice = 1300;
}, nil, "rbxassetid://122993425239263", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Lighting")

Script name: Plate Set
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Silver Ingot"] = 8;
	BenchType = "Workbench";
}, {"Furniture"}, {
	SellPrice = 360;
}, {
	Mining = {
		["Silver Ore"] = 4;
	};
}, "rbxassetid://109192070373117", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Red Royal Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 2;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Ash Wood"] = 32;
	Cloth = 128;
	["Red Dye"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 1920;
}, {
	Forestry = {
		["Ash Wood"] = 10;
	};
}, "rbxassetid://131010761992002", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Sofa Section Basic
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 8;
	Cloth = 4;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 160;
}, {
	Forestry = {
		["Mahogany Wood"] = 12;
	};
}, "rbxassetid://76686637133653", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Mug
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	Clay = 2;
	["Red Dye"] = 1;
	BenchType = "Workbench";
}, {"Furniture"}, {
	SellPrice = 6;
}, {
	Mining = {
		["Clay Mud"] = 3;
	};
}, "rbxassetid://91798667238490", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "It's either hot tea, coffee or chocolate milk..")

Script name: Large Umbrella
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Silver Ingot"] = 16;
	Cloth = 16;
	BenchType = "Workbench";
}, {"Furniture"}, {
	SellPrice = 880;
}, {
	Mining = {
		["Silver Ore"] = 5;
	};
}, "rbxassetid://140440166061583", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Tall Lamp
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	["Silver Ingot"] = 8;
	BenchType = "Workbench";
}, {"Lights"}, {
	SellPrice = 1600;
}, nil, "rbxassetid://129506083564962", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Lighting")

Script name: Metal Grate
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Iron Ingot"] = 8;
	BenchType = "Workbench";
}, {"Furniture"}, {
	SellPrice = 120;
}, {
	Mining = {
		["Iron Ore"] = 3;
	};
}, "rbxassetid://80503716410729", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Tile")

Script name: Teal Luxury Sofa
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Ash Wood"] = 16;
	Cloth = 64;
	["Blue Dye"] = 8;
	["Green Dye"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 1000;
}, {
	Forestry = {
		["Ash Wood"] = 5;
	};
}, "rbxassetid://96469256030435", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Teal Table Lamp
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Light Source"] = 1;
	["Blue Dye"] = 1;
	["Green Dye"] = 1;
	Glass = 1;
	BenchType = "Workbench";
}, {"Lights"}, {
	SellPrice = 1250;
}, nil, "rbxassetid://88274230006419", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Lighting")

Script name: Tumbler
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Mahogany Wood"] = 4;
	["Iron Ingot"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 180;
}, {
	Forestry = {
		["Mahogany Wood"] = 5;
	};
}, "rbxassetid://89173462079513", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Aw man it's empty")

Script name: Black Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, {
	X = 1;
	Y = 1;
	Z = 2;
}, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 20;
	Cloth = 8;
	["Black Dye"] = 8;
	BenchType = "Sawmill";
}, {"Furniture"}, {
	SellPrice = 250;
}, nil, "rbxassetid://112453688410246", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decorative Furniture")

Script name: Campfire
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", {
	Id = "Proccessor Behaviour";
	ChestSize = 3;
	TickCount = {
		Min = 3;
		Max = 3;
	};
	CraftableItems = {
		Fries = {"Frozen Fries"};
		Bread = {"Dough"};
		["Baked Potato"] = {"Red Potato"};
		Popcorn = {"Corn on the Cob"};
		["Corn on the Cob"] = {"Corn"};
		["Shark Steak"] = {"Tiger Shark"};
		["Grilled Tilapia"] = {"Tilapia"};
	};
	UI = "Campfire";
	VFX = {
		On = {
			ParticleEmitter = {
				Enabled = true;
			};
		};
		Off = {
			ParticleEmitter = {
				Enabled = false;
			};
		};
	};
}, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, {
	["Oak Wood"] = 8;
	Coal = 4;
}, {"Lights"}, {
	BuyPrice = 500;
	SellPrice = 80;
}, {
	Mining = {
		["Coal Ore"] = 5;
	};
}, "rbxassetid://135348259891202", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Cook foods or warm up next to it, your choice!")

Script name: Ship Wheel
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(74, 43, 27), nil, nil, {"Furniture"}, {
	SellPrice = 6500;
}, nil, "rbxassetid://88433847206348", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Decoration from Treasure Chests")

Script name: Lunar Gong
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 27500;
	SellPrice = 2750;
}, nil, "rbxassetid://93125265234447", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Folding Screen
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 10000;
	SellPrice = 1000;
}, nil, "rbxassetid://73104644166361", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Hanging Lantern Small
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 2500;
	SellPrice = 250;
}, nil, "rbxassetid://99603190793212", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Hanging Lantern Tall
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 2500;
	SellPrice = 250;
}, nil, "rbxassetid://132327576574721", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Garden Light
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 3250;
	SellPrice = 325;
}, nil, "rbxassetid://122135025174084", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Wall Light
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 2500;
	SellPrice = 250;
}, nil, "rbxassetid://86434822995986", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Chair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 10000;
	SellPrice = 1000;
}, nil, "rbxassetid://138962703121551", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Wall Fan
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 3250;
	SellPrice = 325;
}, nil, "rbxassetid://121101714318650", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Zhuo Table
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 5000;
	SellPrice = 500;
}, nil, "rbxassetid://119729155108183", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Bed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 25000;
	SellPrice = 2500;
}, nil, "rbxassetid://116129091406803", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar Snake Throne
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, nil, "rbxassetid://117254476788284", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Lunar End Table
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 5000;
	SellPrice = 500;
}, nil, "rbxassetid://136862435533776", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Tea Cups
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 500;
	SellPrice = 50;
}, nil, "rbxassetid://80321210446719", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Tea Kettle
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 15, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Furniture"}, {
	BuyPrice = 1150;
	SellPrice = 115;
}, nil, "rbxassetid://75698016761730", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Jessetc Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://75238177627312", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Jessetc")

Script name: Gravycatman Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://120719695915734", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Gravycatman")

Script name: Sisterguard Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://94025977688238", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Sisterguard")

Script name: DV Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://128746625330823", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by DVwastaken")

Script name: Hoopie Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://139759850019143", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Hoopie")

Script name: Witchycatlady Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://86236381833529", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Witchycatlady")

Script name: TanqR Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://75616834948516", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by TanqR")

Script name: Beefy Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://103236753252261", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Beefy")

Script name: Ashlanne Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://117452266416755", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Ashlanne")

Script name: LalaFlowergirl Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://92812356575097", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by LalaFlowergirl")

Script name: DevNote Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://94446118225529", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by DevNote")

Script name: Larand Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://121641493772579", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by LarandSWE")

Script name: Wild Goat Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://95311863751105", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Wild Goat")

Script name: ChunkySeal Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://126016921156867", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by ChunkySeal")

Script name: CosmicCometsInc Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://76386550328766", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by CosmicCometsInc")

Script name: Jsquire07 Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://77108761233772", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Jsquire07")

Script name: FVShadow Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://133331463605461", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by FVShadow")

Script name: Eggman Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 1;
}, nil, "rbxassetid://79540185720061", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Creator block can only be given out by Eggman")

Script name: DarkHollow Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Dark Hollow Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Fence", "Other"}, {
	SellPrice = 40;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 15;
	};
}, "rbxassetid://127589614043198", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: Mahogany Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Mahogany Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Fence", "Other"}, {
	SellPrice = 16;
}, {
	Forestry = {
		["Mahogany Wood"] = 15;
	};
}, "rbxassetid://132520176706380", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: StoneBrick Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	Stone = 10;
	BenchType = "Workbench";
}, {"Stone", "Fence", "Other"}, {
	SellPrice = 40;
}, {
	Mining = {
		["Clay Mud"] = 14;
	};
}, "rbxassetid://132629333900553", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: Ash Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Ash Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Fence", "Other"}, {
	SellPrice = 20;
}, {
	Forestry = {
		["Ash Wood"] = 15;
	};
}, "rbxassetid://123278750868057", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: Oak Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Oak Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Fence", "Other"}, {
	SellPrice = 8;
}, {
	Forestry = {
		["Oak Wood"] = 15;
	};
}, "rbxassetid://110347022678499", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: Cherry Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	["Cherry Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Fence", "Other"}, {
	SellPrice = 8;
}, {
	Forestry = {
		["Cherry Wood"] = 15;
	};
}, "rbxassetid://75289427990940", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: Stone Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, {
	Stone = 10;
	BenchType = "Workbench";
}, {"Stone", "Fence", "Other"}, {
	SellPrice = 20;
}, {
	Mining = {
		["Stone Rock"] = 15;
	};
}, "rbxassetid://95560713252316", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: Bone Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(208, 187, 127), nil, nil, {"Bone", "Fence", "Other"}, {
	SellPrice = 20;
}, nil, "rbxassetid://112331870444669", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together. Limited from Halloween event.")

Script name: Web Fence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Forestry", {
	Id = "Fence Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(108, 108, 108), nil, {
	["Web Plank"] = 4;
	BenchType = "Sawmill";
}, {"Wood", "Fence", "Other"}, {
	SellPrice = 40;
}, {
	Forestry = {
		["Ash Wood"] = 15;
	};
}, "rbxassetid://88976879280939", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Connect fences together.")

Script name: Technoblade Trophy
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(91, 95, 97), nil, nil, {"Other"}, {
	SellPrice = 20000;
}, nil, "rbxassetid://134303220276264", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Technoblade Never Dies")

Script name: Slime Trophy
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(227, 212, 35), nil, nil, {"Trophy", "Statue", "Blocks"}, {
	SellPrice = 20000;
}, nil, "rbxassetid://71576416908390", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Collections reward")

Script name: Halloween Trophy
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(227, 212, 35), nil, nil, {"Trophy", "Statue", "Blocks"}, {
	SellPrice = 175000;
}, nil, "rbxassetid://120065205436331", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited Trophy from Halloween 2024 event")

Script name: Lunar Wood Snake Trophy
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 40, "Mining", nil, nil, true, true, true, true, Color3.fromRGB(162, 87, 136), nil, nil, {"Other"}, {
	SellPrice = 1500;
}, nil, "rbxassetid://72628744107060", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
}, "Limited from Lunar New Year 2025")

Script name: Muncher Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 3000;
}, nil, "rbxassetid://85252821912847", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Muncher mobs")

Script name: Blue Flamelet Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 150000;
}, nil, "rbxassetid://135968451325638", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Blue Flamelet mobs")

Script name: Rattles Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 3600;
}, nil, "rbxassetid://95212031063923", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Rattles mobs")

Script name: Green Slime Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 2000;
}, nil, "rbxassetid://132287781636427", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Green Slime mobs")

Script name: Flamelet Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 15000;
}, nil, "rbxassetid://103980081306261", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Flamelet mobs")

Script name: GrimThorn Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 30000;
}, nil, "rbxassetid://96525329853179", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from GrimThorn mobs")

Script name: Gizmo Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 2750;
}, nil, "rbxassetid://91962834414382", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Gizmo mobs")

Script name: Slimegore Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 3000;
}, nil, "rbxassetid://112299199864471", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Slimegore mobs")

Script name: Darkfang Spider Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 3000;
}, nil, "rbxassetid://140195008794702", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Darkfang Spider mobs")

Script name: Arachnella Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 150000;
}, nil, "rbxassetid://121609246284667", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Arachnella boss")

Script name: Pink Slime Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 8000;
}, nil, "rbxassetid://127861520804207", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Drops from Pink Slime mobs")

Script name: Giant Ancient Slime Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 20000;
}, nil, "rbxassetid://83110733225717", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Collection Reward")

Script name: Giant GrimThorn Mob Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", nil, nil, true, true, true, false, Color3.fromRGB(171, 171, 171), nil, nil, {"Blocks"}, {
	SellPrice = 200000;
}, nil, "rbxassetid://76379128438928", {
	Placing = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436839099", "rbxassetid://17436839533", "rbxassetid://17436838449", "rbxassetid://17436838649", "rbxassetid://17436838200", "rbxassetid://17436838031"};
}, "Collection Reward")

Script name: Carrot Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 36;
		Max = 44;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Carrot = 0.7;
			};
		};
		SetItems = {{
			Id = "Carrot";
			Catagory = "Food";
		}, {
			Id = "Carrot Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			Id = "Carrot Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(233, 132, 52), nil, nil, {"Other"}, {
	BuyPrice = 275;
	SellPrice = 27;
}, nil, "rbxassetid://17449987576", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "3.5 minute harvest time")

Script name: Strawberry Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 70;
		Max = 78;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Strawberry = 0.4;
			};
		};
		SetItems = {{
			Id = "Strawberry";
			Catagory = "Food";
		}, {
			Id = "Strawberry Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			Id = "Strawberry Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(44, 93, 16), nil, nil, {"Other"}, {
	BuyPrice = 2400;
	SellPrice = 240;
}, {
	Farming = {
		Overall = 9;
	};
}, "rbxassetid://17450252284", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "6.5 minute harvest time")

Script name: Peppermint Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 22;
		Max = 30;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Peppermint = 0.1;
			};
		};
		SetItems = {{
			Id = "Peppermint";
			Catagory = "Food";
		}, {
			Id = "Peppermint Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.9999;
		}, {
			Id = "Peppermint Seed";
			Catagory = "Block";
			Weight = 0.0001;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(255, 0, 4), nil, nil, {"Other"}, {
	SellPrice = 300;
}, nil, "rbxassetid://91604678121911", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "2.5 minute harvest time")

Script name: Red Potato Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 70;
		Max = 78;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				["Red Potato"] = 0.3;
			};
		};
		SetItems = {{
			Id = "Red Potato";
			Catagory = "Food";
		}, {
			Id = "Red Potato Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			Id = "Red Potato Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(128, 79, 56), nil, nil, {"Other"}, {
	BuyPrice = 3600;
	SellPrice = 360;
}, {
	Farming = {
		Overall = 11;
	};
}, "rbxassetid://17450240206", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "6.5 minute harvest time")

Script name: Wheat Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 18;
		Max = 22;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Wheat = 0.8;
			};
		};
		SetItems = {{
			Id = "Wheat";
			Catagory = "Food";
		}, {
			Id = "Wheat Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.95;
		}, {
			Id = "Wheat Seed";
			Catagory = "Block";
			Weight = 0.05;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(202, 184, 94), nil, nil, {"Other"}, {
	BuyPrice = 60;
	SellPrice = 6;
}, nil, "rbxassetid://17450307297", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "2 minute harvest time")

Script name: Corn Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 60;
		Max = 68;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Corn = 0.5;
			};
		};
		SetItems = {{
			Id = "Corn";
			Catagory = "Food";
		}, {
			Id = "Corn Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			Id = "Corn Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, false, true, Color3.fromRGB(198, 180, 93), nil, nil, {"Other"}, {
	BuyPrice = 1500;
	SellPrice = 150;
}, {
	Farming = {
		Overall = 7;
	};
}, "rbxassetid://17449979003", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "6 minute harvest time")

Script name: Tomato Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 60;
		Max = 68;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Tomato = 0.6;
			};
		};
		SetItems = {{
			Id = "Tomato";
			Catagory = "Food";
		}, {
			Id = "Tomato Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.99;
		}, {
			Id = "Tomato Seed";
			Catagory = "Block";
			Weight = 0.01;
		}};
	};
}, {
	X = 1;
	Y = 2;
	Z = 1;
}, true, true, false, true, Color3.fromRGB(41, 92, 14), nil, nil, {"Other"}, {
	BuyPrice = 900;
	SellPrice = 90;
}, {
	Farming = {
		Overall = 5;
	};
}, "rbxassetid://17450296427", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "~6 minute harvest time")

Script name: Watermelon Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 68;
		Max = 76;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Watermelon = 0.05;
			};
		};
		SetItems = {{
			Id = "Watermelon";
			Catagory = "Food";
		}, {
			Id = "Watermelon Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.998;
		}, {
			Id = "Watermelon Seed";
			Catagory = "Block";
			Weight = 0.002;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(0, 90, 6), nil, nil, {"Other"}, {
	BuyPrice = 6500;
	SellPrice = 700;
}, {
	Farming = {
		Overall = 15;
	};
}, "rbxassetid://17450307499", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "6 minute harvest time")

Script name: Pumpkin Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 68;
		Max = 76;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				Pumpkin = 0.05;
			};
		};
		SetItems = {{
			Id = "Pumpkin";
			Catagory = "Food";
		}, {
			Id = "Pumpkin Seed";
			Catagory = "Block";
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(0, 90, 6), nil, nil, {"Other"}, {
	SellPrice = 1000;
}, {
	Farming = {
		Overall = 17;
	};
}, "rbxassetid://70462731651419", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "6 minute harvest time")

Script name: Bamboo Plant
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Bamboo Behaviour";
	TickCount = {
		Min = 60;
		Max = 60;
	};
	Ground = {"Tilled Dirt", "Dirt", "Grass", "Bamboo Plant"};
}, nil, true, true, false, true, Color3.fromRGB(0, 90, 6), nil, nil, {"Other"}, {
	SellPrice = 15;
}, {
	Farming = {
		Overall = 8;
	};
}, "rbxassetid://99226277388186", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "Bamboo plant grows automatically")

Script name: Nightshade Berry Bush Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Bush Behaviour";
	TickCount = {
		Min = 25;
		Max = 40;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 3;
	Ground = nil;
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				["Nightshade Berry"] = 0.1;
			};
		};
		SetItems = {{
			Id = "Nightshade Berry";
			Catagory = "Food";
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(0, 90, 6), nil, nil, {"Other"}, {
	SellPrice = 240;
}, {
	Farming = {
		Overall = 16;
	};
}, "rbxassetid://76879799878876", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "2 minute harvest time")

Script name: White Mushroom Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Crop Behaviour";
	TickCount = {
		Min = 22;
		Max = 30;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 5;
	Ground = "Tilled Dirt";
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {
				["White Mushroom"] = 0.1;
			};
		};
		SetItems = {{
			Id = "White Mushroom";
			Catagory = "Food";
		}, {
			Id = "White Mushroom Seed";
			Catagory = "Block";
		}};
		RandItems = {{
			Weight = 0.998;
		}, {
			Id = "White Mushroom Seed";
			Catagory = "Block";
			Weight = 0.002;
		}};
	};
}, nil, true, true, false, true, Color3.fromRGB(220, 220, 220), nil, nil, {"Other"}, {
	BuyPrice = 4500;
	SellPrice = 450;
}, {
	Farming = {
		Overall = 12;
	};
}, "rbxassetid://17450306939", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "2.5 minute harvest time")

Script name: Coffee Bean Plant Seed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 0.1, "Farmland", {
	Id = "Bush Behaviour";
	TickCount = {
		Min = 25;
		Max = 40;
	};
	ProgressTemplate = {
		Stage = 1;
	};
	StageCount = 3;
	Ground = nil;
	GrownLootData = {
		MultiItemDropWeights = {1};
		XP = {
			Farming = {};
		};
		SetItems = {};
	};
}, nil, true, true, false, true, Color3.fromRGB(0, 90, 6), nil, nil, {"Other"}, nil, nil, "rbxassetid://76879799878876", {
	Placing = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
	Breaking = {"rbxassetid://17436929883", "rbxassetid://17436929745", "rbxassetid://17436929574", "rbxassetid://17436929397 "};
	Mining = {"rbxassetid://17436840653", "rbxassetid://17436839717", "rbxassetid://17436839392", "rbxassetid://17436839217", "rbxassetid://17436838924", "rbxassetid://17436838804"};
}, "2 minute harvest time")

Script name: OakTreeE
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 90, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 57, 20), {
	MultiItemDropWeights = {0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		Id = "Oak Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: OakTreeD
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 135, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 57, 20), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		Id = "Oak Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: OakTreeC
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 135, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 57, 20), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		Id = "Oak Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: OakTreeB
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 180, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 56, 20), {
	MultiItemDropWeights = {0, 0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		Id = "Oak Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: OakTreeA
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 270, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(86, 56, 20), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Oak Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Oak Wood"};
	};
	SetItems = {{
		Id = "Oak Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Oak Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: AshTreeB
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 760, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(34, 29, 20), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Ash Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Ash Wood"};
	};
	SetItems = {{
		Id = "Ash Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Ash Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: AshTreeA
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1270, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(39, 32, 24), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Ash Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Ash Wood"};
	};
	SetItems = {{
		Id = "Ash Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Ash Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: CherryTreeB
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 210, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(88, 22, 8), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Cherry Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Cherry Wood"};
	};
	SetItems = {{
		Id = "Cherry Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Cherry Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: CherryTreeA
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 350, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(88, 22, 8), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Cherry Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Cherry Wood"};
	};
	SetItems = {{
		Id = "Cherry Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Cherry Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: MahoganyTreeB
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 420, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(56, 45, 44), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Mahogany Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Mahogany Wood"};
	};
	SetItems = {{
		Id = "Mahogany Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Mahogany Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: MahoganyTreeA
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 700, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(48, 38, 37), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Mahogany Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Mahogany Wood"};
	};
	SetItems = {{
		Id = "Mahogany Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Mahogany Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTreeE
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1410, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTreeD
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1880, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: WebTreeC
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2350, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(152, 152, 152), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Web Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Web Wood"};
	};
	SetItems = {{
		Id = "Web Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Web Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: WebTreeB
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2820, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(152, 152, 152), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Web Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Web Wood"};
	};
	SetItems = {{
		Id = "Web Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Web Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTreeA
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 3290, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTallTreeA
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 3290, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTallTreeB
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2820, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTallTreeC
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2350, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTallTreeD
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1880, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTallTreeE
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1410, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 1.75;
				Max = 1.75;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: WebTreeA
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 3290, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(152, 152, 152), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Web Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Web Wood"};
	};
	SetItems = {{
		Id = "Web Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Web Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTreeB
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2820, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: DarkHollowTreeC
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 2350, "Forestry", nil, nil, true, false, false, false, Color3.fromRGB(81, 90, 112), {
	MultiItemDropWeights = {0, 0, 0, 0, 1};
	XP = {
		Forestry = {
			["Dark Hollow Wood"] = {
				Min = 4;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Forestry = {"Dark Hollow Wood"};
	};
	SetItems = {{
		Id = "Dark Hollow Wood";
		Catagory = "Block";
	}};
	RandItems = {{
		Weight = 1;
	}, {
		Id = "Dark Hollow Leaves";
		Catagory = "Block";
		Weight = 0.8;
	}, {
		Id = "Acorn";
		Catagory = "Item";
		Weight = 0.7;
	}, {
		Id = "Griffin Feather";
		Catagory = "Item";
		Weight = 0.01;
	}};
}, nil, {}, {}, nil, nil, {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436837879"};
})

Script name: Dragonstone Chest
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 100, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 128;
	UI = "Chest";
}, nil, true, true, true, true, Color3.fromRGB(17, 63, 137), nil, nil, {"Storage"}, nil, nil, "rbxassetid://119807050069973", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Holds up to 128 unique items")

Script name: Large Chest
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 100, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 32;
	UI = "Chest";
}, nil, true, true, true, true, Color3.fromRGB(153, 90, 38), nil, {
	["Cherry Wood"] = 256;
	["Iron Ingot"] = 64;
	BenchType = "Sawmill";
}, {"Storage"}, {
	BuyPrice = 12000;
	SellPrice = 3000;
}, {
	Forestry = {
		["Oak Wood"] = 5;
	};
}, "rbxassetid://104774911865969", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Holds up to 32 unique items")

Script name: Small Chest
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 100, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 16;
	UI = "Chest";
}, nil, true, true, true, true, Color3.fromRGB(57, 21, 5), nil, {
	["Oak Wood"] = 32;
	["Iron Ingot"] = 8;
	BenchType = "Sawmill";
}, {"Storage"}, {
	BuyPrice = 1500;
	SellPrice = 150;
}, {
	Forestry = {
		["Oak Wood"] = 1;
	};
}, "rbxassetid://70562097982665", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Holds up to 16 unique items")

Script name: Diamond Chest
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 80, "Mining", {
	Id = "Chest Behaviour";
	ChestSize = 64;
	UI = "Chest";
}, nil, true, true, true, true, Color3.fromRGB(0, 150, 153), nil, {
	Diamond = 64;
	["Silver Ingot"] = 64;
	BenchType = "Workbench";
}, {"Storage", "Diamond"}, {
	BuyPrice = 750000;
	SellPrice = 15700;
}, {
	Mining = {
		["Diamond Ore"] = 10;
	};
}, "rbxassetid://93016932178431", {
	Placing = {"rbxassetid://17436837420", "rbxassetid://17436837879", "rbxassetid://17436837673", "rbxassetid://17436837313", "rbxassetid://17436837149", "rbxassetid://17436837539"};
	Breaking = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
	Mining = {"rbxassetid://17436882699", "rbxassetid://17436882452", "rbxassetid://17436882196", "rbxassetid://17436882013"};
}, "Holds up to 64 unique items")

Script name: Carrot Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Carrot Underling";
	Resources = {"Carrot Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 25000;
	SellPrice = 2500;
}, {
	Farming = {
		Carrot = 20;
	};
}, "rbxassetid://17860237450", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Carrot crops")

Script name: Cherry Wood Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Cherry Wood Underling";
	Resources = {"CherryTreeA", "CherryTreeB"};
	ResourceType = "Tree";
	SpawnResources = true;
	MaxResourceSpawn = 1;
	SpawnSpeed = 15;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 50000;
	SellPrice = 5000;
}, {
	Forestry = {
		["Cherry Wood"] = 20;
	};
}, "rbxassetid://17860237199", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and cuts Cherry Wood trees")

Script name: Basalt Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Basalt Underling";
	Resources = {"Basalt Rock Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 3000;
	SellPrice = 300;
}, {
	Mining = {
		["Basalt Rock"] = 16;
	};
}, "rbxassetid://17860237673", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Basalt")

Script name: Clay Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Clay Underling";
	Resources = {"Clay Mud Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000;
	SellPrice = 100;
}, {
	Mining = {
		["Clay Mud"] = 15;
	};
}, "rbxassetid://17860236943", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Clay")

Script name: Coal Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Coal Underling";
	Resources = {"Coal Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 3000;
	SellPrice = 300;
}, {
	Mining = {
		["Coal Ore"] = 15;
	};
}, "rbxassetid://17860236638", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Coal")

Script name: Cobalt Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Cobalt Underling";
	Resources = {"Cobalt Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Mining = {
		["Cobalt Ore"] = 22;
	};
}, "rbxassetid://17860236450", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Cobalt")

Script name: Gold Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Gold Underling";
	Resources = {"Gold Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 15;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, {
	Mining = {
		["Gold Ore"] = 28;
	};
}, "rbxassetid://17860235499", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Gold")

Script name: Copper Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Copper Underling";
	Resources = {"Copper Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 30000;
	SellPrice = 3000;
}, {
	Mining = {
		["Copper Ore"] = 20;
	};
}, "rbxassetid://17860236342", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Copper")

Script name: Iron Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Iron Underling";
	Resources = {"Iron Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 100000;
	SellPrice = 10000;
}, {
	Mining = {
		["Iron Ore"] = 20;
	};
}, "rbxassetid://17860235299", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Iron")

Script name: Mahogany Wood Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Mahogany Wood Underling";
	Resources = {"MahoganyTreeB"};
	ResourceType = "Tree";
	SpawnResources = true;
	MaxResourceSpawn = 1;
	SpawnSpeed = 15;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 100000;
	SellPrice = 10000;
}, {
	Forestry = {
		["Mahogany Wood"] = 20;
	};
}, "rbxassetid://17860235088", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and cuts Mahogany Wood trees")

Script name: Silver Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Silver Underling";
	Resources = {"Silver Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Mining = {
		["Silver Ore"] = 20;
	};
}, "rbxassetid://17860234187", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Silver")

Script name: Web Wood Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Web Wood Underling";
	Resources = {"WebTreeC"};
	ResourceType = "Tree";
	SpawnResources = true;
	MaxResourceSpawn = 1;
	SpawnSpeed = 15;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 2000000;
	SellPrice = 200000;
}, {
	Forestry = {
		["Web Wood"] = 20;
	};
}, "rbxassetid://129512788443667", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and cuts Web Wood trees")

Script name: Tomato Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Tomato Underling";
	Resources = {"Tomato Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 40000;
	SellPrice = 4000;
}, {
	Farming = {
		Tomato = 20;
	};
}, "rbxassetid://17860233668", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Tomato crops")

Script name: Corn Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Corn Underling";
	Resources = {"Corn Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 50000;
	SellPrice = 5000;
}, {
	Farming = {
		Corn = 20;
	};
}, "rbxassetid://17860236119", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Corn crops")

Script name: Strawberry Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Strawberry Underling";
	Resources = {"Strawberry Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 100000;
	SellPrice = 10000;
}, {
	Farming = {
		Strawberry = 20;
	};
}, "rbxassetid://17860233872", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Strawberry crops")

Script name: White Mushroom Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "White Mushroom Underling";
	Resources = {"White Mushroom Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 400000;
	SellPrice = 40000;
}, {
	Farming = {
		["White Mushroom"] = 20;
	};
}, "rbxassetid://17860238878", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby White Mushroom crops")

Script name: Red Potato Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Red Potato Underling";
	Resources = {"Red Potato Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Farming = {
		["Red Potato"] = 20;
	};
}, "rbxassetid://17860234326", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Red Potato crops")

Script name: Pumpkin Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Pumpkin Underling";
	Resources = {"Pumpkin Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(209, 111, 0), nil, nil, {}, {
	BuyPrice = 2000000;
	SellPrice = 250000;
}, {
	Farming = {
		Pumpkin = 20;
	};
}, "rbxassetid://82666609117884", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Pumpkin crops")

Script name: Ash Wood Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Ash Wood Underling";
	Resources = {"AshTreeA", "AshTreeB"};
	ResourceType = "Tree";
	SpawnResources = true;
	MaxResourceSpawn = 1;
	SpawnSpeed = 15;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Forestry = {
		["Ash Wood"] = 20;
	};
}, "rbxassetid://17860237940", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and cuts Ash Wood trees")

Script name: Oak Wood Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Oak Wood Underling";
	Resources = {"OakTreeA", "OakTreeB"};
	ResourceType = "Tree";
	SpawnResources = true;
	MaxResourceSpawn = 1;
	SpawnSpeed = 15;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 6000;
	SellPrice = 600;
}, {
	Forestry = {
		["Oak Wood"] = 20;
	};
}, "rbxassetid://17860234486", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and cuts Oak Wood trees")

Script name: Wheat Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Wheat Underling";
	Resources = {"Wheat Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 15000;
	SellPrice = 1500;
}, {
	Farming = {
		Wheat = 10;
	};
}, "rbxassetid://17860233354", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Wheat crops")

Script name: Stone Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Stone Underling";
	Resources = {"Stone Rock Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000;
	SellPrice = 100;
}, {
	Mining = {
		["Stone Rock"] = 10;
	};
}, "rbxassetid://17860234060", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Stone")

Script name: Granite Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Granite Underling";
	Resources = {"Granite Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 75000;
	SellPrice = 7500;
}, {
	Mining = {
		["Granite Ore"] = 20;
	};
}, "rbxassetid://77512183971018", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Granite")

Script name: Flower Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Flower Underling";
	Resources = {"Red Poppy Flower", "Blue Poppy Flower", "Green Poppy Flower", "White Poppy Flower", "Yellow Poppy Flower", "Black Poppy Flower"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(131, 43, 143), nil, nil, {}, {
	BuyPrice = 250000;
	SellPrice = 25000;
}, {
	Foraging = {
		Overall = 5;
	};
}, "rbxassetid://94126383320426", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and harvests Flowers")

Script name: Watermelon Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Watermelon Underling";
	Resources = {"Watermelon Seed"};
	ResourceType = "Crop";
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, {
	Farming = {
		Watermelon = 20;
	};
}, "rbxassetid://17860233513", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto harvests and replants nearby Watermelon crops")

Script name: Dark Hollow Wood Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Dark Hollow Wood Underling";
	Resources = {"DarkHollowTreeA"};
	ResourceType = "Tree";
	SpawnResources = true;
	MaxResourceSpawn = 1;
	SpawnSpeed = 15;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 1000000;
	SellPrice = 100000;
}, {
	Forestry = {
		["Dark Hollow Wood"] = 20;
	};
}, "rbxassetid://17860235760", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and cuts Dark Hollow Wood trees")

Script name: Marble Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Marble Underling";
	Resources = {"Marble Rock Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 25000;
	SellPrice = 2500;
}, {
	Mining = {
		["Marble Rock"] = 20;
	};
}, "rbxassetid://17860234788", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Marble")

Script name: Limestone Underling Anchor
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 50, "Mining", {
	Id = "Underling Anchor Behaviour";
	UnderlingType = "Limestone Underling";
	Resources = {"Limestone Ore Block"};
	ResourceType = "Ore";
	SpawnResources = true;
	MaxResourceSpawn = 5;
	SpawnSpeed = 10;
}, nil, true, true, false, true, Color3.fromRGB(90, 90, 90), nil, nil, {}, {
	BuyPrice = 75000;
	SellPrice = 7500;
}, {
	Mining = {
		["Limestone Ore"] = 20;
	};
}, "rbxassetid://137806338904673", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Auto spawns and mines Limestone")

Script name: Spiked Floor Trap
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1, "Mining", {
	Id = "SpikeTrap Behaviour";
	TickCount = {
		Defult = 1;
	};
}, nil, true, true, false, true, Color3.fromRGB(17, 17, 17), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://111456247415355", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Spikes = death")

Script name: Kill Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1, "Mining", {
	Id = "Damage Behaviour";
}, nil, true, true, true, true, Color3.fromRGB(45, 45, 45), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://130917596997238", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "kills on contact")

Script name: Disappear Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Disappear Behaviour";
}, nil, true, true, false, true, Color3.fromRGB(86, 86, 86), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://98027699013985", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Disappears when walked on")

Script name: Checkpoint Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 10, "Mining", {
	Id = "Checkpoint Behaviour";
	BlockType = "Checkpoint";
}, nil, true, true, false, false, Color3.fromRGB(220, 116, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://94553218266210", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "When touched saves checkpoint. Players will respawn on it.")

Script name: Finish Line Block
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Block.BlockDefinition).new(script.Name, 1, "Mining", {
	Id = "Checkpoint Behaviour";
	BlockType = "Finish Line";
}, nil, true, true, false, false, Color3.fromRGB(220, 116, 255), nil, nil, {"Blocks"}, {
	SellPrice = 20;
}, nil, "rbxassetid://106322001446304", {
	Placing = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
	Breaking = {"rbxassetid://17436882960", "rbxassetid://17436883171", "rbxassetid://17436883841", "rbxassetid://17436883511"};
	Mining = {"rbxassetid://17436840856", "rbxassetid://17436840424", "rbxassetid://17436840287", "rbxassetid://17436840174", "rbxassetid://17436840029", "rbxassetid://17436839839"};
}, "Resets any saved checkpoints")

Script name: Behaviours
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: BehavioursDefinition
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 12
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Activate = arg2
	module.Inititate = arg3
	module.ValidateFunction = arg4
	module.AdjChangeFunction = arg5
	module.GetLootData = arg6
	module.DestroyingFunction = arg7
	return setmetatable(module, module_2_upvr)
end
local CoreUtil_upvr = require(game:GetService("ReplicatedStorage").CommonModules.CoreUtil)
function module_2_upvr.Validate(arg1, arg2, arg3, arg4, arg5) -- Line 25
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local any_RequireDefinitions_result1 = CoreUtil_upvr:RequireDefinitions()
	local var6
	if not var6 then
		local var7 = any_RequireDefinitions_result1.Block[arg2]
		if var7 then
			var7 = any_RequireDefinitions_result1.Block[arg2].BehaviourData
		end
		var6 = var7
		if not var6 then return end
	end
	return arg1.ValidateFunction(arg2, arg3, arg4, var6)
end
return module_2_upvr

Script name: Stair Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local tbl_upvr = {"InLeft", "InRight", "OutLeft", "OutRight"}
function NormaliseVector(arg1) -- Line 18
	return Vector3.new(math.round(arg1.X), math.round(arg1.Y), math.round(arg1.Z))
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function StairChange(arg1, arg2, arg3, arg4) -- Line 22
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 128 start (CF ANALYSIS FAILED)
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if arg4 then
		if arg4 == 0 then
		else
			SOME:Destroy()
			SOME = CoreUtil:CreateBlockModel(ReplicatedStorage_upvr.Prefabs.StairFamilies:FindFirstChild(arg1.Id):FindFirstChild(tbl_upvr[arg4]), CoreUtil:ToWorldPos(arg1.Position), arg1.Rotation, workspace.Island)
			SOME.Name = arg1.Index
		end
	end
	local tbl = {
		Front = nil;
		Back = nil;
		Left = nil;
		Right = nil;
	}
	local var8 = SOME
	if not var8 then return end
	if var8:IsA("Model") then
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local pairs_result1, pairs_result2, pairs_result3 = pairs(CoreUtil:GetAdjacentPositions(arg1.Position))
	-- KONSTANTERROR: [0] 1. Error Block 128 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [271] 177. Error Block 31 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [271] 177. Error Block 31 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [111] 74. Error Block 10 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [111] 74. Error Block 10 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 127
	return true
end
function Initialise(arg1) -- Line 131
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	local var12
	if var12 then return end
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var12 = arg1.TickProgress.Stage
		return var12
	end
	if not arg1.TickProgress or not INLINED() then
		var12 = nil
	end
	if not arg1.TickProgress then
		arg1.TickProgress = {
			Stage = 0;
		}
	end
	return StairChange(arg1, true, nil, var12)
end
function Validate(arg1, arg2, arg3, arg4) -- Line 139
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 143
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return StairChange(arg2, arg1, arg3)
end
function GetLootData(arg1) -- Line 149
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 154
	return true
end
function SpawnExtra(arg1) -- Line 158
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Dirt Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function Activate(arg1) -- Line 12
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService = Knit_upvr.GetService("BlockService")
		local Position = arg1.Position
		BlockService:DestroyBlock(Position)
		BlockService:PlaceBlock(nil, "Grass", Position)
	end
end
function Initialise(arg1) -- Line 27
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local any_GetValueAtPosition_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(BlockService_2.Blocks, {
		X = arg1.Position.X;
		Y = arg1.Position.Y + 1;
		Z = arg1.Position.Z;
	})
	if not any_GetValueAtPosition_result1 or any_GetValueAtPosition_result1 == 0 then
		BlockService_2:ToggleTickObject(true, arg1)
	else
		BlockService_2:ToggleTickObject(false, arg1)
	end
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 45
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 49
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y + 1 and arg3.Position.Z == arg2.Position.Z then
		local BlockService_3 = Knit_upvr.GetService("BlockService")
		if arg1 == "Destroying" then
			BlockService_3:ToggleTickObject(true, arg2)
			return
		end
		if arg1 == "Placing" then
			BlockService_3:ToggleTickObject(false, arg2)
		end
	end
end
function GetLootData(arg1, arg2) -- Line 63
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 68
	return true
end
function SpawnExtra(arg1) -- Line 72
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Crop Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function UpdateModel(arg1, arg2) -- Line 12
	local Part = arg1.Part
	if not Part then
		warn("ERROR INITIALISING CROP:"..tostring(arg1.Id))
	else
		for _, v in pairs(Part.Stages:GetChildren()) do
			local var13
			if tonumber(v.Name) == arg2 then
				var13 = 0
			else
				var13 = 1
			end
			v.Transparency = var13
		end
	end
end
function Activate(arg1) -- Line 25
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local any_RequireDefinitions_result1_2 = CoreUtil_upvr:RequireDefinitions()
		local BlockService = Knit_upvr.GetService("BlockService")
		BlockService:UpdateTickProgress(arg1, {
			Stage = arg1.TickProgress.Stage + 1;
		})
		UpdateModel(arg1, arg1.TickProgress.Stage)
		if arg1.TickProgress.Stage < any_RequireDefinitions_result1_2.Block[arg1.Id].BehaviourData.StageCount then
			return true
		end
		if arg1.TickProgress.Stage == any_RequireDefinitions_result1_2.Block[arg1.Id].BehaviourData.StageCount then
			BlockService.Client.UpdateBlockObject:FireAll(arg1)
		end
		BlockService:ToggleTickObject(false, arg1)
	end
end
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function Initialise(arg1) -- Line 61
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: TableUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local tick_result1_2 = tick()
		local BlockService_3_upvr = Knit_upvr.GetService("BlockService")
		local DataHandlerService = Knit_upvr.GetService("DataHandlerService")
		local any_RequireDefinitions_result1_3 = CoreUtil_upvr:RequireDefinitions()
		if arg1.Id == "Wheat Seed" and not arg1.TickProgress and not BlockService_3_upvr.IsMainHub and BlockService_3_upvr.IslandInitialised then
			local any_GetData_result1_2 = CoreUtil_upvr:GetData(BlockService_3_upvr.IslandOwner, DataHandlerService)
			if any_GetData_result1_2 and not any_GetData_result1_2.Masteries.Farming.Wheat then
				local any_Copy_result1_2 = TableUtil_upvr.Copy(any_RequireDefinitions_result1_3.Block["Wheat Seed"].BehaviourData.ProgressTemplate, true)
				any_Copy_result1_2.Stage = 1
				BlockService_3_upvr:UpdateTickProgress(arg1, any_Copy_result1_2)
				task.delay(1, function() -- Line 80
					--[[ Upvalues[3]:
						[1]: arg1 (readonly)
						[2]: CoreUtil_upvr (copied, readonly)
						[3]: BlockService_3_upvr (readonly)
					]]
					print(arg1)
					local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(BlockService_3_upvr.Blocks, arg1.Position)
					if any_GetValueAtPosition_result1 and any_GetValueAtPosition_result1.Index == arg1.Index then
						arg1.TickProgress.Stage = 4
						Activate(arg1)
					end
				end)
				return
			end
		end
		local any_GetData_result1_4 = CoreUtil_upvr:GetData(BlockService_3_upvr.IslandOwner, DataHandlerService)
		if any_GetData_result1_4 and not BlockService_3_upvr.IslandInitialised and arg1.TickProgress then
			local LastOnIsland = any_GetData_result1_4.LastOnIsland
			if not LastOnIsland then
				LastOnIsland = tick()
			end
			local clamped_2 = math.clamp(arg1.TickProgress.Stage + math.clamp(math.floor((tick() - LastOnIsland) / any_RequireDefinitions_result1_3.Block[arg1.Id].BehaviourData.TickCount.Max), 0, any_RequireDefinitions_result1_3.Block[arg1.Id].BehaviourData.StageCount), 1, any_RequireDefinitions_result1_3.Block[arg1.Id].BehaviourData.StageCount)
			if arg1.TickProgress.Stage ~= clamped_2 then
				arg1.TickProgress.Stage = clamped_2
				coroutine.wrap(function() -- Line 103
					--[[ Upvalues[2]:
						[1]: BlockService_3_upvr (readonly)
						[2]: arg1 (readonly)
					]]
					repeat
						task.wait()
					until BlockService_3_upvr.IslandInitialised
					BlockService_3_upvr:UpdateTickProgress(arg1, arg1.TickProgress)
				end)()
			end
		end
		if not arg1.TickProgress or arg1.TickProgress.Stage < any_RequireDefinitions_result1_3.Block[arg1.Id].BehaviourData.StageCount then
			BlockService_3_upvr:ToggleTickObject(true, arg1)
		end
		UpdateModel(arg1, arg1.TickProgress.Stage or 1)
		if 0.1 < tick() - tick_result1_2 then
			print(tick() - tick_result1_2)
		end
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 128
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetDefinitionFromId_result1 = CoreUtil:GetDefinitionFromId(arg1)
	if RunService_upvr:IsServer() then
		local BlockService_5 = Knit_upvr.GetService("BlockService")
		local any_GetData_result1 = CoreUtil:GetData(BlockService_5.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		if any_GetDefinitionFromId_result1.LevelReq and not CoreUtil:IsMasterySucceeded(any_GetData_result1.Masteries, any_GetDefinitionFromId_result1.LevelReq) then
			Knit_upvr.GetService("PlayerService").Client.Warn:Fire(BlockService_5.IslandOwner, "Your level is too low to place down this crop")
			return
		end
	elseif any_GetDefinitionFromId_result1.LevelReq and not CoreUtil:IsMasterySucceeded(Knit_upvr.GetController("PlayerController").Masteries, any_GetDefinitionFromId_result1.LevelReq) then
		Knit_upvr.GetController("UIController"):WarningMessage("Your level is too low to place down this crop")
		return
	end
	-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [128] 90. Error Block 16 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [128] 90. Error Block 16 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [131] 93. Error Block 17 start (CF ANALYSIS FAILED)
	do
		return true
	end
	-- KONSTANTERROR: [131] 93. Error Block 17 end (CF ANALYSIS FAILED)
end
function AdjacentChange(arg1, arg2, arg3) -- Line 178
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg1 == "Destroying" and arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y - 1 and arg3.Position.Z == arg2.Position.Z then
		local var45 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
		local BlockService_4 = Knit_upvr.GetService("BlockService")
		local InventoryService = Knit_upvr.GetService("InventoryService")
		if BlockService_4.IslandOwner then
			InventoryService:CollectLoot(BlockService_4.IslandOwner, InventoryService:GenerateLootTable(var45.LootData, var45):GenerateLoot())
		end
		BlockService_4:DestroyBlock(arg2.Position)
	end
end
function GetLootData(arg1, arg2) -- Line 200
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	if arg2.TickProgress.Stage == CoreUtil_upvr:RequireDefinitions().Block[arg2.Id].BehaviourData.StageCount then
		return arg1.BehaviourData.GrownLootData
	end
	return arg1.LootData
end
function Destroying(arg1) -- Line 213
	return true
end
function SpawnExtra(arg1) -- Line 218
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Door Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function UpdateModel(arg1, arg2) -- Line 12
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 51 start (CF ANALYSIS FAILED)
	local SOME = workspace.Island:FindFirstChild(arg1)
	local var38
	if not SOME then
		var38 = arg1
		warn("ERROR INITIALISING DOOR:"..tostring(var38))
		return
	end
	local pairs_result1, pairs_result2, pairs_result3 = pairs(SOME.Stages:GetChildren())
	-- KONSTANTERROR: [0] 1. Error Block 51 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [181] 126. Error Block 78 start (CF ANALYSIS FAILED)
	var38.CanQuery = false
	if tonumber(var38.Name) == arg2 then
	else
	end
	var38.ProximityPrompt.Enabled = false
	-- KONSTANTERROR: [181] 126. Error Block 78 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 22. Error Block 85 start (CF ANALYSIS FAILED)
	if arg2 == 1 then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [199.13]
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
				-- KONSTANTWARNING: GOTO [158] #110
			end
		end
	else
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if false == arg2 then
		-- KONSTANTWARNING: GOTO [169] #118
	end
	-- KONSTANTERROR: [29] 22. Error Block 85 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 64
	return true
end
function Initialise(arg1) -- Line 68
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService_upvr = Knit_upvr.GetService("BlockService")
		local SOME_2 = workspace.Island:FindFirstChild(arg1.Index)
		if not SOME_2 then
			warn("ERROR INITIALISING DOOR:"..tostring(arg1.Index))
			return
		end
		SOME_2.Stages[1].ProximityPrompt.Triggered:Connect(function(arg1_2) -- Line 79
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 1 then
				BlockService_upvr:UpdateTickProgress(arg1, {
					Stage = 2;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		SOME_2.Stages[2].ProximityPrompt.Triggered:Connect(function(arg1_3) -- Line 85
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 2 then
				BlockService_upvr:UpdateTickProgress(arg1, {
					Stage = 1;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		if not arg1.TickProgress then
			BlockService_upvr:UpdateTickProgress(arg1, {
				Stage = 2;
			})
		end
		UpdateModel(arg1.Index, arg1.TickProgress.Stage)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 100
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	local var49
	if RunService_upvr:IsServer() then
		var49 = Knit_upvr.GetService("BlockService").Blocks
	else
		var49 = Knit_upvr.GetController("BlockController").Blocks
	end
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(var49, {
		X = arg2.X;
		Y = arg2.Y - 1;
		Z = arg2.Z;
	}) then
		return true
	end
end
function AdjacentChange(arg1, arg2, arg3) -- Line 119
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg1 == "Destroying" and arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y - 1 and arg3.Position.Z == arg2.Position.Z then
		local var51 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
		local BlockService = Knit_upvr.GetService("BlockService")
		local InventoryService = Knit_upvr.GetService("InventoryService")
		if BlockService.IslandOwner then
			InventoryService:CollectLoot(BlockService.IslandOwner, InventoryService:GenerateLootTable(var51.LootData, var51):GenerateLoot())
		end
		BlockService:DestroyBlock(arg2.Position)
	end
end
function GetLootData(arg1, arg2) -- Line 141
	return nil
end
function Destroying(arg1) -- Line 145
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function SpawnExtra(arg1) -- Line 150
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Underling Anchor Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function ToggleAnchor(arg1, arg2) -- Line 12
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	local MobService = require(ReplicatedStorage_upvr.Packages.Knit).GetService("MobService")
	if arg1 then
		return MobService:AnchorPlaced(arg2)
	end
	return MobService:DestroyAnchor(arg2)
end
function Activate(arg1) -- Line 26
	return true
end
local Promise_upvr = require(ReplicatedStorage_upvr.Packages.Promise)
function Initialise(arg1) -- Line 30
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Promise_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	workspace.Island[arg1.Index].HB.ProximityPrompt.Enabled = true
	return Promise_upvr.new(function() -- Line 36
		--[[ Upvalues[1]:
			[1]: arg1 (readonly)
		]]
	end)
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function Validate(arg1, arg2, arg3, arg4) -- Line 44
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetDefinitionFromId_result1 = CoreUtil:GetDefinitionFromId(arg1)
	if RunService_upvr:IsClient() then
		if any_GetDefinitionFromId_result1.LevelReq and not CoreUtil:IsMasterySucceeded(Knit_upvr.GetController("PlayerController").Masteries, any_GetDefinitionFromId_result1.LevelReq) then
			Knit_upvr.GetController("UIController"):WarningMessage("Your level is too low to place down this underling")
			return
		end
		return true
	end
	local BlockService = Knit_upvr.GetService("BlockService")
	local PlayerService = Knit_upvr.GetService("PlayerService")
	local any_GetData_result1 = CoreUtil:GetData(BlockService.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 then return end
	if any_GetDefinitionFromId_result1.LevelReq and not CoreUtil:IsMasterySucceeded(any_GetData_result1.Masteries, any_GetDefinitionFromId_result1.LevelReq) then
		PlayerService.Client.Warn:Fire(BlockService.IslandOwner, "Your level is too low to place down this underling")
		return
	end
	if any_GetData_result1.AnchorSlots <= Knit_upvr.GetService("MobService").AnchorSlotsPlaced then
		PlayerService.Client.Warn:Fire(BlockService.IslandOwner, "You have the max underlings on your island for your mastery level")
		return false
	end
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 85
	return true
end
function GetLootData(arg1) -- Line 89
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 94
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return ToggleAnchor(false, arg1)
end
function SpawnExtra(arg1) -- Line 99
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Chest Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
function Activate(arg1) -- Line 12
	return true
end
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 16
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local InventoryService = Knit_upvr.GetService("InventoryService")
	local any_GetData_result1 = CoreUtil_upvr:GetData(Knit_upvr.GetService("BlockService").IslandOwner, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1 then return end
	local tostring_result1 = tostring(arg1.Position.X..'/'..arg1.Position.Y..'/'..arg1.Position.Z)
	if not any_GetData_result1.Storages[tostring_result1] then
		any_GetData_result1.Storages[tostring_result1] = {
			BehaviourId = "Chest";
			StorageCap = CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.ChestSize;
			Storage = {};
		}
	end
	InventoryService:ToggleChestIndestructibilitys()
	workspace.Island[arg1.Index].HB.ProximityPrompt.Enabled = true
	InventoryService.Client.StorageAdded:FireAll(tostring_result1)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 47
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 51
	return true
end
function GetLootData(arg1, arg2) -- Line 55
	return arg1.LootData
end
function Destroying(arg1) -- Line 59
	return true
end
function SpawnExtra(arg1) -- Line 63
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Grass Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function ToDirt(arg1) -- Line 10
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: TableUtil_upvr (readonly)
	]]
	local BlockService = Knit_upvr.GetService("BlockService")
	local any_Copy_result1 = TableUtil_upvr.Copy(arg1.Position)
	if not BlockService.IslandInitialised then
	else
		BlockService:DestroyBlock(any_Copy_result1)
		BlockService:PlaceBlock(nil, "Dirt", any_Copy_result1)
	end
end
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function Activate(arg1) -- Line 23
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService_2 = Knit_upvr.GetService("BlockService")
		local Position = arg1.Position
		BlockService_2:DestroyBlock(Position)
		BlockService_2:PlaceBlock(nil, CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.Morph, Position)
	end
end
function Initialise(arg1) -- Line 38
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(Knit_upvr.GetService("BlockService").Blocks, {
		X = arg1.Position.X;
		Y = arg1.Position.Y + 1;
		Z = arg1.Position.Z;
	}) then
		ToDirt(arg1)
	end
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 54
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 58
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		if arg2.Id == "Grass" and arg3.Id ~= "Grass" and arg3.Id ~= "Tilled Dirt" and arg3.Id ~= "Dirt" then return end
		if arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y + 1 and arg3.Position.Z == arg2.Position.Z and arg1 == "Placing" then
			ToDirt(arg2)
		end
	end
end
function GetLootData(arg1, arg2) -- Line 69
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 74
	return true
end
function SpawnExtra(arg1) -- Line 78
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Trap Door Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function UpdateModel(arg1, arg2) -- Line 12
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 51 start (CF ANALYSIS FAILED)
	local SOME = workspace.Island:FindFirstChild(arg1)
	local var38
	if not SOME then
		var38 = arg1
		warn("ERROR INITIALISING TRAP DOOR:"..tostring(var38))
		return
	end
	local pairs_result1, pairs_result2, pairs_result3 = pairs(SOME.Stages:GetChildren())
	-- KONSTANTERROR: [0] 1. Error Block 51 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [172] 120. Error Block 78 start (CF ANALYSIS FAILED)
	var38.CanQuery = false
	if tonumber(var38.Name) == arg2 then
	else
	end
	var38.ProximityPrompt.Enabled = false
	-- KONSTANTERROR: [172] 120. Error Block 78 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [29] 22. Error Block 85 start (CF ANALYSIS FAILED)
	if arg2 == 1 then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [190.13]
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
				-- KONSTANTWARNING: GOTO [149] #104
			end
		end
	else
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if var38.ProximityPrompt == 1 then
			for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				if nil then
				end
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
			end
		else
			-- KONSTANTERROR: Expression was reused, decompilation is incorrect
			if var38.ProximityPrompt == 2 then
				for _, _ in var38.ProximityPrompt, false, tonumber(var38.Name) do
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					if nil then
					end
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect (x3)
				end
			end
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if false == arg2 then
		-- KONSTANTWARNING: GOTO [160] #112
	end
	-- KONSTANTERROR: [29] 22. Error Block 85 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 61
	return true
end
function Initialise(arg1) -- Line 65
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService_2_upvr = Knit_upvr.GetService("BlockService")
		local SOME_2 = workspace.Island:FindFirstChild(arg1.Index)
		if not SOME_2 then
			warn("ERROR INITIALISING TRAP DOOR:"..tostring(arg1.Index))
			return
		end
		SOME_2.Stages[1].ProximityPrompt.Triggered:Connect(function(arg1_2) -- Line 76
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_2_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 1 then
				BlockService_2_upvr:UpdateTickProgress(arg1, {
					Stage = 2;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		SOME_2.Stages[2].ProximityPrompt.Triggered:Connect(function(arg1_3) -- Line 82
			--[[ Upvalues[2]:
				[1]: arg1 (readonly)
				[2]: BlockService_2_upvr (readonly)
			]]
			if arg1.TickProgress.Stage == 2 then
				BlockService_2_upvr:UpdateTickProgress(arg1, {
					Stage = 1;
				})
				UpdateModel(arg1.Index, arg1.TickProgress.Stage)
			end
		end)
		if not arg1.TickProgress then
			BlockService_2_upvr:UpdateTickProgress(arg1, {
				Stage = 2;
			})
		end
		UpdateModel(arg1.Index, arg1.TickProgress.Stage)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 97
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 101
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg1 == "Destroying" and arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y - 1 and arg3.Position.Z == arg2.Position.Z then
		local var49 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
		local BlockService = Knit_upvr.GetService("BlockService")
		local InventoryService = Knit_upvr.GetService("InventoryService")
		if BlockService.IslandOwner then
			InventoryService:CollectLoot(BlockService.IslandOwner, InventoryService:GenerateLootTable(var49.LootData, var49):GenerateLoot())
		end
		BlockService:DestroyBlock(arg2.Position)
	end
end
function GetLootData(arg1, arg2) -- Line 123
	return nil
end
function Destroying(arg1) -- Line 127
	return true
end
function SpawnExtra(arg1) -- Line 131
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Slime Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function BouncePlayer() -- Line 12
end
function Activate(arg1) -- Line 17
	return true
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function Initialise(arg1) -- Line 21
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if not RunService_upvr:IsClient() then return end
	local var5_upvw = true
	local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetController_result1_upvr = Knit_upvr.GetController("PlayerController")
	workspace.Island:WaitForChild(arg1.Index).Touched:Connect(function(arg1_2) -- Line 30
		--[[ Upvalues[3]:
			[1]: var5_upvw (read and write)
			[2]: CoreUtil_upvr (readonly)
			[3]: any_GetController_result1_upvr (readonly)
		]]
		if var5_upvw and arg1_2.Parent == game.Players.LocalPlayer.Character then
			local var9
			if var9 then
				var9 = false
				var5_upvw = var9
				local function INLINED_2() -- Internal function, doesn't exist in bytecode
					var9 = arg1_2.Parent.Humanoid.JumpPower
					return var9
				end
				if not any_GetController_result1_upvr.Effects["Jump Power"] or not INLINED_2() then
					var9 = 50
				end
				arg1_2.Parent.Humanoid.JumpPower = var9 * 2
				arg1_2.Parent.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
				task.wait()
				arg1_2.Parent.Humanoid.JumpPower = var9
				var5_upvw = true
			end
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 47
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 53
	return true
end
function GetLootData(arg1) -- Line 57
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 62
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function SpawnExtra(arg1) -- Line 67
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Workbench Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
function Activate(arg1) -- Line 12
	return true
end
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Initialise(arg1) -- Line 16
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if not RunService_upvr:IsClient() then
		Knit_upvr.GetService("BlockService").CraftingTables[arg1.Index] = arg1
	else
		local SOME = workspace.Island:FindFirstChild(arg1.Index)
		if not SOME then
			warn("ERROR INITIALISING DOOR:"..tostring(arg1.Index))
			return
		end
		local ProximityPrompt = Instance.new("ProximityPrompt")
		ProximityPrompt.Parent = SOME.HB
		ProximityPrompt.Enabled = true
		ProximityPrompt.ObjectText = tostring(arg1.Id)
		ProximityPrompt.ActionText = "Open Crafting"
		ProximityPrompt.RequiresLineOfSight = false
		ProximityPrompt.MaxActivationDistance = 8
		ProximityPrompt.KeyboardKeyCode = Enum.KeyCode.F
		if arg1.Id == "Forge" then
			ProximityPrompt.ActionText = "Open Forge"
		elseif arg1.Id == "Cauldron" then
			ProximityPrompt.ActionText = "Brew Potions"
		end
		local any_GetController_result1_upvr = Knit_upvr.GetController("UIController")
		ProximityPrompt.Triggered:Connect(function(arg1_2) -- Line 46
			--[[ Upvalues[2]:
				[1]: any_GetController_result1_upvr (readonly)
				[2]: arg1 (readonly)
			]]
			any_GetController_result1_upvr:ToggleUI("Crafting", true, arg1.Id)
		end)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 52
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 56
	return true
end
function GetLootData(arg1, arg2) -- Line 60
	return nil
end
function Destroying(arg1) -- Line 64
	return true
end
function SpawnExtra(arg1) -- Line 68
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Checkpoint Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Activate(arg1) -- Line 12
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 18
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then return end
	SOME.Touched:Connect(function(arg1_2) -- Line 25
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: Knit_upvr (copied, readonly)
			[3]: arg1 (readonly)
		]]
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
			local BlockService = Knit_upvr.GetService("BlockService")
			local PlayerService_2 = Knit_upvr.GetService("PlayerService")
			if CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.BlockType == "Finish Line" then
				local _1 = BlockService.SpawnBlocks[1]
				if _1 then
					_1 = BlockService.SpawnBlocks[1].Position
				end
				PlayerService_2.RespawnBlocks[any_GetPlayerFromCharacter_result1] = _1
				return
			end
			PlayerService_2.RespawnBlocks[any_GetPlayerFromCharacter_result1] = arg1.Position
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 48
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 52
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 60
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 65
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 82
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Fence Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local tbl_upvr = {"HorizFront", "HorizBack", "HorizLeft", "HorizRight"}
function NormaliseVector(arg1) -- Line 18
	return Vector3.new(math.round(arg1.X), math.round(arg1.Y), math.round(arg1.Z))
end
function SetFenceVisibilities(arg1, arg2) -- Line 22
	--[[ Upvalues[1]:
		[1]: tbl_upvr (readonly)
	]]
	if arg2 == 0 then
	end
	local tostring_result1 = tostring(0)
	for _ = 1, 4 - #tostring_result1 do
		tostring_result1 = '0'..tostring_result1
		local var24
	end
	local any_split_result1 = var24:split("")
	local var29
	for i_2, v in pairs(any_split_result1) do
		if v ~= '1' then
			var29 = false
		else
			var29 = true
		end
		any_split_result1[i_2] = var29
	end
	for i_3, v_2 in pairs(any_split_result1) do
		var29 = tbl_upvr[i_3]
		for _, v_3 in pairs(arg1:GetDescendants()) do
			local Name = v_3.Name
			if Name == var29 then
				if v_2 == true then
					Name = 0
				else
					Name = 1
				end
				v_3.Transparency = Name
				Name = pairs(v_3:GetChildren())
				for _, v_4 in pairs(v_3:GetChildren()) do
					local children = v_4:IsA("Texture")
					if children then
						if v_2 == true then
							children = 0
						else
							children = 1
						end
						v_4.Transparency = children
					end
				end
			end
		end
	end
end
function StairChange(arg1, arg2, arg3, arg4) -- Line 56
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local BlockService_upvr = Knit_upvr.GetService("BlockService")
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if arg4 then
		SetFenceVisibilities(SOME, arg4)
	else
		local tbl = {'0', '0', '0', '0'}
		local PrimaryPart = SOME.PrimaryPart
		if not PrimaryPart then return end
		local NormaliseVector_result1_2 = NormaliseVector(PrimaryPart.CFrame.LookVector)
		local NormaliseVector_result1 = NormaliseVector(PrimaryPart.CFrame.RightVector)
		local var55
		for _, v_5 in pairs(CoreUtil:GetAdjacentPositions(arg1.Position)) do
			local function INLINED() -- Internal function, doesn't exist in bytecode
				local any_GetValueAtPosition_result1 = CoreUtil:GetValueAtPosition(BlockService_upvr.Blocks, v_5)
				return any_GetValueAtPosition_result1
			end
			local function INLINED_2() -- Internal function, doesn't exist in bytecode
				var55 = any_GetValueAtPosition_result1.Id
				return var55 == arg1.Id
			end
			if arg2 ~= "Destroying" or not arg3 or arg3.Position ~= v_5 or INLINED() and INLINED_2() then
				var55 = workspace.Island:FindFirstChild(any_GetValueAtPosition_result1.Index)
				if not var55 then return end
				if var55:IsA("Model") then
					var55 = var55.PrimaryPart
				end
				if not var55 then
					warn("Issye")
					return
				end
				local Unit = (CoreUtil:TableToVector3(CoreUtil:ToWorldPos(arg1.Position)) - CoreUtil:TableToVector3(CoreUtil:ToWorldPos(any_GetValueAtPosition_result1.Position))).Unit
				local vector3 = Vector3.new(math.floor(Unit.X + 0.5), math.floor(Unit.Y + 0.5), math.floor(Unit.Z + 0.5))
				if vector3 == -NormaliseVector_result1_2 then
					tbl[1] = '1'
				elseif vector3 == NormaliseVector_result1_2 then
					tbl[2] = '1'
				elseif vector3 == -NormaliseVector_result1 then
					tbl[3] = '1'
				elseif vector3 == NormaliseVector_result1 then
					tbl[4] = '1'
				end
			end
		end
		local tonumber_result1_upvr = tonumber(table.concat(tbl, ""))
		SetFenceVisibilities(SOME, tonumber_result1_upvr)
		coroutine.wrap(function() -- Line 110
			--[[ Upvalues[3]:
				[1]: BlockService_upvr (readonly)
				[2]: arg1 (readonly)
				[3]: tonumber_result1_upvr (readonly)
			]]
			BlockService_upvr:UpdateTickProgress(arg1, {
				Stage = tonumber_result1_upvr;
			})
		end)()
	end
end
function Activate(arg1) -- Line 117
	return true
end
function Initialise(arg1) -- Line 121
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	local var62
	if var62 then return end
	local function INLINED_3() -- Internal function, doesn't exist in bytecode
		var62 = arg1.TickProgress.Stage
		return var62
	end
	if not arg1.TickProgress or not INLINED_3() then
		var62 = nil
	end
	if not arg1.TickProgress then
		Knit_upvr.GetService("BlockService"):UpdateTickProgress(arg1, {
			Stage = 0;
		})
	end
	return StairChange(arg1, true, nil, var62)
end
function Validate(arg1, arg2, arg3, arg4) -- Line 136
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 140
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return StairChange(arg2, arg1, arg3)
end
function GetLootData(arg1) -- Line 145
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 150
	return true
end
function SpawnExtra(arg1) -- Line 154
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Disappear Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function Activate(arg1) -- Line 13
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local TweenService_upvr = game:GetService("TweenService")
function Initialise(arg1) -- Line 19
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: TweenService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_upvr = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_upvr then return end
	SOME_upvr.Touched:Connect(function(arg1_2) -- Line 26
		--[[ Upvalues[3]:
			[1]: SOME_upvr (readonly)
			[2]: CoreUtil_upvr (copied, readonly)
			[3]: TweenService_upvr (copied, readonly)
		]]
		if SOME_upvr.Transparency ~= 0 then
		else
			local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
			if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
				TweenService_upvr:Create(SOME_upvr, TweenInfo.new(3), {
					Transparency = 1;
				}):Play()
				for _, v_2 in pairs(SOME_upvr:GetDescendants()) do
					if v_2:IsA("Texture") then
						TweenService_upvr:Create(v_2, TweenInfo.new(3), {
							Transparency = 1;
						}):Play()
					end
				end
				task.wait(3)
				if not SOME_upvr.Parent then return end
				SOME_upvr.CanCollide = false
				task.delay(5, function() -- Line 46
					--[[ Upvalues[2]:
						[1]: SOME_upvr (copied, readonly)
						[2]: TweenService_upvr (copied, readonly)
					]]
					if not SOME_upvr.Parent then
					else
						SOME_upvr.CanCollide = true
						TweenService_upvr:Create(SOME_upvr, TweenInfo.new(3), {
							Transparency = 0;
						}):Play()
						for _, v_3 in pairs(SOME_upvr:GetDescendants()) do
							if v_3:IsA("Texture") then
								TweenService_upvr:Create(v_3, TweenInfo.new(3), {
									Transparency = 0;
								}):Play()
							end
						end
					end
				end)
			end
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 68
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 72
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 80
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Destroying(arg1) -- Line 85
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 102
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Damage Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
function Activate(arg1) -- Line 13
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 19
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then return end
	SOME["Kill Block"].Touched:Connect(function(arg1_2) -- Line 26
		--[[ Upvalues[1]:
			[1]: CoreUtil_upvr (copied, readonly)
		]]
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
			any_GetPlayerFromCharacter_result1.Character.Humanoid.Health = 0
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 42
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 46
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 54
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function Destroying(arg1) -- Line 59
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 76
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: SpikeTrap Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local TweenService_upvr = game:GetService("TweenService")
function Activate(arg1) -- Line 13
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: TweenService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_2 = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_2 then return end
	local floored = math.floor(workspace.DistributedGameTime)
	if floored % 10 == 5 then
		TweenService_upvr:Create(SOME_2.pyramid, TweenInfo.new(0.5), {
			Position = SOME_2.cuboid.Position + Vector3.new(0, 2, 0);
		}):Play()
		SOME_2.cuboid.CanTouch = true
	elseif floored % 10 == 0 then
		TweenService_upvr:Create(SOME_2.pyramid, TweenInfo.new(0.5), {
			Position = SOME_2.cuboid.Position;
		}):Play()
		SOME_2.cuboid.CanTouch = false
	end
	return true
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 35
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	Knit_upvr.GetService("BlockService"):ToggleTickObject(true, arg1)
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then return end
	local function _(arg1_2) -- Line 45
		--[[ Upvalues[1]:
			[1]: CoreUtil_upvr (copied, readonly)
		]]
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		if any_GetPlayerFromCharacter_result1 and CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
			any_GetPlayerFromCharacter_result1.Character.Humanoid.Health = 0
		end
	end
	SOME.cuboid.CanTouch = false
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 58
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 62
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 70
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 75
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local PlayerService = Knit_upvr.GetService("PlayerService")
	for i, v in pairs(PlayerService.RespawnBlocks) do
		if v.X == arg1.Position.X and v.Y == arg1.Position.Y and v.Z == arg1.Position.Z then
			PlayerService.RespawnBlocks[i] = nil
		end
	end
	return true
end
function SpawnExtra(arg1) -- Line 92
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: RandomColor Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local tbl_upvr = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 127, 0), Color3.fromRGB(255, 255, 0), Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 0, 255), Color3.fromRGB(75, 0, 130), Color3.fromRGB(148, 0, 211)}
local TweenService_upvr = game:GetService("TweenService")
local function tweenToColor_upvr(arg1, arg2, arg3) -- Line 23, Named "tweenToColor"
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	local tbl = {}
	tbl.Color = arg2
	local any_Create_result1 = TweenService_upvr:Create(arg1, TweenInfo.new(arg3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false), tbl)
	any_Create_result1:Play()
	return any_Create_result1
end
local function _(arg1) -- Line 31, Named "updatePointLightColor"
	local class_PointLight_2 = arg1:FindFirstChildOfClass("PointLight")
	if class_PointLight_2 then
		class_PointLight_2.Color = arg1.Color
	end
end
function Activate(arg1) -- Line 39
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 45
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: tweenToColor_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_2_upvr = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_2_upvr then return end
	for _, v in pairs(CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.GlowingPartName) do
		local SOME = SOME_2_upvr:FindFirstChild(v)
		if SOME then
			table.insert({}, SOME)
		end
	end
	local tbl_upvr_2 = {}
	coroutine.wrap(function() -- Line 59
		--[[ Upvalues[4]:
			[1]: SOME_2_upvr (readonly)
			[2]: tbl_upvr_2 (readonly)
			[3]: tbl_upvr (copied, readonly)
			[4]: tweenToColor_upvr (copied, readonly)
		]]
		while SOME_2_upvr and SOME_2_upvr.Parent do
			for _, v_2_upvr in ipairs(tbl_upvr_2) do
				tweenToColor_upvr(v_2_upvr, tbl_upvr[math.random(1, #tbl_upvr)], 1)
				coroutine.wrap(function() -- Line 67
					--[[ Upvalues[1]:
						[1]: v_2_upvr (readonly)
					]]
					wait(0.5)
					local var24 = v_2_upvr
					local class_PointLight = var24:FindFirstChildOfClass("PointLight")
					if class_PointLight then
						class_PointLight.Color = var24.Color
					end
				end)()
			end
			wait(1)
		end
	end)()
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 80
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 84
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 92
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 97
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function SpawnExtra(arg1) -- Line 105
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Spawn Block Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Activate(arg1) -- Line 12
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
function Initialise(arg1) -- Line 18
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	if not workspace.Island:FindFirstChild(arg1.Index) then return end
	local BlockService_upvr = Knit_upvr.GetService("BlockService")
	local PlayerService_upvr = Knit_upvr.GetService("PlayerService")
	table.insert(BlockService_upvr.SpawnBlocks, arg1)
	for _, v in pairs(game.Players:GetPlayers()) do
		local function INLINED() -- Internal function, doesn't exist in bytecode
			local any_GetValueAtPosition_result1_2 = CoreUtil_upvr:GetValueAtPosition(BlockService_upvr.Blocks, PlayerService_upvr.RespawnBlocks[v])
			return any_GetValueAtPosition_result1_2
		end
		if not PlayerService_upvr.RespawnBlocks[v] or not INLINED() or any_GetValueAtPosition_result1_2.Id ~= "Checkpoint Block" then
			PlayerService_upvr.RespawnBlocks[v] = arg1.Position
		end
	end
	local var14_upvw
	var14_upvw = game.Players.PlayerAdded:Connect(function(arg1_2) -- Line 42
		--[[ Upvalues[5]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: BlockService_upvr (readonly)
			[3]: arg1 (readonly)
			[4]: var14_upvw (read and write)
			[5]: PlayerService_upvr (readonly)
		]]
		local any_GetValueAtPosition_result1 = CoreUtil_upvr:GetValueAtPosition(BlockService_upvr.Blocks, arg1.Position)
		if not any_GetValueAtPosition_result1 or any_GetValueAtPosition_result1.Id ~= arg1.Id then
			var14_upvw:Disconnect()
		else
			PlayerService_upvr.RespawnBlocks[arg1_2] = arg1.Position
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 55
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if (CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(arg2)) - workspace.PortalEntities.Portals:FindFirstChildWhichIsA("Model").PrimaryPart.Position).magnitude < 25 then
		return false
	end
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 66
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 74
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 79
	--[[ Upvalues[2]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 21 start (CF ANALYSIS FAILED)
	if RunService_upvr:IsClient() then return end
	local pairs_result1, pairs_result2_2, pairs_result3 = pairs(Knit_upvr.GetService("BlockService").SpawnBlocks)
	-- KONSTANTERROR: [0] 1. Error Block 21 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [59] 38. Error Block 8 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [59] 38. Error Block 8 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [22] 18. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [59.8]
	-- KONSTANTERROR: [22] 18. Error Block 4 end (CF ANALYSIS FAILED)
end
function SpawnExtra(arg1) -- Line 104
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: SpiderWeb Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local function partIntersectsPoint_upvr(arg1, arg2, arg3) -- Line 10, Named "partIntersectsPoint"
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
	local any_pointToObjectSpace_result1_2 = arg1.CFrame:pointToObjectSpace(arg2)
	local vector3_2 = Vector3.new(math.abs(any_pointToObjectSpace_result1_2.X), math.abs(any_pointToObjectSpace_result1_2.Y), math.abs(any_pointToObjectSpace_result1_2.Z))
	local Size = arg1.Size
	local var12 = Size / 2
	local var13
	if vector3_2.X > var13 then
		Size = false
	else
		Size = true
	end
	var13 = vector3_2.Y
	if var13 > var12.Y then
		-- KONSTANTWARNING: GOTO [48] #33
	end
	-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 32. Error Block 28 start (CF ANALYSIS FAILED)
	if vector3_2.Z > var12.Z then
		var13 = false
	else
		var13 = true
	end
	if Size then
		if true then
		end
	end
	do
		return var13
	end
	-- KONSTANTERROR: [47] 32. Error Block 28 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 26
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 32
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: partIntersectsPoint_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_upvr = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_upvr then return end
	local tbl_upvr = {}
	local EffectService_upvr = Knit_upvr.GetService("EffectService")
	SOME_upvr.PrimaryPart.Touched:Connect(function(arg1_2) -- Line 43
		--[[ Upvalues[5]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: tbl_upvr (readonly)
			[3]: EffectService_upvr (readonly)
			[4]: SOME_upvr (readonly)
			[5]: partIntersectsPoint_upvr (copied, readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [10] 7. Error Block 2 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [10] 7. Error Block 2 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [17] 12. Error Block 3 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [17] 12. Error Block 3 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [90] 68. Error Block 19 start (CF ANALYSIS FAILED)
		EffectService_upvr:SetEffect(any_GetPlayerFromCharacter_result1, "Slowed", {
			Tier = 2;
			Active = false;
		})
		table.remove(tbl_upvr, table.find(tbl_upvr, any_GetPlayerFromCharacter_result1))
		-- KONSTANTERROR: [90] 68. Error Block 19 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [112] 85. Error Block 18 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [112] 85. Error Block 18 end (CF ANALYSIS FAILED)
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 81
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 85
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 93
	return arg1.LootData
end
function Destroying(arg1) -- Line 97
	return true
end
function SpawnExtra(arg1) -- Line 104
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Jumpscare Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local var3_upvw
local function shakeCamera_upvr() -- Line 16, Named "shakeCamera"
	--[[ Upvalues[2]:
		[1]: var3_upvw (read and write)
		[2]: RunService_upvr (readonly)
	]]
	var3_upvw = tick() + 0.2
	local CurrentCamera_upvr = game.Workspace.CurrentCamera
	RunService_upvr:BindToRenderStep("CameraShake", Enum.RenderPriority.Camera.Value + 1, function() -- Line 22
		--[[ Upvalues[3]:
			[1]: var3_upvw (copied, read and write)
			[2]: RunService_upvr (copied, readonly)
			[3]: CurrentCamera_upvr (readonly)
		]]
		if var3_upvw < tick() then
			RunService_upvr:UnbindFromRenderStep("CameraShake")
			CurrentCamera_upvr.CFrame = CurrentCamera_upvr.CFrame
		else
			CurrentCamera_upvr.CFrame *= CFrame.new(math.random() * 1 - 0.5, math.random() * 1 - 0.5, math.random() * 1 - 0.5)
		end
	end)
end
function Activate(arg1) -- Line 40
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local var6_upvw = false
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 46
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: var6_upvw (read and write)
		[3]: CoreUtil_upvr (readonly)
		[4]: shakeCamera_upvr (readonly)
	]]
	if RunService_upvr:IsServer() then return end
	local SOME = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME then return end
	SOME.PrimaryPart.Touched:Connect(function(arg1_2) -- Line 53
		--[[ Upvalues[3]:
			[1]: var6_upvw (copied, read and write)
			[2]: CoreUtil_upvr (copied, readonly)
			[3]: shakeCamera_upvr (copied, readonly)
		]]
		local TweenService = game:GetService("TweenService")
		local Jumpscare = game.Players.LocalPlayer.PlayerGui.MainGui.Jumpscare
		local var12
		local function INLINED() -- Internal function, doesn't exist in bytecode
			var12 = Jumpscare.Other
			return var12
		end
		if math.random(1, 1000) ~= 1 or not INLINED() then
			var12 = Jumpscare.Main
		end
		local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
		if var6_upvw or not any_GetPlayerFromCharacter_result1 or any_GetPlayerFromCharacter_result1 ~= game.Players.LocalPlayer or not CoreUtil_upvr:ValidateHumanoid(any_GetPlayerFromCharacter_result1.Character) then
		else
			var6_upvw = true
			local clone = workspace.Sound.JumpScare:Clone()
			clone.Parent = workspace
			clone:Play()
			shakeCamera_upvr()
			task.wait(0.2)
			TweenService:Create(Jumpscare, TweenInfo.new(0.15), {
				BackgroundTransparency = 0;
			}):Play()
			TweenService:Create(var12, TweenInfo.new(0.15, Enum.EasingStyle.Back), {
				Size = UDim2.fromScale(416, 0.88);
			}):Play()
			task.wait(0.075)
			TweenService:Create(Jumpscare, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.In, 0, true), {
				BackgroundColor3 = Color3.fromRGB(255, 255, 255);
			}):Play()
			task.wait(0.075)
			TweenService:Create(var12, TweenInfo.new(0.15, Enum.EasingStyle.Back), {
				Size = UDim2.fromScale(416, 2);
				ImageTransparency = 1;
			}):Play()
			task.wait(1)
			TweenService:Create(clone, TweenInfo.new(2), {
				Volume = 0;
			}):Play()
			TweenService:Create(Jumpscare, TweenInfo.new(1), {
				BackgroundTransparency = 1;
			}):Play()
			var12.Size = UDim2.fromScale(0, 0)
			var12.ImageTransparency = 0
			task.wait(2)
			clone:Destroy()
			task.delay(3, function() -- Line 86
				--[[ Upvalues[1]:
					[1]: var6_upvw (copied, read and write)
				]]
				var6_upvw = false
			end)
		end
	end)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 96
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 100
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 108
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 113
	return true
end
function SpawnExtra(arg1) -- Line 119
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Bush Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function UpdateModel(arg1, arg2) -- Line 12
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	local Part = arg1.Part
	if not Part then
		warn("ERROR INITIALISING CROP:"..tostring(arg1.Id))
	else
		local PrimaryPart = Part.PrimaryPart
		if arg2 ~= CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.StageCount then
			PrimaryPart = false
		else
			PrimaryPart = true
		end
		PrimaryPart.ProximityPrompt.Enabled = PrimaryPart
		for _, v in pairs(Part.Stages:GetChildren()) do
			if tonumber(v.Name) == arg2 then
				v.Transparency = 0
				for _, v_2 in pairs(v:GetChildren()) do
					v_2.Transparency = 0
					v.Transparency = 1
				end
			else
				v.Transparency = 1
				for _, v_3 in pairs(v:GetChildren()) do
					v_3.Transparency = 1
				end
			end
		end
	end
end
function Activate(arg1) -- Line 51
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local any_RequireDefinitions_result1 = CoreUtil_upvr:RequireDefinitions()
		local BlockService = Knit_upvr.GetService("BlockService")
		BlockService:UpdateTickProgress(arg1, {
			Stage = arg1.TickProgress.Stage + 1;
		})
		UpdateModel(arg1, arg1.TickProgress.Stage)
		if arg1.TickProgress.Stage < any_RequireDefinitions_result1.Block[arg1.Id].BehaviourData.StageCount then
			return true
		end
		if arg1.TickProgress.Stage == any_RequireDefinitions_result1.Block[arg1.Id].BehaviourData.StageCount then
			BlockService.Client.UpdateBlockObject:FireAll(arg1)
		end
		BlockService:ToggleTickObject(false, arg1)
	end
end
function Initialise(arg1) -- Line 74
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService_3_upvr = Knit_upvr.GetService("BlockService")
		local any_RequireDefinitions_result1_2_upvr = CoreUtil_upvr:RequireDefinitions()
		if not arg1.TickProgress or arg1.TickProgress.Stage < any_RequireDefinitions_result1_2_upvr.Block[arg1.Id].BehaviourData.StageCount then
			BlockService_3_upvr:ToggleTickObject(true, arg1)
		end
		local InventoryService_upvr = Knit_upvr.GetService("InventoryService")
		local var35_upvr = any_RequireDefinitions_result1_2_upvr.Block[arg1.Id]
		workspace.Island:FindFirstChild(arg1.Index).PrimaryPart.ProximityPrompt.Triggered:Connect(function(arg1_2) -- Line 89
			--[[ Upvalues[6]:
				[1]: CoreUtil_upvr (copied, readonly)
				[2]: BlockService_3_upvr (readonly)
				[3]: arg1 (readonly)
				[4]: any_RequireDefinitions_result1_2_upvr (readonly)
				[5]: InventoryService_upvr (readonly)
				[6]: var35_upvr (readonly)
			]]
			if game.PlaceId ~= CoreUtil_upvr.PlaceIds.Island or arg1_2 == BlockService_3_upvr.IslandOwner then
				if arg1.TickProgress.Stage == any_RequireDefinitions_result1_2_upvr.Block[arg1.Id].BehaviourData.StageCount then
					BlockService_3_upvr:UpdateTickProgress(arg1, {
						Stage = 2;
					})
					UpdateModel(arg1, arg1.TickProgress.Stage)
					BlockService_3_upvr:ToggleTickObject(true, arg1)
					InventoryService_upvr:CollectLoot(arg1_2, InventoryService_upvr:GenerateLootTable(var35_upvr.BehaviourData.GrownLootData):GenerateLoot(arg1_2))
				end
			end
		end)
		UpdateModel(arg1, arg1.TickProgress.Stage or 1)
	end
end
function Validate(arg1, arg2, arg3, arg4) -- Line 106
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: RunService_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 13 start (CF ANALYSIS FAILED)
	if RunService_upvr:IsServer() then
	else
	end
	-- KONSTANTERROR: [0] 1. Error Block 13 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [58] 40. Error Block 8 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [58] 40. Error Block 8 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [61] 43. Error Block 9 start (CF ANALYSIS FAILED)
	do
		return true
	end
	-- KONSTANTERROR: [61] 43. Error Block 9 end (CF ANALYSIS FAILED)
end
function AdjacentChange(arg1, arg2, arg3) -- Line 129
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	elseif arg1 == "Destroying" and arg3.Position.X == arg2.Position.X and arg3.Position.Y == arg2.Position.Y - 1 and arg3.Position.Z == arg2.Position.Z then
		local var37 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
		local BlockService_2 = Knit_upvr.GetService("BlockService")
		local InventoryService = Knit_upvr.GetService("InventoryService")
		if BlockService_2.IslandOwner then
			InventoryService:CollectLoot(BlockService_2.IslandOwner, InventoryService:GenerateLootTable(var37.LootData, var37):GenerateLoot())
		end
		BlockService_2:DestroyBlock(arg2.Position)
	end
end
function GetLootData(arg1, arg2) -- Line 151
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return nil
end
function Destroying(arg1) -- Line 164
	return true
end
function SpawnExtra(arg1) -- Line 169
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Bamboo Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function Activate(arg1) -- Line 11
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
	else
		local BlockService = Knit_upvr.GetService("BlockService")
		local tbl = {
			X = arg1.Position.X;
			Y = arg1.Position.Y + 1;
			Z = arg1.Position.Z;
		}
		if not CoreUtil_upvr:GetValueAtPosition(BlockService.Blocks, tbl) then
			BlockService:PlaceBlock(nil, arg1.Id, tbl)
			return
		end
		BlockService:ToggleTickObject(true, arg1)
	end
end
function Initialise(arg1) -- Line 33
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	if BlockService_2.IsMainHub then
		return true
	end
	local any_GetValueAtPosition_result1 = CoreUtil:GetValueAtPosition(BlockService_2.Blocks, {
		X = arg1.Position.X;
		Y = arg1.Position.Y - 3;
		Z = arg1.Position.Z;
	})
	if not CoreUtil:GetValueAtPosition(BlockService_2.Blocks, {
		X = arg1.Position.X;
		Y = arg1.Position.Y + 1;
		Z = arg1.Position.Z;
	}) and (not any_GetValueAtPosition_result1 or any_GetValueAtPosition_result1.Id ~= arg1.Id) then
		BlockService_2:ToggleTickObject(true, arg1)
	else
		BlockService_2:ToggleTickObject(false, arg1)
	end
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 58
	--[[ Upvalues[3]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: RunService_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 29 start (CF ANALYSIS FAILED)
	local var16
	if RunService_upvr:IsServer() then
		var16 = Knit_upvr.GetService("BlockService").Blocks
	else
		var16 = Knit_upvr.GetController("BlockController").Blocks
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	-- KONSTANTERROR: [0] 1. Error Block 29 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [76] 53. Error Block 10 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [76] 53. Error Block 10 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [79] 56. Error Block 27 start (CF ANALYSIS FAILED)
	if arg4.Ground then
		local any_GetValueAtPosition_result1_2 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetValueAtPosition(var16, {
			X = arg2.X;
			Y = arg2.Y - 1;
			Z = arg2.Z;
		})
		for _, v in pairs(arg4.Ground) do
			if any_GetValueAtPosition_result1_2 and any_GetValueAtPosition_result1_2.Id == v then
				return true
			end
		end
		return
	end
	do
		return true
	end
	-- KONSTANTERROR: [79] 56. Error Block 27 end (CF ANALYSIS FAILED)
end
function AdjacentChange(arg1, arg2, arg3, arg4) -- Line 103
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [5] 5. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [5] 5. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 6. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 6. Error Block 3 end (CF ANALYSIS FAILED)
end
function GetLootData(arg1, arg2) -- Line 170
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 178
	return true
end
function SpawnExtra(arg1) -- Line 183
	return true
end
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Proccessor Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local tbl_2_upvr = {
	Coal = 15;
	Flame = 60;
	["Molten Core"] = 300;
	["Compressed Coal"] = 200;
	["Oak Wood"] = 12;
	["Oak Plank"] = 4;
	["Oak Stair"] = 4;
	["Oak Slab"] = 4;
	["Mahogany Wood"] = 12;
	["Mahogany Plank"] = 4;
	["Mahogany Stair"] = 4;
	["Mahogany Slab"] = 4;
	["Ash Wood"] = 12;
	["Ash Plank"] = 4;
	["Ash Stair"] = 4;
	["Ash Slab"] = 4;
	["Cherry Wood"] = 12;
	["Cherry Plank"] = 4;
	["Cherry Stair"] = 4;
	["Cherry Slab"] = 4;
	["Dark Hollow Wood"] = 12;
	["Dark Hollow Plank"] = 4;
	["Dark Hollow Stair"] = 4;
	["Dark Hollow Slab"] = 4;
	["Web Wood"] = 12;
	["Web Plank"] = 4;
	["Web Stair"] = 4;
	["Web Slab"] = 4;
}
function SetVFX(arg1, arg2) -- Line 52
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	local var17 = CoreUtil_upvr:RequireDefinitions().Block[arg2.Id]
	local var18
	if arg1 then
		var18 = "On"
	else
		var18 = "Off"
	end
	if not var17.BehaviourData.VFX then
	else
		for _, v_5 in pairs(arg2.Part.VFX:GetDescendants()) do
			for i_6, v_6 in pairs(var17.BehaviourData.VFX[var18]) do
				if v_5.Name == i_6 then
					for i_7, v_7 in pairs(v_6) do
						v_5[i_7] = v_7
					end
				end
			end
		end
	end
end
local var28_upvw = false
function BurnFuel(arg1, arg2, arg3) -- Line 74
	--[[ Upvalues[4]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: var28_upvw (read and write)
		[4]: tbl_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 48 start (CF ANALYSIS FAILED)
	if not CoreUtil_upvr:GetData(Knit_upvr.GetService("BlockService").IslandOwner, Knit_upvr.GetService("DataHandlerService")) then return end
	if var28_upvw then return end
	var28_upvw = true
	-- KONSTANTERROR: [0] 1. Error Block 48 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [293] 204. Error Block 42 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [293] 204. Error Block 42 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [32] 27. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	-- KONSTANTERROR: [32] 27. Error Block 6 end (CF ANALYSIS FAILED)
end
function StorageChanged(arg1, arg2) -- Line 163
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: tbl_2_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 56 start (CF ANALYSIS FAILED)
	if arg1.TickObject then
		print("Already Processing", arg1.TickObject)
		return
	end
	local any_GetData_result1_2 = CoreUtil_upvr:GetData(Knit_upvr.GetService("BlockService").IslandOwner, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1_2 then return end
	if not any_GetData_result1_2.Storages[arg2] then return end
	for i, v in pairs(CoreUtil_upvr.IndexFilters[arg1.Id]) do
		local pairs_result1_4, pairs_result2_6, pairs_result3_4 = pairs(any_GetData_result1_2.Storages[arg2].Storage)
		for _, v_2 in pairs_result1_4, pairs_result2_6, pairs_result3_4 do
			if v_2.Index == i then
				table.insert(({
					Ingredient = {};
					Fuel = {};
					Output = {};
				})[v.Id], v_2)
			end
		end
	end
	local pairs_result1_2, pairs_result2_5, pairs_result3_8 = pairs(CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.CraftableItems)
	-- KONSTANTERROR: [0] 1. Error Block 56 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [168] 115. Error Block 29 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [168] 115. Error Block 29 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [111] 76. Error Block 14 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [111] 76. Error Block 14 end (CF ANALYSIS FAILED)
end
function Activate(arg1) -- Line 290
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 43 start (CF ANALYSIS FAILED)
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	local InventoryService = Knit_upvr.GetService("InventoryService")
	local any_GetData_result1_4 = CoreUtil_upvr:GetData(BlockService_2.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
	local var97
	if not any_GetData_result1_4 then return end
	var97 = arg1.Position.Z
	local tostring_result1 = tostring(arg1.Position.X..'/'..arg1.Position.Y..'/'..var97)
	local var99 = any_GetData_result1_4.Storages[tostring_result1]
	local TickProgress = arg1.TickProgress
	if TickProgress then
		TickProgress = arg1.TickProgress.Stage:split('|')
	end
	if not TickProgress then return end
	local _1_2 = TickProgress[1]
	if not _1_2 or _1_2 == "" then
		var97 = false
		BlockService_2:ToggleTickObject(var97, arg1)
		var97 = arg1
		BlockService_2:UpdateTickProgress(var97, {
			Stage = "";
		})
		var97 = "Storage"
		InventoryService.Client.StorageUpdate:FireAll(var97, tostring_result1, {
			Data = any_GetData_result1_4.Storages[tostring_result1];
		})
		var97 = tostring_result1
		InventoryService.StorageUpdated:Fire(var97)
		return
	end
	var97 = _1_2
	var97 = CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.CraftableItems
	local var104 = var97[_1_2]
	var97 = 0
	for i_3, v_3 in pairs(var99.Storage) do
		if table.find(var104, v_3.Id) then
			local var108 = var99.Storage[i_3]
			var108.Stack -= 1
			var97 += 1
			if var99.Storage[i_3].Stack <= 0 then
				table.remove(var99.Storage, i_3)
			end
		end
	end
	-- KONSTANTERROR: [0] 1. Error Block 43 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [159] 112. Error Block 45 start (CF ANALYSIS FAILED)
	for _, v_4 in pairs(any_GetData_result1_4.Storages[tostring_result1].Storage) do
		if v_4.Id == _1_2 then
			v_4.Stack += 1
		end
	end
	-- KONSTANTERROR: [159] 112. Error Block 45 end (CF ANALYSIS FAILED)
end
local RunService_upvr = game:GetService("RunService")
function Initialise(arg1) -- Line 379
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local BlockService_3 = Knit_upvr.GetService("BlockService")
	local InventoryService_3_upvr = Knit_upvr.GetService("InventoryService")
	local any_GetData_result1_3 = CoreUtil_upvr:GetData(BlockService_3.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1_3 then return end
	local tostring_result1_3_upvr = tostring(arg1.Position.X..'/'..arg1.Position.Y..'/'..arg1.Position.Z)
	if not any_GetData_result1_3.Storages[tostring_result1_3_upvr] then
		any_GetData_result1_3.Storages[tostring_result1_3_upvr] = {
			BehaviourId = arg1.Id;
			StorageCap = CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.ChestSize;
			Storage = {};
		}
	end
	InventoryService_3_upvr:ToggleChestIndestructibilitys()
	workspace.Island[arg1.Index].HB.ProximityPrompt.Enabled = true
	workspace.Island[arg1.Index].HB.ProximityPrompt.ObjectText = tostring(arg1.Id)
	if arg1.Id == "Furnace" then
		workspace.Island[arg1.Index].HB.ProximityPrompt.ActionText = "Open Furnace"
	elseif arg1.Id == "Campfire" then
		workspace.Island[arg1.Index].HB.ProximityPrompt.ActionText = "Cook Food"
	end
	arg1.Fuel = 0
	InventoryService_3_upvr.StorageUpdated.Event:Connect(function(arg1_2) -- Line 416
		--[[ Upvalues[2]:
			[1]: tostring_result1_3_upvr (readonly)
			[2]: arg1 (readonly)
		]]
		if tostring_result1_3_upvr == arg1_2 then
			StorageChanged(arg1, tostring_result1_3_upvr)
		end
	end)
	task.delay(0.5, function() -- Line 422
		--[[ Upvalues[2]:
			[1]: InventoryService_3_upvr (readonly)
			[2]: tostring_result1_3_upvr (readonly)
		]]
		InventoryService_3_upvr.Client.StorageAdded:FireAll(tostring_result1_3_upvr)
	end)
	if arg1.TickProgress then
		local TickProgress_3 = arg1.TickProgress
		if TickProgress_3 then
			TickProgress_3 = arg1.TickProgress.Stage:split('|')
		end
		if not TickProgress_3 or not TickProgress_3[2] then return end
		arg1.Fuel = tonumber(TickProgress_3[3])
		BlockService_3:ToggleTickObject(true, arg1, tonumber(TickProgress_3[2]))
		BlockService_3.Client.ProcessorData:FireAll(tostring_result1_3_upvr, "Progress", tonumber(TickProgress_3[2]), tonumber(TickProgress_3[2]))
	end
	coroutine.wrap(StorageChanged)(arg1, tostring_result1_3_upvr)
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 445
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 449
	return true
end
function GetLootData(arg1, arg2) -- Line 453
	return arg1.LootData
end
function Destroying(arg1) -- Line 457
	return true
end
function SpawnExtra(arg1) -- Line 461
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Water Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local tbl = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 127, 0), Color3.fromRGB(255, 255, 0), Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 0, 255), Color3.fromRGB(75, 0, 130), Color3.fromRGB(148, 0, 211)}
function Activate(arg1) -- Line 23
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
function Initialise(arg1) -- Line 29
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local BlockService_2 = Knit_upvr.GetService("BlockService")
	if BlockService_2.IslandInitialised then
		local InventoryService = Knit_upvr.GetService("InventoryService")
		InventoryService:UpdateStack(BlockService_2.IslandOwner, CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.PlacementTool, -1)
		InventoryService:CollectItem(BlockService_2.IslandOwner, "Bucket", 1)
	end
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 48
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then
		return true
	end
	local BlockService = Knit_upvr.GetService("BlockService")
	if BlockService.IslandInitialised then
		local any_GetData_result1 = CoreUtil_upvr:GetData(BlockService.IslandOwner, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		local BehaviourData = CoreUtil_upvr:RequireDefinitions().Block[arg1].BehaviourData
		if 0 >= #CoreUtil_upvr:GetItemsInInventory(any_GetData_result1.Inventory, BehaviourData.PlacementTool) then
			BehaviourData = false
		else
			BehaviourData = true
		end
		return BehaviourData
	end
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 72
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 80
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 85
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	warn("Destroyed")
	return true
end
function SpawnExtra(arg1) -- Line 93
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Rainbow Behaviour
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local tbl_upvr = {Color3.fromRGB(255, 0, 0), Color3.fromRGB(255, 127, 0), Color3.fromRGB(255, 255, 0), Color3.fromRGB(0, 255, 0), Color3.fromRGB(0, 0, 255), Color3.fromRGB(75, 0, 130), Color3.fromRGB(148, 0, 211)}
local TweenService_upvr = game:GetService("TweenService")
local function tweenToColor_upvr(arg1, arg2, arg3) -- Line 23, Named "tweenToColor"
	--[[ Upvalues[1]:
		[1]: TweenService_upvr (readonly)
	]]
	local var12
	for _, v in pairs(arg1) do
		local tbl = {}
		tbl.Color = arg2
		var12 = TweenService_upvr:Create(v, TweenInfo.new(arg3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, 0, false), tbl)
		var12:Play()
	end
	return var12
end
function Activate(arg1) -- Line 41
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
end
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function Initialise(arg1) -- Line 47
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: tbl_upvr (readonly)
		[4]: tweenToColor_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	local SOME_upvr = workspace.Island:FindFirstChild(arg1.Index)
	if not SOME_upvr then return end
	for _, v_2 in pairs(CoreUtil_upvr:RequireDefinitions().Block[arg1.Id].BehaviourData.GlowingPartName) do
		local SOME = SOME_upvr:FindFirstChild(v_2)
		if SOME then
			table.insert({}, SOME)
		end
	end
	local var23_upvw = 1
	local tbl_2_upvr = {}
	coroutine.wrap(function() -- Line 64
		--[[ Upvalues[5]:
			[1]: SOME_upvr (readonly)
			[2]: tbl_upvr (copied, readonly)
			[3]: var23_upvw (read and write)
			[4]: tweenToColor_upvr (copied, readonly)
			[5]: tbl_2_upvr (readonly)
		]]
		while SOME_upvr and SOME_upvr.Parent do
			tweenToColor_upvr(tbl_2_upvr, tbl_upvr[var23_upvw], math.random(1, 1)).Completed:Wait()
			var23_upvw += 1
			if #tbl_upvr < var23_upvw then
				var23_upvw = 1
			end
		end
	end)()
	return true
end
function Validate(arg1, arg2, arg3, arg4) -- Line 88
	return true
end
function AdjacentChange(arg1, arg2, arg3) -- Line 92
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function GetLootData(arg1, arg2) -- Line 100
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return arg1.LootData
end
function Destroying(arg1) -- Line 105
	--[[ Upvalues[1]:
		[1]: RunService_upvr (readonly)
	]]
	if RunService_upvr:IsClient() then return end
	return true
end
function SpawnExtra(arg1) -- Line 113
	return true
end
return require(ReplicatedStorage.CommonModules.DefinitionModules.Behaviours.BehavioursDefinition).new(script.Name, Activate, Initialise, Validate, AdjacentChange, GetLootData, Destroying, SpawnExtra)

Script name: Food
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: FoodDefinition
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = arg2
	module.Healing = arg4
	module.DisplayImage = arg3
	module.EconomyInfo = arg5
	module.LevelReq = arg6
	module.Animations = arg7
	module.CraftIngredients = arg8
	module.Description = arg9
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

Script name: Carrot
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17449987379", 1, {
	SellPrice = 14;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Carrot crop. Heals 1hp.")

Script name: Corn
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17449978851", 2, {
	SellPrice = 45;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Corn crop. Heals 2hp.")

Script name: White Mushroom
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450306756", 4, {
	SellPrice = 30;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from White Mushroom crop. Heals 4hp.")

Script name: Red Potato
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450240079", 3, {
	SellPrice = 71;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Red Potato crop. Heals 3hp.")

Script name: Tomato
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450296270", 2, {
	SellPrice = 33;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Tomato crop. Heals 2hp.")

Script name: Strawberry
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450252114", 3, {
	SellPrice = 60;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Strawberry crop. Heals 3hp.")

Script name: Watermelon
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450307407", 4, {
	SellPrice = 125;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Watermelon crop. Heals 4hp.")

Script name: Wheat
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://17450307216", 1, {
	SellPrice = 4;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Wheat crop. Heals 4hp.")

Script name: Pumpkin
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://126133498441714", 4, {
	SellPrice = 130;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Pumpkin crop. Heals 4hp.")

Script name: Nightshade Berry
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://88626323569221", -10, {
	SellPrice = 25;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Careful these berries are toxic.")

Script name: Peppermint
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://125758116259630", 2, {
	SellPrice = 18;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Harvested from Peppermint crop. Heals 2hp.")

Script name: Tiger Shark
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://113539687827074", 5, {
	SellPrice = 320;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "dun dun... dun dun... ")

Script name: Crayfish
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://76525866205475", 5, {
	SellPrice = 135;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "I'm not a lobster")

Script name: King Salmon
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://89813045417712", 5, {
	SellPrice = 170;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "King of the salmon")

Script name: Carp
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://113535246476017", 5, {
	SellPrice = 135;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Here fishy fishy")

Script name: Marlin
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://106696920739228", 5, {
	SellPrice = 225;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Now that's a crazy looking fish")

Script name: Mudskipper
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://109014374030074", 5, {
	SellPrice = 65;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Frog? Fish? It's... what is this thing?")

Script name: Shrimp
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://114973171547133", 5, {
	SellPrice = 45;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "You can barbecue it, boil it, broil it, bake it, saute it. ")

Script name: Tilapia
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://111527495341822", 5, {
	SellPrice = 65;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Tasty!")

Script name: Leech
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://126138534186429", 5, {
	SellPrice = 45;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "You said they eat what?")

Script name: Fries
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://114511632899809", 12, {
	SellPrice = 257;
}, {
	Farming = {
		["Red Potato"] = 11;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Fries are the best food invention ever. Heals 12hp.")

Script name: Baked Potato
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://99430331182545", 6, {
	SellPrice = 78;
}, {
	Farming = {
		["Red Potato"] = 5;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Cooked just right. Heals 6hp.")

Script name: Popcorn
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://137031940344325", 11, {
	SellPrice = 55;
}, {
	Farming = {
		Corn = 15;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "What's poppin? Heals 11hp.")

Script name: Bread
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://96903875040252", 6, {
	SellPrice = 14;
}, {
	Farming = {
		Wheat = 15;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "fresh baked bread. Heals 6hp.")

Script name: Strawberry Pie
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://115915211555681", 40, {
	SellPrice = 345;
}, {
	Farming = {
		Strawberry = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Strawberry = 5;
	Dough = 1;
	BenchType = "Cooking Station";
}, "Homemade with love. Heals 40hp.")

Script name: Pumpkin Bread
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://86091144668158", 30, {
	SellPrice = 305;
}, {
	Farming = {
		Pumpkin = 15;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Pumpkin = 2;
	Bread = 1;
	BenchType = "Cooking Station";
}, "The greatest thing since sliced bread. Heals 30hp.")

Script name: Mashed Potatoes
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://108558135218393", 12, {
	SellPrice = 234;
}, {
	Farming = {
		["Red Potato"] = 15;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Red Potato"] = 3;
	BenchType = "Cooking Station";
}, "It's like a car ran over french fries. Heals 12hp.")

Script name: Shrimp Scampi
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://120040789464311", 12, {
	SellPrice = 247;
}, {
	Foraging = {
		Fishing = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Shrimp = 5;
	BenchType = "Cooking Station";
}, "Shrimp is the fruit of the sea. Heals 12hp.")

Script name: Spaghetti
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://73086580924274", 10, {
	SellPrice = 122;
}, {
	Farming = {
		Tomato = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Wheat = 3;
	Tomato = 3;
	BenchType = "Cooking Station";
}, "bon appetit. Heals 10hp.")

Script name: Frozen Fries
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://102277739231398", 1, {
	SellPrice = 213;
}, {
	Farming = {
		["Red Potato"] = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Red Potato"] = 3;
	BenchType = "Cooking Station";
}, "Cook before eating... brrr. Heals 1hp.")

Script name: Cornbread
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://119145694936519", 12, {
	SellPrice = 161;
}, {
	Farming = {
		Corn = 25;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Bread = 1;
	Corn = 3;
	BenchType = "Cooking Station";
}, "Some Of y'alls cornbread ain't done in the middle. Heals 12hp.")

Script name: Pumpkin Pie
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://138629938451897", 25, {
	SellPrice = 300;
}, {
	Farming = {
		Pumpkin = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Pumpkin = 2;
	Dough = 1;
	BenchType = "Cooking Station";
}, "Give thanks eat pie. Heals 25hp.")

Script name: Dough
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://93269190980008 ", 1, {
	SellPrice = 13;
}, {
	Farming = {
		Wheat = 9;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Wheat = 3;
	BenchType = "Cooking Station";
}, "Dough for bread. Bread good. Cook it. Heals 1hp.")

Script name: Mushroom Risotto
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://87110802087469", 10, {
	SellPrice = 108;
}, {
	Farming = {
		["White Mushroom"] = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["White Mushroom"] = 3;
	Wheat = 2;
	BenchType = "Cooking Station";
}, "Made with perfection. Heals 10hp.")

Script name: Watermelon Slices
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://73764252696389", 15, {
	SellPrice = 275;
}, {
	Farming = {
		Watermelon = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Watermelon = 2;
	BenchType = "Cooking Station";
}, "Watermelon is yum. Heals 15hp.")

Script name: Corn on the Cob
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://126859191186901", 6, {
	SellPrice = 50;
}, {
	Farming = {
		Corn = 10;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "I really like corn! It's corn! Heals 6hp.")

Script name: Grilled Tilapia
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://136216278233403", 10, {
	SellPrice = 72;
}, {
	Foraging = {
		Fishing = 16;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Tasty! Heals 10hp.")

Script name: Shark Steak
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://76183316647592", 50, {
	SellPrice = 352;
}, {
	Foraging = {
		Fishing = 17;
	};
}, {
	ActionCombo = {"rbxassetid://16925376176"};
}, nil, "Better the shark than you. Heals 50hp.")

Script name: Candy Cane
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Food.FoodDefinition).new(script.Name, "Food", "rbxassetid://102245931549010", 30, {
	SellPrice = 190;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Peppermint = 10;
	BenchType = "Cooking Station";
}, "Made from peppermint. Heals for 30.")

Script name: Item
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: ItemDefinition
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Item"
	module.DisplayImage = arg2
	module.CraftIngredients = arg3
	module.SearchTags = arg4
	module.EconomyInfo = arg5
	module.LevelReq = arg6
	module.Description = arg7
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

Script name: Void Shard
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450320752", nil, {"Void Shard", "Other"}, {
	SellPrice = 200;
}, nil, "Shards touched by the void. Dropped from GrimThorns.")

Script name: Black Dye
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449960401", {
	["Black Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"Black Dye", "Black Poppy Flower", "Other"}, {
	SellPrice = 2;
}, nil, "Made from flowers, used to color items")

Script name: Blue Dye
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449960198", {
	["Blue Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"Blue Dye", "Blue Poppy Flower", "Other"}, {
	SellPrice = 2;
}, nil, "Made from flowers, used to color items")

Script name: Spring
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450255030", nil, {"Spring", "Other"}, {
	SellPrice = 24;
}, {
	Combat = {
		Gizmo = 5;
	};
}, "Drops from Gizmo mobs")

Script name: Twilight Blade
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450296070", {
	["Recycled Blade"] = 1;
	["Void Shard"] = 128;
	["Rage Essence"] = 1;
	BenchType = "Forge";
}, {"Twilight Blade", "Tools", "Weapons"}, {
	SellPrice = 29000;
}, {
	Combat = {
		GrimThorn = 2;
	};
}, "Looks like we can use this for crafting a certain sword...")

Script name: Bones
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449959941", nil, {"Bones", "Other"}, {
	SellPrice = 8;
}, nil, "Drops from rattle mobs")

Script name: Skeleton Key
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450255929", nil, {"Skeleton Key", "Other"}, {
	SellPrice = 3500;
}, {
	Combat = {
		Rattles = 20;
	};
}, "???")

Script name: Stone
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450252601", nil, {"Stone", "Other"}, {
	SellPrice = 2;
}, nil, "Found from Stone Rocks in the mines")

Script name: Necrotic Essence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450227258", nil, {"Necrotic Essence", "Other"}, {
	SellPrice = 3600;
}, {
	Combat = {
		Rattles = 5;
	};
}, "A rare essence dropped by Rattles mobs")

Script name: Cog
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449980434", nil, {"Cog", "Other"}, {
	SellPrice = 12;
}, {
	Combat = {
		Gizmo = 3;
	};
}, "Drops from Gizmo mobs")

Script name: Griffin Feather
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://133998510571184", nil, {"Other"}, {
	SellPrice = 550;
}, nil, "Rare drop from trees")

Script name: Basalt
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449960655", nil, {"Basalt", "Other"}, {
	SellPrice = 2;
}, nil, "Mined from basalt rocks in the mines")

Script name: Molten Core
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450209322", nil, {"Molten Core", "Other"}, {
	SellPrice = 5000;
}, {
	Combat = {
		Flamelet = 7;
	};
}, "Rare item drop from Flamelet mobs")

Script name: Inferno Essence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450201667", nil, {"Inferno Essence", "Other"}, {
	SellPrice = 15000;
}, {
	Combat = {
		Flamelet = 10;
	};
}, "A rare essence dropped from Flamelet mobs")

Script name: Light Source
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450218143", nil, {"Light Source", "Lights"}, {
	SellPrice = 1250;
}, {
	Combat = {
		Flamelet = 5;
	};
}, "Drops from flamelets, used for crafting lights")

Script name: White Dye
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450307097", {
	["White Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"White Poppy Dye", "White Poppy Flower", "Other"}, {
	SellPrice = 2;
}, nil, "Made from flowers, used to color items")

Script name: Blue Flame
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://109163471127228", nil, {"Flame", "Other"}, {
	SellPrice = 75;
}, nil, "Drops from blue flamelets")

Script name: Copper Ingot
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449979410", nil, {"Copper", "Other"}, {
	SellPrice = 8;
}, nil, "Made from smelting copper ore")

Script name: Cobalt Ingot
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://128091890054335", nil, {"Cobalt", "Other"}, {
	SellPrice = 30;
}, nil, "Made from smelting cobalt ore")

Script name: Elastic Essence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450164025", nil, {"Elastic Essence", "Other"}, {
	SellPrice = 400;
}, {
	Combat = {
		GreenSlime = 5;
	};
}, "A rare essence drop from slime mobs")

Script name: Yellow Dye
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450305296", {
	["Yellow Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"Yellow Poppy Dye", "Yellow Poppy Flower", "Other"}, {
	SellPrice = 2;
}, nil, "Made from flowers, used to color items")

Script name: Silver
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450256075", nil, {"Silver", "Other"}, {
	SellPrice = 41;
}, nil, "Mined from silver ore in the mines")

Script name: Scrap Metal
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450256474", nil, {"Scrap Metal", "Other"}, {
	SellPrice = 6;
}, nil, "Drops from clockwork mobs")

Script name: Gold
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://114730134756837", nil, {"Gold", "Other"}, {
	SellPrice = 50;
}, nil, "Mined from gold ore blocks in the mines")

Script name: Green Dye
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450179374", {
	["Green Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"Green Dye", "Green Poppy Flower", "Other"}, {
	SellPrice = 2;
}, {
	Combat = {
		GreenSlime = 3;
	};
}, "Made from flowers, used to color items")

Script name: Pink Goo
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://123788295120234", nil, {"Pink Goo", "Other"}, {
	SellPrice = 12;
}, nil, "Drops from pink slime mobs")

Script name: Pink Slime Core
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://95227658976847", nil, {"Core", "Other"}, {
	SellPrice = 3000;
}, {
	Combat = {
		PinkSlime = 10;
	};
}, "A rare drop from pink slime mobs.")

Script name: Iron
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://138746741046999", nil, {"Iron", "Other"}, {
	SellPrice = 13;
}, nil, "Mined from iron ore blocks in the mines")

Script name: Magnet Shard
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450211381", nil, {"Magnet Shard", "Other"}, {
	SellPrice = 1000;
}, {
	Combat = {
		Muncher = 15;
	};
}, "Drops from Munchers")

Script name: Marble
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450209524", nil, {"Marble", "Other"}, {
	SellPrice = 5;
}, nil, "Mined from Marble rocks in the mines")

Script name: Twilight Essence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450295866", nil, {"Twilight Essence", "Other"}, {
	SellPrice = 25000;
}, {
	Combat = {
		GrimThorn = 8;
	};
}, "A rare essence dropped by GrimThorns.")

Script name: Skull
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450255824", nil, {"Skull", "Other"}, {
	SellPrice = 80;
}, {
	Combat = {
		Rattles = 4;
	};
}, "Drops from rattles mobs.")

Script name: Rage Essence
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450241209", nil, {"Rage Essence", "Other"}, {
	SellPrice = 3000;
}, {
	Combat = {
		Muncher = 7;
	};
}, "A rare essence dropped by Muncher mobs")

Script name: Realm Key
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450241041", nil, {"Realm Key", "Other"}, {
	SellPrice = 550000;
}, {
	Combat = {
		GrimThorn = 10;
	};
}, "This key holds magical properties that can teleport you to a new realm")

Script name: Recycled Blade
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450240780", {
	["Scrap Metal"] = 100;
	Coal = 32;
	BenchType = "Forge";
}, {"Recycled Blade", "Tools", "Weapons"}, {
	SellPrice = 650;
}, nil, "Used for crafting swords.")

Script name: Red Dye
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450240514", {
	["Red Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"Red Poppy Flower", "Other"}, {
	SellPrice = 2;
}, nil, "Made from flowers, used to color items")

Script name: Clay
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17639590424", nil, {"Clay", "Other"}, {
	SellPrice = 2;
}, nil, "Found near water in the forest")

Script name: Cloth
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449982775", nil, {"Cloth", "Other"}, {
	SellPrice = 10;
}, {
	Combat = {
		Rattles = 2;
	};
}, "Drops from rattle mobs")

Script name: Mystic Iron Fragment
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://78853342189133", nil, {"Mystic", "Iron", "Fragment", "Other"}, {
	SellPrice = 950;
}, nil, "A rare fragment dropped from mining Iron Ore")

Script name: Mystic Diamond Fragment
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://93561636237911", nil, {"Mystic", "Diamond", "Fragment", "Other"}, {
	SellPrice = 40000;
}, nil, "A rare fragment dropped from mining Diamond Ore")

Script name: Mystic Gold Fragment
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://112675260141408", nil, {"Mystic", "Gold", "Fragment", "Other"}, {
	SellPrice = 4500;
}, nil, "A rare fragment dropped from mining Gold Ore")

Script name: Diamond
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://73578712424449", nil, {"Diamond", "Other"}, {
	SellPrice = 200;
}, nil, "Mined from diamond ore rocks in the mines")

Script name: Flame
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450162829", nil, {"Flame", "Other"}, {
	SellPrice = 25;
}, nil, "Drops from flamelets")

Script name: Rainbow Dye
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://118501796641824", {
	["Rainbow Poppy Flower"] = 1;
	BenchType = "Crafting Bench";
}, {"Rainbow", "Rainbow Poppy Flower", "Other"}, {
	SellPrice = 5000;
}, nil, "Made from rainbow flowers, used to color items")

Script name: Arachnella Fang
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://87061266699654", nil, {"Arachnella", "Other"}, {
	SellPrice = 1500;
}, {
	Combat = {
		Arachnella = 5;
	};
}, "Drops from Arachnella boss")

Script name: Arachnella Heart
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://109929222042851", nil, {"Arachnella", "Other"}, {
	SellPrice = 3500;
}, {
	Combat = {
		Arachnella = 8;
	};
}, "Drops from Arachnella mob")

Script name: Barbed Arachnella Hair
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://99307004491722", nil, {"Spider", "Other"}, {
	SellPrice = 500;
}, {
	Combat = {
		Arachnella = 1;
	};
}, "Drops from Arachnella boss")

Script name: Spider Silk
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://129678860925997", nil, {"Spider", "Other"}, {
	SellPrice = 22;
}, nil, "Drops from spider mobs.")

Script name: Venom Gland
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://78820632638302", nil, {"Spider", "Other"}, {
	SellPrice = 50;
}, nil, "Dropped from venomous mobs like spiders.")

Script name: Granite
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://71692046330023", nil, {"Granite", "Other"}, {
	SellPrice = 5;
}, nil, "Found in Darkfang Mire caves")

Script name: Limestone
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://72927908839936", nil, {"Limestone", "Other"}, {
	SellPrice = 5;
}, nil, "Found in Darkfang Mire caves")

Script name: Copper
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://119941344022928", nil, {"Copper", "Other"}, {
	SellPrice = 7;
}, nil, "Mined from copper ore in the mines")

Script name: Cobalt
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449980873", nil, {"Cobalt", "Other"}, {
	SellPrice = 27;
}, nil, "Mined from cobalt ores in the mines")

Script name: Gold Ingot
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450180083", nil, {"Gold", "Other"}, {
	SellPrice = 55;
}, nil, "Made from smelting gold ore")

Script name: Rhodium Ingot
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://136507362816046", nil, {"Rhodium", "Other"}, {
	SellPrice = 210;
}, nil, "Made from smelting Rhodium")

Script name: Silver Ingot
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://102910786758638", nil, {"Silver", "Other"}, {
	SellPrice = 45;
}, nil, "Made from smelting Silver ore")

Script name: Enchantment Rune
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://90865963985734", nil, {"Enchant", "Other"}, {
	BuyPrice = 1500;
	SellPrice = 1000;
}, nil, "Used to enchant Tools")

Script name: Feather Glider
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://95995271980498", {
	["Griffin Feather"] = 10;
	["Petrified Ash Wood"] = 1;
	Rope = 1;
	BenchType = "Sawmill";
}, {"Gadget", "Other"}, {
	SellPrice = 10910;
}, {
	Forestry = {
		Overall = 14;
	};
}, "Used to glide... or fall if you forget to equip it")

Script name: Rhodium
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://116679297885892", nil, {"Rhodium", "Other"}, {
	SellPrice = 190;
}, nil, "Mined from Rhodium ores in the mines")

Script name: Green Goo
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450179250", nil, {"Green Goo", "Other"}, {
	SellPrice = 3;
}, nil, "Drops from green slime mobs")

Script name: Acorn
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://113308915191342", nil, {"Other"}, {
	SellPrice = 10;
}, nil, "Drops from trees... or squirrels?")

Script name: Iron Ingot
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://84644713131506", nil, {"Iron", "Other"}, {
	SellPrice = 15;
}, nil, "Made from smelting iron ore")

Script name: Coal
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17449982189", nil, {"Coal", "Other"}, {
	SellPrice = 4;
}, nil, "Mined from coal ores in the mines")

Script name: Pink Sapphire
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://87653047889394", nil, {"Gem", "Other"}, {
	SellPrice = 2000;
}, {
	Combat = {
		PinkSlime = 11;
	};
}, "Drops from Pink Slimes")

Script name: Ancient Slime Core
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://96486419533607", nil, {"Core", "Other"}, {
	SellPrice = 7000;
}, {
	Combat = {
		GreenSlime = 10;
	};
}, "A rare drop from Ancient slime mobs.")

Script name: Amber
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://126915298433952", nil, {"Coal", "Other"}, {
	SellPrice = 11;
}, nil, "Mined from Amber ores in the forest")

Script name: Green Slime Core
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://17450289051", nil, {"Green Slime Core", "Other"}, {
	SellPrice = 1000;
}, {
	Combat = {
		GreenSlime = 10;
	};
}, "A rare drop from green slime mobs.")

Script name: Amplifier
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://120034933470039", nil, {"Equippable"}, nil, nil, "Increases resource detection range of underling")

Script name: Haste Boots
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://86381258712574", nil, {"Equippable"}, nil, nil, "Increases Underlings Movement Speed")

Script name: Pulverizer
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://86656721344120", nil, {"Equippable"}, nil, nil, "Increases underlings damage")

Script name: Plentifier Unit
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://86278630090340", nil, {"Equippable"}, nil, nil, "Gives underling the Looting effect when collecting resources")

Script name: Quickstrike
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://105294634497643", nil, {"Equippable"}, nil, nil, "Increases speed of underling damage")

Script name: Accelerator
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://105294634497643", nil, {"Equippable"}, nil, nil, "Reduces Underling rest time after collecting a resource")

Script name: Book of Wisdom
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://123885613402646", nil, {"Equippable"}, nil, nil, "Gain XP from underling work")

Script name: Auto Seller
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Item.ItemDefinition).new(script.Name, "rbxassetid://123045469514264", nil, {"Equippable"}, nil, nil, "Underling will autosell resources gathered")

Script name: Tool
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: ToolsDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = arg2
	module.SubCatagory = arg3
	module.Knockback = arg4
	module.DisplayImage = arg5
	module.Animations = arg6
	module.DamageTable = arg7
	module.CraftIngredients = arg8
	module.SearchTags = arg9
	module.EconomyInfo = arg10
	module.LevelReq = arg11
	module.Description = arg12
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: Clockwork Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://76452593120821", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Recycled Blade"] = 1;
	Spring = 64;
	Cog = 256;
	["Magnet Shard"] = 3;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 8250;
}, {
	Combat = {
		Muncher = 25;
	};
}, "Deals 2X damage to clockwork mobs [Craft via Forge]")

Script name: Cobalt Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 13, "rbxassetid://100706669039866", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 1;
	Farmland = 1;
	Mobs = 20;
}, {
	["Cobalt Ingot"] = 256;
	["Recycled Blade"] = 1;
	BenchType = "Forge";
}, {"Weapons"}, {
	BuyPrice = 80000;
	SellPrice = 7600;
}, {
	Combat = {
		Overall = 12;
	};
}, "What did it cost?... Everything [Craft via Forge]")

Script name: Inferno Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://140162283981123", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Recycled Blade"] = 1;
	["Inferno Essence"] = 1;
	["Molten Core"] = 1;
	Flame = 256;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 27000;
}, {
	Combat = {
		Flamelet = 25;
	};
}, "Deals 2X damage to fire creatures [Craft via Forge]")

Script name: Slime Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://99358612557051", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Recycled Blade"] = 1;
	["Elastic Essence"] = 1;
	["Green Goo"] = 512;
	["Green Slime Core"] = 1;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 3500;
}, {
	Combat = {
		GreenSlime = 25;
	};
}, "Deals 2X damage to slime creatures [Craft via Forge]")

Script name: Copper Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 12, "rbxassetid://76187161445567", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 3;
	Forestry = 3;
	Mining = 1;
	Farmland = 1;
	Mobs = 8;
}, {
	["Copper Ingot"] = 128;
	["Oak Wood"] = 128;
	Coal = 32;
	["Scrap Metal"] = 12;
	BenchType = "Forge";
}, {"Weapons"}, {
	BuyPrice = 20000;
	SellPrice = 2100;
}, {
	Combat = {
		Overall = 5;
	};
}, "A solid beginner weapon [Craft via Forge]")

Script name: Twilight Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://110040347753324", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 72;
}, {
	["Twilight Blade"] = 1;
	Bones = 512;
	["Twilight Essence"] = 1;
	["Silver Ingot"] = 32;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 62500;
}, {
	Combat = {
		GrimThorn = 30;
	};
}, "Deals 2X damage to void creatures [Craft via Forge]")

Script name: Iron Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 12, "rbxassetid://122408603057977", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 0.5;
	Farmland = 0.5;
	Mobs = 16;
}, {
	["Iron Ingot"] = 192;
	["Cherry Wood"] = 256;
	Coal = 64;
	BenchType = "Forge";
}, {"Weapons"}, {
	BuyPrice = 70000;
	SellPrice = 5440;
}, {
	Combat = {
		Overall = 8;
	};
}, "Mid-game weapon [Craft via Forge]")

Script name: Gold Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://139059065292764", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 5;
	Forestry = 5;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Gold Ingot"] = 128;
	["Mystic Gold Fragment"] = 1;
	["Recycled Blade"] = 1;
	Coal = 64;
	BenchType = "Forge";
}, {"Weapons"}, {
	BuyPrice = 275000;
	SellPrice = 12300;
}, {
	Combat = {
		Overall = 16;
	};
}, "A weapon made of pure gold [Craft via Forge]")

Script name: Wood Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 8, "rbxassetid://126173713737673", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 2;
	Forestry = 2;
	Mining = 0.5;
	Farmland = 0.5;
	Mobs = 4;
}, nil, {"Weapons"}, nil, nil, "Starter sword for attacking mobs [Craft via Forge]")

Script name: Stone Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 10, "rbxassetid://86479069542864", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 2;
	Forestry = 2;
	Mining = 1;
	Farmland = 1;
	Mobs = 6;
}, {
	Stone = 16;
	Coal = 16;
}, {"Weapons"}, {
	BuyPrice = 400;
	SellPrice = 96;
}, nil, "Hey, it's better than wood [Craft via Global Craft]")

Script name: Bone Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://133335770286606", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, {
	["Necrotic Essence"] = 1;
	Skull = 8;
	Bones = 512;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 8225;
}, {
	Combat = {
		Rattles = 25;
	};
}, "Deals 2X damage to undead mobs [Craft via Forge]")

Script name: Dev Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 18, "rbxassetid://17450305764", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925197259"};
}, {
	Misc = 1000;
	Forestry = 1000;
	Mining = 1000;
	Farmland = 1000;
	Mobs = 1000;
}, nil, {"Weapons"}, nil, nil, "Dev aboose [Summoned]")

Script name: Diamond Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://82044438846088", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 48;
}, {
	Diamond = 64;
	["Silver Ingot"] = 256;
	["Mystic Diamond Fragment"] = 1;
	["Gold Sword"] = 1;
	Coal = 32;
	BenchType = "Forge";
}, {"Weapons"}, {
	BuyPrice = 2000000;
	SellPrice = 77000;
}, {
	Combat = {
		Overall = 20;
	};
}, "Weapon made from precious stones [Craft via Forge]")

Script name: Heart Dagger
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 10, "rbxassetid://125449387660454", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://120093236388442", "rbxassetid://94483152874579"};
}, {
	Misc = 5;
	Forestry = 5;
	Mining = 1;
	Farmland = 1;
	Mobs = 32;
}, nil, {"Weapons"}, {
	SellPrice = 5000;
}, {
	Combat = {
		Overall = 15;
	};
}, "Life steal. Limited Valentines Event weapon.")

Script name: Diamond Hammer
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 20, "rbxassetid://100659769447144", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://130722898864586"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 100;
}, nil, {"Weapons"}, {
	SellPrice = 200000;
}, {
	Mining = {
		["Diamond Ore"] = 15;
	};
}, "A slow but heavy damage dealer [Drops from Blue Flamelets]")

Script name: Trident
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 10, "rbxassetid://79800127249279", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://120093236388442", "rbxassetid://94483152874579"};
}, {
	Misc = 1;
	Forestry = 1;
	Mining = 1;
	Farmland = 1;
	Mobs = 80;
}, nil, {"Weapons"}, {
	SellPrice = 70000;
}, {
	Combat = {
		Overall = 22;
	};
}, "An atlantean treasure [Drops from Treasure Chest]")

Script name: Frostbite Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 10, "rbxassetid://72820122077079", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 75;
}, nil, {"Weapons"}, {
	SellPrice = 10000;
}, {
	Combat = {
		Overall = 10;
	};
}, "50% chance to drop an extra item [Christmas 2024 Limited]")

Script name: Deathstalker
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://112781377161961", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 110;
}, {
	["Bone Sword"] = 1;
	["Clockwork Sword"] = 1;
	["Inferno Sword"] = 1;
	["Slime Sword"] = 1;
	["Twilight Sword"] = 1;
	["Arachnella Heart"] = 1;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 150000;
}, {
	Combat = {
		Overall = 25;
	};
}, "A blademaster's best friend [Craft via Forge]")

Script name: Sylvan Edge
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://137474755042552", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 62;
}, {
	["Petrified Oak Wood"] = 1;
	["Petrified Mahogany Wood"] = 1;
	["Petrified Cherry Wood"] = 1;
	["Petrified Ash Wood"] = 1;
	["Petrified Dark Hollow Wood"] = 1;
	["Petrified Web Wood"] = 1;
	Amber = 16;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 43150;
}, {
	Forestry = {
		Overall = 22;
	};
}, "A deadly sword forged from petrification [Craft via Forge]")

Script name: Jellyblade
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://96497015357112", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 80;
}, {
	["Pink Sapphire"] = 1;
	["Elastic Essence"] = 1;
	["Pink Goo"] = 128;
	["Pink Slime Core"] = 1;
	BenchType = "Forge";
}, {"Weapons"}, {
	SellPrice = 6936;
}, {
	Combat = {
		PinkSlime = 20;
	};
}, "Deals 2X damage to slime creatures [Craft via Forge]")

Script name: Pixel Sword
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 15, "rbxassetid://131468334434418", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://86861921756773", "rbxassetid://89881700832616"};
}, {
	Misc = 6;
	Forestry = 6;
	Mining = 1;
	Farmland = 1;
	Mobs = 55;
}, nil, {"Weapons"}, {
	SellPrice = 55000;
}, {
	Combat = {
		Overall = 21;
	};
}, "Collection reward")

Script name: Diamond Knife
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Weapon", 10, "rbxassetid://72860778593118", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://120093236388442", "rbxassetid://94483152874579"};
}, {
	Misc = 1;
	Forestry = 1;
	Mining = 1;
	Farmland = 1;
	Mobs = 35;
}, nil, {"Weapons"}, {
	SellPrice = 70000;
}, {
	Mining = {
		["Diamond Ore"] = 20;
	};
}, "A fast and deadly weapon [Drops from Diamond Ore]")

Script name: Wood Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://106621748813413", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 1;
	Forestry = 1;
	Mining = 4;
	Farmland = 5;
	Mobs = 1;
}, nil, {"Tools"}, nil, nil, "Starter Pickaxe for mining blocks")

Script name: Cobalt Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://71536729583017", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 48;
	Farmland = 10;
	Mobs = 4;
}, {
	["Cobalt Ingot"] = 256;
	["Mahogany Wood"] = 64;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools"}, {
	BuyPrice = 100000;
	SellPrice = 8750;
}, {
	Mining = {
		Overall = 13;
	};
}, "Those copper blocks are finally easier to break.")

Script name: Stone Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://118652462507722", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 2;
	Forestry = 2;
	Mining = 11;
	Farmland = 6;
	Mobs = 2;
}, {
	Stone = 8;
	["Oak Wood"] = 8;
}, {"Tools"}, {
	BuyPrice = 250;
	SellPrice = 50;
}, {
	Mining = {
		Overall = 1;
	};
}, "Hey, it's better than wood.")

Script name: Iron Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://100382689557365", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 3;
	Forestry = 3;
	Mining = 24;
	Farmland = 8;
	Mobs = 3;
}, {
	["Iron Ingot"] = 128;
	["Cherry Wood"] = 64;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools"}, {
	BuyPrice = 50000;
	SellPrice = 2550;
}, {
	Mining = {
		Overall = 8;
	};
}, "Mid-game pickaxe")

Script name: Gingerbread Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://80636976873850", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 5;
	Forestry = 5;
	Mining = 275;
	Farmland = 12;
	Mobs = 5;
}, nil, {"Tools"}, {
	SellPrice = 10000;
}, {
	Mining = {
		Overall = 10;
	};
}, "50% chance to drop an extra item [Christmas 2024 Limited]")

Script name: Copper Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://96221035842722", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 3;
	Forestry = 3;
	Mining = 16;
	Farmland = 7;
	Mobs = 3;
}, {
	["Copper Ingot"] = 64;
	["Oak Wood"] = 64;
	BenchType = "Forge";
}, {"Tools"}, {
	BuyPrice = 9000;
	SellPrice = 900;
}, {
	Mining = {
		Overall = 5;
	};
}, "Good beginner pickaxe")

Script name: Gold Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://125819604032842", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 4;
	Forestry = 4;
	Mining = 128;
	Farmland = 10;
	Mobs = 4;
}, {
	["Gold Ingot"] = 128;
	["Mystic Gold Fragment"] = 1;
	["Ash Wood"] = 128;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools"}, {
	BuyPrice = 250000;
	SellPrice = 14250;
}, {
	Mining = {
		Overall = 16;
	};
}, "Finally a pickaxe that does some decent damage!")

Script name: Pixel Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://119837119570570", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 5;
	Forestry = 5;
	Mining = 265;
	Farmland = 12;
	Mobs = 5;
}, nil, {"Tools"}, {
	SellPrice = 55000;
}, {
	Mining = {
		Overall = 21;
	};
}, "Collection reward")

Script name: Diamond Pickaxe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://106655748325813", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 5;
	Forestry = 5;
	Mining = 256;
	Farmland = 12;
	Mobs = 5;
}, {
	Diamond = 64;
	["Silver Ingot"] = 64;
	["Mystic Diamond Fragment"] = 1;
	["Gold Pickaxe"] = 1;
	Coal = 32;
	BenchType = "Forge";
}, {"Tools"}, {
	BuyPrice = 1250000;
	SellPrice = 70000;
}, {
	Mining = {
		Overall = 24;
	};
}, "You'll be rolling in Diamonds with this thing.")

Script name: Cobalt Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://80992064520596", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 3;
	Forestry = 24;
	Mining = 3;
	Farmland = 3;
	Mobs = 3;
}, {
	["Cobalt Ingot"] = 256;
	["Mahogany Wood"] = 64;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools", "Cobalt"}, {
	BuyPrice = 100000;
	SellPrice = 8750;
}, {
	Forestry = {
		Overall = 12;
	};
}, "An absolute beast of an axe.")

Script name: Copper Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://102210721145995", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 2;
	Forestry = 12;
	Mining = 2;
	Farmland = 2;
	Mobs = 2;
}, {
	["Copper Ingot"] = 64;
	["Oak Wood"] = 64;
	BenchType = "Forge";
}, {"Tools", "Copper"}, {
	BuyPrice = 9000;
	SellPrice = 900;
}, {
	Forestry = {
		Overall = 5;
	};
}, "Good beginner axe")

Script name: Diamond Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://106664921813040", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 4;
	Forestry = 90;
	Mining = 4;
	Farmland = 4;
	Mobs = 4;
}, {
	Diamond = 32;
	["Silver Ingot"] = 64;
	["Mystic Diamond Fragment"] = 1;
	["Gold Axe"] = 1;
	Coal = 32;
	BenchType = "Forge";
}, {"Tools", "Diamond"}, {
	BuyPrice = 1000000;
	SellPrice = 63600;
}, {
	Forestry = {
		Overall = 20;
	};
}, "It's worth every diamond.")

Script name: Iron Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://135328114752995", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 2;
	Forestry = 16;
	Mining = 2;
	Farmland = 2;
	Mobs = 2;
}, {
	["Iron Ingot"] = 128;
	["Cherry Wood"] = 64;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools", "Iron"}, {
	BuyPrice = 50000;
	SellPrice = 2550;
}, {
	Forestry = {
		Overall = 8;
	};
}, "Mid-game axe")

Script name: Wood Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://112353268396065", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 1;
	Forestry = 8;
	Mining = 1;
	Farmland = 1;
	Mobs = 1;
}, nil, {"Tools", "Wood"}, nil, nil, "Starter Axe for chopping trees")

Script name: Stone Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://138761873963523", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 1;
	Forestry = 10;
	Mining = 1;
	Farmland = 1;
	Mobs = 1;
}, {
	Stone = 8;
	["Oak Wood"] = 8;
}, {"Tools", "Stone"}, {
	BuyPrice = 250;
	SellPrice = 50;
}, {
	Forestry = {
		Overall = 2;
	};
}, "Hey, it's better than wood.")

Script name: Gold Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://79833211604768", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 3;
	Forestry = 52;
	Mining = 3;
	Farmland = 3;
	Mobs = 3;
}, {
	["Gold Ingot"] = 128;
	["Mystic Gold Fragment"] = 1;
	["Ash Wood"] = 128;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools", "Gold"}, {
	BuyPrice = 250000;
	SellPrice = 14250;
}, {
	Forestry = {
		Overall = 16;
	};
}, "Chops wood real fast-like.")

Script name: Timberbane
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://124906467120978", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 4;
	Forestry = 130;
	Mining = 4;
	Farmland = 4;
	Mobs = 10;
}, {
	["Compressed Coal"] = 1;
	["Rhodium Ingot"] = 20;
	["Diamond Axe"] = 1;
	["Ancient Slime Core"] = 1;
	BenchType = "Forge";
}, {"Tools", "Axe"}, {
	SellPrice = 82275;
}, {
	Forestry = {
		Overall = 24;
	};
}, "Is it a weapon or a saw?")

Script name: Pixel Axe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://96445512468369", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 4;
	Forestry = 100;
	Mining = 4;
	Farmland = 4;
	Mobs = 4;
}, nil, {"Tools"}, {
	SellPrice = 55000;
}, {
	Forestry = {
		Overall = 21;
	};
}, "Collection reward")

Script name: Wood Hoe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Hoe", 1, "rbxassetid://138389422669856", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925396266"};
}, {
	Misc = 1;
	Forestry = 1;
	Mining = 1;
	Farmland = 10;
	Mobs = 1;
}, nil, {"Tools"}, nil, nil, "Changes grass into tilled dirt for planting seeds")

Script name: Moola's Scythe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Scythe", 1, "rbxassetid://77976879332556", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 1;
	Mobs = 1;
}, nil, {"Tools"}, {
	SellPrice = 20000;
}, {
	Farming = {
		Overall = 14;
	};
}, "Harvests and replants crops in a 3x3 area [30d check-in reward]")

Script name: Iron Scythe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Scythe", 1, "rbxassetid://130591050507377", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 1;
	Mobs = 1;
}, {
	["Iron Ingot"] = 32;
	["Mystic Iron Fragment"] = 1;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools"}, {
	BuyPrice = 10000;
	SellPrice = 1200;
}, {
	Farming = {
		Overall = 10;
	};
}, "Harvests crops in a 3x3 space")

Script name: Gold Scythe
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Scythe", 1, "rbxassetid://138106847455023", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 1;
	Mobs = 1;
}, {
	["Gold Ingot"] = 32;
	["Mystic Gold Fragment"] = 1;
	Coal = 16;
	BenchType = "Forge";
}, {"Tools"}, {
	BuyPrice = 100000;
	SellPrice = 6000;
}, {
	Farming = {
		Overall = 20;
	};
}, "Harvests crops in a 5x5 space")

Script name: Player Pickaxe
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Pickaxe", 1, "rbxassetid://17450305997", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925268786"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {"Weapon", "Tool"}, nil, nil, "Jokes on everyone")
local RunService_upvr = game:GetService("RunService")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function any_new_result1.Use(arg1) -- Line 38
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 20 start (CF ANALYSIS FAILED)
	if RunService_upvr:IsClient() then return end
	for _, v in pairs(game.Players:GetPlayers()) do
		if v ~= arg1 and CoreUtil_upvr:ValidateHumanoid(v.Character) and CoreUtil_upvr:ValidateHumanoid(arg1.Character) and (v.Character.HumanoidRootPart.Position - arg1.Character.HumanoidRootPart.Position).Magnitude <= 10 then
			table.insert({}, v.Character)
		end
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	local pairs_result1, pairs_result2, pairs_result3_2 = pairs({})
	-- KONSTANTERROR: [0] 1. Error Block 20 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [138] 87. Error Block 16 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [138] 87. Error Block 16 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [68] 45. Error Block 26 start (CF ANALYSIS FAILED)
	if table.insert({}, v.Character) then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		if {} <= v.Character then
			-- KONSTANTWARNING: GOTO [138] #87
		end
	else
	end
	-- KONSTANTERROR: [68] 45. Error Block 26 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Joke Axe
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local tbl_upvr = {"Oh, I’m sorry. Did you want me to just be a normal axe? Well, guess what? You wanted to use admin tools, so this is what you get!", "Stop giving me that look. I’m an axe, not your therapist. You wanna talk about your problems, go find a Pickaxe. They love that stuff!", "Okay, I’m gonna say it—your technique is garbage. You chop like you’re scared the tree’s gonna fight back!", "You want me to chop that tree? That massive, seconds-old tree? You're a monster!", "Here’s a thought: maybe I don’t want to be your chopping buddy anymore. Ever think of that? Maybe I want to start a podcast!", "You know what? Go ahead, keep swinging. But when I snap in half, I’m haunting you as a ghost axe. That’s a thing, right?!", "You ever think maybe the trees are our friends? No, of course not! Because you're too busy whack, whack, whack! Real nice!", "Listen, if you hit one more tree without saying 'thank you,' I'm walking out. You hear me? I'm done! I don't need this!", "Every time you miss a swing, I die a little inside. Just thought you should know.", "You know, maybe I’m the one who should be swinging you around for a change! Let’s see how you like it!", "Oh, yeah, sure! Just swing me around all day like I'm some kind of chopping slave! You think I don't have dreams?!"}
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Axe", 1, "rbxassetid://17450305997", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925360800"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {"Weapon", "Tool"}, nil, nil, "joke's on you!")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.Use(arg1) -- Line 54
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	if RunService_upvr:IsServer() then
	elseif math.random(1, 20) == 1 then
		Knit_upvr.GetController("UIController"):WarningMessage(tbl_upvr[math.random(1, #tbl_upvr)])
	end
end
return any_new_result1

Script name: Trick or Treat Bag
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1_upvr = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Loot", 0, "rbxassetid://90385263152060", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {}, {
	SellPrice = 100;
}, nil, "Halloween 2024 event bag. Open for items! Limited.")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function any_new_result1_upvr.Use(arg1) -- Line 40
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_new_result1_upvr (readonly)
	]]
	if not RunService_upvr:IsServer() then
	else
		local InventoryService = Knit_upvr.GetService("InventoryService")
		local any_GetData_result1 = CoreUtil_upvr:GetData(arg1, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		local any_GetSameItemInInventory_result1 = CoreUtil_upvr:GetSameItemInInventory(any_GetData_result1.Inventory, {
			Id = script.Name;
		})
		if not any_GetSameItemInInventory_result1 or any_GetSameItemInInventory_result1.Stack <= 0 then return end
		InventoryService:UpdateStack(arg1, any_new_result1_upvr.Id, -1)
		InventoryService:CollectLoot(arg1, InventoryService:GenerateLootTable({
			MultiItemDropWeights = {1};
			RareItemsOverride = {
				["Halloween Trophy"] = "Legendary";
				["Grave Digger Shovel"] = "Legendary";
				["Gargoyle Statue"] = "Epic";
				["Coffin Bed"] = "Epic";
				["Grave Headstone"] = "Epic";
				["Pumpkin Seed"] = "Rare";
				["Jack O Lantern"] = "Uncommon";
			};
			RandItems = {{
				Id = "Gold";
				Catagory = "Item";
				Weight = 0.3;
			}, {
				Id = "Pumpkin";
				Catagory = "Food";
				Weight = 0.2351;
			}, {
				Id = "Diamond";
				Catagory = "Item";
				Weight = 0.2;
			}, {
				Id = "Coal";
				Catagory = "Item";
				Weight = 0.1;
			}, {
				Id = "Gold Block";
				Catagory = "Block";
				Weight = 0.1;
			}, {
				Id = "Jack O Lantern";
				Catagory = "Block";
				Weight = 0.04;
			}, {
				Id = "Pumpkin Seed";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Grave Headstone";
				Catagory = "Block";
				Weight = 0.002;
			}, {
				Id = "Coffin Bed";
				Catagory = "Block";
				Weight = 0.0013;
			}, {
				Id = "Gargoyle Statue";
				Catagory = "Block";
				Weight = 0.001;
			}, {
				Id = "Grave Digger Shovel";
				Catagory = "Tool";
				Weight = 0.0004;
			}, {
				Id = "Halloween Trophy";
				Catagory = "Block";
				Weight = 0.0002;
			}};
		}, any_new_result1_upvr):GenerateLoot(arg1), true)
	end
end
return any_new_result1_upvr

Script name: Grave Digger Shovel
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Shovel", 0, "rbxassetid://98259084637506", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://85015943021956"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 1000;
	Mobs = 0;
}, nil, {"Tools"}, {
	SellPrice = 100000;
}, {
	Mining = {
		Overall = 12;
	};
}, "Limited shovel, breaks grass easily")

Script name: Treasure Chest
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1_upvr = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Loot", 0, "rbxassetid://110480379041791", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {}, {
	SellPrice = 1000;
}, nil, "A mysterious treasure chest... what could be in it?")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function any_new_result1_upvr.Use(arg1) -- Line 39
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_new_result1_upvr (readonly)
	]]
	if not RunService_upvr:IsServer() then
	else
		local InventoryService = Knit_upvr.GetService("InventoryService")
		local any_GetData_result1 = CoreUtil_upvr:GetData(arg1, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		local any_GetSameItemInInventory_result1 = CoreUtil_upvr:GetSameItemInInventory(any_GetData_result1.Inventory, {
			Id = script.Name;
		})
		if not any_GetSameItemInInventory_result1 or any_GetSameItemInInventory_result1.Stack <= 0 then return end
		InventoryService:UpdateStack(arg1, any_new_result1_upvr.Id, -1)
		InventoryService:CollectLoot(arg1, InventoryService:GenerateLootTable({
			MultiItemDropWeights = {0, 0.6, 0.4};
			RareItemsOverride = {
				Trident = "Legendary";
				["Realm Key"] = "Legendary";
				["Coin Boost Potion I"] = "Rare";
				["Damage Boost Potion I"] = "Rare";
				["Healing Potion I"] = "Rare";
				["Jump Power Potion I"] = "Rare";
				["Luck Potion I"] = "Rare";
				["XP Boost Potion I"] = "Rare";
			};
			RandItems = {{
				Id = "Ship Anchor";
				Catagory = "Block";
				Weight = 0.1;
			}, {
				Id = "Ship Wheel";
				Catagory = "Block";
				Weight = 0.1;
			}, {
				Id = "Gold Block";
				Catagory = "Block";
				ItemCount = 5;
				Weight = 0.1;
			}, {
				Id = "Realm Key";
				Catagory = "Item";
				Weight = 0.000002;
			}, {
				Id = "Gold";
				Catagory = "Item";
				ItemCount = 25;
				Weight = 0.02;
			}, {
				Id = "Silver";
				Catagory = "Item";
				ItemCount = 50;
				Weight = 0.1;
			}, {
				Id = "Diamond";
				Catagory = "Item";
				ItemCount = 25;
				Weight = 0.05;
			}, {
				Id = "Trident";
				Catagory = "Tool";
				Weight = 0.001;
			}, {
				Id = "Coin Boost Potion I";
				Catagory = "Potion";
				Weight = 0.015;
			}, {
				Id = "Damage Boost Potion I";
				Catagory = "Potion";
				Weight = 0.015;
			}, {
				Id = "Healing Potion I";
				Catagory = "Potion";
				Weight = 0.015;
			}, {
				Id = "Jump Power Potion I";
				Catagory = "Potion";
				Weight = 0.015;
			}, {
				Id = "Luck Potion I";
				Catagory = "Potion";
				Weight = 0.015;
			}, {
				Id = "XP Boost Potion I";
				Catagory = "Potion";
				Weight = 0.015;
			}};
		}, any_new_result1_upvr):GenerateLoot(arg1), true)
	end
end
return any_new_result1_upvr

Script name: Christmas Stocking
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1_upvr = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Loot", 0, "rbxassetid://125174880568669", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {}, {
	SellPrice = 300;
}, nil, "Christmas 2024 event stocking. Open for items! Limited.")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function any_new_result1_upvr.Use(arg1) -- Line 40
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: any_new_result1_upvr (readonly)
	]]
	if not RunService_upvr:IsServer() then
	else
		local InventoryService = Knit_upvr.GetService("InventoryService")
		local any_GetData_result1 = CoreUtil_upvr:GetData(arg1, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		local any_GetSameItemInInventory_result1 = CoreUtil_upvr:GetSameItemInInventory(any_GetData_result1.Inventory, {
			Id = script.Name;
		})
		if not any_GetSameItemInInventory_result1 or any_GetSameItemInInventory_result1.Stack <= 0 then return end
		InventoryService:UpdateStack(arg1, any_new_result1_upvr.Id, -1)
		InventoryService:CollectLoot(arg1, InventoryService:GenerateLootTable({
			MultiItemDropWeights = {1};
			RareItemsOverride = {
				Northstar = "Rare";
				["Snow FX Block"] = "Rare";
				["Christmas Tree"] = "Rare";
				["Nutcracker Base"] = "Rare";
				["Nutcracker Head"] = "Rare";
				["Nutcracker Hat"] = "Rare";
				["Snowman Head"] = "Rare";
				["Snowman Base"] = "Rare";
				["Snowman Hat"] = "Rare";
				Snowglobe = "Epic";
				["Frosted Christmas Tree"] = "Epic";
				["Gingerbread Pickaxe"] = "Legendary";
				["Frostbite Sword"] = "Legendary";
			};
			RandItems = {{
				Id = "Peppermint Seed";
				Catagory = "Block";
				Weight = 0.299;
			}, {
				Id = "Snow Block";
				Catagory = "Block";
				Weight = 0.15;
			}, {
				Id = "Snow Grass";
				Catagory = "Block";
				Weight = 0.15;
			}, {
				Id = "Candy Cane Decoration";
				Catagory = "Block";
				Weight = 0.05;
			}, {
				Id = "Gingerbread Block";
				Catagory = "Block";
				Weight = 0.04;
			}, {
				Id = "Glazed Gingerbread Block";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Icicle Block";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Red Ribbon";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Gift Box";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Big Gift Box";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Small Gift Box";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Ice Block";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Packed Ice Block";
				Catagory = "Block";
				Weight = 0.02;
			}, {
				Id = "Christmas Lights";
				Catagory = "Block";
				Weight = 0.03;
			}, {
				Id = "Christmas Lights Corner";
				Catagory = "Block";
				Weight = 0.03;
			}, {
				Id = "Christmas Wreath";
				Catagory = "Block";
				Weight = 0.0125;
			}, {
				Id = "Jolly Bell";
				Catagory = "Block";
				Weight = 0.0125;
			}, {
				Id = "Northstar";
				Catagory = "Block";
				Weight = 0.01;
			}, {
				Id = "Snow FX Block";
				Catagory = "Block";
				Weight = 0.01;
			}, {
				Id = "Nutcracker Base";
				Catagory = "Block";
				Weight = 0.008;
			}, {
				Id = "Nutcracker Head";
				Catagory = "Block";
				Weight = 0.008;
			}, {
				Id = "Nutcracker Hat";
				Catagory = "Block";
				Weight = 0.008;
			}, {
				Id = "Christmas Tree";
				Catagory = "Block";
				Weight = 0.006;
			}, {
				Id = "Snowman Head";
				Catagory = "Block";
				Weight = 0.004;
			}, {
				Id = "Snowman Base";
				Catagory = "Block";
				Weight = 0.004;
			}, {
				Id = "Snowman Hat";
				Catagory = "Block";
				Weight = 0.004;
			}, {
				Id = "Frosted Christmas Tree";
				Catagory = "Block";
				Weight = 0.002;
			}, {
				Id = "Snowglobe";
				Catagory = "Block";
				Weight = 0.001;
			}, {
				Id = "Frostbite Sword";
				Catagory = "Tool";
				Weight = 0.0005;
			}, {
				Id = "Gingerbread Pickaxe";
				Catagory = "Tool";
				Weight = 0.0005;
			}};
		}, any_new_result1_upvr):GenerateLoot(arg1), true)
	end
end
return any_new_result1_upvr

Script name: Bucket
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Bucket", 1, "rbxassetid://125853184575418", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://16925396266"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, {
	["Iron Ingot"] = 8;
	BenchType = "Forge";
}, {"Tools"}, {
	SellPrice = 120;
}, {
	Foraging = {
		Overall = 10;
	};
}, "Used to pick up water")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local UserInputService_upvr = game:GetService("UserInputService")
function any_new_result1.Use(arg1) -- Line 39
	--[[ Upvalues[5]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: UserInputService_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	local any_IsServer_result1_2 = RunService_upvr:IsServer()
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [66] 45. Error Block 5 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [68.7]
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [73.8]
	local workspace_Raycast_result1 = workspace:Raycast(nil.Origin, nil.Direction * 1000, nil)
	-- KONSTANTERROR: [66] 45. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [78] 53. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [78] 53. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [81] 55. Error Block 7 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [81] 55. Error Block 7 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [88] 60. Error Block 8 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [88] 60. Error Block 8 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [100] 69. Error Block 31 start (CF ANALYSIS FAILED)
	-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [100.3]
	local BlockPartSelected = nil.BlockPartSelected
	local var28
	if BlockPartSelected then
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var28 = BlockPartSelected.PrimaryPart.Position
			return var28
		end
		if not BlockPartSelected:IsA("Model") or not INLINED_2() then
			var28 = BlockPartSelected.Position
		end
		local any_ToDataPos_result1 = CoreUtil_upvr:ToDataPos(CoreUtil_upvr:Vector3ToTable(var28))
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		local any_GetValueAtPosition_result1_2 = CoreUtil_upvr:GetValueAtPosition(nil.Blocks, any_ToDataPos_result1)
		if not any_GetValueAtPosition_result1_2 then return end
		-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [133.4]
		local var31 = nil.Block[any_GetValueAtPosition_result1_2.Id]
		if var31 and var31.BehaviourData and var31.BehaviourData.Id == "Water Behaviour" then
			BlockPartSelected.Parent = ReplicatedStorage_upvr
			local _, any_await_result2 = any_IsServer_result1_2:DamageBlock(0, {any_ToDataPos_result1}, "Bucket"):andThen():await()
			if any_await_result2 ~= true and BlockPartSelected and BlockPartSelected.Parent then
				BlockPartSelected.Parent = workspace.Island
			end
		end
	end
	-- KONSTANTERROR: [100] 69. Error Block 31 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [179] 122. Error Block 24 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [179] 122. Error Block 24 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Water Bucket
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Bucket", 1, "rbxassetid://70880374419470", {
	Holding = "rbxassetid://16913220551";
	ActionCombo = {"rbxassetid://79499606539048"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, nil, {"Tools"}, {
	SellPrice = 120;
}, nil, "Used to place water blocks")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local UserInputService_upvr = game:GetService("UserInputService")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function any_new_result1.Use(arg1) -- Line 41
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: UserInputService_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	if not RunService_upvr:IsServer() then
		local any_GetController_result1 = Knit_upvr.GetController("BlockController")
		if any_GetController_result1.IsMainHub then return end
		local any_GetMouseLocation_result1_2 = UserInputService_upvr:GetMouseLocation()
		local any_ViewportPointToRay_result1 = workspace.Camera:ViewportPointToRay(any_GetMouseLocation_result1_2.X, any_GetMouseLocation_result1_2.Y)
		local RaycastParams_new_result1 = RaycastParams.new()
		if game.Players.LocalPlayer.Character then
			RaycastParams_new_result1:AddToFilter(game.Players.LocalPlayer.Character)
		end
		local workspace_Raycast_result1 = workspace:Raycast(any_ViewportPointToRay_result1.Origin, any_ViewportPointToRay_result1.Direction * 1000, RaycastParams_new_result1)
		if workspace_Raycast_result1 then
			local any_RoundPosToGridPos_result1 = CoreUtil_upvr:RoundPosToGridPos(workspace_Raycast_result1.Position + workspace_Raycast_result1.Normal * 3 / 2)
			if (arg1.Character:GetPivot().Position - any_RoundPosToGridPos_result1).Magnitude < CoreUtil_upvr.PlacementRange then
				any_GetController_result1:PlaceBlock("Water", any_RoundPosToGridPos_result1)
			end
		end
	end
end
return any_new_result1

Script name: Reinforced Fishing Rod
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Fishing Rod", 0, "rbxassetid://134239465744831", {
	HoldingAnim = "rbxassetid://121900545185009";
	ActionCombo = {"rbxassetid://79499606539048"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, {
	["Web Wood"] = 32;
	["Mystic Iron Fragment"] = 1;
	BenchType = "Crafting Bench";
}, {"Tools"}, {
	SellPrice = 2230;
}, {
	Foraging = {
		Fishing = 15;
	};
}, "Faster lure speed")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local UserInputService_upvr = game:GetService("UserInputService")
local var14_upvw = false
function any_new_result1.Use(arg1) -- Line 38
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: UserInputService_upvr (readonly)
		[4]: var14_upvw (read and write)
	]]
	if not RunService_upvr:IsServer() then
		local any_GetMouseLocation_result1 = UserInputService_upvr:GetMouseLocation()
		local any_ViewportPointToRay_result1 = workspace.Camera:ViewportPointToRay(any_GetMouseLocation_result1.X, any_GetMouseLocation_result1.Y)
		local RaycastParams_new_result1 = RaycastParams.new()
		if game.Players.LocalPlayer.Character then
			RaycastParams_new_result1:AddToFilter(game.Players.LocalPlayer.Character)
		end
		local workspace_Raycast_result1 = workspace:Raycast(any_ViewportPointToRay_result1.Origin, any_ViewportPointToRay_result1.Direction * 1000, RaycastParams_new_result1)
		local var19 = workspace_Raycast_result1
		if var19 then
			var19 = workspace_Raycast_result1.Position
		end
		local any_await_result1, any_await_result2 = Knit_upvr.GetService("PlayerService"):RequestToFish(var19):andThen():await()
		_ = any_await_result1 -- Setting global
		var14_upvw = any_await_result2
	end
end
return any_new_result1

Script name: Basic Fishing Rod
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Tool.ToolsDefinition).new(script.Name, "Tool", "Fishing Rod", 0, "rbxassetid://137120664618044", {
	HoldingAnim = "rbxassetid://121900545185009";
	ActionCombo = {"rbxassetid://79499606539048"};
}, {
	Misc = 0;
	Forestry = 0;
	Mining = 0;
	Farmland = 0;
	Mobs = 0;
}, {
	["Oak Wood"] = 16;
	BenchType = "Crafting Bench";
}, {"Tools"}, {
	SellPrice = 128;
}, nil, "Starter fishing rod. Slow but reliable.")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local UserInputService_upvr = game:GetService("UserInputService")
local var12_upvw = false
function any_new_result1.Use(arg1) -- Line 39
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: UserInputService_upvr (readonly)
		[4]: var12_upvw (read and write)
	]]
	if not RunService_upvr:IsServer() then
		local any_GetMouseLocation_result1 = UserInputService_upvr:GetMouseLocation()
		local any_ViewportPointToRay_result1 = workspace.Camera:ViewportPointToRay(any_GetMouseLocation_result1.X, any_GetMouseLocation_result1.Y)
		local RaycastParams_new_result1 = RaycastParams.new()
		if game.Players.LocalPlayer.Character then
			RaycastParams_new_result1:AddToFilter(game.Players.LocalPlayer.Character)
		end
		local workspace_Raycast_result1 = workspace:Raycast(any_ViewportPointToRay_result1.Origin, any_ViewportPointToRay_result1.Direction * 1000, RaycastParams_new_result1)
		local var17 = workspace_Raycast_result1
		if var17 then
			var17 = workspace_Raycast_result1.Position
		end
		local any_await_result1, any_await_result2 = Knit_upvr.GetService("PlayerService"):RequestToFish(var17):andThen():await()
		_ = any_await_result1 -- Setting global
		var12_upvw = any_await_result2
	end
end
return any_new_result1

Script name: Underling
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: UnderlingDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Underling"
	module.BehaviourData = {
		Id = "Underling Behaviour";
	}
	module.Cooldown = arg2
	module.MaxInventory = arg3
	module.RestingSpeed = arg4
	module.WorkingSpeed = arg5
	module.Damage = arg6
	module.WorkRadius = arg7
	module.Animations = arg8
	module.DisplayImage = arg9
	module.ResourceType = arg10
	module.LootExclusion = arg11
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: Wheat Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 1, 8, 8, 16, 1, 6, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233354", {
	ResourceType = "Crop";
	BlockIds = {"Wheat Seed"};
}, {})

Script name: Tomato Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 2, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233668", {
	ResourceType = "Crop";
	BlockIds = {"Tomato Seed"};
}, {})

Script name: Marble Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 76, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234788", {
	ResourceType = "Ore";
	BlockIds = {"Marble Rock Block"};
}, {})

Script name: Red Potato Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 4, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234326", {
	ResourceType = "Crop";
	BlockIds = {"Red Potato Seed"};
}, {})

Script name: Stone Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 25.6, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234060", {
	ResourceType = "Ore";
	BlockIds = {"Stone Rock Block"};
}, {})

Script name: Carrot Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 1, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237450", {
	ResourceType = "Crop";
	BlockIds = {"Carrot Seed"};
}, {})

Script name: Ash Wood Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 254, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237940", {
	ResourceType = "Tree";
	BlockIds = {"AshTreeB"};
}, {"Griffin Feather"})

Script name: Mahogany Wood Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 140, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235088", {
	ResourceType = "Tree";
	BlockIds = {"MahoganyTreeB"};
}, {"Griffin Feather"})

Script name: Basalt Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 35.2, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237673", {
	ResourceType = "Ore";
	BlockIds = {"Basalt Rock Block"};
}, {})

Script name: Cherry Wood Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 70, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860237199", {
	ResourceType = "Tree";
	BlockIds = {"CherryTreeB"};
}, {"Griffin Feather"})

Script name: Flower Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 5, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://94126383320426", {
	ResourceType = "Ore";
	BlockIds = {"Red Poppy Flower", "Blue Poppy Flower", "Green Poppy Flower", "White Poppy Flower", "Yellow Poppy Flower", "Black Poppy Flower"};
}, {})

Script name: Coal Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 35.2, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236638", {
	ResourceType = "Ore";
	BlockIds = {"Coal Ore Block"};
}, {})

Script name: Cobalt Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 6, 8, 8, 16, 300, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236450", {
	ResourceType = "Ore";
	BlockIds = {"Cobalt Ore Block"};
}, {})

Script name: Copper Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 76, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236342", {
	ResourceType = "Ore";
	BlockIds = {"Copper Ore Block"};
}, {})

Script name: Corn Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 3, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236119", {
	ResourceType = "Crop";
	BlockIds = {"Corn Seed"};
}, {})

Script name: Dark Hollow Wood Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 8, 8, 8, 16, 658, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235760", {
	ResourceType = "Tree";
	BlockIds = {"DarkHollowTreeE"};
}, {"Griffin Feather"})

Script name: Gold Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 9, 8, 8, 16, 480, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235499", {
	ResourceType = "Ore";
	BlockIds = {"Gold Ore Block"};
}, {})

Script name: Iron Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 7, 8, 8, 16, 144, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860235299", {
	ResourceType = "Ore";
	BlockIds = {"Iron Ore Block"};
}, {})

Script name: Oak Wood Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 54, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234486", {
	ResourceType = "Tree";
	BlockIds = {"OakTreeE"};
}, {"Griffin Feather"})

Script name: Silver Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 6, 8, 8, 16, 360, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860234187", {
	ResourceType = "Ore";
	BlockIds = {"Silver Ore Block"};
}, {})

Script name: Strawberry Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 3, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233872", {
	ResourceType = "Crop";
	BlockIds = {"Strawberry Seed"};
}, {})

Script name: Pumpkin Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 4, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://82666609117884", {
	ResourceType = "Crop";
	BlockIds = {"Pumpkin Seed"};
}, {})

Script name: White Mushroom Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 4, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860238878", {
	ResourceType = "Crop";
	BlockIds = {"White Mushroom Seed"};
}, {})

Script name: Clay Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 21.6, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860236943", {
	ResourceType = "Ore";
	BlockIds = {"Clay Mud Block"};
}, {})

Script name: Watermelon Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 4, 8, 8, 16, 1, 4, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://17860233513", {
	ResourceType = "Crop";
	BlockIds = {"Watermelon Seed"};
}, {})

Script name: Granite Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 48, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://77512183971018", {
	ResourceType = "Ore";
	BlockIds = {"Granite Ore Block"};
}, {})

Script name: Limestone Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 5, 8, 8, 16, 48, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://137806338904673", {
	ResourceType = "Ore";
	BlockIds = {"Limestone Ore Block"};
}, {})

Script name: Web Wood Underling
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Underling.UnderlingDefinition).new(script.Name, 8, 8, 8, 16, 658, 12, {
	Idle = "rbxassetid://18103310244";
	Walk = "rbxassetid://17283638721";
	Run = "rbxassetid://17283638721";
	Death = "rbxassetid://16462159010";
	UseTool = "rbxassetid://18102863457";
}, "rbxassetid://129512788443667", {
	ResourceType = "Tree";
	BlockIds = {"WebTreeC"};
}, {"Griffin Feather"})

Script name: Npc
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: NpcDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Store = arg2
	module.Gender = arg3
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: Gideon
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Basalt Block", "Clay Black", "Clay Blue", "Clay Brown", "Clay Cyan", "Clay Green", "Clay Light Blue", "Clay Lime", "Clay Orange", "Clay Pink", "Clay Purple", "Clay Red", "Clay White", "Clay Yellow", "Clay Block", "Carpet Black", "Carpet Blue", "Carpet Brown", "Carpet Cyan", "Carpet Green", "Carpet Grey", "Carpet Light Blue", "Carpet Lime", "Carpet Orange", "Carpet Pink", "Carpet Purple", "Carpet Red", "Carpet White", "Carpet Yellow", "Neon Black", "Neon Blue", "Neon Cyan", "Neon Green", "Neon Light Blue", "Neon Lime", "Neon Orange", "Neon Pink", "Neon Purple", "Neon Red", "Neon White", "Neon Yellow", "Coal Block", "Cobalt Block", "Copper Block", "Cobblestone", "Glass", "Glass Black", "Glass Blue", "Glass Brown", "Glass Cyan", "Glass Green", "Glass Light Blue", "Glass Lime", "Glass Orange", "Glass Pink", "Glass Purple", "Glass Red", "Glass White", "Glass Yellow", "Gold Block", "Diamond Block", "Dirt", "Iron Block", "Lantern Block", "Marble Block", "Amber Block", "Silver Block", "Stone Block", "Torch", "Wall Torch", "Bookcase", "Spotlight", "Workbench", "Wood Stool", "Green Lightcube", "Red Lightcube", "Blue Lightcube", "Yellow Lightcube", "Purple Lightcube", "Orange Lightcube", "Small Chest", "Large Chest", "Diamond Chest", "Spawn Block"}, "Male")

Script name: Moola
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Carrot Seed", "Corn Seed", "White Mushroom Seed", "Red Potato Seed", "Strawberry Seed", "Tomato Seed", "Watermelon Seed", "Wheat Seed"}, "Male")

Script name: Maya
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Cobalt Sword", "Cobalt Axe", "Cobalt Pickaxe", "Gold Sword", "Gold Axe", "Gold Pickaxe", "Iron Sword", "Iron Axe", "Iron Pickaxe", "Copper Sword", "Copper Axe", "Copper Pickaxe", "Stone Sword", "Stone Axe", "Stone Pickaxe", "Iron Scythe", "Gold Scythe", "Diamond Pickaxe", "Diamond Axe", "Diamond Sword"}, "Female")

Script name: Oberon
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, {"Ash Wood Underling Anchor", "Basalt Underling Anchor", "Carrot Underling Anchor", "Cherry Wood Underling Anchor", "Clay Underling Anchor", "Coal Underling Anchor", "Cobalt Underling Anchor", "Copper Underling Anchor", "Corn Underling Anchor", "Dark Hollow Wood Underling Anchor", "Gold Underling Anchor", "Iron Underling Anchor", "Mahogany Wood Underling Anchor", "Marble Underling Anchor", "Oak Wood Underling Anchor", "Red Potato Underling Anchor", "Silver Underling Anchor", "Stone Underling Anchor", "Strawberry Underling Anchor", "Tomato Underling Anchor", "Watermelon Underling Anchor", "Wheat Underling Anchor", "Pumpkin Underling Anchor", "White Mushroom Underling Anchor", "Granite Underling Anchor", "Limestone Underling Anchor", "Web Wood Underling Anchor", "Flower Underling Anchor"}, "Male")

Script name: Traveling Bard
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, nil, "Male")

Script name: Saeed
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Npc.NpcDefinition).new(script.Name, nil, "Male")

Script name: Store
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: StoreDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = "Store"
	module.ProductType = arg2
	module.Type = arg3
	module.ProductId = arg4
	module.Price = arg5
	module.Giftable = arg6
	module.Limited = arg7
	module.DisplayData = arg8
	module.ExtraData = arg9
	module.LayoutOrder = arg10
	module.RNGItem = arg11
	module.IsNew = arg12
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: Dragon Storage Chest Product
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Chest", {1892076047}, {699}, true, false, {
	Description = "Store 128 item slots. Can be purchased more than once.";
	DisplayImage = "rbxassetid://95797451124786";
}, nil, 18, false, false)

Script name: Theme Pink
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1892076304, 1892076247}, {799, 1699}, true, true, {
	Background = "rbxassetid://18149387881";
	SkyBG = "rbxassetid://17724630479";
	PortalBG = "rbxassetid://18149514859";
	Title = {"LIMITED", "PINK", "THEME"};
	TitleStroke = Color3.fromRGB(241, 174, 221);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "Pink Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Limited Blocks";
	}};
	Purchases = {{
		Description = "50 per block";
	}, {
		Description = "700 per block";
	}};
}, {
	ThemeId = "Pink";
	Blocks = {{
		["Pink Stone Brick Slab"] = 50;
		["Pink Stone Brick Vertical Slab"] = 50;
		["Pink Stone Brick Stair"] = 50;
		["Pink Stone Brick Block"] = 50;
		["Pink Grass"] = 50;
	}, {
		["Pink Stone Brick Slab"] = 700;
		["Pink Stone Brick Vertical Slab"] = 700;
		["Pink Stone Brick Stair"] = 700;
		["Pink Stone Brick Block"] = 700;
		["Pink Grass"] = 700;
	}};
}, 6, false, false)

Script name: Pro Backpack
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "GamePass", "BackpackExpansion", {1892075986}, {699}, true, false, {
	Description = "Expand inventory from 64 to 512 unique item slots.";
	DisplayImage = "rbxassetid://17861554211";
}, nil, 15, false, false)

Script name: Island Expansion
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "GamePass", "IslandExpansion", {1892076111}, {1499}, true, false, {
	Description = "Expand Island max block limit from 120,000 to 400,000 blocks.";
	DisplayImage = "rbxassetid://17861553833";
}, nil, 32, false, false)

Script name: Island Flight
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "GamePass", "CreatorMode", {1892075934}, {699}, true, false, {
	Description = "Double jump to enable flight (island only.) Move Up = Space Bar, Move Down = Z";
	DisplayImage = "rbxassetid://17861554038";
}, nil, 31, false, false)

Script name: Theme Storm
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1892076304, 1892076247}, {799, 1699}, true, true, {
	Background = "rbxassetid://18149387337";
	SkyBG = "rbxassetid://17724630998";
	PortalBG = "rbxassetid://18149514128";
	Title = {"LIMITED", "STORM", "THEME"};
	TitleStroke = Color3.fromRGB(66, 124, 156);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "Stormy Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Limited Blocks";
	}};
	Purchases = {{
		Description = "10 per block";
	}, {
		Description = "100 per block";
	}};
}, {
	ThemeId = "Storm";
	Blocks = {{
		["Electric FX Block"] = 10;
		["Fog FX Block"] = 10;
		["Rain FX Block"] = 10;
		["Danger Sign"] = 10;
	}, {
		["Electric FX Block"] = 100;
		["Fog FX Block"] = 100;
		["Rain FX Block"] = 100;
		["Danger Sign"] = 100;
	}};
}, 3, false, false)

Script name: Luck Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2320038636}, {120}, true, false, {
	Description = "Double luck on drop rarity for 30 minutes.";
	DisplayImage = "rbxassetid://138052584992543";
}, {
	ItemData = {{
		Id = "Luck Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 28, false, false)

Script name: Theme Obby
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1934502398, 1934506696}, {440, 999}, true, false, {
	Background = "rbxassetid://71526778823774";
	SkyBG = "rbxassetid://127418382293377";
	PortalBG = "rbxassetid://71047392553745";
	Title = {"OBBY", "PACK", "#1"};
	TitleStroke = Color3.fromRGB(126, 130, 228);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "New Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Obby Blocks";
	}};
	Purchases = {{
		Description = "5 per block";
	}, {
		Description = "50 per block";
	}};
}, {
	ThemeId = "Obby";
	Blocks = {{
		["Spiked Floor Trap"] = 5;
		["Kill Block"] = 5;
		["Disappear Block"] = 5;
		["Checkpoint Block"] = 5;
		["Finish Line Block"] = 5;
	}, {
		["Spiked Floor Trap"] = 50;
		["Kill Block"] = 50;
		["Disappear Block"] = 50;
		["Checkpoint Block"] = 50;
		["Finish Line Block"] = 50;
	}};
}, 12, false, false)

Script name: Theme Blackhole
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "GamePass", "Theme", {1892076304}, {799}, true, true, {
	Background = "rbxassetid://95871310286445";
	SkyBG = "rbxassetid://93024327469115";
	PortalBG = "rbxassetid://100893345510278";
	Title = {"BLACK", "HOLE", "THEME"};
	TitleStroke = Color3.fromRGB(27, 16, 109);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "New Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}};
	Purchases = {{
		Description = "";
	}};
}, {
	ThemeId = "Blackhole";
	Blocks = {{}};
}, 9, false, false)

Script name: Theme Aqua
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Theme", {1892076304, 1892076247}, {799, 1699}, true, true, {
	Background = "rbxassetid://79803329224907";
	SkyBG = "rbxassetid://126326388137312";
	PortalBG = "rbxassetid://113096008347008";
	Title = {"LIMITED", "AQUA", "THEME"};
	TitleStroke = Color3.fromRGB(66, 124, 156);
	Products = {{
		Image = "rbxassetid://17182975728";
		Title = "Underwater Sky";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Portal Skin";
	}, {
		Image = "rbxassetid://17182975728";
		Title = "Limited Blocks";
	}};
	Purchases = {{
		Description = "10 per block";
	}, {
		Description = "100 per block";
	}};
}, {
	ThemeId = "Aqua";
	Blocks = {{
		["No Fishing Sign"] = 10;
		["No Swimming Sign"] = 10;
		["Waterfall FX Block"] = 10;
		["Bubble FX Block"] = 10;
	}, {
		["No Fishing Sign"] = 100;
		["No Swimming Sign"] = 100;
		["Waterfall FX Block"] = 100;
		["Bubble FX Block"] = 100;
	}};
}, 1, false, false)

Script name: Coin Boost Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2320038880}, {120}, true, false, {
	Description = "30% more coins for 5 minutes.";
	DisplayImage = "rbxassetid://113165652330253";
}, {
	ItemData = {{
		Id = "Coin Boost Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 24, false, false)

Script name: XP Boost Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2320038385}, {99}, true, false, {
	Description = "Earn 50% more XP for 30 minutes.";
	DisplayImage = "rbxassetid://118791628297339";
}, {
	ItemData = {{
		Id = "XP Boost Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 30, false, false)

Script name: Jump Power Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2320038202}, {49}, true, false, {
	Description = "Maximum jump height for 5 minutes.";
	DisplayImage = "rbxassetid://73318915232256";
}, {
	ItemData = {{
		Id = "Jump Power Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 27, false, false)

Script name: Damage Boost Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2320038773}, {99}, true, false, {
	Description = "Deal 50% more damage for 30 minutes.";
	DisplayImage = "rbxassetid://105104707404804";
}, {
	ItemData = {{
		Id = "Damage Boost Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 25, false, false)

Script name: Healing Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2320038495}, {99}, true, false, {
	Description = "Regenerate 3 health per second for 30 minutes.";
	DisplayImage = "rbxassetid://99627848074367";
}, {
	ItemData = {{
		Id = "Healing Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 26, false, false)

Script name: Mining Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2693468709}, {99}, true, false, {
	Description = "Damage against blocks is increased by 1.5x for 30 minutes.";
	DisplayImage = "rbxassetid://97295714949354";
}, {
	ItemData = {{
		Id = "Mining Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 29, false, false)

Script name: Underling Auto Seller
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2707747903}, {149}, true, false, {
	Description = "When equipped, Underling will auto sell resources gathered";
	DisplayImage = "rbxassetid://123045469514264";
}, {
	ItemData = {{
		Id = "Auto Seller";
		Catagory = "Item";
		Stack = 1;
	}};
}, 19, false, true)

Script name: Mystic Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Store.StoreDefinition).new(script.Name, "DevProduct", "Item", {2837870315}, {99}, true, false, {
	Description = "Increased chance by 50% a harvested resource will spawn back Enchanted for 30 minutes.";
	DisplayImage = "rbxassetid://120299875492729";
}, {
	ItemData = {{
		Id = "Mystic Potion III";
		Catagory = "Potion";
		Stack = 1;
	}};
}, 29, false, true)

Script name: Task
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: TaskDefinition
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local _ = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = arg2
	module.NextTasks = arg3
	module.TaskIds = arg4
	module.TaskParams = arg5
	module.TaskRewards = arg6
	module.TaskDisplay = arg7
	module.Structured = arg8
	module.Hidden = arg9
	return setmetatable(module, module_2_upvr)
end
function module_2_upvr.GetDialog(arg1, arg2) -- Line 26
	local pairs_result1, pairs_result2, pairs_result3 = pairs(script.Parent.DefinitionModules:GetDescendants())
	local var11
	for _, v in pairs_result1, pairs_result2, pairs_result3 do
		if v.Name == arg1.Id then
			var11 = v:FindFirstChild("Dialogue")
		end
	end
	pairs_result1 = var11
	local var12 = pairs_result1
	if var12 then
		var12 = require(var11)
	end
	return var12
end
return module_2_upvr

Script name: Greenhorn
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Block by Block", "Level Up"}, {"PlaceBlocks", "PlaceBlocks", "InventoryCollect"}, {{
	BlockGoal = 1;
	BlockId = "Tilled Dirt";
}, {
	BlockGoal = 1;
	BlockId = "Wheat Seed";
}, {
	CollectionGoal = 1;
	ItemIds = {"Wheat"};
}}, {nil, nil, {
	Coins = 10;
}}, {{
	Title = "Use your hoe to plow grass ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}, {
	Title = "Plant Wheat Seed on tilled dirt ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}, {
	Title = "Harvest your grown wheat ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 30
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [23] 17. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [23] 17. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [24] 18. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [24] 18. Error Block 3 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: The adventure begins
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Rising entrepreneur"}, {"CharacterPosition", "InPlace"}, {{
	TargetPosition = Vector3.new(535, 305, 472);
	MinDistance = 20;
	PlaceId = CoreUtil_upvr.PlaceIds.Island;
}, {
	PlaceId = CoreUtil_upvr.PlaceIds.Citadel;
}}, {nil, {
	Coins = 20;
}}, {{
	Title = "Find a way to the other side of island";
	ProgressText = "";
}, {
	Title = "Use the portal to travel to the Citadel";
	ProgressText = "";
}}, true, false)
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 25
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	local any_RequireDefinitions_result1 = CoreUtil_upvr:RequireDefinitions()
	if game.PlaceId ~= CoreUtil_upvr.PlaceIds.Island then
	else
		if arg2 == 1 then
			any_RequireDefinitions_result1.TutorialType.ArrowCompass.ActivationFunction(arg1, arg2, arg3, arg1.Def.TaskParams[1].TargetPosition)
			return
		end
		if arg2 == 2 then
			any_RequireDefinitions_result1.TutorialType.PartHighlight.ActivationFunction(arg1, arg2, arg3, workspace.PortalEntities.Portals:WaitForChild("ToHubPortal"))
		end
	end
end
return any_new_result1

Script name: Rising entrepreneur
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Woodland Harvest"}, {"Economy"}, {{
	EconType = "Sell";
	ItemId = "Wheat";
	ItemTradeGoal = 1;
}}, {{
	Coins = 20;
	Block = {
		Id = "Wheat Seed";
		Count = 4;
	};
}}, {{
	Title = "Sell 1 wheat to Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 24
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	local any_RequireDefinitions_result1 = CoreUtil_upvr:RequireDefinitions()
	if game.PlaceId ~= CoreUtil_upvr.PlaceIds.Citadel then
	elseif arg2 == 1 then
		coroutine.wrap(any_RequireDefinitions_result1.TutorialType.ArrowCompass.ActivationFunction)(arg1, arg2, arg3, workspace.NPC.Moola.PrimaryPart.Position)
		coroutine.wrap(any_RequireDefinitions_result1.TutorialType.ShopHighlight.ActivationFunction)(arg1, arg2, arg3, "Wheat")
		any_RequireDefinitions_result1.TutorialType.PartHighlight.ActivationFunction(arg1, arg2, arg3, workspace.NPC.Moola)
	end
end
return any_new_result1

Script name: The Catch of the Day
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 1;
	ItemIds = {"Carp"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Shrimp"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Tilapia"};
}, {
	CollectionGoal = 1;
	ItemIds = {"King Salmon"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Marlin"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Tiger Shark"};
}}, {nil, nil, nil, nil, {
	Coins = 50;
}}, {{
	Title = "Catch 1 Carp in the Forest Rivers using a Fishing Rod ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 1 Shrimp in the Forest Rivers using a Fishing Rod ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 1 Tilapia in the Forest Rivers using a Fishing Rod ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 1 King Salmon in the Forest Rivers using a Fishing Rod ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 1 Marlin in the Forest Rivers using a Fishing Rod ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 1 Tiger Shark in the Forest Rivers using a Fishing Rod ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

Script name: Craft Fishing Rod
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"The Catch of the Day"}, {"Crafting"}, {{
	CraftingGoal = 1;
	ItemId = "Basic Fishing Rod";
}}, {nil}, {{
	Title = "Craft a Basic Fishing Rod ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, true)

Script name: Place Bench
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InPlace"}, {{
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Island;
}}, {nil, nil}, {{
	Title = "Use the portal to travel to the Citadel";
	ProgressText = "";
}}, true, true)

Script name: Copper Forge III
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"The Underlings"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Copper"};
}, {
	CollectionGoal = 256;
	ItemIds = {"Oak Wood"};
}, {
	CollectionGoal = 32;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Scrap Metal"};
}, {
	CraftingGoal = 1;
	ItemId = "Copper Sword";
}}, {nil, nil, nil, nil, {
	Coins = 40;
}}, {{
	Title = "Collect 128 Copper ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 256 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 32 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Kill Gizmos for 8 Scrap Metal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Copper Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 31
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Copper Sword";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Iron Forge I
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Iron Forge II"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Iron"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Cherry Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Iron Pickaxe";
}}, {nil, nil, nil, {
	Coins = 100;
}}, {{
	Title = "Collect 128 Iron ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Cherry Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft an Iron Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Iron Pickaxe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Block by Block
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local tbl_upvr = {{
	X = 180;
	Y = 100;
	Z = 170;
}, {
	X = 180;
	Y = 100;
	Z = 169;
}, {
	X = 180;
	Y = 100;
	Z = 168;
}, {
	X = 180;
	Y = 100;
	Z = 166;
}, {
	X = 180;
	Y = 100;
	Z = 167;
}}
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"The adventure begins"}, {"DestroyBlocks", "PlaceBlocks"}, {{
	BlockGoal = 5;
}, {
	BlockGoal = 5;
	Positions = tbl_upvr;
}}, {nil, {
	Coins = 10;
}}, {{
	Title = "Collect 5 blocks from your island ";
	ProgressText = "&Progress:BlocksDestroyed& / &Goal:BlockGoal&";
}, {
	Title = "Place blocks in the highlighted area ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}}, true, false)
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_2_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 58
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_2_upvr (readonly)
		[3]: tbl_upvr (readonly)
	]]
	if arg2 == 1 and game.PlaceId == CoreUtil_2_upvr.PlaceIds.Island then
		CoreUtil_2_upvr:RequireDefinitions().TutorialType.InventoryHighlight.ActivationFunction(arg1, arg2, arg3, "Wood Pickaxe")
	elseif arg2 == 2 and game.PlaceId == CoreUtil_2_upvr.PlaceIds.Island then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		CoreUtil_2_upvr:RequireDefinitions().TutorialType.PositionHighlight.ActivationFunction(arg1, arg2, arg3, tbl_upvr)
	end
end
function any_new_result1.InstaComplete(arg1) -- Line 72
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
	local Knit = require(ReplicatedStorage_upvr.Packages.Knit)
	local CoreUtil = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	if game:GetService("RunService"):IsServer() then
		if not CoreUtil:GetData(arg1, Knit.GetService("DataHandlerService")) then return end
		for _, v in pairs(tbl_upvr) do
			if not CoreUtil:GetValueAtPosition(Knit.GetService("BlockService").Blocks, v) then return end
		end
		return true
	end
	for _, v_2 in pairs(tbl_upvr) do
		if not CoreUtil:GetValueAtPosition(Knit.GetController("BlockController").Blocks, v_2) then return end
	end
	return true
end
return any_new_result1

Script name: Woodland Harvest
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Upgrades people Upgrades"}, {"CharacterPosition", "InventoryCollect"}, {{
	TargetPosition = Vector3.new(375, 113, 1764);
	MinDistance = 40;
	PlaceId = CoreUtil_upvr.PlaceIds.Citadel;
}, {
	CollectionGoal = 16;
	ItemIds = {"Oak Wood"};
}}, {nil, {
	Coins = 20;
}}, {{
	Title = "Find some Oak Trees in the Citadel ";
	ProgressText = "";
}, {
	Title = "Collect 16 Oak Wood from Trees using an Axe ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 28
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [22] 16. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [22] 16. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [33] 22. Error Block 3 start (CF ANALYSIS FAILED)
	coroutine.wrap(CoreUtil_upvr:RequireDefinitions().TutorialType.ArrowCompass.ActivationFunction)(arg1, arg2, arg3, workspace.PortalEntities.Portals.ToForestPortal.Light.Position)
	do
		return
	end
	-- KONSTANTERROR: [33] 22. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [59] 38. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [59] 38. Error Block 4 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Farming Frenzy I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Gold Forge I"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 8;
	ItemIds = {"Wheat"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Carrot"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Corn"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Tomato"};
}, {
	CollectionGoal = 8;
	ItemIds = {"Strawberry"};
}}, {nil, nil, nil, nil, {
	Coins = 100;
}}, {{
	Title = "Harvest 8 Wheat ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Carrots ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Corn ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Tomatoes ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Harvest 8 Strawberries ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

Script name: Cobalt Forge II
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Cobalt Forge III"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 256;
	ItemIds = {"Cobalt"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Mahogany Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Cobalt Axe";
}}, {nil, nil, nil, {
	Coins = 100;
}}, {{
	Title = "Collect 256 Cobalt ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Mahogany Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Cobalt Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Cobalt Axe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Gold Forge II
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Gold Forge III"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Gold"};
}, {
	CollectionGoal = 128;
	ItemIds = {"Ash Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Mystic Gold Fragment"};
}, {
	CraftingGoal = 1;
	ItemId = "Gold Pickaxe";
}}, {nil, nil, nil, nil, {
	Coins = 200;
}}, {{
	Title = "Collect 128 Gold ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 128 Ash Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 1 Mystic Gold Fragment ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Gold Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 30
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Gold Pickaxe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Gold Forge I
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Gold Forge II"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Gold"};
}, {
	CollectionGoal = 128;
	ItemIds = {"Ash Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Mystic Gold Fragment"};
}, {
	CraftingGoal = 1;
	ItemId = "Gold Axe";
}}, {nil, nil, nil, nil, {
	Coins = 200;
}}, {{
	Title = "Collect 128 Gold ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 128 Ash Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 1 Mystic Gold Fragment ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Gold Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 30
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Gold Axe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Gold Forge III
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Dark Hollow"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Gold"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Coal"};
}, {
	CollectionGoal = 1;
	ItemIds = {"Mystic Gold Fragment"};
}, {
	CraftingGoal = 1;
	ItemId = "Recycled Blade";
}, {
	CraftingGoal = 1;
	ItemId = "Gold Sword";
}}, {nil, nil, nil, nil, {
	Coins = 200;
}}, {{
	Title = "Collect 128 Gold ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 1 Mystic Gold Fragment ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Recycled Blade ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Gold Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 30
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Gold Sword";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Level Up
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Underlings"}, {"Level", "Level"}, {{
	CurrentLevelGoal = 1;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 10;
	LevelPath = {
		Mining = {"Stone Rock"};
	};
}}, {nil, nil}, {{
	Title = "";
	ProgressText = "";
}}, true, true)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 25
end
return any_new_result1

Script name: Cobalt Forge III
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Farming Frenzy I"}, {"InventoryCollect", "Crafting", "Crafting"}, {{
	CollectionGoal = 256;
	ItemIds = {"Cobalt"};
}, {
	CraftingGoal = 1;
	ItemId = "Recycled Blade";
}, {
	CraftingGoal = 1;
	ItemId = "Cobalt Sword";
}}, {nil, nil, {
	Coins = 100;
}}, {{
	Title = "Collect 256 Cobalt ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Recycled Blade ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Cobalt Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 26
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Cobalt Sword";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Carrot Patch
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Copper Forge I"}, {"Economy", "InventoryCollect", "Economy"}, {{
	EconType = "Buy";
	ItemId = "Carrot Seed";
	ItemTradeGoal = 1;
}, {
	CollectionGoal = 1;
	ItemIds = {"Carrot"};
}, {
	EconType = "Sell";
	ItemId = "Carrot";
	ItemTradeGoal = 1;
}}, {nil, nil, {
	Coins = 100;
}}, {{
	Title = "Buy 1 Carrot Seed from Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Harvest your grown Carrot ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Sell 1 Carrot to Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 27
end
return any_new_result1

Script name: Copper Forge I
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Copper Forge II"}, {"InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 64;
	ItemIds = {"Copper"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Oak Wood"};
}, {
	CraftingGoal = 1;
	ItemId = "Copper Pickaxe";
}}, {nil, nil, {
	Coins = 40;
}}, {{
	Title = "Collect 64 Copper ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Copper Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 27
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Copper Pickaxe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Copper Forge II
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Copper Forge III"}, {"InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 64;
	ItemIds = {"Copper"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Oak Wood"};
}, {
	CraftingGoal = 1;
	ItemId = "Copper Axe";
}}, {nil, nil, {
	Coins = 40;
}}, {{
	Title = "Collect 64 Copper ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Oak Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Copper Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 27
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Copper Axe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: The Underlings
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Iron Forge I"}, {"Economy", "PlaceBlocks"}, {{
	EconType = "Buy";
	ItemId = "Wheat Underling Anchor";
	ItemTradeGoal = 1;
}, {
	BlockGoal = 1;
	BlockId = "Wheat Underling Anchor";
}}, {nil, {
	Coins = 100;
}}, {{
	Title = "Buy Wheat Underling from Oberon ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Place Wheat Underling near wheat ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}}, true, false)

Script name: Underlings
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Economy", "PlaceBlocks", "Economy"}, {{
	EconType = "Buy";
	ItemId = "Stone Underling Anchor";
	ItemTradeGoal = 1;
}, {
	BlockGoal = 1;
	BlockId = "Stone Underling Anchor";
}, {
	EconType = "Sell";
	ItemId = "Stone";
	ItemTradeGoal = 10;
}}, {nil, nil, {
	Coins = 20;
}}, {{
	Title = "Buy 1 Stone Underling from Oberon (1000 Coins) ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Place your Stone Underling Anchor on flat open land your Island ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}, {
	Title = "Sell 10 collected Stone from your Underling to any vendor in the Citadel";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)

Script name: Upgrades people Upgrades
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Slime Slayer", "Place Bench", "Craft Fishing Rod"}, {"CharacterPosition", "InventoryCollect", "Crafting", "InventoryCollect", "InventoryCollect", "Crafting", "Crafting", "Crafting"}, {{
	TargetPosition = Vector3.new(32, 103, 1759);
	MinDistance = 40;
	PlaceId = CoreUtil_upvr.PlaceIds.Citadel;
}, {
	CollectionGoal = 8;
	ItemIds = {"Stone"};
}, {
	CraftingGoal = 1;
	ItemId = "Stone Pickaxe";
}, {
	CollectionGoal = 32;
	ItemIds = {"Stone"};
}, {
	CollectionGoal = 24;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Stone Axe";
}, {
	CraftingGoal = 1;
	ItemId = "Stone Sword";
}, {
	CraftingGoal = 1;
	ItemId = "Crafting Bench";
}}, {nil, nil, nil, nil, nil, nil, nil, {
	Coins = 20;
}}, {{
	Title = "Go towards the mines portal to find some stone ";
	ProgressText = "";
}, {
	Title = "Collect 8 Stone for a Pickaxe ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Stone Pickaxe using the crafting tab ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Collect 32 Stone for Stone Tools ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 24 Coal for Stone Tools ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Stone Axe using the crafting tab ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Stone Sword using the crafting tab ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}, {
	Title = "Craft a Crafting Bench using the crafting tab ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 39
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [22] 16. Error Block 2 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [22] 16. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [33] 22. Error Block 3 start (CF ANALYSIS FAILED)
	CoreUtil_upvr:RequireDefinitions().TutorialType.ArrowCompass.ActivationFunction(arg1, arg2, arg3, workspace.PortalEntities.Portals.ToMinesPortal.Light.Position)
	do
		return
	end
	-- KONSTANTERROR: [33] 22. Error Block 3 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [56] 36. Error Block 4 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [56] 36. Error Block 4 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Slime Slayer
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Island Evolution"}, {"CharacterPosition", "KillMob", "Economy"}, {{
	TargetPosition = Vector3.new(-898, 1448, 7075);
	MinDistance = 20;
	PlaceId = CoreUtil_upvr.PlaceIds.Mines;
}, {
	KillGoal = 6;
	MobIds = {"Green Slime"};
}, {
	EconType = "Sell";
	ItemId = "Green Goo";
	ItemTradeGoal = 5;
}}, {nil, nil, {
	Coins = 85;
}}, {{
	Title = "Enter the mines ";
	ProgressText = "";
}, {
	Title = "Kill 6 Green Slimes in Mines ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}, {
	Title = "Sell 5 Green Goo from Green Slimes to a vender in Citadel ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 32
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	local any_RequireDefinitions_result1 = CoreUtil_upvr:RequireDefinitions()
	if arg2 == 1 and game.PlaceId == CoreUtil_upvr.PlaceIds.Citadel then
		coroutine.wrap(any_RequireDefinitions_result1.TutorialType.PartHighlight.ActivationFunction)(arg1, arg2, arg3, workspace.PortalEntities.Portals.ToMinesPortal)
		any_RequireDefinitions_result1.TutorialType.ArrowCompass.ActivationFunction(arg1, arg2, arg3, workspace.PortalEntities.Portals.ToMinesPortal.Light.Position)
	elseif arg2 == 3 and game.PlaceId == CoreUtil_upvr.PlaceIds.Mines then
		coroutine.wrap(any_RequireDefinitions_result1.TutorialType.PartHighlight.ActivationFunction)(arg1, arg2, arg3, workspace.PortalEntities.Portals.MinesPortal)
		any_RequireDefinitions_result1.TutorialType.ArrowCompass.ActivationFunction(arg1, arg2, arg3, workspace.PortalEntities.Portals.MinesPortal.Light.Position)
		return
	end
end
return any_new_result1

Script name: Island Evolution
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Carrot Patch"}, {"Economy", "Economy", "InPlace", "PlaceBlocks", "Economy"}, {{
	EconType = "Buy";
	ItemId = "Wheat Seed";
	ItemTradeGoal = 1;
}, {
	EconType = "Buy";
	ItemId = "Dirt";
	ItemTradeGoal = 10;
}, {
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Island;
}, {
	BlockGoal = 10;
	BlockId = "Dirt";
}, {
	EconType = "Sell";
	ItemId = "Wheat";
	ItemTradeGoal = 8;
}}, {nil, nil, nil, nil, {
	Coins = 25;
}}, {{
	Title = "Buy 1 Wheat Seed from Moola ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Buy 10 Dirt from Gideon in the Citadel ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}, {
	Title = "Go back to your island ";
	ProgressText = "";
}, {
	Title = "Expand island with 10 Dirt Blocks ";
	ProgressText = "&Progress:BlocksPlaced& / &Goal:BlockGoal&";
}, {
	Title = "Sell 8 Wheat to any vendor in the Citadel ";
	ProgressText = "&Progress:ItemsTraded& / &Goal:ItemTradeGoal&";
}}, true, false)
function any_new_result1.RunTutorial(arg1, arg2, arg3) -- Line 33
end
return any_new_result1

Script name: Iron Forge II
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Iron Forge III"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 128;
	ItemIds = {"Iron"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Cherry Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Iron Axe";
}}, {nil, nil, nil, {
	Coins = 100;
}}, {{
	Title = "Collect 128 Iron ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Cherry Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft an Iron Axe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Iron Axe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Iron Forge III
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Cobalt Forge I"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 192;
	ItemIds = {"Iron"};
}, {
	CollectionGoal = 256;
	ItemIds = {"Cherry Wood"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Iron Sword";
}}, {nil, nil, nil, {
	Coins = 100;
}}, {{
	Title = "Collect 192 Iron ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 256 Cherry Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft an Iron Sword ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Iron Sword";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Dark Hollow
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect", "KillMob"}, {{
	CollectionGoal = 64;
	ItemIds = {"Dark Hollow Wood"};
}, {
	KillGoal = 10;
	MobIds = {"GrimThorn"};
}}, {nil, {
	Coins = 500;
}}, {{
	Title = "Collect 64 Dark Hollow Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Kill 10 GrimThorn ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}}, true, false)

Script name: Cobalt Forge I
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {"Cobalt Forge II"}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "Crafting"}, {{
	CollectionGoal = 256;
	ItemIds = {"Cobalt"};
}, {
	CollectionGoal = 64;
	ItemIds = {"Mahogany Wood"};
}, {
	CollectionGoal = 16;
	ItemIds = {"Coal"};
}, {
	CraftingGoal = 1;
	ItemId = "Cobalt Pickaxe";
}}, {nil, nil, nil, {
	Coins = 100;
}}, {{
	Title = "Collect 256 Cobalt ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 64 Mahogany Wood ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 16 Coal ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Craft a Cobalt Pickaxe ";
	ProgressText = "&Progress:ItemsCrafted& / &Goal:CraftingGoal&";
}}, true, false)
function any_new_result1.InstaComplete(arg1) -- Line 29
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [50] 36. Error Block 5 start (CF ANALYSIS FAILED)
	do
		return true
	end
	do
		return
	end
	-- KONSTANTERROR: [50] 36. Error Block 5 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [53] 39. Error Block 9 start (CF ANALYSIS FAILED)
	if require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetSameItemInInventory(require(ReplicatedStorage_upvr.Packages.Knit).GetController("PlayerController").Inventory, {
		Catagory = "Tool";
		Id = "Cobalt Pickaxe";
	}) then
		return true
	end
	-- KONSTANTERROR: [53] 39. Error Block 9 end (CF ANALYSIS FAILED)
end
return any_new_result1

Script name: Play The Game
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InPlace"}, {{
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Island;
}}, {{
	Badge = 725497835714812;
}, nil}, {{
	Title = "Play the game for the first time";
	ProgressText = "";
}}, true, true)

Script name: Reached Forest
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(1217, 263, 2247);
	MinDistance = 20;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Forest;
}}, {{
	Badge = 4246293575429864;
}, nil}, {{
	Title = "Reach the forest";
	ProgressText = "";
}}, true, true)

Script name: Reached Citadel
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InPlace"}, {{
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 4254753589823055;
}, nil}, {{
	Title = "Visit Citadel for the first time";
	ProgressText = "";
}}, true, true)

Script name: Reached Mines
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(-898, 1448, 7075);
	MinDistance = 20;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Mines;
}}, {{
	Badge = 3379157258755019;
}, nil}, {{
	Title = "Reach the Mines";
	ProgressText = "";
}}, true, true)

Script name: Reach 1M Coin Balance
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CoinBalance"}, {{
	BalanceGoal = 1000000;
}}, {{
	Badge = 1642478039352243;
}, nil}, {{
	Title = "Reach 1m coin balance";
	ProgressText = "";
}}, true, true)

Script name: Reach Player Level
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Level", "Level", "Level", "Level", "Level", "Level", "Level", "Level", "Level", "Level"}, {{
	CurrentLevelGoal = 10;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 20;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 30;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 40;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 50;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 60;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 70;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 80;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 90;
	LevelPath = {"Overall"};
}, {
	CurrentLevelGoal = 100;
	LevelPath = {"Overall"};
}}, {{
	Badge = 1291643517476504;
}, {
	Badge = 2045076234781931;
}, {
	Badge = 4460677254887057;
}, {
	Badge = 89488805301833;
}, {
	Badge = 2842197254378018;
}, {
	Badge = 1553423802563029;
}, {
	Badge = 4205149178611816;
}, {
	Badge = 2532931131676682;
}, {
	Badge = 3552037880169685;
}, {
	Badge = 2184198202663641;
}}, {{
	Title = "Reach 1m coin balance";
	ProgressText = "";
}}, false, true)

Script name: Collect 100 Flowers
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 32;
	ItemIds = {"Black Poppy Flower", "Blue Poppy Flower", "Green Poppy Flower", "Red Poppy Flower", "White Poppy Flower", "Yellow Poppy Flower"};
}}, {{
	Badge = 4481010433767182;
}, nil}, {{
	Title = "Collect 100 Flowers";
	ProgressText = "";
}}, true, true)

Script name: Purchase Item
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"MarketPurchase"}, {{
	ItemGoal = 1;
}}, {{
	Badge = 2070520117153328;
}, nil}, {{
	Title = "Purchase 1 item";
	ProgressText = "";
}}, true, true)

Script name: Sit on the throne
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(248, 108, 1852);
	MinDistance = 8;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 1231964068369981;
}, nil}, {{
	Title = "Sit on the throne";
	ProgressText = "";
}}, true, true)

Script name: Craft Recycled Blade
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Crafting"}, {{
	CraftingGoal = 1;
	ItemId = "Recycled Blade";
}}, {{
	Badge = 3170936748963907;
}, nil}, {{
	Title = "Craft A Recycled Blade";
	ProgressText = "";
}}, true, true)

Script name: Defeat a Grimthorn
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob"}, {{
	KillGoal = 1;
	MobIds = {"GrimThorn"};
}}, {{
	Badge = 3058954510847229;
}, nil}, {{
	Title = "Defeat a Grimthorn";
	ProgressText = "";
}}, true, true)

Script name: Cosmetics Change
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CosmeticChange"}, {{
	ChangeGoal = 1;
}}, {{
	Badge = 107461536650824;
}, nil}, {{
	Title = "Change portal or sky from default";
	ProgressText = "";
}}, true, true)

Script name: Green Thumb
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 5000;
	ItemIds = {"Wheat"};
}}, {{
	Badge = 586162765289105;
	Portal = "Barn";
}}, {{
	Title = "Harvest 5000 Wheat";
	ProgressText = "";
}}, true, true)

Script name: Slime Killer
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob"}, {{
	KillGoal = 1000;
	MobIds = {"Green Slime"};
}}, {{
	Badge = 229625477066452;
	Portal = "Slime";
}}, {{
	Title = "Defeat 1000 Green Slime";
	ProgressText = "";
}}, true, true)

Script name: Leap of Faith
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(237, 245, 1764);
	MinDistance = 25;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 82114763758870;
	Portal = "Frameless";
}}, {{
	Title = "Leap of Faith";
	ProgressText = "";
}}, true, true)

Script name: The Wheel Turns
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"TimePlayed"}, {{
	TotalTimeGoal = 28800;
}}, {{
	Badge = 4448519138604339;
	Sky = "Above Clouds";
}}, {{
	Title = "Play for 28800 Seconds";
	ProgressText = "Play for a total of 8 hours";
}}, true, true)

Script name: Farlight Crystals
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil = require(ReplicatedStorage.CommonModules.CoreUtil)
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Collection", "Collection", "Collection"}, {{
	CollectionGoal = 8;
	CollectionFolder = workspace.Collectables.Farlight[1];
	PlaceId = CoreUtil.PlaceIds.Citadel;
}, {
	CollectionGoal = 8;
	CollectionFolder = workspace.Collectables.Farlight[2];
	PlaceId = CoreUtil.PlaceIds.Forest;
}, {
	CollectionGoal = 8;
	CollectionFolder = workspace.Collectables.Farlight[3];
	PlaceId = CoreUtil.PlaceIds.Mines;
}}, {{
	Badge = 1437872626639825;
}, {
	Badge = 231119644614158;
}, {
	Badge = 4139755977933519;
}}, {{
	Title = "Collect 8 Farlight Crystals (Citadel) ";
	ProgressText = "&Progress:NumberCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Farlight Crystals (Forest) ";
	ProgressText = "&Progress:NumberCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 8 Farlight Crystals (Mines) ";
	ProgressText = "&Progress:NumberCollected& / &Goal:CollectionGoal&";
}}, false, true)

Script name: I like Potatoes
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 1000000;
	ItemIds = {"Red Potato"};
}}, {{
	Badge = 1695156608904630;
	Block = {
		Id = "Technoblade Trophy";
		Count = 1;
	};
}}, {{
	Title = "Harvest 1M Red Potatoes";
	ProgressText = "";
}}, true, true)

Script name: Farlight Crystals Mire
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"Collection"}, {{
	CollectionGoal = 8;
	CollectionFolder = workspace.Collectables.Farlight[4];
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Forest;
}}, {{
	Badge = 1501823280676268;
}}, {{
	Title = "Collect 8 Farlight Mire (Mire) ";
	ProgressText = "&Progress:NumberCollected& / &Goal:CollectionGoal&";
}}, false, true)

Script name: Arachnella
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob"}, {{
	KillGoal = 1;
	MobIds = {"Arachnella"};
}}, {{
	Badge = 3525405320966087;
}}, {{
	Title = "Defeat Arachnella";
	ProgressText = "";
}}, true, true)

Script name: Collect Trick or Treat Bag
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 1;
	ItemIds = {"Trick or Treat Bag"};
}}, {{
	Badge = 3740527418650051;
}, nil}, {{
	Title = "Get a Trick or Treat Bag";
	ProgressText = "";
}}, true, true)

Script name: Reached Darkfang Mire
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(2036, 44, 346.5);
	MinDistance = 30;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Forest;
}}, {{
	Badge = 818578563135996;
}, nil}, {{
	Title = "Reach the Darkfang Mire";
	ProgressText = "";
}}, true, true)

Script name: Secret Obby
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(331.722, -10.239, 1791.60);
	MinDistance = 15;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 3825050943307425;
}}, {{
	Title = "Secret Obby";
	ProgressText = "";
}}, true, true)

Script name: Spider Killer
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob"}, {{
	KillGoal = 1000;
	MobIds = {"Darkfang Spider"};
}}, {{
	Badge = 1256138218552038;
	Block = {
		Id = "Spider Portrait";
		Count = 1;
	};
}}, {{
	Title = "Defeat 1000 Darkfang Spider";
	ProgressText = "";
}}, true, true)

Script name: Rebel
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(-738.76, 318.785, 6384.87);
	MinDistance = 15;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Mines;
}}, {{
	Badge = 2549792420814050;
}}, {{
	Title = "Rebel";
	ProgressText = "";
}}, true, true)

Script name: Licensed to Fly
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(4848.81, 202.087, 1668.60);
	MinDistance = 10;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Citadel;
}}, {{
	Badge = 3355874897735542;
}}, {{
	Title = "Licensed to Fly";
	ProgressText = "";
}}, true, true)

Script name: Mouse
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage.CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"CharacterPosition"}, {{
	TargetPosition = Vector3.new(-9873.8, 1321.09, 6238.30);
	MinDistance = 15;
	PlaceId = require(ReplicatedStorage.CommonModules.CoreUtil).PlaceIds.Mines;
}}, {{
	Badge = 4010316642131092;
}}, {{
	Title = "Mouse";
	ProgressText = "";
}}, true, true)

Script name: ValentinesDay Badge
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"PlayerInvite", "PlayerInvite", "PlayerInvite"}, {{
	InviteGoal = 1;
	NewPlayersOnly = false;
}, {
	InviteGoal = 5;
	NewPlayersOnly = false;
}, {
	InviteGoal = 10;
	NewPlayersOnly = false;
}}, {{
	Block = {
		Id = "White Heart Block";
		Count = 1;
	};
}, {
	Badge = 2511301835509779;
	Block = {
		Id = "Red Heart Block";
		Count = 1;
	};
}, {
	Block = {
		Id = "Pink Heart Block";
		Count = 1;
	};
}}, {{
	Title = "Invite 1 new players to High Realms ";
	ProgressText = "";
}, {
	Title = "Invite 5 new players to High Realms ";
	ProgressText = "";
}, {
	Title = "Invite 10 new players to High Realms ";
	ProgressText = "";
}}, true, true)

Script name: Lumber Yard
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 250;
	ItemIds = {"Oak Wood"};
}, {
	CollectionGoal = 250;
	ItemIds = {"Cherry Wood"};
}, {
	CollectionGoal = 100;
	ItemIds = {"Ash Wood"};
}, {
	CollectionGoal = 100;
	ItemIds = {"Mahogany Wood"};
}, {
	CollectionGoal = 50;
	ItemIds = {"Dark Hollow Wood"};
}, {
	CollectionGoal = 50;
	ItemIds = {"Web Wood"};
}}, {}, {{
	Title = "Collect 250 Wood from Oak Trees ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 250 Wood from Cherry Trees ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 100 Wood from Ash Trees ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 100 Wood from Mahogany Trees ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 50 Wood from Dark Hollow Trees ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 50 Wood from Web Wood Trees ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

Script name: Slime Infestation
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob", "KillMob", "KillMob", "KillMob"}, {{
	KillGoal = 100;
	MobIds = {"Green Slime"};
}, {
	KillGoal = 75;
	MobIds = {"Slimegore"};
}, {
	KillGoal = 40;
	MobIds = {"Pink Slime"};
}, {
	KillGoal = 25;
	MobIds = {"Ancient Slime"};
}}, {}, {{
	Title = "Kill 100 Green Slimes ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}, {
	Title = "Kill 75 Slimegores ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}, {
	Title = "Kill 40 Pink Slimes ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}, {
	Title = "Kill 25 Ancient Slimes ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}}, false, false)

Script name: The Spider Queen's Wrath
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob", "KillMob"}, {{
	KillGoal = 100;
	MobIds = {"Darkfang Spider"};
}, {
	KillGoal = 1;
	MobIds = {"Arachnella"};
}}, {nil, nil}, {{
	Title = "Kill 100 Darkfang Spiders ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}, {
	Title = "Kill 1 Arachnella ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}}, true, false)

Script name: Fishing Frenzy
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 25;
	ItemIds = {"Carp"};
}, {
	CollectionGoal = 25;
	ItemIds = {"Tilapia"};
}, {
	CollectionGoal = 25;
	ItemIds = {"King Salmon"};
}, {
	CollectionGoal = 25;
	ItemIds = {"Shrimp"};
}}, {}, {{
	Title = "Catch 25 Carps fishing ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 25 Tilapia fishing ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 25 King Salmon fishing ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Catch 25 Shrimp fishing ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, false, false)

Script name: Enchanted Forest
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect"}, {{
	CollectionGoal = 5;
	ItemIds = {"Enchantment Rune"};
}}, {}, {{
	Title = "Find 5 Enchantment Runes ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

Script name: Purification
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"KillMob", "InventoryCollect"}, {{
	KillGoal = 50;
	MobIds = {"GrimThorn"};
}, {
	CollectionGoal = 50;
	ItemIds = {"Dark Hollow Wood"};
}}, {}, {{
	Title = "Kill 50 GrimThorns ";
	ProgressText = "&Progress:MobsKilled& / &Goal:KillGoal&";
}, {
	Title = "Collect 50 Wood from Dark Hollow Trees ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

Script name: Petal Pursuit
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 20;
	ItemIds = {"Black Poppy Flower"};
}, {
	CollectionGoal = 20;
	ItemIds = {"Blue Poppy Flower"};
}, {
	CollectionGoal = 20;
	ItemIds = {"Green Poppy Flower"};
}, {
	CollectionGoal = 20;
	ItemIds = {"Red Poppy Flower"};
}, {
	CollectionGoal = 20;
	ItemIds = {"White Poppy Flower"};
}, {
	CollectionGoal = 20;
	ItemIds = {"Yellow Poppy Flower"};
}, {
	CollectionGoal = 20;
	ItemIds = {"Mire Lotus"};
}}, {}, {{
	Title = "Collect 20 Black Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 20 Blue Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 20 Green Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 20 Red Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 20 White Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 20 Yellow Poppy Flowers ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 20 Mire Lotus ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, false, false)

Script name: Veins Beneath the Roots
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Task.TaskDefinition).new(script.Name, script.Parent.Name, {}, {"InventoryCollect", "InventoryCollect", "InventoryCollect"}, {{
	CollectionGoal = 250;
	ItemIds = {"Amber"};
}, {
	CollectionGoal = 250;
	ItemIds = {"Granite"};
}, {
	CollectionGoal = 250;
	ItemIds = {"Limestone"};
}}, {}, {{
	Title = "Collect 250 Amber from the Amber Mines ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 250 Granite from the Mire Mines ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}, {
	Title = "Collect 250 Limestone from the Mire Mines ";
	ProgressText = "&Progress:ItemsCollected& / &Goal:CollectionGoal&";
}}, true, false)

Script name: TaskType
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: TaskTypeDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.ProgressTemplate = arg2
	module.ActivationFunction = arg3
	module.IsCompleted = arg4
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: CharacterPosition
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	Completed = false;
}, function(arg1, arg2) -- Line 12
	--[[ Upvalues[3]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Players_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var6
	if not RunService_upvr:IsServer() then return end
	local Player = arg1.Player
	local var8_upvr = arg1.Progress[arg2]
	local var9_upvr = arg1.Def.TaskParams[arg2]
	if var8_upvr.Completed == true then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	local function CharacterAdded(arg1_2) -- Line 29
		--[[ Upvalues[3]:
			[1]: var9_upvr (readonly)
			[2]: var8_upvr (readonly)
			[3]: BindableEvent_upvr (readonly)
		]]
		local HumanoidRootPart = arg1_2:WaitForChild("HumanoidRootPart")
		while HumanoidRootPart and HumanoidRootPart.Parent and task.wait() do
			if (HumanoidRootPart.Position - var9_upvr.TargetPosition).Magnitude <= var9_upvr.MinDistance then
				var8_upvr.Completed = true
				BindableEvent_upvr:Fire(true)
				return
			end
		end
	end
	var6 = nil
	if var9_upvr.PlaceId == game.PlaceId then
		if Player.Character then
			coroutine.wrap(CharacterAdded)(Player.Character)
		end
		var6 = Player.CharacterAdded:Connect(CharacterAdded)
	end
	repeat
		local any_CustomYeild_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
	until type(any_CustomYeild_result1) == "boolean" and any_CustomYeild_result1 == Player
	BindableEvent_upvr:Destroy()
	if var6 then
		var6:Disconnect()
	end
	if type(any_CustomYeild_result1) ~= "boolean" or not any_CustomYeild_result1 then
	end
	return nil
end, function(arg1, arg2, arg3) -- Line 60
	return arg2.Completed
end)

Script name: InventoryCollect
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsCollected = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	if not RunService_upvr:IsServer() then return end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.CollectionGoal <= var9_upvr.ItemsCollected then
		return true
	end
	local var11
	if arg1.TaskSavedData.IsEvent and not TaskService_upvr.CurrentEvent then
		return false
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var11 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var11 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var15 = var11
		var11 = type(var15)
	until var11 == "boolean" and var15 == Player_upvr
	var11 = BindableEvent_upvr:Destroy
	var11()
	var11 = var11.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 34
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: arg1 (readonly)
			[4]: var9_upvr (readonly)
			[5]: TaskService_upvr (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [6] 5. Error Block 3 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [6] 5. Error Block 3 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [23] 16. Error Block 6 start (CF ANALYSIS FAILED)
		do
			return
		end
		-- KONSTANTERROR: [23] 16. Error Block 6 end (CF ANALYSIS FAILED)
	end):Disconnect
	var11()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var11 = var15
		return var11
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var11 = nil
	end
	return var11
end, function(arg1, arg2, arg3) -- Line 74
	local var17
	if arg3.CollectionGoal > arg2.ItemsCollected then
		var17 = false
	else
		var17 = true
	end
	return var17
end)

Script name: PlaceBlocks
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	BlocksPlaced = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.BlockGoal <= var9_upvr.BlocksPlaced then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var15 = var7
		var7 = type(var15)
	until var7 == "boolean" and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [6] 5. Error Block 3 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [6] 5. Error Block 3 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [14] 10. Error Block 6 start (CF ANALYSIS FAILED)
		do
			return
		end
		-- KONSTANTERROR: [14] 10. Error Block 6 end (CF ANALYSIS FAILED)
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 71
	local var17
	if arg3.BlockGoal > arg2.BlocksPlaced then
		var17 = false
	else
		var17 = true
	end
	return var17
end)

Script name: InPlace
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	IsInPlace = false;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [5] 5. Error Block 2 start (CF ANALYSIS FAILED)
	do
		return
	end
	-- KONSTANTERROR: [5] 5. Error Block 2 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 6. Error Block 3 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [6] 6. Error Block 3 end (CF ANALYSIS FAILED)
end, function(arg1, arg2, arg3) -- Line 45
	return arg2.IsInPlace
end)

Script name: Economy
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsTraded = 0;
	PriceTraded = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if (var10_upvr.ItemTradeGoal or math.huge) <= var9_upvr.ItemsTraded or (var10_upvr.PriceTradeGoal or math.huge) <= var9_upvr.PriceTraded then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var17 = var7
		var7 = type(var17)
	until var7 == "boolean" and var17 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4, arg5, arg6) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "Economy" or arg2_2 ~= Player_upvr or arg3 ~= var10_upvr.EconType or arg4 and arg4 ~= var10_upvr.ItemId then
		else
			if var10_upvr.ItemTradeGoal then
				local var14 = var9_upvr
				var14.ItemsTraded += math.clamp(arg5, 0, var10_upvr.ItemTradeGoal)
			end
			if var10_upvr.PriceTradeGoal then
				local var15 = var9_upvr
				var15.PriceTraded += math.clamp(arg6, 0, var10_upvr.PriceTradeGoal)
			end
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if (var10_upvr.ItemTradeGoal or math.huge) <= var9_upvr.ItemsTraded or (var10_upvr.PriceTradeGoal or math.huge) <= var9_upvr.PriceTraded then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var17
		return var7
	end
	if type(var17) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 52
	local var19 = true
	if (arg3.ItemTradeGoal or math.huge) > arg2.ItemsTraded then
		if (arg3.PriceTradeGoal or math.huge) > arg2.PriceTraded then
			var19 = false
		else
			var19 = true
		end
	end
	return var19
end)

Script name: Crafting
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsCrafted = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.CraftingGoal <= var9_upvr.ItemsCrafted then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var16 = var7
		var7 = type(var16)
	until var7 == "boolean" and var16 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "Crafting" or arg3 ~= var10_upvr.ItemId or arg2_2 ~= Player_upvr then
		else
			local var14 = var9_upvr
			var14.ItemsCrafted += math.clamp(arg4, 0, var10_upvr.CraftingGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.CraftingGoal <= var9_upvr.ItemsCrafted then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var16
		return var7
	end
	if type(var16) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 51
	local var18
	if arg3.CraftingGoal > arg2.ItemsCrafted then
		var18 = false
	else
		var18 = true
	end
	return var18
end)

Script name: Collection
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local RunService_upvr = game:GetService("RunService")
local Streamable_upvr = require(ReplicatedStorage_upvr.Packages.Streamable).Streamable
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	NumberCollected = 0;
	CollectedItems = {};
}, function(arg1, arg2) -- Line 15
	--[[ Upvalues[5]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: Streamable_upvr (readonly)
		[5]: Players_upvr (readonly)
	]]
	local var75_upvr = arg1.Progress[arg2]
	local var76_upvr = arg1.Def.TaskParams[arg2]
	local CollectionFolder_upvr = var76_upvr.CollectionFolder
	local BindableEvent_upvr_2 = Instance.new("BindableEvent")
	local DestroyCollection
	if DestroyCollection then
		DestroyCollection = var76_upvr.PlaceId
		if DestroyCollection == game.PlaceId then
			function DestroyCollection(arg1_9) -- Line 35
				--[[ Upvalues[1]:
					[1]: Streamable_upvr (copied, readonly)
				]]
				local function _(arg1_10, arg2_6) -- Line 36
					arg1_10:Destroy()
				end
				arg1_9:Destroy()
			end
			for _, v in pairs(var75_upvr.CollectedItems) do
				local function _(arg1_11, arg2_7) -- Line 36
					arg1_11:Destroy()
				end
				CollectionFolder_upvr:FindFirstChild(v):Destroy()
			end
			Knit_upvr.GetService("TaskService").UpdateTask:Connect(function(arg1_12) -- Line 47
				--[[ Upvalues[5]:
					[1]: arg1 (readonly)
					[2]: arg2 (readonly)
					[3]: var75_upvr (readonly)
					[4]: CollectionFolder_upvr (readonly)
					[5]: Streamable_upvr (copied, readonly)
				]]
				if arg1_12.Id ~= arg1.Id then
				elseif #arg1_12.Progress[arg2].CollectedItems ~= #var75_upvr.CollectedItems then
					for _, v_4 in pairs(arg1_12.Progress[arg2].CollectedItems) do
						if not table.find(var75_upvr.CollectedItems, v_4) then
							local SOME_2 = CollectionFolder_upvr:FindFirstChild(v_4)
							if SOME_2 then
								local function _(arg1_13, arg2_8) -- Line 36
									arg1_13:Destroy()
								end
								SOME_2:Destroy()
							end
						end
					end
				end
			end)
			return
		end
	end
	DestroyCollection = #var75_upvr.CollectedItems
	if DestroyCollection == var76_upvr.CollectionGoal then
		DestroyCollection = true
		return DestroyCollection
	end
	DestroyCollection = var76_upvr.PlaceId
	if DestroyCollection == game.PlaceId then
		DestroyCollection = pairs(CollectionFolder_upvr:GetChildren())
		local pairs_result1_2, pairs_result2_3, pairs_result3_4 = pairs(CollectionFolder_upvr:GetChildren())
		for _, _ in pairs_result1_2, pairs_result2_3, pairs_result3_4 do
			-- KONSTANTWARNING: Failed to evaluate expression, replaced with nil [121.17]
			local Name_upvr_2 = nil.Name
			local var98_upvr
			local function INLINED_3() -- Internal function, doesn't exist in bytecode
				var98_upvr = nil.PrimaryPart
				-- KONSTANTERROR: Expression was reused, decompilation is incorrect
				return var98_upvr
			end
			if not nil:IsA("Model") or not INLINED_3() then
				var98_upvr = nil
			end
			if table.find(var75_upvr.CollectedItems, Name_upvr_2) then
			else
				local Player_upvr = arg1.Player
				local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
				local var102_upvw
				local TaskService_upvr_2 = Knit_upvr.GetService("TaskService")
				local DataHandlerService_upvr = Knit_upvr.GetService("DataHandlerService")
				local PlayerService_upvr = Knit_upvr.GetService("PlayerService")
				var102_upvw = var98_upvr.Touched:Connect(function(arg1_14) -- Line 76
					--[[ Upvalues[13]:
						[1]: Players_upvr (copied, readonly)
						[2]: Player_upvr (readonly)
						[3]: CoreUtil_upvr (readonly)
						[4]: var102_upvw (read and write)
						[5]: var75_upvr (readonly)
						[6]: Name_upvr_2 (readonly)
						[7]: TaskService_upvr_2 (readonly)
						[8]: arg1 (readonly)
						[9]: var98_upvr (readonly)
						[10]: DataHandlerService_upvr (readonly)
						[11]: PlayerService_upvr (readonly)
						[12]: var76_upvr (readonly)
						[13]: BindableEvent_upvr_2 (readonly)
					]]
					if Players_upvr:GetPlayerFromCharacter(arg1_14.Parent) == Player_upvr and CoreUtil_upvr:ValidateHumanoid(Player_upvr.Character) then
						var102_upvw:Disconnect()
						table.insert(var75_upvr.CollectedItems, Name_upvr_2)
						var75_upvr.NumberCollected = #var75_upvr.CollectedItems
						TaskService_upvr_2.Client.UpdateTask:Fire(Player_upvr, arg1)
						if arg1.Id == "Farlight Crystals" or var98_upvr:IsDescendantOf(workspace.Collectables.Farlight) then
							local any_GetData_result1 = CoreUtil_upvr:GetData(Player_upvr, DataHandlerService_upvr)
							if not any_GetData_result1 then return end
							local Miscellaneous = any_GetData_result1.Statistics.Miscellaneous
							Miscellaneous["Farlight Crystals Found"] += 1
							TaskService_upvr_2.Client.StatsUpdated:Fire(Player_upvr, any_GetData_result1.Statistics)
							PlayerService_upvr.Client.Warn:Fire(Player_upvr, "You've collected a farlight crystal")
						end
						Player_upvr.Character.Humanoid.MaxHealth = PlayerService_upvr:UpdateHealth(Player_upvr)
						if #var75_upvr.CollectedItems == var76_upvr.CollectionGoal then
							BindableEvent_upvr_2:Fire(true)
						end
					end
				end)
				table.insert({}, var102_upvw)
			end
		end
	end
	repeat
		pairs_result1_2 = CoreUtil_upvr:CustomYeild(nil, BindableEvent_upvr_2.Event, Players_upvr.PlayerRemoving)
		local var108 = pairs_result1_2
	until var108 == true and var108 == Player_upvr
	pairs_result1_2 = BindableEvent_upvr_2:Destroy
	pairs_result1_2()
	pairs_result1_2 = pairs
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	pairs_result1_2 = pairs_result1_2({})
	local pairs_result1_2_result1, pairs_result1_2_result2, pairs_result1_2_result3 = pairs_result1_2({})
	for _, v_3 in pairs_result1_2_result1, pairs_result1_2_result2, pairs_result1_2_result3 do
		v_3:Disconnect()
	end
	local function INLINED_4() -- Internal function, doesn't exist in bytecode
		pairs_result1_2_result1 = var108
		return pairs_result1_2_result1
	end
	if type(var108) ~= "boolean" or not INLINED_4() then
		pairs_result1_2_result1 = nil
	end
	return pairs_result1_2_result1
end, function(arg1, arg2, arg3) -- Line 120
	local var113
	if #arg2.CollectedItems ~= arg3.CollectionGoal then
		var113 = false
	else
		var113 = true
	end
	return var113
end)

Script name: CoinBalance
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	CoinsCollected = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local any_GetData_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(Player_upvr, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1_upvr then return end
	if (var10_upvr.CoinsCollectGoal or math.huge) <= var9_upvr.CoinsCollected or (var10_upvr.BalanceGoal or math.huge) <= any_GetData_result1_upvr.Coins then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var18 = var7
		var7 = type(var18)
	until var7 == "boolean" and var18 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3) -- Line 38
		--[[ Upvalues[7]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: any_GetData_result1_upvr (readonly)
			[7]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "CoinsChanged" or arg2_2 ~= Player_upvr then
		else
			if var10_upvr.CoinsCollectGoal then
				local var16 = var9_upvr
				var16.CoinsCollected += math.clamp(arg3, 0, var10_upvr.CoinsCollectGoal)
			end
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if (var10_upvr.CoinsCollectGoal or math.huge) <= var9_upvr.CoinsCollected or (var10_upvr.BalanceGoal or math.huge) <= any_GetData_result1_upvr.Coins then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var18
		return var7
	end
	if type(var18) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 60
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: RunService_upvr (readonly)
	]]
	local var20
	if RunService_upvr:IsServer() then
		local any_GetData_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(arg1, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		var20 = true
		if (arg3.CoinsCollectGoal or math.huge) > arg2.CoinsCollected then
			if (arg3.BalanceGoal or math.huge) > any_GetData_result1.Coins then
				var20 = false
			else
				var20 = true
			end
		end
		return var20
	end
	if (arg3.CoinsCollectGoal or math.huge) > arg2.CoinsCollected then
		if (arg3.BalanceGoal or math.huge) > Knit_upvr.GetController("PlayerController").Coins then
		else
		end
	end
	return true
end)

Script name: Level
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	XpEarned = 0;
	LevelsEarned = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
	local any_GetData_result1_upvr = CoreUtil_upvr:GetData(Player_upvr, Knit_upvr.GetService("DataHandlerService"))
	if not any_GetData_result1_upvr then return end
	if (var10_upvr.XpGoal or math.huge) <= var9_upvr.XpEarned or (var10_upvr.CurrentLevelGoal or math.huge) <= var9_upvr.LevelsEarned then
		return true
	end
	local next_result1_2_upvr, next_result2_2_upvr, next_result3_upvw = next(var10_upvr.LevelPath)
	if type(next_result1_2_upvr) == "string" then
		local next_result1_3, next_result2_4 = next(next_result2_2_upvr)
		_ = next_result1_3 -- Setting global
		next_result3_upvw = next_result2_4
	end
	if next_result2_2_upvr == "Overall" then
		-- KONSTANTWARNING: GOTO [111] #80
	end
	if next_result3_upvw == "Overall" then
	else
	end
	local var19
	if var10_upvr.CurrentLevelGoal and var10_upvr.CurrentLevelGoal <= CoreUtil_upvr:SubMasteryLevelFromXP(any_GetData_result1_upvr.Masteries[next_result1_2_upvr][next_result3_upvw]) then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var19 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var19 = CoreUtil_upvr:CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var37 = var19
		var19 = type(var37)
	until var19 == "boolean" and var37 == Player_upvr
	var19 = BindableEvent_upvr:Destroy
	var19()
	var19 = var19.Event:Connect(function(arg1_2, arg2_2, arg3, arg4, arg5) -- Line 53
		--[[ Upvalues[11]:
			[1]: Player_upvr (readonly)
			[2]: next_result2_2_upvr (readonly)
			[3]: next_result3_upvw (read and write)
			[4]: next_result1_2_upvr (readonly)
			[5]: var10_upvr (readonly)
			[6]: var9_upvr (readonly)
			[7]: TaskService_upvr (readonly)
			[8]: arg1 (readonly)
			[9]: CoreUtil_upvr (readonly)
			[10]: any_GetData_result1_upvr (readonly)
			[11]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "LevelUpdated" or arg2_2 ~= Player_upvr then
		else
			local next_result1_4, next_result2_3, next_result3 = next(arg3)
			if type(next_result1_4) == "string" then
				local next_result1_6, next_result2_6 = next(next_result2_3)
				_ = next_result1_6 -- Setting global
			end
			local var27
			if next_result2_3 == next_result2_2_upvr or next_result2_6 == next_result3_upvw and next_result1_4 == next_result1_2_upvr then
				if var10_upvr.XpGoal then
					local var28 = var9_upvr
					var27 = 0
					var28.XpEarned += math.clamp(arg4, var27, var10_upvr.XpGoal)
				end
				if var10_upvr.CurrentLevelGoal then
					local var29 = var9_upvr
					var27 = 0
					var29.LevelsEarned += math.clamp(arg5, var27, var10_upvr.CurrentLevelGoal)
				end
				TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
				var27 = var10_upvr
				local function INLINED() -- Internal function, doesn't exist in bytecode
					var27 = var10_upvr
					return (var27.CurrentLevelGoal or math.huge) <= var9_upvr.LevelsEarned
				end
				if (var27.XpGoal or math.huge) <= var9_upvr.XpEarned or INLINED() then
				end
				local next_result1_5, next_result2_5, next_result3_2 = next(var10_upvr.LevelPath)
				if type(next_result1_5) == "string" then
					local next_result1, next_result2 = next(next_result2_5)
					_ = next_result1 -- Setting global
					next_result3_2 = next_result2
				end
				if next_result2_5 == "Overall" then
				elseif next_result3_2 == "Overall" then
				else
				end
				local var35
				if var10_upvr.CurrentLevelGoal and var10_upvr.CurrentLevelGoal <= CoreUtil_upvr:SubMasteryLevelFromXP(any_GetData_result1_upvr.Masteries[next_result1_5][next_result3_2]) then
					var35 = true
				end
				if var35 then
					BindableEvent_upvr:Fire(true)
				end
			end
		end
	end):Disconnect
	var19()
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var19 = var37
		return var19
	end
	if type(var37) ~= "boolean" or not INLINED_2() then
		var19 = nil
	end
	return var19
end, function(arg1, arg2, arg3) -- Line 111
	if arg3.CurrentLevelGoal and arg3.CurrentLevelGoal <= arg2.LevelsEarned then
		return true
	end
end)

Script name: MarketPurchase
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	ItemsBought = 0;
	RobuxSpent = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if (var10_upvr.ItemGoal or math.huge) <= var9_upvr.ItemsBought or (var10_upvr.RobuxGoal or math.huge) <= var9_upvr.RobuxSpent then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var17 = var7
		var7 = type(var17)
	until var7 == "boolean" and var17 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "MarketPurchase" or arg2_2 ~= Player_upvr or var10_upvr.ItemIds and not table.find(var10_upvr.ItemIds, arg3) then
		else
			if var10_upvr.ItemGoal then
				local var14 = var9_upvr
				var14.ItemsBought += math.clamp(1, 0, var10_upvr.ItemGoal)
			end
			if var10_upvr.RobuxGoal then
				local var15 = var9_upvr
				var15.RobuxSpent += math.clamp(arg4, 0, var10_upvr.RobuxGoal)
			end
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if (var10_upvr.ItemGoal or math.huge) <= var9_upvr.ItemsBought or (var10_upvr.RobuxGoal or math.huge) <= var9_upvr.RobuxSpent then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var17
		return var7
	end
	if type(var17) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 56
	if (arg3.ItemGoal or math.huge) <= arg2.ItemsBought or (arg3.RobuxGoal or math.huge) <= arg2.RobuxSpent then
		return true
	end
end)

Script name: DamageMob
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	DamageDealt = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.DamageGoal <= var9_upvr.DamageDealt then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var16 = var7
		var7 = type(var16)
	until var7 == "boolean" and var16 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "MobDamage" or arg2_2 ~= Player_upvr or var10_upvr.MobIds and not table.find(var10_upvr.MobIds, arg3) then
		else
			local var14 = var9_upvr
			var14.DamageDealt += math.clamp(1, 0, var10_upvr.DamageGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.DamageGoal <= var9_upvr.DamageDealt then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var16
		return var7
	end
	if type(var16) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 55
	if arg3.DamageGoal <= arg2.DamageDealt then
		return true
	end
end)

Script name: KillMob
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	MobsKilled = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	if not RunService_upvr:IsServer() then return end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.KillGoal <= var9_upvr.MobsKilled then
		return true
	end
	local var11
	if arg1.TaskSavedData.IsEvent and not TaskService_upvr.CurrentEvent then
		return false
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var11 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var11 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var18 = var11
		var11 = type(var18)
	until var11 == "boolean" and var18 == Player_upvr
	var11 = BindableEvent_upvr:Destroy
	var11()
	var11 = var11.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 33
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: arg1 (readonly)
			[5]: TaskService_upvr (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "MobKill" or var10_upvr.MobIds and not table.find(var10_upvr.MobIds, arg3) then
		else
			if arg2_2 == Player_upvr then
				local var14 = var9_upvr
				var14.MobsKilled += math.clamp(1, 0, var10_upvr.KillGoal)
				if arg1.TaskSavedData.PlayerContribution then
					if not arg1.TaskSavedData.PlayerContribution[Player_upvr] then
						arg1.TaskSavedData.PlayerContribution[Player_upvr] = 0
					end
					local PlayerContribution = arg1.TaskSavedData.PlayerContribution
					local var16 = Player_upvr
					PlayerContribution[var16] += 1
					-- KONSTANTWARNING: GOTO [76] #57
				end
			elseif arg1.TaskSavedData.IsEvent then
				task.wait()
			else
				return
			end
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.KillGoal <= var9_upvr.MobsKilled then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var11()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var11 = var18
		return var11
	end
	if type(var18) ~= "boolean" or not INLINED() then
		var11 = nil
	end
	return var11
end, function(arg1, arg2, arg3) -- Line 69
	if arg3.KillGoal <= arg2.MobsKilled then
		return true
	end
end)

Script name: CosmeticChange
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	Changes = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.ChangeGoal <= var9_upvr.Changes then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
	until var15 == true and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3) -- Line 31
		--[[ Upvalues[6]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 ~= "CosmeticChange" or arg2_2 ~= Player_upvr or var10_upvr.CosmeticIds and not table.find(var10_upvr.CosmeticIds, arg3) then
		else
			local var14 = var9_upvr
			var14.Changes += math.clamp(1, 0, var10_upvr.ChangeGoal)
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var10_upvr.ChangeGoal <= var9_upvr.Changes then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 55
	if arg3.ChangeGoal <= arg2.Changes then
		return true
	end
end)

Script name: TimePlayed
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	TimePlayed = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	var7 = Knit_upvr.GetService("DataHandlerService")
	local any_GetData_result1_2_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(Player_upvr, var7)
	if not any_GetData_result1_2_upvr then return end
	var7 = var10_upvr.TimeGoal
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var10_upvr.TotalTimeGoal
		var7 = any_GetData_result1_2_upvr.Statistics
		return (var7 or math.huge) <= var7.Miscellaneous["Time Played"]
	end
	if (var7 or math.huge) <= var9_upvr.TimePlayed or INLINED() then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = coroutine.wrap
	var7 = var7(function() -- Line 36
		--[[ Upvalues[5]:
			[1]: Player_upvr (readonly)
			[2]: var9_upvr (readonly)
			[3]: var10_upvr (readonly)
			[4]: any_GetData_result1_2_upvr (readonly)
			[5]: BindableEvent_upvr (readonly)
		]]
		while game.Players:FindFirstChild(Player_upvr.Name) and task.wait(1) do
			if (var10_upvr.TimeGoal or math.huge) <= var9_upvr.TimePlayed or (var10_upvr.TotalTimeGoal or math.huge) <= any_GetData_result1_2_upvr.Statistics.Miscellaneous["Time Played"] then
				BindableEvent_upvr:Fire(true)
				return
			end
			local var15 = var9_upvr
			var15.TimePlayed += 1
		end
	end)
	var7()
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = Knit_upvr.GetService("TaskService").EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var17 = var7
		var7 = type(var17)
	until var7 == "boolean" and var17 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var7 = var17
		return var7
	end
	if type(var17) ~= "boolean" or not INLINED_2() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 62
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: RunService_upvr (readonly)
	]]
	local var19
	if RunService_upvr:IsServer() then
		var19 = arg1
		local any_GetData_result1 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):GetData(var19, Knit_upvr.GetService("DataHandlerService"))
		if not any_GetData_result1 then return end
		local var21 = true
		var19 = arg2.TimePlayed
		if (arg3.TimeGoal or math.huge) > var19 then
			var19 = any_GetData_result1.Statistics.Miscellaneous["Time Played"]
			if (arg3.TotalTimeGoal or math.huge) > var19 then
				var21 = false
			else
				var21 = true
			end
		end
		return var21
	end
	local any_await_result1, any_await_result2 = Knit_upvr.GetService("TaskService"):GetStats():andThen():await()
	var19 = true
	if (arg3.TimeGoal or math.huge) > arg2.TimePlayed then
		if (arg3.TotalTimeGoal or math.huge) > any_await_result2.Miscellaneous["Time Played"] then
			var19 = false
		else
			var19 = true
		end
	end
	return var19
end)

Script name: DestroyBlocks
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	BlocksDestroyed = 0;
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local Player_upvr = arg1.Player
	local var9_upvr = arg1.Progress[arg2]
	local var10_upvr = arg1.Def.TaskParams[arg2]
	if var10_upvr.BlockGoal <= var9_upvr.BlocksDestroyed then
		return true
	end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	repeat
		local IsEvent = arg1.TaskSavedData.IsEvent
		if IsEvent then
			IsEvent = TaskService_upvr.EventCompleted.Event
		end
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving, IsEvent)
		local var15 = var7
		var7 = type(var15)
	until var7 == "boolean" and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3) -- Line 31
		--[[ Upvalues[6]:
			[1]: var10_upvr (readonly)
			[2]: Player_upvr (readonly)
			[3]: var9_upvr (readonly)
			[4]: TaskService_upvr (readonly)
			[5]: arg1 (readonly)
			[6]: BindableEvent_upvr (readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [6] 5. Error Block 3 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [6] 5. Error Block 3 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [14] 10. Error Block 6 start (CF ANALYSIS FAILED)
		do
			return
		end
		-- KONSTANTERROR: [14] 10. Error Block 6 end (CF ANALYSIS FAILED)
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 51
	local var17
	if arg3.BlockGoal > arg2.BlocksDestroyed then
		var17 = false
	else
		var17 = true
	end
	return var17
end)

Script name: PlayerInvite
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	PlayersInvited = {};
}, function(arg1, arg2) -- Line 13
	--[[ Upvalues[4]:
		[1]: RunService_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local var7
	if not RunService_upvr:IsServer() then return end
	local TaskService_upvr = Knit_upvr.GetService("TaskService")
	local Player_upvr = arg1.Player
	local var10_upvr = arg1.Progress[arg2]
	local var11_upvr = arg1.Def.TaskParams[arg2]
	if var11_upvr.InviteGoal <= #var10_upvr.PlayersInvited then
		return true
	end
	local BindableEvent_upvr = Instance.new("BindableEvent")
	var7 = TaskService_upvr.TaskProgress
	local PlayerService_upvr = Knit_upvr.GetService("PlayerService")
	repeat
		var7 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr.Event, Players_upvr.PlayerRemoving)
		local var15 = var7
		var7 = type(var15)
	until var7 == "boolean" and var15 == Player_upvr
	var7 = BindableEvent_upvr:Destroy
	var7()
	var7 = var7.Event:Connect(function(arg1_2, arg2_2, arg3, arg4) -- Line 33
		--[[ Upvalues[7]:
			[1]: Player_upvr (readonly)
			[2]: var10_upvr (readonly)
			[3]: var11_upvr (readonly)
			[4]: PlayerService_upvr (readonly)
			[5]: TaskService_upvr (readonly)
			[6]: arg1 (readonly)
			[7]: BindableEvent_upvr (readonly)
		]]
		if arg1_2 == "PlayerInvite" then
			print("A player was invited")
		end
		if arg1_2 ~= "PlayerInvite" or arg2_2 ~= Player_upvr or table.find(var10_upvr.PlayersInvited, arg3.Name) or var11_upvr.NewPlayersOnly and not arg4 then
		else
			print("Invite Quest updated!")
			table.insert(var10_upvr.PlayersInvited, arg3.Name)
			PlayerService_upvr.Client.Warn:Fire(Player_upvr, "You've invited a new player : "..arg3.Name.." ("..tostring(#var10_upvr.PlayersInvited)..'/'..tostring(var11_upvr.InviteGoal)..')')
			TaskService_upvr.Client.UpdateTask:Fire(Player_upvr, arg1)
			if var11_upvr.InviteGoal <= #var10_upvr.PlayersInvited then
				BindableEvent_upvr:Fire(true)
			end
		end
	end):Disconnect
	var7()
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7 = var15
		return var7
	end
	if type(var15) ~= "boolean" or not INLINED() then
		var7 = nil
	end
	return var7
end, function(arg1, arg2, arg3) -- Line 60
	local var17
	if arg3.InviteGoal > #arg2.PlayersInvited then
		var17 = false
	else
		var17 = true
	end
	return var17
end)

Script name: NpcInteraction
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local RunService_upvr = game:GetService("RunService")
local Players_upvr = game:GetService("Players")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TaskType.TaskTypeDefinition).new(script.Name, {
	NumberCollected = 0;
	CollectedItems = {};
}, function(arg1, arg2) -- Line 15
	--[[ Upvalues[4]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: RunService_upvr (readonly)
		[4]: Players_upvr (readonly)
	]]
	local Player_upvr_2 = arg1.Player
	local var16_upvr = arg1.Progress[arg2]
	local BindableEvent_upvr_2 = Instance.new("BindableEvent")
	local var19
	if var19 then
		var19 = true
		return var19
	end
	var19 = arg1.Def.TaskParams[arg2].PlaceId
	if var19 == game.PlaceId then
		var19 = RunService_upvr:IsClient()
		if var19 then
			var19 = workspace.TaskRemotes:WaitForChild(Player_upvr_2.Name..'_'..arg1.Id..tostring(arg2))
			var19 = Knit_upvr.GetController("NPCController")
			var19:InitialiseQuestPrompt(arg1, arg2, var19)
			return
		end
		var19 = Instance.new("RemoteEvent", workspace.TaskRemotes)
		local var20 = var19
		var20.Name = Player_upvr_2.Name..'_'..arg1.Id..tostring(arg2)
		var19 = var20.OnServerEvent
		var19 = var19:Connect
		var19(function(arg1_3, arg2_3) -- Line 51
			--[[ Upvalues[3]:
				[1]: Player_upvr_2 (readonly)
				[2]: var16_upvr (readonly)
				[3]: BindableEvent_upvr_2 (readonly)
			]]
			if arg1_3 == Player_upvr_2 and arg2_3 then
				var16_upvr.Result = arg2_3
				BindableEvent_upvr_2:Fire(true)
			end
		end)
	end
	repeat
		var19 = require(ReplicatedStorage_upvr.CommonModules.CoreUtil):CustomYeild(nil, BindableEvent_upvr_2.Event, Players_upvr.PlayerRemoving)
		local var22 = var19
	until var22 == true and var22 == Player_upvr_2
	var19 = BindableEvent_upvr_2:Destroy
	var19()
	if var20 then
		var19 = var20.Parent
		if var19 then
			var19 = var20:Destroy
			var19()
		end
	end
	local function INLINED_2() -- Internal function, doesn't exist in bytecode
		var19 = var22
		return var19
	end
	if type(var22) ~= "boolean" or not INLINED_2() then
		var19 = nil
	end
	return var19
end, function(arg1, arg2, arg3) -- Line 75
	if arg2.Result then
		return true
	end
end)

Script name: MobBehaviour
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: MobBehaviourDefinition
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.MobTypes = arg2
	module.MobLimit = arg3
	module.RespawnTime = arg4
	module.SpawnRadius = arg5
	module.AggroRange = arg6
	module.LeashRange = arg7
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

Script name: Melee Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local SimplePath_upvr = require(ReplicatedStorage_upvr.Packages.SimplePath)
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.MobBehaviour.MobBehaviourDefinition).new(script.Name, false)
function any_new_result1.Aggro(arg1, arg2) -- Line 16
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: SimplePath_upvr (readonly)
	]]
	if not CoreUtil_upvr:ValidateTargetPlayer(arg2) or not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
	else
		arg2.Model.Humanoid.WalkSpeed = arg2.Def.AggrovatedSpeed
		arg2.Aggrovated = true
		arg2:StopAnimations()
		arg2.Animations.Run:Play()
		arg2.PathGoal = arg2.TargetPlayer.Character.HumanoidRootPart
		repeat
			if arg2.Path.Status == SimplePath_upvr.StatusType.Active then
				arg2.Path:Stop()
			end
			if CoreUtil_upvr:GetDistanceFromTargetPlayer(arg2) <= 18 then
				local BindableEvent_upvr = Instance.new("BindableEvent")
				arg2.Model.Humanoid:MoveTo(arg2.TargetPlayer.Character.HumanoidRootPart.Position)
				CoreUtil_upvr:CustomYeild(1.3, arg2.TargetChange.Event, BindableEvent_upvr.Event)
				arg2.Model.Humanoid.MoveToFinished:Connect(function() -- Line 42
					--[[ Upvalues[3]:
						[1]: CoreUtil_upvr (copied, readonly)
						[2]: arg2 (readonly)
						[3]: BindableEvent_upvr (readonly)
					]]
					if CoreUtil_upvr:ValidateTargetPlayer(arg2) and CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
						if CoreUtil_upvr:GetDistanceFromTargetPlayer(arg2) <= 18 then
							arg2.Model.Humanoid:MoveTo(arg2.TargetPlayer.Character.HumanoidRootPart.Position)
							return
						end
						BindableEvent_upvr:Fire(true)
					end
				end):Disconnect()
				if 1.3 <= tick() - tick() and CoreUtil_upvr:ValidateTargetPlayer(arg2) then
					arg2.Path:Run(arg2.PathGoal)
					CoreUtil_upvr:CustomYeild(nil, arg2.Path.Reached, arg2.Path.WaypointReached, arg2.TargetChange.Event)
					-- KONSTANTWARNING: GOTO [190] #120
				end
			else
				arg2.Path:Run(arg2.TargetPlayer.Character.HumanoidRootPart)
				local any_CustomYeild_result1, any_CustomYeild_result2, _ = CoreUtil_upvr:CustomYeild(nil, arg2.Path.Reached, arg2.Path.WaypointReached, arg2.TargetChange.Event)
				_ = any_CustomYeild_result1 -- Setting global
				_ = any_CustomYeild_result2 -- Setting global
			end
			if CoreUtil_upvr:ValidateHumanoid(arg2.Model) and arg2.Attacking then
				repeat
					wait()
				until not arg2.Attacking and not CoreUtil_upvr:ValidateHumanoid(arg2.Model)
			end
		until not CoreUtil_upvr:ValidateTargetPlayer(arg2) and not CoreUtil_upvr:ValidateHumanoid(arg2.Model)
		arg2.PathGoal = nil
		arg2.Aggrovated = false
	end
end
function any_new_result1.Patrol(arg1, arg2) -- Line 81
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	arg2.Model.Humanoid.WalkSpeed = arg2.Def.DefultSpeed
	if not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
		local var13
		if arg2.Camp then
			var13 = workspace.MobCamps:FindFirstChild(arg2.Camp.Id)
			local children = var13.Waypoints:GetChildren()
			var13 = nil
			repeat
				var13 = children[math.random(1, #children)]
			until arg2.LastWaypoint ~= var13
			arg2.LastWaypoint = var13
			arg2:StopAnimations()
			arg2.Animations.Walk:Play()
			arg2.PathGoal = var13
			arg2.Path:Run(var13)
			CoreUtil_upvr:CustomYeild(nil, arg2.Path.Reached, arg2.TargetChange.Event)
			arg2.PathGoal = nil
			if not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then return end
			if not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
				local var15 = arg2.Model.PrimaryPart.Size.Y / 2 + arg2.Model.Humanoid.HipHeight
				if math.sqrt(var15 ^ 2 + 144) <= (arg2.Model.PrimaryPart.Position - var13.Position).magnitude then
					arg2.Model:SetPrimaryPartCFrame(var13.CFrame + Vector3.new(0, var15, 0))
				end
				arg2:StopAnimations()
				arg2.Animations.Idle:Play()
				CoreUtil_upvr:CustomYeild(math.random(8, 12), arg2.TargetChange.Event)
			end
		end
	end
end
function any_new_result1.Damaged(arg1, arg2, arg3, arg4, arg5) -- Line 123
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local var24
	if not CoreUtil_upvr:ValidateHumanoid(arg3.Character) or not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
	else
		local tbl = {}
		if not arg2.Thrusting then
			var24 = arg2.Model
			var24 = arg3.Character.HumanoidRootPart
			local BodyVelocity_2 = Instance.new("BodyVelocity")
			if arg5 then
				var24 = 30
			else
				var24 = 18
			end
			BodyVelocity_2.Velocity = Vector3.new(0, 8, 0) + (var24.PrimaryPart.Position - var24.Position).unit * Vector3.new(1, 0, 1) * var24
			BodyVelocity_2.MaxForce = Vector3.new(100000, 100000, 100000)
			BodyVelocity_2.Parent = arg2.Model.PrimaryPart
			if arg5 then
			else
			end
			game:GetService("Debris"):AddItem(BodyVelocity_2, 0.15)
		end
		for _, v_3 in pairs(ReplicatedStorage_upvr.Prefabs.Effects.MobHit:Clone():GetChildren()) do
			if not arg2.Model:FindFirstChild("Flamelet_Body") then
			end
			v_3.Parent = arg2.Model.PrimaryPart
			v_3.Enabled = true
			table.insert(tbl, v_3)
		end
		for _, v_4_upvr in pairs(tbl) do
			v_4_upvr.Enabled = false
			task.delay(2, function() -- Line 149
				--[[ Upvalues[1]:
					[1]: v_4_upvr (readonly)
				]]
				v_4_upvr:Destroy()
			end)
		end
	end
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function any_new_result1.Attack(arg1, arg2) -- Line 156
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local Combo_upvr = arg2.Animations.Combo
	local var36_upvw = 1
	local var37_upvr
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var37_upvr = #arg2.Animations.Combo
		return var37_upvr
	end
	if not Combo_upvr or not INLINED() then
		var37_upvr = 1
	end
	arg2.Attacking = true
	arg2.TargetChange:Fire()
	repeat
		local var38
		local function INLINED_2() -- Internal function, doesn't exist in bytecode
			var38 = arg2.Def
			return var38.CritDamage
		end
		if not Combo_upvr or var36_upvw ~= var37_upvr or not INLINED_2() then
			var38 = arg2.Def
		end
		local function INLINED_3() -- Internal function, doesn't exist in bytecode
			var38 = arg2.Animations.Combo[var36_upvw]
			return var38
		end
		local function INLINED_4() -- Internal function, doesn't exist in bytecode
			var38 = arg2.Animations.Attack
			return var38
		end
		if not Combo_upvr or not INLINED_3() or not INLINED_4() then
			var38 = arg2.Animations.Run
		end
		arg2.Animations.Run:Play()
		arg2.Animations.Idle:Stop()
		if var38 then
			var38:Play()
		end
		local Character = arg2.TargetPlayer.Character
		arg2.Model.Humanoid.WalkSpeed = 32
		arg2.Model.Humanoid:MoveTo(CFrame.new(Character.HumanoidRootPart.Position - (Character.HumanoidRootPart.Position - arg2.Model.PrimaryPart.Position).Unit * 2, Character.HumanoidRootPart.Position).Position)
		local any_CreateHitbox_result1 = CoreUtil_upvr:CreateHitbox(arg2.Model, 5, 10, 5, 0)
		any_CreateHitbox_result1.Anchored = false
		CoreUtil_upvr:WeldToPart(arg2.Model.HumanoidRootPart, any_CreateHitbox_result1)
		local tbl_upvr = {}
		local Damage_upvr = var38.Damage
		local MobService_upvr = Knit_upvr.GetService("MobService")
		local function _(arg1_2) -- Line 198
			--[[ Upvalues[8]:
				[1]: arg2 (readonly)
				[2]: tbl_upvr (readonly)
				[3]: CoreUtil_upvr (copied, readonly)
				[4]: Damage_upvr (readonly)
				[5]: Combo_upvr (readonly)
				[6]: var36_upvw (read and write)
				[7]: var37_upvr (readonly)
				[8]: MobService_upvr (readonly)
			]]
			-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
			local any_GetPlayerFromCharacter_result1 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
			-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [13] 9. Error Block 2 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [13] 9. Error Block 2 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [14] 10. Error Block 3 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [14] 10. Error Block 3 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [20] 15. Error Block 4 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [20] 15. Error Block 4 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [27] 20. Error Block 5 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [27] 20. Error Block 5 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [202] 136. Error Block 16 start (CF ANALYSIS FAILED)
			table.insert(tbl_upvr, any_GetPlayerFromCharacter_result1)
			MobService_upvr.Client.Attacked:Fire(any_GetPlayerFromCharacter_result1)
			-- KONSTANTERROR: [202] 136. Error Block 16 end (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [218] 147. Error Block 17 start (CF ANALYSIS FAILED)
			-- KONSTANTERROR: [218] 147. Error Block 17 end (CF ANALYSIS FAILED)
		end
		arg2.Thrusting = true
		CoreUtil_upvr:CustomYeild(arg2.Def.BehaviourData.TimeBetweenComboAttacks or 1, var38:GetMarkerReachedSignal("Hit"), var38.Stopped)
		arg2.Thrusting = false
		arg2.Animations.Run:Stop()
		arg2.Animations.Idle:Play()
		if var36_upvw == var37_upvr then
		else
		end
		var36_upvw += 1
		if not arg2.Def.BehaviourData.TimeBetweenComboAttacks then
		end
		task.wait((1) - (tick() - tick()))
		any_CreateHitbox_result1:Destroy()
	until 16 < CoreUtil_upvr:GetDistanceFromTargetPlayer(arg2) and not CoreUtil_upvr:ValidateHumanoid(arg2.Model)
	Damage_upvr = arg2.Model
	if CoreUtil_upvr:ValidateHumanoid(Damage_upvr) then
		tbl_upvr = arg2.Animations
		tbl_upvr.Run:Play()
		tbl_upvr = arg2.Model
		tbl_upvr = 18
		tbl_upvr.Humanoid.WalkSpeed = tbl_upvr
	end
	arg2.Attacking = nil
end
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function any_new_result1.Spawn(arg1, arg2, arg3) -- Line 271
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: SimplePath_upvr (readonly)
		[3]: TableUtil_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	if arg2.Model then
		arg2.Model:Destroy()
	end
	local clone = ReplicatedStorage_upvr.Prefabs.Mobs:FindFirstChild(arg2.Id):Clone()
	arg2.Model = clone
	arg2.Model:SetPrimaryPartCFrame(CFrame.new(arg3 + Vector3.new(0, clone.PrimaryPart.Size.Y / 2 + clone.Humanoid.HipHeight, 0)) * (clone.PrimaryPart.CFrame - clone.PrimaryPart.Position))
	arg2.Model.Parent = workspace.Mobs
	arg2.Model.Name = arg2.Index
	local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.MobHealthbar:Clone()
	clone_2.Name = "HealthBar"
	clone_2.Parent = arg2.Model.PrimaryPart
	clone_2.Level.TextLabel.Text = arg2.Def.RecommendedLevel
	arg2:UpdateHealthBar()
	for _, v in pairs(arg2.Model:GetDescendants()) do
		if v:IsA("BasePart") then
			v:SetNetworkOwner(nil)
		end
	end
	arg2.Path = SimplePath_upvr.new(arg2.Model, {
		AgentRadius = 3;
		AgentHeight = 6;
		AgentJumpHeight = 7;
		WaypointSpacing = 6;
		AgentCanJump = true;
	})
	arg2.PathGoal = nil
	arg2.Animator = arg2.Model.Humanoid.Animator
	arg2.Animations = TableUtil_upvr.Copy(arg2.Def.Animations, true)
	CoreUtil_upvr:RecurseTable(arg2.Animations, function(arg1_3, arg2_2, arg3_2) -- Line 314
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		local Animation = Instance.new("Animation", arg2.Model.Humanoid)
		Animation.AnimationId = arg3_2
		arg1_3[arg2_2] = arg2.Animator:LoadAnimation(Animation)
	end)
	arg2.Animations.Idle:Play()
	arg2.Alive = true
	return true
end
function any_new_result1.Start(arg1, arg2) -- Line 327
	--[[ Upvalues[2]:
		[1]: SimplePath_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	arg2.AttackCoolDown = 0
	arg2.Path.Blocked:Connect(function() -- Line 332
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active and not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Path:Stop()
		elseif arg2.PathGoal then
			arg2.Path:Run(arg2.PathGoal)
		end
	end)
	arg2.Path.WaypointReached:Connect(function() -- Line 341
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active and not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Path:Stop()
		end
	end)
	arg2.Path.Error:Connect(function(arg1_4) -- Line 347
		--[[ Upvalues[2]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
		]]
		if arg2.PathGoal then
			if not arg2.Aggrovated then
				arg2.TargetChange:Fire()
				return
			end
			if arg1_4 == SimplePath_upvr.ErrorType.ComputationError then
				task.wait(1)
			end
			arg2.Path:Run(arg2.PathGoal)
		end
	end)
	arg2.Model.Humanoid.StateChanged:Connect(function(arg1_5, arg2_3) -- Line 355
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		if arg2_3 == Enum.HumanoidStateType.FallingDown then
			arg2.Model.Humanoid:ChangeState(Enum.HumanoidStateType.Running)
		end
	end)
	coroutine.wrap(function() -- Line 362
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: arg2 (readonly)
			[3]: arg1 (readonly)
		]]
		while task.wait() and CoreUtil_upvr:ValidateHumanoid(arg2.Model) do
			if CoreUtil_upvr:ValidateTargetPlayer(arg2) and arg2.Aggrovated and arg2.AttackCoolDown <= 0 and CoreUtil_upvr:GetDistanceFromTargetPlayer(arg2) <= 10 then
				arg1:Attack(arg2)
			end
		end
	end)()
	while arg2.Alive and CoreUtil_upvr:ValidateHumanoid(arg2.Model) do
		if arg2.TargetPlayer and CoreUtil_upvr:ValidateTargetPlayer(arg2) then
			arg1:Aggro(arg2)
		else
			arg1:Patrol(arg2)
		end
	end
	if arg2.Alive then
		arg1:Destroy(arg2)
		arg2:Destroy()
	end
end
local TweenService_upvr = game:GetService("TweenService")
function any_new_result1.Death(arg1, arg2) -- Line 388
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: TweenService_upvr (readonly)
	]]
	local pcall_result1, pcall_result2 = pcall(function() -- Line 390
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: arg2 (readonly)
			[3]: TweenService_upvr (copied, readonly)
		]]
		if CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Model.PrimaryPart.Anchored = true
			for _, v_2 in pairs(arg2.Model:GetDescendants()) do
				if v_2:IsA("BasePart") then
					TweenService_upvr:Create(v_2, TweenInfo.new(arg2.Animations.Death.Length), {
						Transparency = 1;
					}):Play()
				end
			end
			local Sound = Instance.new("Sound")
			Sound.Name = "Death"
			Sound:AddTag("SFX")
			Sound.Parent = arg2.Model.PrimaryPart
			Sound.SoundId = arg2.Def.SoundIds.Death[1]
			Sound:Play()
			arg2:StopAnimations()
			arg2.Animations.Death:Play()
			CoreUtil_upvr:CustomYeild(2, arg2.Animations.Death.Ended)
		end
	end)
	if not pcall_result1 then
		warn("Mob Death issue")
		warn(pcall_result2)
	end
end
function any_new_result1.Destroy(arg1, arg2) -- Line 428
	if arg2.Model and arg2.Model.Parent then
		arg2.Model:Destroy()
	end
end
return any_new_result1

Script name: Tarantula Boss Behaviour
  - Script: 


local TweenService_upvr = game:GetService("TweenService")
local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local RunService_upvr = game:GetService("RunService")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local SimplePath_upvr = require(ReplicatedStorage_upvr.Packages.SimplePath)
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.MobBehaviour.MobBehaviourDefinition).new(script.Name, false)
local function partIntersectsPoint_upvr(arg1, arg2, arg3) -- Line 19, Named "partIntersectsPoint"
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 26 start (CF ANALYSIS FAILED)
	local any_pointToObjectSpace_result1 = arg1.CFrame:pointToObjectSpace(arg2)
	local vector3 = Vector3.new(math.abs(any_pointToObjectSpace_result1.X), math.abs(any_pointToObjectSpace_result1.Y), math.abs(any_pointToObjectSpace_result1.Z))
	local Size = arg1.Size
	local var17 = Size / 2
	local var18
	if vector3.X > var18 then
		Size = false
	else
		Size = true
	end
	var18 = vector3.Y
	if var18 > var17.Y then
		-- KONSTANTWARNING: GOTO [48] #33
	end
	-- KONSTANTERROR: [0] 1. Error Block 26 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [47] 32. Error Block 28 start (CF ANALYSIS FAILED)
	if vector3.Z > var17.Z then
		var18 = false
	else
		var18 = true
	end
	if Size then
		if true then
		end
	end
	do
		return var18
	end
	-- KONSTANTERROR: [47] 32. Error Block 28 end (CF ANALYSIS FAILED)
end
function any_new_result1.Aggro(arg1, arg2) -- Line 33
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: SimplePath_upvr (readonly)
	]]
	if not CoreUtil_upvr:ValidateTargetPlayer(arg2) or not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
	else
		arg2.Model.Humanoid.WalkSpeed = arg2.Def.AggrovatedSpeed
		arg2.Aggrovated = true
		arg2:StopAnimations()
		arg2.Animations.Run:Play()
		arg2.PathGoal = arg2.TargetPlayer.Character.HumanoidRootPart
		repeat
			if arg2.Path.Status == SimplePath_upvr.StatusType.Active then
				arg2.Path:Stop()
			end
			arg2.Model.PrimaryPart.Run:Play()
			if CoreUtil_upvr:GetDistanceFromTargetPlayer(arg2) <= 18 then
				local BindableEvent_upvr = Instance.new("BindableEvent")
				arg2.Model.Humanoid:MoveTo(arg2.TargetPlayer.Character.HumanoidRootPart.Position)
				CoreUtil_upvr:CustomYeild(1.3, arg2.TargetChange.Event, BindableEvent_upvr.Event)
				arg2.Model.Humanoid.MoveToFinished:Connect(function() -- Line 60
					--[[ Upvalues[3]:
						[1]: CoreUtil_upvr (copied, readonly)
						[2]: arg2 (readonly)
						[3]: BindableEvent_upvr (readonly)
					]]
					if CoreUtil_upvr:ValidateTargetPlayer(arg2) and CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
						if CoreUtil_upvr:GetDistanceFromTargetPlayer(arg2) <= 18 then
							arg2.Model.Humanoid:MoveTo(arg2.TargetPlayer.Character.HumanoidRootPart.Position)
							return
						end
						BindableEvent_upvr:Fire(true)
					end
				end):Disconnect()
				if 1.3 <= tick() - tick() and CoreUtil_upvr:ValidateTargetPlayer(arg2) then
					if arg2.Path:Run(arg2.TargetPlayer.Character.HumanoidRootPart) then
						CoreUtil_upvr:CustomYeild(nil, arg2.Path.Reached, arg2.TargetChange.Event)
					else
						task.wait(0.33)
					end
					-- KONSTANTWARNING: GOTO [201] #129
				end
			elseif arg2.Path:Run(arg2.TargetPlayer.Character.HumanoidRootPart) then
				BindableEvent_upvr = CoreUtil_upvr:CustomYeild
				BindableEvent_upvr(nil, arg2.Path.Reached, arg2.TargetChange.Event)
			else
				BindableEvent_upvr = task.wait
				BindableEvent_upvr(0.33)
			end
			if CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
				BindableEvent_upvr = arg2.Model.PrimaryPart
				BindableEvent_upvr.Run:Stop()
				if arg2.Attacking then
					repeat
						wait()
					until not arg2.Attacking and not CoreUtil_upvr:ValidateHumanoid(arg2.Model)
				end
			end
		until not CoreUtil_upvr:ValidateTargetPlayer(arg2) and not CoreUtil_upvr:ValidateHumanoid(arg2.Model)
		arg2.PathGoal = nil
		arg2.Aggrovated = false
	end
end
function any_new_result1.Patrol(arg1, arg2) -- Line 114
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
	else
		arg2.Model.Humanoid.WalkSpeed = arg2.Def.DefultSpeed
		if not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
			local var25
			if arg2.Camp then
				var25 = arg2.Model.PrimaryPart
				var25.Run:Play()
				var25 = workspace.MobCamps:FindFirstChild(arg2.Camp.Id)
				local children = var25.Waypoints:GetChildren()
				var25 = nil
				repeat
					var25 = children[math.random(1, #children)]
				until arg2.LastWaypoint ~= var25
				arg2.LastWaypoint = var25
				arg2:StopAnimations()
				arg2.Animations.Walk:Play()
				arg2.PathGoal = var25
				arg2.Path:Run(var25)
				CoreUtil_upvr:CustomYeild(nil, arg2.Path.Reached, arg2.TargetChange.Event)
				arg2.PathGoal = nil
				if not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then return end
				if 16 <= (arg2.Model.PrimaryPart.Position - var25.Position).magnitude then
					arg2.Model:SetPrimaryPartCFrame(var25.CFrame + Vector3.new(0, arg2.Model.PrimaryPart.Size.Y / 2 + arg2.Model.Humanoid.HipHeight, 0))
				end
				arg2.Model.PrimaryPart.Run:Stop()
				if not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
					arg2:StopAnimations()
					arg2.Animations.Idle:Play()
					CoreUtil_upvr:CustomYeild(math.random(8, 12), arg2.TargetChange.Event)
				end
			end
		end
	end
end
function any_new_result1.Damaged(arg1, arg2, arg3, arg4, arg5) -- Line 162
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
	]]
	local var35
	if not arg2.Aggrovated or not CoreUtil_upvr:ValidateHumanoid(arg3.Character) or not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
	else
		local tbl = {}
		if not arg2.Thrusting then
			var35 = arg2.Model
			var35 = arg3.Character.HumanoidRootPart
			local BodyVelocity_2 = Instance.new("BodyVelocity")
			if arg5 then
				var35 = 80
			else
				var35 = 18
			end
			BodyVelocity_2.Velocity = Vector3.new(0, 8, 0) + (var35.PrimaryPart.Position - var35.Position).unit * Vector3.new(1, 0, 1) * var35
			BodyVelocity_2.MaxForce = Vector3.new(100000, 100000, 100000)
			BodyVelocity_2.Parent = arg2.Model.PrimaryPart
			if arg5 then
			else
			end
			game:GetService("Debris"):AddItem(BodyVelocity_2, 0.15)
		end
		for _, v_3 in pairs(ReplicatedStorage_upvr.Prefabs.Effects.MobHit:Clone():GetChildren()) do
			if not arg2.Model:FindFirstChild("Flamelet_Body") then
			end
			v_3.Parent = arg2.Model.PrimaryPart
			v_3.Enabled = true
			table.insert(tbl, v_3)
		end
		for _, v_4_upvr in pairs(tbl) do
			v_4_upvr.Enabled = false
			task.delay(2, function() -- Line 188
				--[[ Upvalues[1]:
					[1]: v_4_upvr (readonly)
				]]
				v_4_upvr:Destroy()
			end)
		end
	end
end
function any_new_result1.WebAttack(arg1, arg2) -- Line 195
	--[[ Upvalues[7]:
		[1]: CoreUtil_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: SimplePath_upvr (readonly)
		[4]: RunService_upvr (readonly)
		[5]: ReplicatedStorage_upvr (readonly)
		[6]: partIntersectsPoint_upvr (readonly)
		[7]: TweenService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if not CoreUtil_upvr:ValidateHumanoid(arg2.Model) or not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
	else
		arg2.Attacking = true
		arg2.TargetChange:Fire()
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active then
			arg2.Path:Stop()
			arg2.Model.Humanoid:MoveTo(Vector3.new(0, 0, 0))
		end
		if arg2.Model.VenomSack:FindFirstChild("Webspit") then
			arg2.Model.VenomSack:FindFirstChild("Webspit"):Play()
		else
			local Sound_4 = Instance.new("Sound")
			Sound_4.Name = "Webspit"
			Sound_4:AddTag("SFX")
			Sound_4.Parent = arg2.Model.VenomSack
			Sound_4.SoundId = arg2.Def.SoundIds.WebAttack
			Sound_4:Play()
		end
		arg2.Animations.Run:Stop()
		arg2.Animations.Idle:Play()
		if arg2.Animations.WebAttack then
			arg2.Animations.WebAttack:Play()
		end
		local tbl_7_upvr = {}
		for _ = 1, 50 do
			local any_GetRandomSpawnPosition_result1 = CoreUtil_upvr:GetRandomSpawnPosition(arg2.Model.HumanoidRootPart.Position, 50, 1.5, false)
			if any_GetRandomSpawnPosition_result1 then
				table.insert(tbl_7_upvr, any_GetRandomSpawnPosition_result1)
			end
		end
		for _, v_5 in pairs(tbl_7_upvr) do
			local Part_2 = Instance.new("Part", workspace)
			Part_2.Position = v_5
			Part_2.Size = Vector3.new(3, 3, 3)
			Part_2.CanCollide = false
			Part_2.Anchored = true
			Part_2.Transparency = 0.5
			Part_2.Color = Color3.fromRGB(255, 0, 0)
			Part_2.CanTouch = false
			table.insert({}, Part_2)
			local var65_upvr
		end
		task.wait(0.8)
		local tbl_6_upvr = {}
		local EffectService_upvr_2 = Knit_upvr.GetService("EffectService")
		coroutine.wrap(function() -- Line 255
			--[[ Upvalues[10]:
				[1]: var65_upvr (readonly)
				[2]: CoreUtil_upvr (copied, readonly)
				[3]: arg2 (readonly)
				[4]: tbl_7_upvr (readonly)
				[5]: tbl_6_upvr (readonly)
				[6]: RunService_upvr (copied, readonly)
				[7]: ReplicatedStorage_upvr (copied, readonly)
				[8]: EffectService_upvr_2 (readonly)
				[9]: partIntersectsPoint_upvr (copied, readonly)
				[10]: TweenService_upvr (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			for _, v_6 in pairs(var65_upvr) do
				v_6:Destroy()
			end
			if not CoreUtil_upvr:ValidateHumanoid(arg2.Model) or not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
			else
				for _, v_10 in pairs(tbl_7_upvr) do
					local Part = Instance.new("Part", workspace)
					Part.Shape = Enum.PartType.Ball
					Part.Position = v_10
					Part.Transparency = 0.5
					Part.Color = Color3.fromRGB(191, 192, 204)
					Part.CanCollide = false
					Part.Anchored = true
					Part.Size = Vector3.new(4, 4, 4)
					tbl_6_upvr[Part] = (v_10 - arg2.Model.VenomSack.CFrame * Vector3.new(0, 2, -2) - 0.5 * Vector3.new(0, -game.Workspace.Gravity, 0) * 1 * 1) / 1
					local var116
				end
				local var117 = 0
				while var117 < 1.01 do
					for i_13, v_11 in pairs(tbl_6_upvr) do
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						i_13.CFrame = CFrame.new(0.5 * Vector3.new(0, -game.Workspace.Gravity, 0) * var117 * var117 + v_11 * var117 + var116)
						local _
					end
				end
				for i_14, _ in pairs(tbl_6_upvr) do
					i_14:Destroy()
				end
				for _, v_13 in pairs(tbl_7_upvr) do
					local clone_upvr = ReplicatedStorage_upvr.Prefabs.Block.SpiderWeb:Clone()
					clone_upvr:SetPrimaryPartCFrame(CFrame.new(v_13))
					clone_upvr.Parent = workspace
					local tbl_5_upvr = {}
					clone_upvr.PrimaryPart.Touched:Connect(function(arg1_2) -- Line 300
						--[[ Upvalues[5]:
							[1]: CoreUtil_upvr (copied, readonly)
							[2]: tbl_5_upvr (readonly)
							[3]: EffectService_upvr_2 (copied, readonly)
							[4]: clone_upvr (readonly)
							[5]: partIntersectsPoint_upvr (copied, readonly)
						]]
						-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
						local any_GetPlayerFromCharacter_result1_4 = game.Players:GetPlayerFromCharacter(arg1_2.Parent)
						-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
						-- KONSTANTERROR: [10] 7. Error Block 2 start (CF ANALYSIS FAILED)
						-- KONSTANTERROR: [10] 7. Error Block 2 end (CF ANALYSIS FAILED)
						-- KONSTANTERROR: [17] 12. Error Block 3 start (CF ANALYSIS FAILED)
						-- KONSTANTERROR: [17] 12. Error Block 3 end (CF ANALYSIS FAILED)
						-- KONSTANTERROR: [90] 68. Error Block 19 start (CF ANALYSIS FAILED)
						EffectService_upvr_2:SetEffect(any_GetPlayerFromCharacter_result1_4, "Slowed", {
							Tier = 2;
							Active = false;
						})
						table.remove(tbl_5_upvr, table.find(tbl_5_upvr, any_GetPlayerFromCharacter_result1_4))
						-- KONSTANTERROR: [90] 68. Error Block 19 end (CF ANALYSIS FAILED)
						-- KONSTANTERROR: [112] 85. Error Block 18 start (CF ANALYSIS FAILED)
						-- KONSTANTERROR: [112] 85. Error Block 18 end (CF ANALYSIS FAILED)
					end)
					task.delay(3, function() -- Line 333
						--[[ Upvalues[2]:
							[1]: clone_upvr (readonly)
							[2]: TweenService_upvr (copied, readonly)
						]]
						for _, v_14 in pairs(clone_upvr:GetDescendants()) do
							if v_14:IsA("Texture") then
								TweenService_upvr:Create(v_14, TweenInfo.new(1), {
									Transparency = 1;
								}):Play()
							end
						end
						task.wait(1)
						clone_upvr:Destroy()
					end)
					local _
				end
			end
		end)()
		arg2.Attacking = nil
	end
end
function any_new_result1.SpitAttack(arg1, arg2) -- Line 350
	--[[ Upvalues[6]:
		[1]: CoreUtil_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: SimplePath_upvr (readonly)
		[4]: ReplicatedStorage_upvr (readonly)
		[5]: RunService_upvr (readonly)
		[6]: TweenService_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	if not CoreUtil_upvr:ValidateHumanoid(arg2.Model) or not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
	else
		arg2.Attacking = true
		arg2.TargetChange:Fire()
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active then
			arg2.Path:Stop()
			arg2.Model.Humanoid:MoveTo(Vector3.new(0, 0, 0))
		end
		if arg2.Model.VenomSack:FindFirstChild("VenomSpit") then
			arg2.Model.VenomSack:FindFirstChild("VenomSpit"):Play()
		else
			local Sound_2 = Instance.new("Sound")
			Sound_2.Name = "VenomSpit"
			Sound_2:AddTag("SFX")
			Sound_2.Parent = arg2.Model.VenomSack
			Sound_2.SoundId = arg2.Def.SoundIds.SpitAttack
			Sound_2:Play()
		end
		arg2.Animations.Run:Stop()
		arg2.Animations.Idle:Play()
		if arg2.Animations.SpitAttack then
			arg2.Animations.SpitAttack:Play()
		end
		local tbl_8_upvr = {}
		for _ = 1, 20 do
			local any_GetRandomSpawnPosition_result1_2 = CoreUtil_upvr:GetRandomSpawnPosition(arg2.Model.HumanoidRootPart.Position, 60, 0.05, false)
			if any_GetRandomSpawnPosition_result1_2 then
				table.insert(tbl_8_upvr, any_GetRandomSpawnPosition_result1_2)
			end
		end
		for _, v_7 in pairs(tbl_8_upvr) do
			local Part_4 = Instance.new("Part", workspace)
			Part_4.Shape = Enum.PartType.Cylinder
			Part_4.Position = v_7
			Part_4.Size = Vector3.new(0.10000, 6, 6)
			Part_4.Orientation = Vector3.new(0, 90, 90)
			Part_4.CanCollide = false
			Part_4.Anchored = true
			Part_4.Transparency = 0.5
			Part_4.Color = Color3.fromRGB(255, 0, 0)
			Part_4.CanTouch = false
			table.insert({}, Part_4)
			local var161_upvr
		end
		task.wait(0.8)
		local tbl_9_upvr = {}
		local tbl_4_upvr = {}
		local EffectService_upvr = Knit_upvr.GetService("EffectService")
		coroutine.wrap(function() -- Line 411
			--[[ Upvalues[10]:
				[1]: var161_upvr (readonly)
				[2]: ReplicatedStorage_upvr (copied, readonly)
				[3]: CoreUtil_upvr (copied, readonly)
				[4]: arg2 (readonly)
				[5]: tbl_8_upvr (readonly)
				[6]: tbl_9_upvr (readonly)
				[7]: RunService_upvr (copied, readonly)
				[8]: tbl_4_upvr (readonly)
				[9]: EffectService_upvr (readonly)
				[10]: TweenService_upvr (copied, readonly)
			]]
			-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
			for _, v_8 in pairs(var161_upvr) do
				v_8.Parent = ReplicatedStorage_upvr
			end
			if not CoreUtil_upvr:ValidateHumanoid(arg2.Model) or not CoreUtil_upvr:ValidateTargetPlayer(arg2) then
				for _, v_9 in pairs(var161_upvr) do
					v_9:Destroy()
				end
			else
				for _, v_15 in pairs(tbl_8_upvr) do
					local Part_3 = Instance.new("Part", workspace)
					Part_3.Shape = Enum.PartType.Ball
					Part_3.Position = v_15
					Part_3.Transparency = 0.5
					Part_3.Color = Color3.fromRGB(38, 255, 0)
					Part_3.CanCollide = false
					Part_3.Anchored = true
					Part_3.Size = Vector3.new(4, 4, 4)
					tbl_9_upvr[Part_3] = (v_15 - arg2.Model.VenomSack.CFrame * Vector3.new(0, 2, -2) - 0.5 * Vector3.new(0, -game.Workspace.Gravity, 0) * 1 * 1) / 1
					local var224
				end
				local var225 = 0
				while var225 < 1.01 do
					for i_18, v_16 in pairs(tbl_9_upvr) do
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						i_18.CFrame = CFrame.new(0.5 * Vector3.new(0, -game.Workspace.Gravity, 0) * var225 * var225 + v_16 * var225 + var224)
						local _
					end
				end
				for _, v_17_upvr in pairs(var161_upvr) do
					v_17_upvr.Color = Color3.fromRGB(47, 255, 0)
					v_17_upvr.Transparency = 0
					v_17_upvr.CanTouch = true
					v_17_upvr.Touched:Connect(function(arg1_3) -- Line 456
						--[[ Upvalues[3]:
							[1]: tbl_4_upvr (copied, readonly)
							[2]: CoreUtil_upvr (copied, readonly)
							[3]: EffectService_upvr (copied, readonly)
						]]
						local any_GetPlayerFromCharacter_result1_3 = game.Players:GetPlayerFromCharacter(arg1_3.Parent)
						if any_GetPlayerFromCharacter_result1_3 and not table.find(tbl_4_upvr, any_GetPlayerFromCharacter_result1_3) then
							table.insert(tbl_4_upvr, any_GetPlayerFromCharacter_result1_3)
							if CoreUtil_upvr:ValidateHumanoid(arg1_3.Parent) then
								EffectService_upvr:SetEffect(any_GetPlayerFromCharacter_result1_3, "Poisoned", {
									Tier = 2;
									Time = 3;
								})
							end
						end
					end)
					v_17_upvr.Parent = workspace
					task.delay(3, function() -- Line 468
						--[[ Upvalues[2]:
							[1]: TweenService_upvr (copied, readonly)
							[2]: v_17_upvr (readonly)
						]]
						TweenService_upvr:Create(v_17_upvr, TweenInfo.new(1), {
							Transparency = 1;
						}):Play()
						task.wait(1)
						v_17_upvr:Destroy()
					end)
				end
				task.wait(1)
				for i_20_upvr, _ in pairs(tbl_9_upvr) do
					TweenService_upvr:Create(i_20_upvr, TweenInfo.new(1), {
						Transparency = 1;
					}):Play()
					task.delay(1, function() -- Line 480
						--[[ Upvalues[1]:
							[1]: i_20_upvr (readonly)
						]]
						i_20_upvr:Destroy()
					end)
				end
			end
		end)()
		arg2.Attacking = nil
	end
end
function any_new_result1.GrabAttack(arg1, arg2) -- Line 491
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	arg2.Attacking = true
	arg2.TargetChange:Fire()
	local Sound = Instance.new("Sound")
	Sound.Name = "GrabAttack"
	Sound:AddTag("SFX")
	Sound.Parent = arg2.Model.VenomSack
	Sound.SoundId = arg2.Def.SoundIds.GrabAttack[math.random(1, #arg2.Def.SoundIds.GrabAttack)]
	Sound:Play()
	arg2.Animations.Run:Play()
	arg2.Animations.Idle:Stop()
	if arg2.Animations.GrabAttack then
		arg2.Animations.GrabAttack:Play()
	end
	local Character = arg2.TargetPlayer.Character
	arg2.Model.Humanoid.WalkSpeed = 32
	arg2.Model.Humanoid:MoveTo(CFrame.new(Character.HumanoidRootPart.Position - (Character.HumanoidRootPart.Position - arg2.Model.PrimaryPart.Position).Unit * 2, Character.HumanoidRootPart.Position).Position)
	local any_CreateHitbox_result1 = CoreUtil_upvr:CreateHitbox(arg2.Model, 15, 15, 15, 0)
	any_CreateHitbox_result1.Anchored = false
	CoreUtil_upvr:WeldToPart(arg2.Model.HumanoidRootPart, any_CreateHitbox_result1)
	local tbl_3_upvr = {}
	local Damage_upvr = arg2.Def.Damage
	local MobService_upvr = Knit_upvr.GetService("MobService")
	local function _(arg1_4) -- Line 534
		--[[ Upvalues[5]:
			[1]: arg2 (readonly)
			[2]: tbl_3_upvr (readonly)
			[3]: CoreUtil_upvr (copied, readonly)
			[4]: Damage_upvr (readonly)
			[5]: MobService_upvr (readonly)
		]]
		local any_GetPlayerFromCharacter_result1_2 = game.Players:GetPlayerFromCharacter(arg1_4.Parent)
		if arg2.Alive and any_GetPlayerFromCharacter_result1_2 and not table.find(tbl_3_upvr, any_GetPlayerFromCharacter_result1_2) and CoreUtil_upvr:ValidateHumanoid(arg1_4.Parent) and CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			local Humanoid = arg1_4.Parent.Humanoid
			Humanoid.Health -= Damage_upvr
			local BodyVelocity = Instance.new("BodyVelocity")
			BodyVelocity.Velocity = (any_GetPlayerFromCharacter_result1_2.Character.HumanoidRootPart.Position - arg2.Model.PrimaryPart.Position).unit * Vector3.new(1, 0, 1) * 33
			BodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
			BodyVelocity.Parent = any_GetPlayerFromCharacter_result1_2.Character.HumanoidRootPart
			game:GetService("Debris"):AddItem(BodyVelocity, 0.15)
			table.insert(tbl_3_upvr, any_GetPlayerFromCharacter_result1_2)
			MobService_upvr.Client.Attacked:Fire(any_GetPlayerFromCharacter_result1_2)
		end
	end
	arg2.Thrusting = true
	CoreUtil_upvr:CustomYeild(1, arg2.Animations.GrabAttack:GetMarkerReachedSignal("Hit"), arg2.Animations.GrabAttack.Stopped)
	arg2.Thrusting = false
	arg2.Animations.Run:Stop()
	arg2.Animations.Idle:Play()
	task.wait((1) - (tick() - tick()))
	any_CreateHitbox_result1:Destroy()
	if CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
		arg2.Animations.Run:Play()
		arg2.Model.Humanoid.WalkSpeed = 18
	end
	arg2.Attacking = nil
end
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function any_new_result1.Spawn(arg1, arg2, arg3) -- Line 579
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: SimplePath_upvr (readonly)
		[3]: TableUtil_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	if arg2.Model then
		arg2.Model:Destroy()
	end
	local clone = ReplicatedStorage_upvr.Prefabs.Mobs:FindFirstChild(arg2.Id):Clone()
	arg2.Model = clone
	arg2.Model:SetPrimaryPartCFrame(CFrame.new(arg3 + Vector3.new(0, clone.PrimaryPart.Size.Y / 2 + clone.Humanoid.HipHeight, 0)) * (clone.PrimaryPart.CFrame - clone.PrimaryPart.Position))
	arg2.Model.Parent = workspace.Mobs
	arg2.Model.Name = arg2.Index
	local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.MobHealthbar:Clone()
	clone_2.Name = "HealthBar"
	clone_2.Parent = arg2.Model.PrimaryPart
	clone_2.Level.TextLabel.Text = arg2.Def.RecommendedLevel
	arg2:UpdateHealthBar()
	for _, v in pairs(arg2.Model:GetDescendants()) do
		if v:IsA("BasePart") then
			v:SetNetworkOwner(nil)
		end
	end
	arg2.Path = SimplePath_upvr.new(arg2.Model, {
		AgentRadius = 6;
		AgentHeight = 15;
		AgentJumpHeight = 8;
		WaypointSpacing = 4;
		AgentCanJump = true;
	})
	arg2.PathGoal = nil
	arg2.Animator = arg2.Model.Humanoid.Animator
	arg2.Animations = TableUtil_upvr.Copy(arg2.Def.Animations, true)
	CoreUtil_upvr:RecurseTable(arg2.Animations, function(arg1_5, arg2_2, arg3_2) -- Line 623
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		local Animation = Instance.new("Animation", arg2.Model.Humanoid)
		Animation.AnimationId = arg3_2
		arg1_5[arg2_2] = arg2.Animator:LoadAnimation(Animation)
	end)
	arg2.Animations.Idle:Play()
	arg2.Alive = true
	return true
end
function any_new_result1.Start(arg1, arg2) -- Line 636
	--[[ Upvalues[2]:
		[1]: SimplePath_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	arg2.AttackCoolDown = 4
	arg2.Path.Blocked:Connect(function() -- Line 642
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active and not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Path:Stop()
		elseif arg2.PathGoal then
			arg2.Path:Run(arg2.PathGoal)
		end
	end)
	local var268_upvw = 1
	arg2.Path.WaypointReached:Connect(function(arg1_6) -- Line 652
		--[[ Upvalues[4]:
			[1]: var268_upvw (read and write)
			[2]: arg2 (readonly)
			[3]: SimplePath_upvr (copied, readonly)
			[4]: CoreUtil_upvr (copied, readonly)
		]]
		var268_upvw += 1
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active and not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Path:Stop()
		elseif arg2.PathGoal and arg2.Path.Status == SimplePath_upvr.StatusType.Active and arg2.Aggrovated and var268_upvw == 5 then
			arg2.Path:Run(arg2.PathGoal)
		end
		if 5 <= var268_upvw then
			var268_upvw = 1
		end
	end)
	arg2.Path.Error:Connect(function(arg1_7) -- Line 666
		--[[ Upvalues[2]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
		]]
		if arg2.PathGoal then
			if not arg2.Aggrovated then
				arg2.TargetChange:Fire()
				return
			end
			if arg1_7 == SimplePath_upvr.ErrorType.TargetUnreachable then
				arg2.Path:Run(arg2.PathGoal)
			end
		end
	end)
	arg2.Model.Humanoid.StateChanged:Connect(function(arg1_8, arg2_3) -- Line 675
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		if arg2_3 == Enum.HumanoidStateType.FallingDown then
			arg2.Model.Humanoid:ChangeState(Enum.HumanoidStateType.Running)
		end
	end)
	local tick_result1_upvw = tick()
	coroutine.wrap(function() -- Line 682
		--[[ Upvalues[4]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: arg2 (readonly)
			[3]: tick_result1_upvw (read and write)
			[4]: arg1 (readonly)
		]]
		while task.wait() and CoreUtil_upvr:ValidateHumanoid(arg2.Model) do
			arg2.AttackCoolDown = math.clamp((arg2.AttackCoolDown) - (tick() - tick_result1_upvw), 0, 3)
			tick_result1_upvw = tick()
			if CoreUtil_upvr:ValidateTargetPlayer(arg2) and arg2.Aggrovated and arg2.AttackCoolDown <= 0 and CoreUtil_upvr:GetDistanceFromTargetPlayer(arg2) <= 25 then
				local seed = math.random()
				if seed <= 0.15 then
					arg1:WebAttack(arg2)
				elseif seed <= 0.3 then
					arg1:SpitAttack(arg2)
				else
					arg1:GrabAttack(arg2)
				end
				arg2.AttackCoolDown = 1
			end
		end
	end)()
	while arg2.Alive and CoreUtil_upvr:ValidateHumanoid(arg2.Model) do
		if arg2.TargetPlayer and CoreUtil_upvr:ValidateTargetPlayer(arg2) then
			arg1:Aggro(arg2)
		else
			arg1:Patrol(arg2)
		end
	end
	if arg2.Alive then
		arg1:Destroy(arg2)
		arg2:Destroy()
	end
end
function any_new_result1.Death(arg1, arg2) -- Line 723
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: TweenService_upvr (readonly)
	]]
	local pcall_result1, pcall_result2 = pcall(function() -- Line 725
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: arg2 (readonly)
			[3]: TweenService_upvr (copied, readonly)
		]]
		if CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Model.PrimaryPart.Anchored = true
			local Sound_3 = Instance.new("Sound")
			Sound_3.Name = "Death"
			Sound_3:AddTag("SFX")
			Sound_3.Parent = arg2.Model.PrimaryPart
			Sound_3.SoundId = arg2.Def.SoundIds.Death
			Sound_3:Play()
			for _, v_2 in pairs(arg2.Model:GetDescendants()) do
				if v_2:IsA("BasePart") then
					TweenService_upvr:Create(v_2, TweenInfo.new(arg2.Animations.Death.Length), {
						Transparency = 1;
					}):Play()
				end
			end
			arg2:StopAnimations()
			arg2.Animations.Death:Play()
			CoreUtil_upvr:CustomYeild(3, arg2.Animations.Death.Ended)
		end
	end)
	if not pcall_result1 then
		warn("Tarantualla Death issue")
		warn(pcall_result2)
	end
end
function any_new_result1.Destroy(arg1, arg2) -- Line 764
	if arg2.Model and arg2.Model.Parent then
		arg2.Model:Destroy()
	end
end
return any_new_result1

Script name: Underling Behaviour
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
local SimplePath_upvr = require(ReplicatedStorage_upvr.Packages.SimplePath)
local tbl_upvr = {}
local any_new_result1_upvr = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.MobBehaviour.MobBehaviourDefinition).new(script.Name, true)
function any_new_result1_upvr.Work(arg1, arg2) -- Line 18
	--[[ Upvalues[4]:
		[1]: CoreUtil_upvr (readonly)
		[2]: tbl_upvr (readonly)
		[3]: SimplePath_upvr (readonly)
		[4]: TableUtil_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 111 start (CF ANALYSIS FAILED)
	if not CoreUtil_upvr:ValidateTargetResource(arg2) or not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then return end
	-- KONSTANTERROR: [0] 1. Error Block 111 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 14. Error Block 6 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [17] 14. Error Block 6 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [25] 19. Error Block 7 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [25] 19. Error Block 7 end (CF ANALYSIS FAILED)
end
function any_new_result1_upvr.Relax(arg1, arg2) -- Line 256
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if CoreUtil_upvr:ValidateTargetResource(arg2) or not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
	else
		arg2.Model.Humanoid.WalkSpeed = arg2.Def.RestingSpeed
		task.wait(3)
	end
end
function any_new_result1_upvr.GetNearbyResource(arg1, arg2, arg3) -- Line 262
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: tbl_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	-- KONSTANTERROR: [0] 1. Error Block 63 start (CF ANALYSIS FAILED)
	local _, pairs_result2, pairs_result3 = pairs(arg2.UnobtainableResources)
	local var18
	for _, v in var18, pairs_result2, pairs_result3 do
		if workspace.Island:FindFirstChild(v) then
			table.insert({}, v)
		end
	end
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var18 = {}
		return var18
	end
	if math.random(1, 5) ~= 1 or not INLINED() then
		var18 = {}
	end
	arg2.UnobtainableResources = var18
	var18 = arg2.Anchor
	if var18 then
		var18 = tbl_upvr.MobService.Anchors[arg2.Anchor]
	end
	if not var18 then return end
	if not CoreUtil_upvr:UnderlingHasEquipped(var18.StorageData.Storage, "Amplifier") or not (arg2.Def.WorkRadius + 2) then
	end
	-- KONSTANTERROR: [0] 1. Error Block 63 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [228] 152. Error Block 42 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [228] 152. Error Block 42 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [85] 59. Error Block 18 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [85] 59. Error Block 18 end (CF ANALYSIS FAILED)
end
function any_new_result1_upvr.Spawn(arg1, arg2, arg3) -- Line 335
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: SimplePath_upvr (readonly)
		[3]: TableUtil_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	if arg2.Model then
		arg2.Model:Destroy()
	end
	local clone = ReplicatedStorage_upvr.Prefabs.Mobs:FindFirstChild(arg2.Id):Clone()
	arg2.Model = clone
	arg2.Model:SetPrimaryPartCFrame(CFrame.new(arg3 + Vector3.new(0, clone.PrimaryPart.Size.Y / 2 + clone.Humanoid.HipHeight, 0)) * (clone.PrimaryPart.CFrame - clone.PrimaryPart.Position))
	arg2.Model.Parent = workspace.Mobs
	arg2.Model.Name = arg2.Index
	arg2.Path = SimplePath_upvr.new(arg2.Model, {
		AgentRadius = 1;
		AgentHeight = 1;
		AgentJumpHeight = 5;
		WaypointSpacing = 2;
		AgentCanJump = true;
	})
	arg2.PathGoal = nil
	arg2.Animator = arg2.Model.Humanoid.Animator
	arg2.Animations = TableUtil_upvr.Copy(arg2.Def.Animations, true)
	CoreUtil_upvr:RecurseTable(arg2.Animations, function(arg1_2, arg2_2, arg3_2) -- Line 366
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		local Animation = Instance.new("Animation", arg2.Model.Humanoid)
		Animation.AnimationId = arg3_2
		arg1_2[arg2_2] = arg2.Animator:LoadAnimation(Animation)
	end)
	arg2.Animations.Idle:Play()
	arg2.Alive = true
	arg2.UnobtainableResources = {}
	return true
end
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
function any_new_result1_upvr.Start(arg1, arg2) -- Line 380
	--[[ Upvalues[5]:
		[1]: tbl_upvr (readonly)
		[2]: Knit_upvr (readonly)
		[3]: SimplePath_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
		[5]: any_new_result1_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 44 start (CF ANALYSIS FAILED)
	tbl_upvr.BlockService = Knit_upvr.GetService("BlockService")
	tbl_upvr.MobService = Knit_upvr.GetService("MobService")
	tbl_upvr.TaskService = Knit_upvr.GetService("TaskService")
	tbl_upvr.InventoryService = Knit_upvr.GetService("InventoryService")
	tbl_upvr.PlayerService = Knit_upvr.GetService("PlayerService")
	repeat
		task.wait()
	until not arg2.Anchor or tbl_upvr.MobService.Anchors[arg2.Anchor]
	arg2.Path.Blocked:Connect(function() -- Line 391
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active and not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Path:Stop()
		elseif arg2.PathGoal then
			arg2.Path:Run(arg2.PathGoal)
		end
	end)
	arg2.Path.WaypointReached:Connect(function() -- Line 400
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		if arg2.Path.Status == SimplePath_upvr.StatusType.Active and not CoreUtil_upvr:ValidateHumanoid(arg2.Model) then
			arg2.Path:Stop()
		end
	end)
	local function var26(arg1_3) -- Line 408
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: SimplePath_upvr (copied, readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [91] 65. Error Block 11 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [91] 65. Error Block 11 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [95] 68. Error Block 12 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [95] 68. Error Block 12 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [103] 74. Error Block 13 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [103] 74. Error Block 13 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [115] 83. Error Block 15 start (CF ANALYSIS FAILED)
		arg2.PathErrorCount = 0
		-- KONSTANTERROR: [115] 83. Error Block 15 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [147] 105. Error Block 19 start (CF ANALYSIS FAILED)
		arg2.Model.Humanoid:MoveTo(arg2.PathGoal)
		task.wait(2)
		-- KONSTANTERROR: [147] 105. Error Block 19 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [194] 137. Error Block 21 start (CF ANALYSIS FAILED)
		arg2.Path:Run(arg2.PathGoal)
		-- KONSTANTERROR: [194] 137. Error Block 21 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [203] 143. Error Block 22 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [203] 143. Error Block 22 end (CF ANALYSIS FAILED)
	end
	arg2.Path.Error:Connect(var26)
	-- KONSTANTERROR: [0] 1. Error Block 44 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [178] 128. Error Block 25 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [178] 128. Error Block 25 end (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [97] 71. Error Block 7 start (CF ANALYSIS FAILED)
	-- KONSTANTERROR: [97] 71. Error Block 7 end (CF ANALYSIS FAILED)
end
function any_new_result1_upvr.Destroy(arg1, arg2) -- Line 474
	if arg2.Model and arg2.Model.Parent then
		arg2.Model:Destroy()
	end
end
return any_new_result1_upvr

Script name: Template
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.MobBehaviour.MobBehaviourDefinition).new(script.Name, false)
function ExampleFunction() -- Line 18
end
function any_new_result1.Damaged(arg1, arg2, arg3, arg4, arg5) -- Line 23
end
function any_new_result1.Death(arg1, arg2) -- Line 28
end
local SimplePath_upvr = require(ReplicatedStorage_upvr.Packages.SimplePath)
local TableUtil_upvr = require(ReplicatedStorage_upvr.Packages.TableUtil)
function any_new_result1.Spawn(arg1, arg2, arg3) -- Line 33
	--[[ Upvalues[4]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: SimplePath_upvr (readonly)
		[3]: TableUtil_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	if arg2.Model then
		arg2.Model:Destroy()
	end
	local clone = ReplicatedStorage_upvr.Prefabs.Mobs:FindFirstChild(arg2.Id):Clone()
	arg2.Model = clone
	arg2.Model:SetPrimaryPartCFrame(CFrame.new(arg3 + Vector3.new(0, clone.PrimaryPart.Size.Y / 2 + clone.Humanoid.HipHeight, 0)) * (clone.PrimaryPart.CFrame - clone.PrimaryPart.Position))
	arg2.Model.Parent = workspace.Mobs
	arg2.Model.Name = arg2.Index
	local clone_2 = ReplicatedStorage_upvr.Prefabs.UI.MobHealthbar:Clone()
	clone_2.Name = "HealthBar"
	clone_2.Parent = arg2.Model.PrimaryPart
	clone_2.Level.TextLabel.Text = arg2.Def.RecommendedLevel
	arg2:UpdateHealthBar()
	for _, v in pairs(arg2.Model:GetDescendants()) do
		if v:IsA("BasePart") then
			v:SetNetworkOwner(nil)
		end
	end
	arg2.Path = SimplePath_upvr.new(arg2.Model, {
		AgentRadius = 3;
		AgentHeight = 6;
		AgentJumpHeight = 7;
		WaypointSpacing = 6;
		AgentCanJump = true;
	})
	arg2.PathGoal = nil
	arg2.Animator = arg2.Model.Humanoid.Animator
	arg2.Animations = TableUtil_upvr.Copy(arg2.Def.Animations, true)
	CoreUtil_upvr:RecurseTable(arg2.Animations, function(arg1_2, arg2_2, arg3_2) -- Line 77
		--[[ Upvalues[1]:
			[1]: arg2 (readonly)
		]]
		local Animation = Instance.new("Animation", arg2.Model.Humanoid)
		Animation.AnimationId = arg3_2
		arg1_2[arg2_2] = arg2.Animator:LoadAnimation(Animation)
	end)
	arg2.Animations.Idle:Play()
	arg2.Alive = true
	return true
end
function any_new_result1.Start(arg1, arg2) -- Line 93
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	arg2.AttackCoolDown = 0
	arg2.Path.Blocked:Connect(function() -- Line 99
	end)
	arg2.Path.WaypointReached:Connect(function() -- Line 102
	end)
	arg2.Path.Error:Connect(function(arg1_3) -- Line 105
	end)
	arg2.Model.Humanoid.StateChanged:Connect(function(arg1_4, arg2_3) -- Line 108
	end)
	repeat
	until not arg2.Alive and not CoreUtil_upvr:ValidateHumanoid(arg2.Model)
	if arg2.Alive then
		arg1:Destroy(arg2)
		arg2:Destroy()
	end
end
function any_new_result1.Destroy(arg1, arg2) -- Line 126
	if arg2.Model and arg2.Model.Parent then
		arg2.Model:Destroy()
	end
end
return any_new_result1

Script name: Effects
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: EffectsDefinition
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.RemoveOnDeath = arg2
	module.RemoveOnRejoin = arg3
	module.DisplayImage = arg4
	module.Gradient = arg5
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

Script name: Poisoned
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, true, true, "rbxassetid://17077393563", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 85, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 34, 0))}))
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local RunService_upvr = game:GetService("RunService")
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
	--[[ Upvalues[4]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: RunService_upvr (readonly)
	]]
	local var7_upvr = arg2.ClassName or "Mob"
	local var8_upvr
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var8_upvr = arg2.Character
		return var8_upvr
	end
	if var7_upvr ~= "Player" or not INLINED() then
		var8_upvr = workspace.Mobs[arg2.Index]
	end
	if not CoreUtil_upvr:ValidateHumanoid(var8_upvr) then
	else
		local clone = ReplicatedStorage_upvr.Prefabs.Effects.PoisonEffects:Clone()
		clone.CFrame = var8_upvr.HumanoidRootPart.CFrame
		clone.Parent = var8_upvr
		CoreUtil_upvr:WeldToPart(clone, var8_upvr.HumanoidRootPart)
		local Sound = Instance.new("Sound")
		Sound.SoundId = "rbxassetid://9113948412"
		Sound:AddTag("SFX")
		Sound.Parent = var8_upvr.HumanoidRootPart
		Sound:Play()
		coroutine.wrap(function() -- Line 43
			--[[ Upvalues[6]:
				[1]: RunService_upvr (copied, readonly)
				[2]: CoreUtil_upvr (copied, readonly)
				[3]: arg3 (readonly)
				[4]: var8_upvr (readonly)
				[5]: var7_upvr (readonly)
				[6]: arg2 (readonly)
			]]
			repeat
				local any_GetCurrentTier_result1 = CoreUtil_upvr:GetCurrentTier(arg3)
				if not any_GetCurrentTier_result1 then break end
				if CoreUtil_upvr:ValidateHumanoid(var8_upvr) then
					if var7_upvr == "Player" then
						local Humanoid = var8_upvr.Humanoid
						Humanoid.Health -= (math.floor(any_GetCurrentTier_result1.Tier ^ 2.5 + 5)) / (1 / RunService_upvr.Heartbeat:Wait())
					else
						-- KONSTANTERROR: Expression was reused, decompilation is incorrect
						arg2:Damage((math.floor(any_GetCurrentTier_result1.Tier ^ 2.5 + 5)) / (1 / RunService_upvr.Heartbeat:Wait()))
					end
				end
			until arg3.Destroyed
		end)()
		repeat
			local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(nil, Knit_upvr.GetService("EffectService").EffectEnding.Event, game.Players.PlayerRemoving)
		until any_CustomYeild_result1 == arg2 and any_CustomYeild_result1 == arg3.Index
		if clone and clone.Parent then
			clone:Destroy()
		end
	end
end
return any_new_result1

Script name: Slowed
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, true, true, "rbxassetid://13492313545", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(149, 149, 149)), ColorSequenceKeypoint.new(1, Color3.fromRGB(52, 52, 52))}))
local function _(arg1, arg2) -- Line 22, Named "SetSpeed"
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if not CoreUtil_upvr:ValidateHumanoid(arg1) then
	else
		local any_GetCurrentTier_result1 = CoreUtil_upvr:GetCurrentTier(arg2)
		if not any_GetCurrentTier_result1 then return end
		arg1.Humanoid.WalkSpeed = -4 * any_GetCurrentTier_result1.Tier + 16
	end
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.Start(arg1, arg2, arg3) -- Line 30
	--[[ Upvalues[2]:
		[1]: CoreUtil_upvr (readonly)
		[2]: Knit_upvr (readonly)
	]]
	-- KONSTANTERROR: [0] 1. Error Block 34 start (CF ANALYSIS FAILED)
	print(arg2)
	local var7_upvr
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var7_upvr = arg2.Character
		return var7_upvr
	end
	if (arg2.ClassName or "Mob") ~= "Player" or not INLINED() then
		var7_upvr = workspace.Mobs[arg2.Index]
	end
	if not CoreUtil_upvr:ValidateHumanoid(var7_upvr) then
	else
		if not CoreUtil_upvr:ValidateHumanoid(var7_upvr) then
			-- KONSTANTWARNING: GOTO [49] #37
		end
		-- KONSTANTERROR: [0] 1. Error Block 34 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [33] 25. Error Block 42 start (CF ANALYSIS FAILED)
		local any_GetCurrentTier_result1_2 = CoreUtil_upvr:GetCurrentTier(arg3)
		if not any_GetCurrentTier_result1_2 then
		else
			var7_upvr.Humanoid.WalkSpeed = -4 * any_GetCurrentTier_result1_2.Tier + 16
		end
		repeat
			local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(nil, Knit_upvr.GetService("EffectService").EffectEnding.Event, game.Players.PlayerRemoving)
		until any_CustomYeild_result1 == arg2 and any_CustomYeild_result1 == arg3.Index
		var7_upvr.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function(arg1_2) -- Line 39
			--[[ Upvalues[3]:
				[1]: var7_upvr (readonly)
				[2]: arg3 (readonly)
				[3]: CoreUtil_upvr (copied, readonly)
			]]
			if arg1_2 and arg1_2 < 16 then
			else
				local var10 = var7_upvr
				if not CoreUtil_upvr:ValidateHumanoid(var10) then return end
				local any_GetCurrentTier_result1_3 = CoreUtil_upvr:GetCurrentTier(arg3)
				if not any_GetCurrentTier_result1_3 then return end
				var10.Humanoid.WalkSpeed = -4 * any_GetCurrentTier_result1_3.Tier + 16
			end
		end):Disconnect()
		if not CoreUtil_upvr:ValidateHumanoid(var7_upvr) then return end
		var7_upvr.Humanoid.WalkSpeed = 16
		-- KONSTANTERROR: [33] 25. Error Block 42 end (CF ANALYSIS FAILED)
	end
end
return any_new_result1

Script name: Healing
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://7219034427", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 85, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(91, 30, 91))}))
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	coroutine.wrap(function() -- Line 27
		--[[ Upvalues[3]:
			[1]: CoreUtil_upvr (copied, readonly)
			[2]: arg3 (readonly)
			[3]: arg2 (readonly)
		]]
		repeat
			task.wait(1)
			local any_GetCurrentTier_result1 = CoreUtil_upvr:GetCurrentTier(arg3)
			if not any_GetCurrentTier_result1 then break end
			if CoreUtil_upvr:ValidateHumanoid(arg2.Character) then
				local Humanoid = arg2.Character.Humanoid
				Humanoid.Health += any_GetCurrentTier_result1.Tier / 3
			end
		until arg3.Destroyed
	end)()
	repeat
		local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(nil, Knit_upvr.GetService("EffectService").EffectEnding.Event, game.Players.PlayerRemoving)
	until any_CustomYeild_result1 == arg2 and any_CustomYeild_result1 == arg3.Index
end
return any_new_result1

Script name: Coin Boost
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://13572879474", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(94, 94, 0))}))
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
end
return any_new_result1

Script name: Jump Power
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
local any_new_result1 = require(ReplicatedStorage.CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://9006027964", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 90))}))
local function _(arg1, arg2) -- Line 22, Named "SetJumpPower"
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	if not CoreUtil_upvr:ValidateHumanoid(arg1.Character) then
	else
		local any_GetCurrentTier_result1 = CoreUtil_upvr:GetCurrentTier(arg2)
		if not any_GetCurrentTier_result1 then return end
		arg1.Character.Humanoid.JumpPower = 50 + any_GetCurrentTier_result1.Tier * 15
	end
end
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
function any_new_result1.Start(arg1, arg2, arg3) -- Line 30
	--[[ Upvalues[2]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	local EffectService = Knit_upvr.GetService("EffectService")
	if not CoreUtil_upvr:ValidateHumanoid(arg2.Character) then
	else
		local any_GetCurrentTier_result1_2 = CoreUtil_upvr:GetCurrentTier(arg3)
		if not any_GetCurrentTier_result1_2 then
		else
			arg2.Character.Humanoid.JumpPower = 50 + any_GetCurrentTier_result1_2.Tier * 15
		end
	end
	repeat
		local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(nil, EffectService.EffectEnding.Event, game.Players.PlayerRemoving)
	until any_CustomYeild_result1 == arg2 and any_CustomYeild_result1 == arg3.Index
	arg2.CharacterAdded:Connect(function(arg1_2) -- Line 36
		--[[ Upvalues[3]:
			[1]: arg2 (readonly)
			[2]: arg3 (readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		arg1_2:WaitForChild("Humanoid")
		arg1_2:WaitForChild("HumanoidRootPart")
		local var10 = arg2
		if not CoreUtil_upvr:ValidateHumanoid(var10.Character) then
		else
			local any_GetCurrentTier_result1_4 = CoreUtil_upvr:GetCurrentTier(arg3)
			if not any_GetCurrentTier_result1_4 then return end
			var10.Character.Humanoid.JumpPower = 50 + any_GetCurrentTier_result1_4.Tier * 15
		end
	end):Disconnect()
	EffectService.EffectUpdated.Event:Connect(function(arg1_3) -- Line 42
		--[[ Upvalues[3]:
			[1]: arg3 (readonly)
			[2]: arg2 (readonly)
			[3]: CoreUtil_upvr (copied, readonly)
		]]
		if arg3.Index == arg1_3 then
			local var13 = arg2
			if not CoreUtil_upvr:ValidateHumanoid(var13.Character) then return end
			local any_GetCurrentTier_result1_3 = CoreUtil_upvr:GetCurrentTier(arg3)
			if not any_GetCurrentTier_result1_3 then return end
			var13.Character.Humanoid.JumpPower = 50 + any_GetCurrentTier_result1_3.Tier * 15
		end
	end):Disconnect()
	if not CoreUtil_upvr:ValidateHumanoid(arg2.Character) then
	else
		arg2.Character.Humanoid.JumpPower = 50
	end
end
return any_new_result1

Script name: Luck Boost
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://11999300014", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 94, 0))}))
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
end
return any_new_result1

Script name: Damage Boost
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://10346627184", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 4)), ColorSequenceKeypoint.new(1, Color3.fromRGB(97, 0, 0))}))
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
end
return any_new_result1

Script name: XP Boost
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://18477016200", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(170, 0, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(62, 0, 93))}))
function any_new_result1.Start(arg1, arg2, arg3) -- Line 22
end
return any_new_result1

Script name: Burn
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local any_new_result1 = require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, true, true, "rbxassetid://18239323803", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 102, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(102, 54, 0))}))
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local RunService_upvr = game:GetService("RunService")
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
	--[[ Upvalues[4]:
		[1]: CoreUtil_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: Knit_upvr (readonly)
		[4]: RunService_upvr (readonly)
	]]
	local var7_upvr = arg2.ClassName or "Mob"
	local var8_upvr
	local function INLINED() -- Internal function, doesn't exist in bytecode
		var8_upvr = arg2.Character
		return var8_upvr
	end
	if var7_upvr ~= "Player" or not INLINED() then
		var8_upvr = workspace.Mobs[arg2.Index]
	end
	if not CoreUtil_upvr:ValidateHumanoid(var8_upvr) then
	else
		local clone = ReplicatedStorage_upvr.Prefabs.Effects.BurnEffects:Clone()
		clone.CFrame = var8_upvr.HumanoidRootPart.CFrame
		clone.Parent = var8_upvr
		CoreUtil_upvr:WeldToPart(clone, var8_upvr.HumanoidRootPart)
		coroutine.wrap(function() -- Line 37
			--[[ Upvalues[6]:
				[1]: RunService_upvr (copied, readonly)
				[2]: CoreUtil_upvr (copied, readonly)
				[3]: arg3 (readonly)
				[4]: var7_upvr (readonly)
				[5]: var8_upvr (readonly)
				[6]: arg2 (readonly)
			]]
			repeat
				local any_GetCurrentTier_result1 = CoreUtil_upvr:GetCurrentTier(arg3)
				if not any_GetCurrentTier_result1 then break end
				if var7_upvr == "Player" then
					local Humanoid = var8_upvr.Humanoid
					Humanoid.Health -= (math.floor(any_GetCurrentTier_result1.Tier ^ 2.5 + 5)) / (1 / RunService_upvr.Heartbeat:Wait())
				else
					-- KONSTANTERROR: Expression was reused, decompilation is incorrect
					arg2:Damage((math.floor(any_GetCurrentTier_result1.Tier ^ 2.5 + 5)) / (1 / RunService_upvr.Heartbeat:Wait()))
				end
			until arg3.Destroyed
		end)()
		repeat
			local any_CustomYeild_result1 = CoreUtil_upvr:CustomYeild(nil, Knit_upvr.GetService("EffectService").EffectEnding.Event, game.Players.PlayerRemoving)
		until any_CustomYeild_result1 == arg2 and any_CustomYeild_result1 == arg3.Index
		if clone and clone.Parent then
			clone:Destroy()
		end
	end
end
return any_new_result1

Script name: Mining Boost
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://14257565324", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 170, 0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(91, 61, 0))}))
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
end
return any_new_result1

Script name: Mystic
  - Script: 


local any_new_result1 = require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Effects.EffectsDefinition).new(script.Name, false, false, "rbxassetid://8120666025", ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(247, 0, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(91, 0, 94))}))
function any_new_result1.Start(arg1, arg2, arg3) -- Line 23
end
return any_new_result1

Script name: Potion
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: PotionDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.Catagory = arg2
	module.EffectData = arg4
	module.DisplayImage = arg3
	module.EconomyInfo = arg5
	module.LevelReq = arg6
	module.Animations = arg7
	module.CraftIngredients = arg8
	module.SearchTags = arg9
	module.Description = arg10
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: Coin Boost Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://138124504840854", {
	Id = "Coin Boost";
	TierData = {
		Tier = 1;
		Time = 60;
	};
}, {
	SellPrice = 1475;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Gold = 5;
	["Mire Lotus"] = 10;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts coins earned for 1 minute")

Script name: Coin Boost Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://113165652330253", {
	Id = "Coin Boost";
	TierData = {
		Tier = 3;
		Time = 300;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Coin Boost Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions"}, "30% more coins for 5 minutes.")

Script name: Coin Boost Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://74608291646753", {
	Id = "Coin Boost";
	TierData = {
		Tier = 2;
		Time = 240;
	};
}, {
	SellPrice = 3900;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Coin Boost Potion I"] = 1;
	["Mystic Diamond Fragment"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boost coins for 4 minutes.")

Script name: Healing Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://99627848074367", {
	Id = "Healing";
	TierData = {
		Tier = 3;
		Time = 1800;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Healing Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions"}, "Regenerate 3 health per second for 30 minutes.")

Script name: Healing Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://107536033330060", {
	Id = "Healing";
	TierData = {
		Tier = 1;
		Time = 180;
	};
}, {
	SellPrice = 1225;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Strawberry Pie"] = 5;
	["Mire Lotus"] = 10;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts Health regen for 3 minutes")

Script name: Healing Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://101221467541884", {
	Id = "Healing";
	TierData = {
		Tier = 2;
		Time = 600;
	};
}, {
	SellPrice = 3950;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Healing Potion I"] = 1;
	["Pumpkin Seed"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts health regen for 10 minutes")

Script name: Jump Power Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://84755352016542", {
	Id = "Jump Power";
	TierData = {
		Tier = 2;
		Time = 240;
	};
}, {
	SellPrice = 1760;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Jump Power Potion I"] = 1;
	Spring = 3;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts jump power for 4 minutes")

Script name: Jump Power Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://113793069885513", {
	Id = "Jump Power";
	TierData = {
		Tier = 1;
		Time = 60;
	};
}, {
	SellPrice = 660;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Toxic Sludge"] = 10;
	["Elastic Essence"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts jump power for 1 minute")

Script name: Jump Power Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://73318915232256", {
	Id = "Jump Power";
	TierData = {
		Tier = 3;
		Time = 300;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Jump Power Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions"}, "Maximum jump height for 5 minutes.")

Script name: Luck Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://138052584992543", {
	Id = "Luck Boost";
	TierData = {
		Tier = 3;
		Time = 1800;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Luck Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions"}, "Double luck on drop rarity for 30 minutes.")

Script name: Luck Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://133390851192834", {
	Id = "Luck Boost";
	TierData = {
		Tier = 2;
		Time = 600;
	};
}, {
	SellPrice = 4900;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Luck Potion I"] = 1;
	["Pink Sapphire"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts luck for 10 minutes")

Script name: Luck Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://105446348899734", {
	Id = "Luck Boost";
	TierData = {
		Tier = 1;
		Time = 180;
	};
}, {
	SellPrice = 700;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Barbed Arachnella Hair"] = 1;
	Mushroom = 10;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts luck for 3 minutes")

Script name: Damage Boost Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://128656376525148", {
	Id = "Damage Boost";
	TierData = {
		Tier = 2;
		Time = 600;
	};
}, {
	SellPrice = 4100;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Damage Boost Potion I"] = 1;
	["Rage Essence"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts damage for 10 minutes")

Script name: Damage Boost Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://105104707404804", {
	Id = "Damage Boost";
	TierData = {
		Tier = 3;
		Time = 1800;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Damage Boost Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions"}, "Deal 50% more damage for 30 minutes.")

Script name: Damage Boost Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://74910406376140", {
	Id = "Damage Boost";
	TierData = {
		Tier = 1;
		Time = 180;
	};
}, {
	SellPrice = 1500;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Venom Gland"] = 5;
	["Nightshade Berry"] = 30;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts damage for 3 minutes")

Script name: XP Boost Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://118791628297339", {
	Id = "XP Boost";
	TierData = {
		Tier = 3;
		Time = 1800;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["XP Boost Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions"}, "Boosts XP 50% for 30 minutes.")

Script name: XP Boost Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://70467579100324", {
	Id = "XP Boost";
	TierData = {
		Tier = 1;
		Time = 180;
	};
}, {
	SellPrice = 970;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Cog = 10;
	["Mire Lotus"] = 10;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts XP for 3 minutes")

Script name: XP Boost Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://90923050556220", {
	Id = "XP Boost";
	TierData = {
		Tier = 2;
		Time = 600;
	};
}, {
	SellPrice = 3000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["XP Boost Potion I"] = 1;
	["Magnet Shard"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Coins"}, "Boosts XP for 10 minutes")

Script name: Mining Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://115699262433170", {
	Id = "Mining Boost";
	TierData = {
		Tier = 1;
		Time = 180;
	};
}, {
	SellPrice = 1500;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Mystic Gold Fragment"] = 3;
	["Toxic Sludge"] = 10;
	BenchType = "Cauldron";
}, {"Potions"}, "Damage against blocks is increased by 1.1x")

Script name: Mining Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://82523333523667", {
	Id = "Mining Boost";
	TierData = {
		Tier = 2;
		Time = 600;
	};
}, {
	SellPrice = 4100;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Mining Potion I"] = 1;
	["Mystic Diamond Fragment"] = 3;
	BenchType = "Cauldron";
}, {"Potions"}, "Damage against blocks is increased by 1.2x")

Script name: Mining Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://97295714949354", {
	Id = "Mining Boost";
	TierData = {
		Tier = 3;
		Time = 1800;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Mining Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions"}, "Damage against blocks is increased by 1.5x")

Script name: Mystic Potion III
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://120299875492729", {
	Id = "Mystic";
	TierData = {
		Tier = 3;
		Time = 1800;
	};
}, {
	SellPrice = 1000;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Mystic Potion II"] = 1;
	["Arachnella Fang"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Mystic"}, "Increased chance a harvested resource will respawn Enchanted")

Script name: Mystic Potion II
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://89198774782561", {
	Id = "Mystic";
	TierData = {
		Tier = 2;
		Time = 600;
	};
}, {
	SellPrice = 3900;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	["Mystic Potion I"] = 1;
	["Rainbow Dye"] = 1;
	BenchType = "Cauldron";
}, {"Potions", "Mystic"}, "Increased chance a harvested resource will respawn Enchanted")

Script name: Mystic Potion I
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Potion.PotionDefinition).new(script.Name, "Potion", "rbxassetid://72051170984976", {
	Id = "Mystic";
	TierData = {
		Tier = 1;
		Time = 180;
	};
}, {
	SellPrice = 1475;
}, nil, {
	ActionCombo = {"rbxassetid://16925376176"};
}, {
	Amber = 25;
	["Mire Lotus"] = 10;
	BenchType = "Cauldron";
}, {"Potions", "Mystic"}, "Increased chance a harvested resource will respawn Enchanted")

Script name: Mob
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: MobDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.BehaviourData = arg2
	module.IsPassive = arg3
	module.TargetPlayerRange = arg4
	module.LeashRange = arg5
	module.MaxHealth = arg6
	module.HipHeight = arg7
	module.DefultSpeed = arg8
	module.AggrovatedSpeed = arg9
	module.Damage = arg10
	module.CritDamage = arg11
	module.AttackCooldown = arg12
	module.AttackRange = arg13
	module.AttackDistance = arg14
	module.Animations = arg15
	module.LootData = arg16
	module.SoundIds = arg17
	module.RecommendedLevel = arg18
	module.IsBoss = arg19
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: Blue Flamelet
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 1.2;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 900, 0.2, 12, 18, 15, 20, 3.5, 4, 6, {
	Idle = "rbxassetid://16462098126";
	Walk = "rbxassetid://16462111519";
	Run = "rbxassetid://16462111519";
	Death = "rbxassetid://16462159010";
	Combo = {"rbxassetid://100970960030172", "rbxassetid://100970960030172", "rbxassetid://100970960030172"};
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Flamelet = {
				Min = 5;
				Max = 8;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Flamelet"};
	};
	RandItems = {{
		Id = "Blue Flame";
		Catagory = "Item";
		Weight = 0.96575;
	}, {
		Id = "Light Source";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 3;
	}, {
		Id = "Molten Core";
		Catagory = "Item";
		Weight = 0.01;
		LevelReq = 5;
	}, {
		Id = "Blue Flamelet Mob Block";
		Catagory = "Block";
		Weight = 0.00125;
	}, {
		Id = "Inferno Essence";
		Catagory = "Item";
		Weight = 0.002;
		LevelReq = 7;
	}, {
		Id = "Chill Flamelet";
		Catagory = "Block";
		Weight = 0.001;
	}, {
		Id = "Diamond Hammer";
		Catagory = "Tool";
		Weight = 0.001;
		LevelReq = 15;
	}};
}, {
	Attack = {"rbxassetid://17436930330"};
	Death = {"rbxassetid://17436930563"};
}, "Level 30", false)

Script name: Darkfang Spider
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 1;
	CanStun = true;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 600, 0.2, 12, 18, 8, 12, 4, 4, 6, {
	Idle = "rbxassetid://74957909969308";
	Walk = "rbxassetid://79929564972284";
	Run = "rbxassetid://134521446964198";
	Death = "rbxassetid://98513709563111";
	Combo = {"rbxassetid://110426494015979", "rbxassetid://110426494015979", "rbxassetid://110426494015979"};
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			["Darkfang Spider"] = {
				Min = 2;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Darkfang Spider"};
	};
	RandItems = {{
		Id = "Spider Silk";
		Catagory = "Item";
		Weight = 0.96675;
	}, {
		Id = "Venom Gland";
		Catagory = "Item";
		Weight = 0.02;
	}, {
		Id = "Nightshade Berry Bush Seed";
		Catagory = "Block";
		Weight = 0.01;
	}, {
		Id = "Pumpkin Seed";
		Catagory = "Block";
		Weight = 0.002;
	}, {
		Id = "Darkfang Spider Mob Block";
		Catagory = "Block";
		Weight = 0.00125;
	}};
}, {
	Attack = {"rbxassetid://2227416952"};
	Death = {"rbxassetid://9113988331"};
}, "Level 25", false)

Script name: Flamelet
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 1;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 360, 0.2, 12, 18, 10, 15, 3.5, 4, 6, {
	Idle = "rbxassetid://16462098126";
	Walk = "rbxassetid://16462111519";
	Run = "rbxassetid://16462111519";
	Death = "rbxassetid://16462159010";
	Combo = {"rbxassetid://100970960030172", "rbxassetid://100970960030172", "rbxassetid://100970960030172"};
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Flamelet = {
				Min = 5;
				Max = 8;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Flamelet"};
	};
	RandItems = {{
		Id = "Flame";
		Catagory = "Item";
		Weight = 0.9815;
	}, {
		Id = "Light Source";
		Catagory = "Item";
		Weight = 0.04;
		LevelReq = 3;
	}, {
		Id = "Molten Core";
		Catagory = "Item";
		Weight = 0.005;
		LevelReq = 5;
	}, {
		Id = "Flamelet Mob Block";
		Catagory = "Block";
		Weight = 0.00125;
	}, {
		Id = "Inferno Essence";
		Catagory = "Item";
		Weight = 0.00125;
		LevelReq = 7;
	}, {
		Id = "Chill Flamelet";
		Catagory = "Block";
		Weight = 0.001;
	}};
}, {
	Attack = {"rbxassetid://17436930330"};
	Death = {"rbxassetid://17436930563"};
}, "Level 25", false)

Script name: Gizmo
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 0.5;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 128, 0.2, 10, 16, 3, 4, 4, 4, 6, {
	Idle = "rbxassetid://16960865966";
	Walk = "rbxassetid://16960861313";
	Run = "rbxassetid://16960861313";
	Death = "rbxassetid://16462159010";
	Combo = {"rbxassetid://126378354710012", "rbxassetid://126378354710012", "rbxassetid://126378354710012"};
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Gizmo = {
				Min = 2;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Gizmo"};
	};
	RandItems = {{
		Id = "Scrap Metal";
		Catagory = "Item";
		Weight = 0.968;
	}, {
		Id = "Cog";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 3;
	}, {
		Id = "Spring";
		Catagory = "Item";
		Weight = 0.01;
		LevelReq = 5;
	}, {
		Id = "Gizmo Mob Block";
		Catagory = "Block";
		Weight = 0.001;
	}, {
		Id = "Chill Gizmo";
		Catagory = "Block";
		Weight = 0.001;
	}};
}, {
	Attack = {"rbxassetid://17436929994"};
	Death = {"rbxassetid://17436930162"};
}, "Level 8", false)

Script name: Green Slime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 0.1;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 64, 1.5, 10, 15, 3, 4, 4, 4, 6, {
	Idle = "rbxassetid://16960381247";
	Walk = "rbxassetid://16960545723";
	Run = "rbxassetid://16960545723";
	Death = "rbxassetid://88829456966980";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			GreenSlime = {
				Min = 2;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"GreenSlime"};
	};
	RandItems = {{
		Id = "Green Goo";
		Catagory = "Item";
		Weight = 0.9845;
	}, {
		Id = "Elastic Essence";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 5;
	}, {
		Id = "Green Slime Core";
		Catagory = "Item";
		Weight = 0.0025;
	}, {
		Id = "Chill Slime";
		Catagory = "Block";
		Weight = 0.00125;
	}, {
		Id = "Green Slime Mob Block";
		Catagory = "Block";
		Weight = 0.00125;
	}};
}, {
	Attack = {"rbxassetid://17437164528"};
	Movement = {"rbxassetid://17437163747", "rbxassetid://17437164355", "rbxassetid://17437163582", "rbxassetid://17437163858", "rbxassetid://17437164663", "rbxassetid://17437163470"};
	Jump = {"rbxassetid://17437163986"};
	Death = {"rbxassetid://17437164132"};
}, "Level 5", false)

Script name: GrimThorn
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 1.2;
	CanStun = true;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 1000, 2.8, 5, 26, 25, 35, 5, 6, 8, {
	Idle = "rbxassetid://16961541964";
	Walk = "rbxassetid://16961552280";
	Run = "rbxassetid://16961552280";
	Death = "rbxassetid://16462159010";
	Combo = {"rbxassetid://110305678952670", "rbxassetid://110305678952670", "rbxassetid://110305678952670"};
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			GrimThorn = {
				Min = 50;
				Max = 75;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"GrimThorn"};
	};
	RandItems = {{
		Id = "Void Shard";
		Catagory = "Item";
		Weight = 0.99791;
	}, {
		Id = "GrimThorn Mob Block";
		Catagory = "Block";
		Weight = 0.0008;
	}, {
		Id = "Twilight Essence";
		Catagory = "Item";
		Weight = 0.00125;
		LevelReq = 5;
	}, {
		Id = "Realm Key";
		Catagory = "Item";
		Weight = 0.00004;
		LevelReq = 6;
	}};
}, {
	Attack = {"rbxassetid://17436926939"};
	Idle = {"rbxassetid://17436926203"};
	Movement = {"rbxassetid://17436925592"};
	Death = {"rbxassetid://17436925727"};
}, "Level 30", false)

Script name: Muncher
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 1;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 200, 0.2, 10, 15, 8, 10, 3.5, 4, 6, {
	Idle = "rbxassetid://16961116747";
	Walk = "rbxassetid://16961128951";
	Run = "rbxassetid://16961128951";
	Death = "rbxassetid://16462159010";
	Combo = {"rbxassetid://85189682702710", "rbxassetid://85189682702710", "rbxassetid://85189682702710"};
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Muncher = {
				Min = 4;
				Max = 6;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Muncher"};
	};
	RandItems = {{
		Id = "Scrap Metal";
		Catagory = "Item";
		Weight = 0.99275;
	}, {
		Id = "Magnet Shard";
		Catagory = "Item";
		Weight = 0.004;
		LevelReq = 4;
	}, {
		Id = "Rage Essence";
		Catagory = "Item";
		Weight = 0.00125;
		LevelReq = 7;
	}, {
		Id = "Muncher Mob Block";
		Catagory = "Block";
		Weight = 0.001;
	}, {
		Id = "Chill Muncher";
		Catagory = "Block";
		Weight = 0.001;
	}};
}, {
	Attack = {"rbxassetid://17436924606", "rbxassetid://17436924734"};
	Idle = {"rbxassetid://17436926203"};
	Movement = {"rbxassetid://17436925455", "rbxassetid://17436927769", "rbxassetid://17436925242"};
	Death = {"rbxassetid://17436927097 "};
}, "Level 20", false)

Script name: Rattles
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 0.5;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 80, 0.2, 12, 20, 6, 8, 4.5, 4, 6, {
	Idle = "rbxassetid://16960982748";
	Walk = "rbxassetid://16960990759";
	Run = "rbxassetid://16960990759";
	Death = "rbxassetid://16462159010";
	Combo = {"rbxassetid://92502810686140", "rbxassetid://92502810686140", "rbxassetid://92502810686140"};
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Rattles = {
				Min = 2;
				Max = 3;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Rattles"};
	};
	RandItems = {{
		Id = "Bones";
		Catagory = "Item";
		Weight = 0.937;
	}, {
		Id = "Cloth";
		Catagory = "Item";
		Weight = 0.05;
		LevelReq = 2;
	}, {
		Id = "Skull";
		Catagory = "Item";
		Weight = 0.01;
		LevelReq = 4;
	}, {
		Id = "Rattles Mob Block";
		Catagory = "Block";
		Weight = 0.001;
	}, {
		Id = "Necrotic Essence";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 7;
	}, {
		Id = "Skeleton Key";
		Catagory = "Item";
		Weight = 0.001;
		LevelReq = 10;
	}};
}, {
	Attack = {"rbxassetid://17436925899"};
	Movement = {"rbxassetid://17436925592"};
	Death = {"rbxassetid://17436925727"};
}, "Level 12", false)

Script name: Slimegore
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 0.5;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 256, 1.5, 10, 15, 4, 6, 3, 4, 6, {
	Idle = "rbxassetid://16960381247";
	Walk = "rbxassetid://16960545723";
	Run = "rbxassetid://16960545723";
	Death = "rbxassetid://88829456966980";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			GreenSlime = {
				Min = 2;
				Max = 4;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"GreenSlime"};
	};
	RandItems = {{
		Id = "Green Goo";
		Catagory = "Item";
		Weight = 0.97625;
	}, {
		Id = "Elastic Essence";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 5;
	}, {
		Id = "Green Slime Core";
		Catagory = "Item";
		Weight = 0.0025;
	}, {
		Id = "Chill Slime";
		Catagory = "Block";
		Weight = 0.00125;
	}, {
		Id = "Slimegore Mob Block";
		Catagory = "Block";
		Weight = 0.00125;
	}};
}, {
	Attack = {"rbxassetid://17437164528"};
	Movement = {"rbxassetid://17437163747", "rbxassetid://17437164355", "rbxassetid://17437163582", "rbxassetid://17437163858", "rbxassetid://17437164663", "rbxassetid://17437163470"};
	Jump = {"rbxassetid://17437163986"};
	Death = {"rbxassetid://17437164132"};
}, "Level 10", false)

Script name: Pink Slime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 0.5;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 256, 1.5, 10, 15, 4, 6, 3, 4, 6, {
	Idle = "rbxassetid://16960381247";
	Walk = "rbxassetid://16960545723";
	Run = "rbxassetid://16960545723";
	Death = "rbxassetid://88829456966980";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			PinkSlime = {
				Min = 4;
				Max = 5;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"PinkSlime"};
	};
	RandItems = {{
		Id = "Pink Goo";
		Catagory = "Item";
		Weight = 0.9717;
	}, {
		Id = "Elastic Essence";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 5;
	}, {
		Id = "Pink Slime Core";
		Catagory = "Item";
		Weight = 0.004;
	}, {
		Id = "Pink Sapphire";
		Catagory = "Item";
		Weight = 0.003;
	}, {
		Id = "Pink Slime Mob Block";
		Catagory = "Block";
		Weight = 0.0013;
	}};
}, {
	Attack = {"rbxassetid://17437164528"};
	Movement = {"rbxassetid://17437163747", "rbxassetid://17437164355", "rbxassetid://17437163582", "rbxassetid://17437163858", "rbxassetid://17437164663", "rbxassetid://17437163470"};
	Jump = {"rbxassetid://17437163986"};
	Death = {"rbxassetid://17437164132"};
}, "Level 15", false)

Script name: Ancient Slime
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Melee Behaviour";
	KnockBack = 0.5;
	CanStun = false;
	TimeBetweenComboAttacks = 1;
}, false, 25, 50, 450, 0.5, 10, 15, 7, 10, 3, 4, 6, {
	Idle = "rbxassetid://16960381247";
	Walk = "rbxassetid://16960545723";
	Run = "rbxassetid://16960545723";
	Death = "rbxassetid://88829456966980";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			GreenSlime = {
				Min = 4;
				Max = 6;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"GreenSlime"};
	};
	RandItems = {{
		Id = "Green Goo";
		Catagory = "Item";
		Weight = 0.976;
	}, {
		Id = "Elastic Essence";
		Catagory = "Item";
		Weight = 0.02;
		LevelReq = 5;
	}, {
		Id = "Ancient Slime Core";
		Catagory = "Item";
		Weight = 0.004;
	}};
}, {
	Attack = {"rbxassetid://17437164528"};
	Movement = {"rbxassetid://17437163747", "rbxassetid://17437164355", "rbxassetid://17437163582", "rbxassetid://17437163858", "rbxassetid://17437164663", "rbxassetid://17437163470"};
	Jump = {"rbxassetid://17437163986"};
	Death = {"rbxassetid://17437164132"};
}, "Level 15", false)

Script name: Arachnella
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Mob.MobDefinition).new(script.Name, {
	Id = "Tarantula Boss Behaviour";
}, false, 25, 50, 10000, 17.8, 10, 15, 20, 25, 10, 12, 18, {
	Idle = "rbxassetid://89046456144284";
	Walk = "rbxassetid://109017402286837";
	Run = "rbxassetid://109017402286837";
	Death = "rbxassetid://106270656902943";
	WebAttack = "rbxassetid://137149413960618";
	GrabAttack = "rbxassetid://79037917984946";
	SpitAttack = "rbxassetid://89896327111345";
}, {
	MultiItemDropWeights = {0.5, 0.45, 0.05};
	XP = {
		Combat = {
			Arachnella = {
				Min = 4;
				Max = 6;
			};
		};
	};
	LevelCatagoryPath = {
		Combat = {"Arachnella"};
	};
	RandItems = {{
		Id = "Barbed Arachnella Hair";
		Catagory = "Item";
		Weight = 0.968;
	}, {
		Id = "Arachnella Fang";
		Catagory = "Item";
		Weight = 0.02;
	}, {
		Id = "Arachnella Heart";
		Catagory = "Item";
		Weight = 0.01;
	}, {
		Id = "Arachnella Mob Block";
		Catagory = "Block";
		Weight = 0.002;
	}};
}, {
	Walk = "rbxassetid://9119459418";
	Run = "rbxassetid://9119459418";
	Death = "rbxassetid://9125472062";
	WebAttack = "rbxassetid://9119459900";
	GrabAttack = {"rbxassetid://2227416952", "rbxassetid://2227416792", "rbxassetid://2227417121", "rbxassetid://2227417262"};
	SpitAttack = "rbxassetid://9119459659";
}, "Level 20", true)

Script name: Camp
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: CampDefinition
  - Script: 


local module_2_upvr = {}
module_2_upvr.__index = module_2_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_2_upvr.new(arg1, arg2, arg3, arg4, arg5, arg6, arg7) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_2_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.MobTypes = arg2
	module.MaxSpawn = arg3
	module.RespawnTime = arg4
	module.TargetPlayerRange = arg5
	module.LeashRange = arg6
	module.BossSpawner = arg7
	return setmetatable(module, module_2_upvr)
end
return module_2_upvr

Script name: Mines2a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Gizmo";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines2b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Gizmo";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines2c
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Gizmo";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines2d
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Gizmo";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines3a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Rattles";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines3b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Rattles";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines3c
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Rattles";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines3d
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Rattles";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines3e
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Rattles";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines3f
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Rattles";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines4a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Muncher";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines5a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Muncher";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines5b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Muncher";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines5c
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Muncher";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines5d
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Muncher";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines6a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines6b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines6c
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines6d
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines6e
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines6f
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines6g
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines8a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Blue Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines8b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Blue Flamelet";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 50, false)

Script name: Mines1a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1k
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1j
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1m
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1h
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1g
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines0b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1e
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1d
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1c
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines7a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "GrimThorn";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 120;
}}, 1, {
	Min = 15;
	Max = 45;
}, 25, 150, false)

Script name: Mines9a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Arachnella";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 50, false)

Script name: Mire1
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 150, false)

Script name: Mire4
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 150, false)

Script name: Mire2
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 150, false)

Script name: Mire5
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 150, false)

Script name: Mire7
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 150, false)

Script name: Mines9b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 50, false)

Script name: Mire3
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 150, false)

Script name: Mire6
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Darkfang Spider";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 1;
	Max = 3;
}, 25, 150, false)

Script name: Mire0
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Arachnella";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 300;
	Max = 300;
}, 25, 50, true)

Script name: Mines1f
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1l
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1n
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1o
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1p
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1q
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 0.4;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Slimegore";
	Weight = 0.3;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Pink Slime";
	Weight = 0.2;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}, {
	Id = "Ancient Slime";
	Weight = 0.1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines1r
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Slimegore";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines7b
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "GrimThorn";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 120;
}}, 1, {
	Min = 15;
	Max = 45;
}, 25, 150, false)

Script name: Mines7c
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "GrimThorn";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 120;
}}, 1, {
	Min = 15;
	Max = 45;
}, 25, 150, false)

Script name: Mines0c
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: Mines0a
  - Script: 


return require(game:GetService("ReplicatedStorage").CommonModules.DefinitionModules.Camp.CampDefinition).new(script.Name, {{
	Id = "Green Slime";
	Weight = 1;
	MaxSpawn = 1;
	AggroRange = 28;
	LeashRange = 80;
}}, 1, {
	Min = 10;
	Max = 15;
}, 25, 90, false)

Script name: TutorialType
  - Script: 


for _, v in pairs(script.DefinitionModules:GetDescendants()) do
	if v:IsA("ModuleScript") then
		({})[v.Name] = require(v)
	end
end
-- KONSTANTERROR: Expression was reused, decompilation is incorrect
return {}

Script name: TutorialTypeDefinition
  - Script: 


local module_upvr = {}
module_upvr.__index = module_upvr
local ReplicatedStorage = game:GetService("ReplicatedStorage")
function module_upvr.new(arg1, arg2) -- Line 11
	--[[ Upvalues[1]:
		[1]: module_upvr (readonly)
	]]
	local module = {}
	module.Id = arg1
	module.ActivationFunction = arg2
	return setmetatable(module, module_upvr)
end
return module_upvr

Script name: InventoryHighlight
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local TweenService_upvr = game:GetService("TweenService")
local Players_upvr = game:GetService("Players")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
return require(ReplicatedStorage.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4) -- Line 13
	--[[ Upvalues[4]:
		[1]: Knit_upvr (readonly)
		[2]: TweenService_upvr (readonly)
		[3]: Players_upvr (readonly)
		[4]: CoreUtil_upvr (readonly)
	]]
	-- KONSTANTWARNING: Variable analysis failed. Output will have some incorrect variable assignments
	local var17_upvw
	local any_GetController_result1_2 = Knit_upvr.GetController("UIController")
	local function HighlightObject(arg1_3, arg2_3, arg3_3) -- Line 22
		--[[ Upvalues[3]:
			[1]: arg4 (readonly)
			[2]: TweenService_upvr (copied, readonly)
			[3]: var17_upvw (read and write)
		]]
		-- KONSTANTERROR: [0] 1. Error Block 1 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [0] 1. Error Block 1 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [1] 2. Error Block 2 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [1] 2. Error Block 2 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [4] 4. Error Block 3 start (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [4] 4. Error Block 3 end (CF ANALYSIS FAILED)
		-- KONSTANTERROR: [11] 8. Error Block 32 start (CF ANALYSIS FAILED)
		if arg1_3 then
			if arg3_3 == "BP" and 9 < arg1_3.Index then
				arg1_3.UI.BackgroundTransparency = 1
			end
			arg1_3.UI.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		end
		local _, _, _ = pairs(arg2_3)
		-- KONSTANTERROR: [11] 8. Error Block 32 end (CF ANALYSIS FAILED)
	end
	repeat
		local HighlightObject_result1 = HighlightObject(nil, any_GetController_result1_2.BackpackDefs, "BP")
		if HighlightObject_result1 and not HighlightObject(nil, any_GetController_result1_2.ToolBarDefs, "TB") then
			Players_upvr.LocalPlayer.PlayerGui.MainGui.HUD.ToolBar.InventoryButton.BackgroundColor3 = Color3.fromRGB(255, 170, 0)
		else
			Players_upvr.LocalPlayer.PlayerGui.MainGui.HUD.ToolBar.InventoryButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		end
		local any_CustomYeild_result1, any_CustomYeild_result2 = CoreUtil_upvr:CustomYeild(0.1, arg3.Event)
	until not any_CustomYeild_result1 or any_CustomYeild_result1 ~= arg1.Id or not any_CustomYeild_result2 or any_CustomYeild_result2 == arg2
	if var17_upvw then
		var17_upvw:Cancel()
		var17_upvw:Destroy()
		var17_upvw = nil
	end
	-- KONSTANTERROR: Expression was reused, decompilation is incorrect
	if HighlightObject(nil, any_GetController_result1_2.ToolBarDefs, "TB") then
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		HighlightObject(nil, any_GetController_result1_2.ToolBarDefs, "TB").UI.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		-- KONSTANTERROR: Expression was reused, decompilation is incorrect
		local class_UIStroke_4 = HighlightObject(nil, any_GetController_result1_2.ToolBarDefs, "TB").UI:FindFirstChildOfClass("UIStroke")
		if class_UIStroke_4 then
			class_UIStroke_4.Color = Color3.fromRGB(255, 255, 255)
			class_UIStroke_4.Thickness = 1
			class_UIStroke_4.Transparency = 0.85
		end
	end
	if HighlightObject_result1 then
		HighlightObject_result1.UI.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		local class_UIStroke_3 = HighlightObject_result1.UI:FindFirstChildOfClass("UIStroke")
		if class_UIStroke_3 then
			class_UIStroke_3.Color = Color3.fromRGB(255, 255, 255)
			class_UIStroke_3.Thickness = 1
			class_UIStroke_3.Transparency = 0.85
		end
	end
	Players_upvr.LocalPlayer.PlayerGui.MainGui.HUD.ToolBar.InventoryButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
end)

Script name: ArrowPointer
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4) -- Line 12
	--[[ Upvalues[1]:
		[1]: ReplicatedStorage_upvr (readonly)
	]]
	local clone = ReplicatedStorage_upvr.Prefabs.Arrow:Clone()
	clone.Parent = workspace
	clone.Position = arg4
	return clone
end)

Script name: ArrowCompass
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
local RunService_upvr = game:GetService("RunService")
local TweenService_upvr = game:GetService("TweenService")
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4) -- Line 13
	--[[ Upvalues[5]:
		[1]: Knit_upvr (readonly)
		[2]: ReplicatedStorage_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
		[4]: RunService_upvr (readonly)
		[5]: TweenService_upvr (readonly)
	]]
	local var7_upvw
	local function CharAdded(arg1_2) -- Line 21
		--[[ Upvalues[6]:
			[1]: ReplicatedStorage_upvr (copied, readonly)
			[2]: CoreUtil_upvr (copied, readonly)
			[3]: RunService_upvr (copied, readonly)
			[4]: arg4 (readonly)
			[5]: TweenService_upvr (copied, readonly)
			[6]: var7_upvw (read and write)
		]]
		local HumanoidRootPart = arg1_2:WaitForChild("HumanoidRootPart")
		local clone = ReplicatedStorage_upvr.Prefabs.Arrow:Clone()
		clone.Parent = arg1_2
		clone.Anchored = true
		task.wait(1)
		repeat
			if not CoreUtil_upvr:ValidateHumanoid(arg1_2) then break end
			RunService_upvr.RenderStepped:Wait()
			local Position = HumanoidRootPart.Position
			local vector3 = Vector3.new(arg4.X, HumanoidRootPart.Position.Y, arg4.Z)
			TweenService_upvr:Create(clone, TweenInfo.new(0.05), {
				CFrame = CFrame.lookAt(Position + (vector3 - Position).Unit * 3.5, vector3);
			}):Play()
		until var7_upvw
		clone:Destroy()
	end
	local Character = game.Players.LocalPlayer.Character
	if not Character then
		Character = game.Players.LocalPlayer.CharacterAdded:Wait()
	end
	coroutine.wrap(CharAdded)(Character)
	repeat
		local any_CustomYeild_result1, any_CustomYeild_result2 = CoreUtil_upvr:CustomYeild(nil, arg3.Event)
	until not any_CustomYeild_result1 or any_CustomYeild_result1 ~= arg1.Id or not any_CustomYeild_result2 or any_CustomYeild_result2 == arg2
	var7_upvw = true
	game.Players.LocalPlayer.CharacterAdded:Connect(CharAdded):Disconnect()
end)

Script name: PartHighlight
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4, arg5) -- Line 12
	--[[ Upvalues[2]:
		[1]: ReplicatedStorage_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
	]]
	workspace.HighlightContrainer.Tutorial.Adornee = arg4
	repeat
		local any_CustomYeild_result1, any_CustomYeild_result2 = CoreUtil_upvr:CustomYeild(arg5, arg3.Event, arg4.AncestryChanged)
	until (not arg5 or any_CustomYeild_result1 == nil) and not arg4.Parent and (not any_CustomYeild_result1 or any_CustomYeild_result1 ~= arg1.Id or not any_CustomYeild_result2 or any_CustomYeild_result2 == arg2)
	if workspace.HighlightContrainer.Tutorial.Adornee == arg4 then
		workspace.HighlightContrainer.Tutorial.Adornee = nil
	end
end)

Script name: PositionHighlight
  - Script: 


local ReplicatedStorage_upvr = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage_upvr.Packages.Knit)
local CoreUtil_upvr = require(ReplicatedStorage_upvr.CommonModules.CoreUtil)
return require(ReplicatedStorage_upvr.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4) -- Line 13
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: CoreUtil_upvr (readonly)
		[3]: ReplicatedStorage_upvr (readonly)
	]]
	local tbl = {}
	for i, v in pairs(arg4) do
		local clone = ReplicatedStorage_upvr.Prefabs.PartHighlight:Clone()
		clone.Parent = workspace
		clone.Position = CoreUtil_upvr:TableToVector3(CoreUtil_upvr:ToWorldPos(v))
		table.insert(tbl, clone)
	end
	repeat
		i = arg3.Event
		local any_CustomYeild_result1, any_CustomYeild_result2 = CoreUtil_upvr:CustomYeild(nil, i)
	until not any_CustomYeild_result1 or any_CustomYeild_result1 ~= arg1.Id or not any_CustomYeild_result2 or any_CustomYeild_result2 == arg2
	for _, v_2 in pairs(tbl) do
		v_2:Destroy()
	end
end)

Script name: HudHighlight
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
return require(ReplicatedStorage.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4) -- Line 12
	--[[ Upvalues[1]:
		[1]: CoreUtil_upvr (readonly)
	]]
	arg4.BackgroundColor3 = Color3.fromRGB(232, 155, 0)
	repeat
		local any_CustomYeild_result1, any_CustomYeild_result2 = CoreUtil_upvr:CustomYeild(nil, arg3.Event)
	until not any_CustomYeild_result1 or any_CustomYeild_result1 ~= arg1.Id or not any_CustomYeild_result2 or any_CustomYeild_result2 == arg2
	arg4.BackgroundColor3 = arg4.BackgroundColor3
end)

Script name: ShopHighlight
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local Players_upvr = game:GetService("Players")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
return require(ReplicatedStorage.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4) -- Line 13
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: Players_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	local MainGui_upvr = Players_upvr.LocalPlayer.PlayerGui.MainGui
	for _, v in pairs(workspace.NPC:GetChildren()) do
		if v.Head:FindFirstChild("BuyProximityPrompt") then
			v.Head.BuyProximityPrompt.Enabled = false
		end
	end
	local any_GetDefinitionFromId_result1_upvr = CoreUtil_upvr:GetDefinitionFromId(arg4)
	repeat
		local any_CustomYeild_result1, any_CustomYeild_result2 = CoreUtil_upvr:CustomYeild(0.1, arg3.Event)
	until not any_CustomYeild_result1 or any_CustomYeild_result1 ~= arg1.Id or not any_CustomYeild_result2 or any_CustomYeild_result2 == arg2
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.ItemInfo.ImageLabel.Changed:Connect(function() -- Line 25
		--[[ Upvalues[2]:
			[1]: MainGui_upvr (readonly)
			[2]: any_GetDefinitionFromId_result1_upvr (readonly)
		]]
		if MainGui_upvr.Shop.ShopMain.ScrollingFrame.MaxButton.Visible and MainGui_upvr.Shop.ShopMain.ScrollingFrame.ItemInfo.ImageLabel.Image == any_GetDefinitionFromId_result1_upvr.DisplayImage then
			MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.TutorialArrow.Visible = true
		else
			MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.TutorialArrow.Visible = false
		end
	end):Disconnect()
	MainGui_upvr.Shop.ShopGrid.ScrollingFrame.ChildAdded:Connect(function(arg1_2) -- Line 33
		--[[ Upvalues[1]:
			[1]: arg4 (readonly)
		]]
		if arg1_2.Name == arg4 then
			arg1_2.Frame.BackgroundColor3 = Color3.fromRGB(191, 127, 0)
		end
	end):Disconnect()
	for _, v_2 in pairs(workspace.NPC:GetChildren()) do
		if v_2.Head:FindFirstChild("BuyProximityPrompt") then
			v_2.Head.BuyProximityPrompt.Enabled = true
		end
	end
	MainGui_upvr.Shop.ShopMain.ScrollingFrame.ActionTab.TutorialArrow.Visible = false
	for _, v_3 in pairs(MainGui_upvr.Shop.ShopGrid.ScrollingFrame:GetChildren()) do
		if v_3:IsA("GuiButton") then
			v_3.Frame.BackgroundColor3 = Color3.fromRGB(102, 102, 102)
		end
	end
end)

Script name: CraftingHighlight
  - Script: 


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Knit_upvr = require(ReplicatedStorage.Packages.Knit)
local Players_upvr = game:GetService("Players")
local CoreUtil_upvr = require(ReplicatedStorage.CommonModules.CoreUtil)
return require(ReplicatedStorage.CommonModules.DefinitionModules.TutorialType.TutorialTypeDefinition).new(script.Name, function(arg1, arg2, arg3, arg4) -- Line 13
	--[[ Upvalues[3]:
		[1]: Knit_upvr (readonly)
		[2]: Players_upvr (readonly)
		[3]: CoreUtil_upvr (readonly)
	]]
	print("?!")
	local MainGui = Players_upvr.LocalPlayer.PlayerGui.MainGui
	repeat
		local any_CustomYeild_result1, any_CustomYeild_result2 = CoreUtil_upvr:CustomYeild(0.1, arg3.Event)
	until not any_CustomYeild_result1 or any_CustomYeild_result1 ~= arg1.Id or not any_CustomYeild_result2 or any_CustomYeild_result2 == arg2
	MainGui.Crafting.CraftingGrid.ScrollingFrame.ChildAdded:Connect(function(arg1_2) -- Line 19
		--[[ Upvalues[1]:
			[1]: arg4 (readonly)
		]]
		print('?')
		if arg1_2.Name == arg4 then
			arg1_2.Frame.BackgroundColor3 = Color3.fromRGB(191, 127, 0)
		end
	end):Disconnect()
	for _, v in pairs(MainGui.Shop.ShopGrid.ScrollingFrame:GetChildren()) do
		if v:IsA("GuiButton") then
			v.Frame.BackgroundColor3 = Color3.fromRGB(102, 102, 102)
		end
	end
end)

Script name: Script
  - Script: 

-- [FilteringEnabled] Server Scripts are IMPOSSIBLE to save

Script name: LightingProperties
  - Script: 


return {
	Ambient = Color3.fromRGB(173, 173, 173);
	Brightness = 0.5;
	ColorShift_Bottom = Color3.fromRGB(0, 0, 0);
	ColorShift_Top = Color3.fromRGB(0, 0, 0);
	EnvironmentDiffuseScale = 0.259;
	EnvironmentSpecularScale = 0.389;
	GlobalShadows = true;
	OutdoorAmbient = Color3.fromRGB(107, 150, 170);
	ShadowSoftness = 0.1;
	ClockTime = 15.6;
	GeographicLatitude = 47;
	ExposureCompensation = 0.5;
}

Script name: LightingProperties
  - Script: 


return {
	Ambient = Color3.fromRGB(70, 70, 70);
	Brightness = 2;
	ColorShift_Bottom = Color3.fromRGB(0, 0, 0);
	ColorShift_Top = Color3.fromRGB(0, 0, 0);
	EnvironmentDiffuseScale = 0.89;
	EnvironmentSpecularScale = 0.83;
	GlobalShadows = true;
	OutdoorAmbient = Color3.fromRGB(135, 135, 135);
	ShadowSoftness = 0.1;
	ClockTime = 15.3;
	GeographicLatitude = 36;
	TimeOfDay = "15:30:00";
	ExposureCompensation = 0.2;
}

Script name: LightingProperties
  - Script: 


return {
	Ambient = Color3.fromRGB(101, 8, 124);
	Brightness = 1;
	ColorShift_Bottom = Color3.fromRGB(0, 0, 0);
	ColorShift_Top = Color3.fromRGB(0, 0, 0);
	EnvironmentDiffuseScale = 0.574;
	EnvironmentSpecularScale = 0.37;
	GlobalShadows = true;
	OutdoorAmbient = Color3.fromRGB(42, 45, 57);
	ShadowSoftness = 0.1;
	ClockTime = 12;
	GeographicLatitude = 93;
	TimeOfDay = "15:30:00";
	ExposureCompensation = 0.6;
}

Script name: LightingProperties
  - Script: 


return {
	Ambient = Color3.fromRGB(70, 70, 70);
	Brightness = 2;
	ColorShift_Bottom = Color3.fromRGB(0, 0, 0);
	ColorShift_Top = Color3.fromRGB(0, 0, 0);
	EnvironmentDiffuseScale = 0.89;
	EnvironmentSpecularScale = 0.83;
	GlobalShadows = true;
	OutdoorAmbient = Color3.fromRGB(135, 135, 135);
	ShadowSoftness = 0.1;
	ClockTime = 15.3;
	GeographicLatitude = 36;
	TimeOfDay = "15:30:00";
	ExposureCompensation = 0.2;
}

Script name: LightingProperties
  - Script: 


return {
	Ambient = Color3.fromRGB(70, 70, 70);
	Brightness = 2;
	ColorShift_Bottom = Color3.fromRGB(0, 0, 0);
	ColorShift_Top = Color3.fromRGB(0, 0, 0);
	EnvironmentDiffuseScale = 0.89;
	EnvironmentSpecularScale = 0.83;
	GlobalShadows = true;
	OutdoorAmbient = Color3.fromRGB(135, 135, 135);
	ShadowSoftness = 0.1;
	ClockTime = 15.3;
	GeographicLatitude = 36;
	TimeOfDay = "15:30:00";
	ExposureCompensation = 0.2;
}

Script name: SmartScale
  - Script: 
local camera = game.Workspace.CurrentCamera
local textService = game:GetService("TextService")
local group = script.Group:GetChildren()
local config = script.Configuration
local singleLine = config.SingleLine.Value
local textChange = config.RunOnTextChanged.Value
local sizeChange = config.RunOnSizeChanged.Value
local fontChange = config.RunOnFontChanged.Value
local screenChange = config.RunOnScreenSizeChanged.Value
local margin = config.Margin.Value

local marginSpace = ""

if margin ~= 0 then
	for _ = 1, margin do
		marginSpace = marginSpace .. " "
	end
end	

local textSize

function findMaxSize(element)
	element.TextScaled = false
	if singleLine then
		element.TextWrapped = true
	end

	for size = 1, 100 do
		textSize = textService:GetTextSize(marginSpace .. element.Text .. marginSpace, size, element.Font, Vector2.new(element.AbsoluteSize.X, 99999))

		if singleLine then
			if textSize.Y > size then
				if size == 1 then
					return 1
				end
				return size - 1
			end
		else
			if textSize.Y > element.AbsoluteSize.Y then
				if size == 1 then
					return 1
				end
				return size - 1
			end
		end
	end

	return 100
end

local sizes = {}
local min

function run()
	sizes = {}
	min = 100

	for _, object in pairs(group) do
		if object.ClassName == "ObjectValue" and object.Value ~= nil then
			if not object.Value.Text:split('\n')[2] then
				if object.Value.ClassName == "TextLabel" or object.Value.ClassName == "TextButton" or object.Value.ClassName == "TextBox" then
					sizes[#sizes+1] = findMaxSize(object.Value)
				end
			end
		end
	end

	for _, size in pairs(sizes) do
		if size < min then
			min = size
		end
	end

	for _, object in pairs(group) do
		if not object.Value.Text:split('\n')[2] then
			pcall(function()
				object.Value.TextSize = min
				if margin ~= 0 then
					object.Value.TextXAlignment = Enum.TextXAlignment.Center
				end
			end)
		end
	end
	
	for _, object in pairs(group) do
		if object.Value.Text:split('\n')[2] then
			object.Value.TextScaled = true
			local s = object.Value.Text:split('\n')
			object.Value.Size = UDim2.new(0.855, 0, 0.844 - (s[1]:len() / 50), 0)
		end
	end
end

if screenChange then
	camera:GetPropertyChangedSignal("ViewportSize"):Connect(run)
end

for _, object in pairs(group) do
	repeat
		wait(0.1)
	until object.Value ~= nil

	if textChange then
		object.Value:GetPropertyChangedSignal("Text"):Connect(run)
	end
	if fontChange then
		object.Value:GetPropertyChangedSignal("Font"):Connect(run)
	end
	if sizeChange then
		object.Value:GetPropertyChangedSignal("AbsoluteSize"):Connect(run)
	end
end

run()